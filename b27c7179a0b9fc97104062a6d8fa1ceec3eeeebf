{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0098c490_ffd4bca5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-02-16T11:30:32Z",
      "side": 1,
      "message": "Left a first round of comments. I think the overall approach makes sense. We will need some tests for this, to make sure we don\u0027t accidentally break this with future changes.\n\nAlso, the repository seems to be quite outdated. Can we update it to match https://github.com/WebAssembly/tool-conventions/blob/main/CodeAnnotations.md#trace-instruction, or maybe just point to that instead?",
      "revId": "b27c7179a0b9fc97104062a6d8fa1ceec3eeeebf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce7f7918_73d11f23",
        "filename": "src/codegen/x64/assembler-x64.cc",
        "patchSetId": 4
      },
      "lineNbr": 2087,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-02-16T11:30:32Z",
      "side": 1,
      "message": "Can\u0027t we just use the existing Assembler methods (e.g. \"emit_mov\") for this?",
      "revId": "b27c7179a0b9fc97104062a6d8fa1ceec3eeeebf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "918322ef_bd99be32",
        "filename": "src/compiler/node.h",
        "patchSetId": 4
      },
      "lineNbr": 301,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-02-16T11:30:32Z",
      "side": 1,
      "message": "This looks unused (also, it would be problematic to make Node that much bigger).",
      "revId": "b27c7179a0b9fc97104062a6d8fa1ceec3eeeebf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92d9e270_110f86a7",
        "filename": "src/flags/flag-definitions.h",
        "patchSetId": 4
      },
      "lineNbr": 528,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-02-16T11:30:32Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 528,
        "startChar": 61,
        "endLine": 528,
        "endChar": 72
      },
      "revId": "b27c7179a0b9fc97104062a6d8fa1ceec3eeeebf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e902530_3305a851",
        "filename": "src/flags/flag-definitions.h",
        "patchSetId": 4
      },
      "lineNbr": 528,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-02-16T11:30:32Z",
      "side": 1,
      "message": "Please specify which values are valid.",
      "revId": "b27c7179a0b9fc97104062a6d8fa1ceec3eeeebf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab458c7d_eb592722",
        "filename": "src/wasm/function-body-decoder-impl.h",
        "patchSetId": 4
      },
      "lineNbr": 2394,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-02-16T11:30:32Z",
      "side": 1,
      "message": "This needs to be more efficient, as this is executed for every single decoded wasm instruction. Can we ensure that the traces vector is sorted, and keep a single pointer into that vector that we check here? If we store pointers instead of offsets in the vector, this will make the check even more efficient.\n\nI.e. something like\nif (V8_UNLIKELY(*next_trace_pc \u003d\u003d this-\u003epc_)) { ...",
      "range": {
        "startLine": 2393,
        "startChar": 0,
        "endLine": 2394,
        "endChar": 41
      },
      "revId": "b27c7179a0b9fc97104062a6d8fa1ceec3eeeebf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1efe3c0a_a1263543",
        "filename": "src/wasm/function-body-decoder-impl.h",
        "patchSetId": 4
      },
      "lineNbr": 2443,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-02-16T11:30:32Z",
      "side": 1,
      "message": "Please add a comment and make the name more descriptive. It also needs to end in an underscore.",
      "revId": "b27c7179a0b9fc97104062a6d8fa1ceec3eeeebf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb6326aa_8f8c22f2",
        "filename": "src/wasm/function-body-decoder.h",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-02-16T11:30:32Z",
      "side": 1,
      "message": "This shouldn\u0027t be part of the FunctionBody. Since this is stored in the WasmModule already, can we just extract it from there and pass it to the decoder directly?",
      "revId": "b27c7179a0b9fc97104062a6d8fa1ceec3eeeebf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb668536_8dc86a63",
        "filename": "src/wasm/module-decoder.cc",
        "patchSetId": 4
      },
      "lineNbr": 38,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-02-16T11:30:32Z",
      "side": 1,
      "message": "This name does not match the name specified here: http://go/gh/WebAssembly/tool-conventions/blob/main/CodeAnnotations.md#trace-instruction",
      "revId": "b27c7179a0b9fc97104062a6d8fa1ceec3eeeebf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6bdc9f58_01f1fec3",
        "filename": "src/wasm/module-decoder.cc",
        "patchSetId": 4
      },
      "lineNbr": 442,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-02-16T11:30:32Z",
      "side": 1,
      "message": "Similar to the other sections, please add a sentence saying what this section is.",
      "revId": "b27c7179a0b9fc97104062a6d8fa1ceec3eeeebf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b238fd17_7569551e",
        "filename": "src/wasm/module-decoder.cc",
        "patchSetId": 4
      },
      "lineNbr": 1201,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-02-16T11:30:32Z",
      "side": 1,
      "message": "Please consult the style guide for formatting of code comments: https://google.github.io/styleguide/cppguide.html#Punctuation,_Spelling_and_Grammar",
      "revId": "b27c7179a0b9fc97104062a6d8fa1ceec3eeeebf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f4a0693_86288a5a",
        "filename": "src/wasm/module-decoder.cc",
        "patchSetId": 4
      },
      "lineNbr": 1202,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-02-16T11:30:32Z",
      "side": 1,
      "message": "This looks rather unusual. Can we just access via {this} instead?",
      "revId": "b27c7179a0b9fc97104062a6d8fa1ceec3eeeebf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f0897b3_6f7d08eb",
        "filename": "src/wasm/module-decoder.cc",
        "patchSetId": 4
      },
      "lineNbr": 1226,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-02-16T11:30:32Z",
      "side": 1,
      "message": "From http://go/gh/WebAssembly/tool-conventions/blob/main/CodeAnnotations.md#trace-instruction it looks like the size must always be four. We should validate this, and then use decoder.consume_u32 here instead of the hand-written loop.",
      "revId": "b27c7179a0b9fc97104062a6d8fa1ceec3eeeebf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f6dc3c2_b1ae3dfa",
        "filename": "src/wasm/wasm-constants.h",
        "patchSetId": 4
      },
      "lineNbr": 109,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-02-16T11:30:32Z",
      "side": 1,
      "message": "This is missing a comment.",
      "revId": "b27c7179a0b9fc97104062a6d8fa1ceec3eeeebf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0057a8e_d276a83e",
        "filename": "src/wasm/wasm-feature-flags.h",
        "patchSetId": 4
      },
      "lineNbr": 20,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-02-16T11:30:32Z",
      "side": 1,
      "message": "Please add a comment as for the other proposals.",
      "revId": "b27c7179a0b9fc97104062a6d8fa1ceec3eeeebf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "164742e1_3396a0d6",
        "filename": "src/wasm/wasm-module.h",
        "patchSetId": 4
      },
      "lineNbr": 74,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-02-16T11:30:32Z",
      "side": 1,
      "message": "This makes the static representation of each function multiple machine words (3 typically) bigger. WDYT about storing this as a single std::vector on the WasmModule, using module-relative offsets?",
      "revId": "b27c7179a0b9fc97104062a6d8fa1ceec3eeeebf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}