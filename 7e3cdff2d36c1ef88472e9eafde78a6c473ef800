{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "792bc5ba_98fe99fd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-03-19T23:51:35Z",
      "side": 1,
      "message": "Typo: property",
      "revId": "7e3cdff2d36c1ef88472e9eafde78a6c473ef800",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "86a912b8_cf72bee8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2024-03-20T08:45:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "792bc5ba_98fe99fd",
      "revId": "7e3cdff2d36c1ef88472e9eafde78a6c473ef800",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b6cfe0c_b7105366",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2024-03-19T11:37:40Z",
      "side": 1,
      "message": "Toon, Shu, PTAL and let me know what you think about this approach.\n\nAn alternative could be to also turn `Error.message` into an accessor. When the setter is called, we also trigger Error.stack serialization before updating the \u0027message\u0027 property. I\u0027m not sure if that\u0027s fully spec compliant though, as the spec explicitly calls out \u0027message\u0027 as a data property in the Error constructor spec.",
      "revId": "7e3cdff2d36c1ef88472e9eafde78a6c473ef800",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b78daf94_233d2bde",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-03-19T23:52:40Z",
      "side": 1,
      "message": "Right, we can\u0027t turn `message` into a getter.",
      "parentUuid": "4b6cfe0c_b7105366",
      "revId": "7e3cdff2d36c1ef88472e9eafde78a6c473ef800",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6ef78fc_c7f1cfa1",
        "filename": "src/execution/messages.cc",
        "patchSetId": 3
      },
      "lineNbr": 707,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-03-19T23:51:35Z",
      "side": 1,
      "message": "Please add a comment that this is a V8-specific extension to retain the original message for the stack trace, which is also V8-specific.",
      "revId": "7e3cdff2d36c1ef88472e9eafde78a6c473ef800",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7699316d_4a6d338a",
        "filename": "src/execution/messages.cc",
        "patchSetId": 3
      },
      "lineNbr": 707,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2024-03-20T08:45:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f6ef78fc_c7f1cfa1",
      "revId": "7e3cdff2d36c1ef88472e9eafde78a6c473ef800",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "718f848d_0596e414",
        "filename": "src/execution/messages.cc",
        "patchSetId": 3
      },
      "lineNbr": 1195,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-03-19T23:51:35Z",
      "side": 1,
      "message": "IIUC, if you explicitly call `captureStackTrace` on an Error subclass, this will end up overwriting the original message from construction time to be the value of `obj.message` at that time. Should this copying logic check for the existence of the private `error_message_symbol` first?\n\nAlso, shouldn\u0027t this copying be done before the `CaptureAndSetErrorStack` call?\n\nAlso also, we are changing the number of `.message` property gets that `captureStackTrace` performs, which is user observable. I seriously hope there\u0027s no code depending on `.message` being getters.",
      "revId": "7e3cdff2d36c1ef88472e9eafde78a6c473ef800",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "58326cf2_a3d199e5",
        "filename": "src/execution/messages.cc",
        "patchSetId": 3
      },
      "lineNbr": 1195,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2024-03-20T08:45:20Z",
      "side": 1,
      "message": "Good catch! Added a check for `error_message_symbol` and only copy the `message` property if it\u0027s not present. Also added test cases for this.\n\nThe message does not need to be done before `CaptureAndSetErrorStack`. That function doesn\u0027t actually serialize anything, just collects the strucutered stack trace data for later use. As such, it doesn\u0027t look at the message.\n\nAs for number of observed `.message` gets, I really hope no one relies on that, but unfortunately we don\u0027t have a good way of finding out other than landing the change and waiting if anything breaks.",
      "parentUuid": "718f848d_0596e414",
      "revId": "7e3cdff2d36c1ef88472e9eafde78a6c473ef800",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee88a714_25cfabfa",
        "filename": "src/execution/messages.cc",
        "patchSetId": 3
      },
      "lineNbr": 1195,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2024-03-20T09:24:06Z",
      "side": 1,
      "message": "Looks like I spook too soon: https://github.com/nodejs/node/blob/main/lib/internal/per_context/domexception.js#L53-L93\n\nNode.js\u0027 DOMException first calls `Error.captureStackTrace`, and then sets up a message getter. Since we now call `message` during `captureStackTrace`, the getter throws an exception as the underlying data was not yet set up.",
      "parentUuid": "58326cf2_a3d199e5",
      "revId": "7e3cdff2d36c1ef88472e9eafde78a6c473ef800",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "156b6c9a_dcb065f9",
        "filename": "src/execution/messages.cc",
        "patchSetId": 3
      },
      "lineNbr": 1195,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2024-03-20T10:25:41Z",
      "side": 1,
      "message": "Change of tactics: The CL leaves `Error.captureStackTrace` alone. After seeing the Node.js code we are somewhat hesitant to apply this also for custom error shenanigans. We\u0027ll restrict it standard Error objects.\n\nI also added a kill switch. Let me know if we should land the CL with the flag off and finch the whole thing, or if we land it enabled and kill the feature via finch if we run into any web compat issues.",
      "parentUuid": "ee88a714_25cfabfa",
      "revId": "7e3cdff2d36c1ef88472e9eafde78a6c473ef800",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}