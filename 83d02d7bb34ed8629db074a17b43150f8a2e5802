{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8e56307b_b876cfce",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1122079
      },
      "writtenOn": "2021-10-06T21:39:35Z",
      "side": 1,
      "message": "Codegen, and the rest of the CL looks good, but at a higher level I\u0027m wondering what you think of reusing some of the machine operator code with an IsRelaxed flag parameter, instead of adding a new set of operators? We can decide how far we want to reflect this, all the way to codegen without new opcodes, or till the arch specific level.",
      "revId": "83d02d7bb34ed8629db074a17b43150f8a2e5802",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa77d775_e332fee7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1249724
      },
      "writtenOn": "2021-10-06T21:57:10Z",
      "side": 1,
      "message": "Any reasons why you would want that? Btw, not everything in the relaxed simd proposal fits neatly into relaxed version of an existing machine operator, e.g. e.g. i8x16.laneselect is not a relaxed version of any existing instruction.",
      "parentUuid": "8e56307b_b876cfce",
      "revId": "83d02d7bb34ed8629db074a17b43150f8a2e5802",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "09a08438_499341aa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1122079
      },
      "writtenOn": "2021-10-07T20:54:05Z",
      "side": 1,
      "message": "For the ones that don\u0027t have a relaxed equivalent, it makes sense to me that you would need new operators, but for the ones that don\u0027t and we can pass in relaxed as a parameter, it sounds like we can reduce how much code we duplicate. For this case specifically we don\u0027t need the machine operators, the instruction selector has the same Emit code except for a different op being generated, and having shared codegen based on the flag would mean that the codegen exists without having to explicitly implement it for ia32. Is there a reason this doesn\u0027t make sense that I\u0027m missing? \n\nOn a more general note, I see them as being different operators at the Wasm level, but at the compiler layer these are very similar operations and it makes sense to me that this code would be shared.",
      "parentUuid": "fa77d775_e332fee7",
      "revId": "83d02d7bb34ed8629db074a17b43150f8a2e5802",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4c4f7042_626a76d0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1249724
      },
      "writtenOn": "2021-10-07T22:14:44Z",
      "side": 1,
      "message": "I can make that change, ptal PS 3. IMO the code duplication isn\u0027t bad here. I think I8x16Swizzle and I8x16RelaxedSwizzle are slightly different at the compiler backend level, since I8x16Swizzle has an optimization that can generate extremely different code (no check for ranges). At the machine operator I don\u0027t have much opinions on whether they are 2 different operators, or a single operator with a bool, they are pretty similar, but the instruction selector simplification looks nice. Ptal PS3 and lmk what you think.",
      "parentUuid": "09a08438_499341aa",
      "revId": "83d02d7bb34ed8629db074a17b43150f8a2e5802",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f0342e09_c58339d0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1122079
      },
      "writtenOn": "2021-10-11T19:53:00Z",
      "side": 1,
      "message": "I like the simplification in PS3, in the spirit of sharing code across layers I would be in favor of using a single operator at the machine operator level. I agree that they are slightly different at the backend level, but I\u0027m not sure that they\u0027re different enough  - i.e. for move optimizations and other opcodes, we do collapse them into the same opcode based on addressing mores etc. that do generate different code based on constant matching, but I do see that the relaxed vs. non-relaxed is slightly different from that.",
      "parentUuid": "4c4f7042_626a76d0",
      "revId": "83d02d7bb34ed8629db074a17b43150f8a2e5802",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5eb8939d_60ef6c21",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1249724
      },
      "writtenOn": "2021-10-11T20:36:56Z",
      "side": 1,
      "message": "Sg, thanks. Is this LGTM? Maybe you forgot to +1.",
      "parentUuid": "f0342e09_c58339d0",
      "revId": "83d02d7bb34ed8629db074a17b43150f8a2e5802",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a8b73a19_a049ff06",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1122079
      },
      "writtenOn": "2021-10-11T20:57:11Z",
      "side": 1,
      "message": "Yes, lgtm with a preference for a shared machine operator.",
      "parentUuid": "5eb8939d_60ef6c21",
      "revId": "83d02d7bb34ed8629db074a17b43150f8a2e5802",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}