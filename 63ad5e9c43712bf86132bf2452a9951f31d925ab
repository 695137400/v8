{
  "comments": [
    {
      "key": {
        "uuid": "3d173023_54fa6b05",
        "filename": "/COMMIT_MSG",
        "patchSetId": 32
      },
      "lineNbr": 8,
      "author": {
        "id": 1115956
      },
      "writtenOn": "2020-04-29T12:21:42Z",
      "side": 1,
      "message": "Please describe in some more detail what is done here. E.g. how a heap is used to buffer the slowest tests.",
      "revId": "63ad5e9c43712bf86132bf2452a9951f31d925ab",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4c8c99f_4947be2c",
        "filename": "tools/testrunner/testproc/progress.py",
        "patchSetId": 32
      },
      "lineNbr": 366,
      "author": {
        "id": 1115956
      },
      "writtenOn": "2020-04-29T12:20:41Z",
      "side": 1,
      "message": "nit: Maybe it\u0027s micro-optimization, but how about summing up the durations as they come in and keep the total number separately. In the end you just divide.",
      "range": {
        "startLine": 366,
        "startChar": 6,
        "endLine": 366,
        "endChar": 47
      },
      "revId": "63ad5e9c43712bf86132bf2452a9951f31d925ab",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6775a752_f22fcb97",
        "filename": "tools/testrunner/testproc/util.py",
        "patchSetId": 32
      },
      "lineNbr": 8,
      "author": {
        "id": 1115956
      },
      "writtenOn": "2020-04-29T12:20:41Z",
      "side": 1,
      "message": "nit: Please add some documentation (python style) in this class, what\u0027s its purpose and what\u0027s expected on the high level. As a utility it might get reused at some point.",
      "range": {
        "startLine": 8,
        "startChar": 6,
        "endLine": 8,
        "endChar": 22
      },
      "revId": "63ad5e9c43712bf86132bf2452a9951f31d925ab",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "efa7f819_8ad82a50",
        "filename": "tools/testrunner/testproc/util_unittest.py",
        "patchSetId": 32
      },
      "lineNbr": 20,
      "author": {
        "id": 1115956
      },
      "writtenOn": "2020-04-29T12:20:41Z",
      "side": 1,
      "message": "nit: Maybe also add an equal key as corner case.",
      "range": {
        "startLine": 20,
        "startChar": 6,
        "endLine": 20,
        "endChar": 15
      },
      "revId": "63ad5e9c43712bf86132bf2452a9951f31d925ab",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71bb0d4c_2df8fce5",
        "filename": "tools/testrunner/testproc/util_unittest.py",
        "patchSetId": 32
      },
      "lineNbr": 31,
      "author": {
        "id": 1115956
      },
      "writtenOn": "2020-04-29T12:20:41Z",
      "side": 1,
      "message": "nit: To make this more readable, could you spell out the number words instead, e.g. three, minus_one, etc. Then we can easier see which ones are missing and how they are sorted.",
      "range": {
        "startLine": 31,
        "startChar": 37,
        "endLine": 31,
        "endChar": 41
      },
      "revId": "63ad5e9c43712bf86132bf2452a9951f31d925ab",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}