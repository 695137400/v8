{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a8585928_a15fbedb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2024-10-09T14:26:11Z",
      "side": 1,
      "message": "PTAL: Clemens for overall review, Matthias for src/compiler/OWNERship.\n\nIn terms of line count this is a bit large, but most of it is extremely mechanical s/FunctionSig/CanonicalSig/, so I hope it\u0027s manageable.\n\nI\u0027ll work on removing the added casts next.",
      "revId": "992abc6e7fa1707f2d11500b9a3a5977b2bb176d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "390d5472_9cb8f13c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-10-09T14:58:15Z",
      "side": 1,
      "message": "LGTM for `src/compiler`.",
      "revId": "992abc6e7fa1707f2d11500b9a3a5977b2bb176d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fe1e9701_ce54a1f0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-10-10T08:58:40Z",
      "side": 1,
      "message": "LGTM",
      "revId": "992abc6e7fa1707f2d11500b9a3a5977b2bb176d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d4a12725_ebb9020e",
        "filename": "src/compiler/js-call-reducer.cc",
        "patchSetId": 1
      },
      "lineNbr": 3797,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2024-10-09T14:26:11Z",
      "side": 1,
      "message": "We could choose to introduce global constants for these, e.g. `kWasmCanonicalI64`. I haven\u0027t formed an opinion yet on whether that\u0027d be worth it.",
      "range": {
        "startLine": 3797,
        "startChar": 16,
        "endLine": 3797,
        "endChar": 63
      },
      "revId": "992abc6e7fa1707f2d11500b9a3a5977b2bb176d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a7b3f9e_c4ebcf76",
        "filename": "src/compiler/js-call-reducer.cc",
        "patchSetId": 1
      },
      "lineNbr": 3797,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-10-09T14:58:15Z",
      "side": 1,
      "message": "I mean they are constexpr, so this would only help in terms of conciseness and the whole `kWasmStringRef` vs. `kWasmRefString` continues to cause confusions, so those short names are sometimes also just a risk.",
      "parentUuid": "d4a12725_ebb9020e",
      "range": {
        "startLine": 3797,
        "startChar": 16,
        "endLine": 3797,
        "endChar": 63
      },
      "revId": "992abc6e7fa1707f2d11500b9a3a5977b2bb176d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b668a588_00b19214",
        "filename": "src/compiler/js-call-reducer.cc",
        "patchSetId": 1
      },
      "lineNbr": 3797,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-10-10T08:58:40Z",
      "side": 1,
      "message": "I like the idea of introducing constants to avoid boilerplate here. I would suggest `wasm::kCanonicalI64`.",
      "parentUuid": "2a7b3f9e_c4ebcf76",
      "range": {
        "startLine": 3797,
        "startChar": 16,
        "endLine": 3797,
        "endChar": 63
      },
      "revId": "992abc6e7fa1707f2d11500b9a3a5977b2bb176d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4b0b585b_d388d5c2",
        "filename": "src/compiler/js-call-reducer.cc",
        "patchSetId": 1
      },
      "lineNbr": 3797,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2024-10-10T11:58:43Z",
      "side": 1,
      "message": "Either way, I\u0027d like to postpone that discussion and decision and (potential) refactoring. Perhaps one of the two variants (canonical or module-specific) will end up being rare enough that we\u0027ll only need global constants for the other.",
      "parentUuid": "b668a588_00b19214",
      "range": {
        "startLine": 3797,
        "startChar": 16,
        "endLine": 3797,
        "endChar": 63
      },
      "revId": "992abc6e7fa1707f2d11500b9a3a5977b2bb176d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "60d669d5_aa59eb3c",
        "filename": "src/compiler/js-call-reducer.cc",
        "patchSetId": 1
      },
      "lineNbr": 3825,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2024-10-09T14:26:11Z",
      "side": 1,
      "message": "A small drive-by sandbox hardening change, because it fit in well with changes I had to make anyway.",
      "range": {
        "startLine": 3825,
        "startChar": 2,
        "endLine": 3825,
        "endChar": 73
      },
      "revId": "992abc6e7fa1707f2d11500b9a3a5977b2bb176d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a5e12340_2a2a003f",
        "filename": "src/compiler/turboshaft/phase.h",
        "patchSetId": 1
      },
      "lineNbr": 429,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-10-09T14:58:15Z",
      "side": 1,
      "message": "Follow-up-question: Could it simplify uses in the future if we also populated the `wasm_canonical_sig_`?\nThen all code paths that are fine with canonicalized types could just use the `CanonicalSig` and stop caring about whether it\u0027s a wrapper or not.",
      "range": {
        "startLine": 429,
        "startChar": 4,
        "endLine": 429,
        "endChar": 27
      },
      "revId": "992abc6e7fa1707f2d11500b9a3a5977b2bb176d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "08c4ba60_556977ce",
        "filename": "src/compiler/turboshaft/phase.h",
        "patchSetId": 1
      },
      "lineNbr": 429,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2024-10-10T11:58:43Z",
      "side": 1,
      "message": "Perhaps. Let\u0027s postpone that until we see a concrete benefit though. Perhaps we\u0027ll also move towards using canonical types for function compilation, but that\u0027d be a bigger (and mostly unrelated) project, and I\u0027m not sure whether it\u0027d be a good idea overall.",
      "parentUuid": "a5e12340_2a2a003f",
      "range": {
        "startLine": 429,
        "startChar": 4,
        "endLine": 429,
        "endChar": 27
      },
      "revId": "992abc6e7fa1707f2d11500b9a3a5977b2bb176d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b5159fee_c3141732",
        "filename": "src/compiler/wasm-compiler-definitions.cc",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-10-10T08:58:40Z",
      "side": 1,
      "message": "I was considering to propose that we pass a reinterpret_cast\u0027ed `FunctionSig*` here, since we don\u0027t seem to care if it\u0027s canonicalized or not. But I think this opens the door for more confusion of the two, so in the end I support this templatized version.",
      "revId": "992abc6e7fa1707f2d11500b9a3a5977b2bb176d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05a19918_55bf76ad",
        "filename": "src/compiler/wasm-compiler-definitions.cc",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2024-10-10T11:58:43Z",
      "side": 1,
      "message": "Agreed. I think we should try not to rely on `reinterpret_cast`, and also over time also minimize the use of these templatizations: _most_ code should know what kind of signature it\u0027s operating on.",
      "parentUuid": "b5159fee_c3141732",
      "revId": "992abc6e7fa1707f2d11500b9a3a5977b2bb176d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}