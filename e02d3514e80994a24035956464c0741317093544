{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "16a0ba50_684453e9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-08-29T15:53:03Z",
      "side": 1,
      "message": "Thanks for the first, quick synchronous review. It\u0027s ready for another pass in your own time now. (I fixed the notes I made for myself earlier.)",
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4c229295_4b6f06a9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "Great work! Given the size of the CL, I hope it isn\u0027t surprising that I also have a bunch of comments... ðŸ˜Š",
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a6b5fa6e_9c2f0727",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "16a0ba50_684453e9",
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43fff89f_8d925697",
        "filename": "src/compiler/js-inlining.cc",
        "patchSetId": 8
      },
      "lineNbr": 506,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "if",
      "range": {
        "startLine": 506,
        "startChar": 66,
        "endLine": 506,
        "endChar": 70
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6468900_74c51794",
        "filename": "src/compiler/js-inlining.cc",
        "patchSetId": 8
      },
      "lineNbr": 506,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "43fff89f_8d925697",
      "range": {
        "startLine": 506,
        "startChar": 66,
        "endLine": 506,
        "endChar": 70
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "362cc4b1_a4f8023c",
        "filename": "src/compiler/js-inlining.h",
        "patchSetId": 8
      },
      "lineNbr": 42,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "As mentioned above, I think this is a large difference in readability. If we can just keep the members (a few extra bytes in one reducer during a limited amount of time during compilation), that sounds like the better trade-off.",
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6bd752f8_b248ada2",
        "filename": "src/compiler/js-inlining.h",
        "patchSetId": 8
      },
      "lineNbr": 42,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "Ah, I forgot to make this change after our sync meeting. Done.",
      "parentUuid": "362cc4b1_a4f8023c",
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2707b93_d3c2d23b",
        "filename": "src/compiler/pipeline-data-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 569,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "Sure? Even the wasm-into-wasm inlining doesn\u0027t support this (i.e. cross-module-inlining), see e.g. https://source.chromium.org/chromium/chromium/src/+/main:v8/src/compiler/turboshaft/wasm-lowering-reducer.h;l\u003d977. This will not be a trivial change.\n(You can obviously keep the `TODO` but you might want to lower your expectations on it. ðŸ˜Š)",
      "range": {
        "startLine": 569,
        "startChar": 31,
        "endLine": 569,
        "endChar": 78
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0cfb952_847ac4af",
        "filename": "src/compiler/pipeline-data-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 569,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "Ack, this is not going to happen for the TS Wasm-in-JS inlining MVP, so I toned down the comment.\n\nIn terms of importance/prioritization, I do think the restriction to inline only from a single module in Wasm-in-JS inlining is more of a weird performance cliff than not inlining across different Wasm modules. I.e., that the first Wasm module \"wins\" in Wasm-in-JS inlining feels \"more arbitrary\" or \"more surprising\". (This is just my gut feeling for what I think \"a typical Web developer\" expects, WDYT?)",
      "parentUuid": "a2707b93_d3c2d23b",
      "range": {
        "startLine": 569,
        "startChar": 31,
        "endLine": 569,
        "endChar": 78
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5ef9176_222c2a61",
        "filename": "src/compiler/pipeline-data-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 569,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-09-09T09:22:51Z",
      "side": 1,
      "message": "More arbitrary, yes.\nHowever, the multi-module-use-cases are rare so far. It does work with multiple instantiations afaik as both instantiations would have the same `wasm::WasmModule` object, so that\u0027s already ahead of the wasm-into-wasm inlining.\nI\u0027d rather see us implement cross-module / cross-instantiation inlining for the wasm-inlining than for the Wasm-into-JS inlining as this is much more of a corner case (and much less something that developers would expect the engine to optimize for).",
      "parentUuid": "c0cfb952_847ac4af",
      "range": {
        "startLine": 569,
        "startChar": 31,
        "endLine": 569,
        "endChar": 78
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06d38451_648f1d18",
        "filename": "src/compiler/pipeline-data-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 569,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-10T13:47:40Z",
      "side": 1,
      "message": "That makes sense: more arbitrary, but less used in practice, hence add features rather to Wasm-inlining. (Marking as resolved, further discussion on team priorities offline.)",
      "parentUuid": "f5ef9176_222c2a61",
      "range": {
        "startLine": 569,
        "startChar": 31,
        "endLine": 569,
        "endChar": 78
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f08d208b_903eb848",
        "filename": "src/compiler/pipeline.cc",
        "patchSetId": 8
      },
      "lineNbr": 1048,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "That\u0027s the big disadvantage. We\u0027d need to implement JS-to-Wasm-wrappers in maglev. Ideally we\u0027d have a design where we don\u0027t need to duplicate it. (Although even in Turbofan that wasn\u0027t fully the case.)\nSo doing it late in Turboshaft would probably be a nicer solution.",
      "range": {
        "startLine": 1048,
        "startChar": 28,
        "endLine": 1048,
        "endChar": 34
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72953267_0423f41f",
        "filename": "src/compiler/pipeline.cc",
        "patchSetId": 8
      },
      "lineNbr": 1048,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "Good point, that\u0027s a good reason to do it late in Turboshaft in any case (i.e., here.)",
      "parentUuid": "f08d208b_903eb848",
      "range": {
        "startLine": 1048,
        "startChar": 28,
        "endLine": 1048,
        "endChar": 34
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f2cf2eb_8a4c15e5",
        "filename": "src/compiler/turboshaft/graph-builder.cc",
        "patchSetId": 8
      },
      "lineNbr": 1307,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "`wasm_call_parameters`? Yes, there is an 80 char line limit but it isn\u0027t that terrible. ðŸ˜„",
      "range": {
        "startLine": 1307,
        "startChar": 34,
        "endLine": 1307,
        "endChar": 39
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cb47e7cb_20948d3a",
        "filename": "src/compiler/turboshaft/graph-builder.cc",
        "patchSetId": 8
      },
      "lineNbr": 1307,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "fair ðŸ˜„",
      "parentUuid": "7f2cf2eb_8a4c15e5",
      "range": {
        "startLine": 1307,
        "startChar": 34,
        "endLine": 1307,
        "endChar": 39
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f807b04_048e3531",
        "filename": "src/compiler/turboshaft/graph-builder.cc",
        "patchSetId": 8
      },
      "lineNbr": 1310,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "Nit:\n```suggestion\n      if (call_descriptor-\u003ekind() \u003d\u003d CallDescriptor::kCallWasmFunction\n          \u0026\u0026 v8_flags.turboshaft_wasm_in_js_inlining) {\n```",
      "range": {
        "startLine": 1309,
        "startChar": 0,
        "endLine": 1310,
        "endChar": 54
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5d8de8b4_99e5f928",
        "filename": "src/compiler/turboshaft/graph-builder.cc",
        "patchSetId": 8
      },
      "lineNbr": 1310,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9f807b04_048e3531",
      "range": {
        "startLine": 1309,
        "startChar": 0,
        "endLine": 1310,
        "endChar": 54
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8389177_2a818ec0",
        "filename": "src/compiler/turboshaft/graph-builder.cc",
        "patchSetId": 8
      },
      "lineNbr": 1314,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "not",
      "range": {
        "startLine": 1314,
        "startChar": 37,
        "endLine": 1314,
        "endChar": 39
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b249a0e0_507aa1db",
        "filename": "src/compiler/turboshaft/graph-builder.cc",
        "patchSetId": 8
      },
      "lineNbr": 1314,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c8389177_2a818ec0",
      "range": {
        "startLine": 1314,
        "startChar": 37,
        "endLine": 1314,
        "endChar": 39
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "237dae2e_042b1e8a",
        "filename": "src/compiler/turboshaft/graph-builder.cc",
        "patchSetId": 8
      },
      "lineNbr": 1318,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "Nit: This would produce an oob-pointer, so maybe just `CHECK_NE`? I used to use `DCHECK` everywhere, but especially in the optimizing compiler I feel like we should use `CHECK`s more deliberately.",
      "range": {
        "startLine": 1318,
        "startChar": 10,
        "endLine": 1318,
        "endChar": 19
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9d46623e_b655d136",
        "filename": "src/compiler/turboshaft/graph-builder.cc",
        "patchSetId": 8
      },
      "lineNbr": 1318,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "Ack \u0026 done",
      "parentUuid": "237dae2e_042b1e8a",
      "range": {
        "startLine": 1318,
        "startChar": 10,
        "endLine": 1318,
        "endChar": 19
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2aebc316_430a7fb5",
        "filename": "src/compiler/turboshaft/operations.h",
        "patchSetId": 8
      },
      "lineNbr": 3904,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "```suggestion\n  // one particular call site, this assumes that (only works correctly if)\n```",
      "range": {
        "startLine": 3904,
        "startChar": 36,
        "endLine": 3904,
        "endChar": 69
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bf61669c_00e8cd10",
        "filename": "src/compiler/turboshaft/operations.h",
        "patchSetId": 8
      },
      "lineNbr": 3904,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2aebc316_430a7fb5",
      "range": {
        "startLine": 3904,
        "startChar": 36,
        "endLine": 3904,
        "endChar": 69
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c31b4b5e_04e154ca",
        "filename": "src/compiler/turboshaft/operations.h",
        "patchSetId": 8
      },
      "lineNbr": 3907,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "`Then`? In which of the two cases? ðŸ˜Š\nMaybe \"For sharing call descriptors, the JSWasmCallParameters need to be moved to the CallOp which causes a lot of code churn (needs touching all `REDUCE(Call)`).\n\nWell, actually, there aren\u0027t many of them (2), so it wouldn\u0027t be all that bad. Still needs touching the operation etc. but that isn\u0027t a lot of work.",
      "range": {
        "startLine": 3907,
        "startChar": 5,
        "endLine": 3907,
        "endChar": 9
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "be1512cd_46b50f0c",
        "filename": "src/compiler/turboshaft/operations.h",
        "patchSetId": 8
      },
      "lineNbr": 3907,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c31b4b5e_04e154ca",
      "range": {
        "startLine": 3907,
        "startChar": 5,
        "endLine": 3907,
        "endChar": 9
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1cbed0b0_abab46e6",
        "filename": "src/compiler/turboshaft/pipelines.h",
        "patchSetId": 8
      },
      "lineNbr": 183,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "I feel like we should do the inlining conceptually after the `MachineLowering` as it replaces higher-level JS concepts with low-level instructions and the inlined wasm uses low-level instructions as well.\n\nOn the other hand, the `MachineLoweringPhase` also does a few optimizations like `MachineOptimizationReducer` that we\u0027d want to run for the inlined wasm as well.\n\nIt could indeed be the best strategy to merge it into the `MachineLoweringPhase` in the end but for now I\u0027d keep it separate (because of the experimental nature and the open questions).",
      "range": {
        "startLine": 183,
        "startChar": 20,
        "endLine": 183,
        "endChar": 40
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "749efe55_e5902566",
        "filename": "src/compiler/turboshaft/pipelines.h",
        "patchSetId": 8
      },
      "lineNbr": 183,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "I have thought again about my comment `Skip this phase if there were no JS-\u003eWasm calls` a couple lines above and replaced it instead with the plan you laid out:\n1. Keep a separate phase before the `MachineLoweringPhase` until the MVP is feature-complete and cleaned-up (but before Finching or shipping it).\n2. Then integrate my reducer into the `MachineLoweringPhase` probably before `DataViewLoweringReducer` (since we have `DataViewLoweringReducer` in the `WasmGraphBuilderBase` as well, that seems like the right place).\n3. Not worry about the performance of always running the reducer: If we have inlineable Wasm functions, running a separate phase is more expensive, and if we don\u0027t inline it\u0027s just an additional load+conditional branch per CallOp during Turbofan compilation, which is not worth the hassle. (Except if we add a lot more reducers that apply to JS operations as well, but I don\u0027t think that will be the case.)",
      "parentUuid": "1cbed0b0_abab46e6",
      "range": {
        "startLine": 183,
        "startChar": 20,
        "endLine": 183,
        "endChar": 40
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8c40706_93bc2e42",
        "filename": "src/compiler/turboshaft/pipelines.h",
        "patchSetId": 8
      },
      "lineNbr": 183,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-09-09T09:22:51Z",
      "side": 1,
      "message": "Ah, actually I remember one difference here:\nFor Turbofan, if we inline wasm functions, we run a bunch of extra optimizations (the `WasmGCOptimizationPhase`) and some of that stuff is actually relevant (e.g. eliminating redundant casts and the `extern.internalize(extern.externalize(...))` that would be a typical pattern if you chain two wasm calls (one externalizes the return and the other internalizes the argument.)\n\nSo you might want to do the same later on. (OTOH, we can still run it in the regular phase and then conditionally run the wasm optimizations later on, they anyways need their own phase in Turboshaft.)",
      "parentUuid": "749efe55_e5902566",
      "range": {
        "startLine": 183,
        "startChar": 20,
        "endLine": 183,
        "endChar": 40
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "201835eb_ec44936f",
        "filename": "src/compiler/turboshaft/pipelines.h",
        "patchSetId": 8
      },
      "lineNbr": 183,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-10T13:47:40Z",
      "side": 1,
      "message": "Yes, good point. I already had a `TODO` in `wasm-in-js-inlining-phase.cc` to add Wasm GC optimizations, but I hadn\u0027t accounted for them needing their own phase due to the analysis on the input graph.\n\nIIUC the analysis code walks over all operations in all blocks (i.e., it wouldn\u0027t only add overhead for Wasm GC operations), so we cannot just add it to the beginning of a following phase unconditionally.",
      "parentUuid": "f8c40706_93bc2e42",
      "range": {
        "startLine": 183,
        "startChar": 20,
        "endLine": 183,
        "endChar": 40
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5dee7965_9f5908fc",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 55,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "I don\u0027t think this is semantically correct. We do not want to set the flag in the inlined case (the flag is meant to be only set on wasm frames).",
      "range": {
        "startLine": 55,
        "startChar": 53,
        "endLine": 55,
        "endChar": 68
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6452f956_3c7eab9d",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 55,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5dee7965_9f5908fc",
      "range": {
        "startLine": 55,
        "startChar": 53,
        "endLine": 55,
        "endChar": 68
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8192a10c_a8e4e782",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 61,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "`V\u003cWordPtr\u003e`?",
      "range": {
        "startLine": 61,
        "startChar": 8,
        "endLine": 61,
        "endChar": 15
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e15fbe6_e401918e",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 61,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8192a10c_a8e4e782",
      "range": {
        "startLine": 61,
        "startChar": 8,
        "endLine": 61,
        "endChar": 15
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5fd04fa2_c5718bb5",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 82,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "I think it\u0027s easier to read if you put this in the beginning:\n```\nif (!descriptor-\u003ejs_wasm_call_parameters) {\n  return Next::ReduceCall(callee, frame_state, arguments, descriptor,\n                          effects);\n}\n```",
      "range": {
        "startLine": 80,
        "startChar": 4,
        "endLine": 82,
        "endChar": 37
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "98ce23aa_040ca60c",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 82,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "Good idea! Done.",
      "parentUuid": "5fd04fa2_c5718bb5",
      "range": {
        "startLine": 80,
        "startChar": 4,
        "endLine": 82,
        "endChar": 37
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd79d0ca_81faa1ae",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 93,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "I don\u0027t think this is a good solution. We should stay with the `compiler::turboshaft` namespace in my opinion. But I also had my concerns about putting the `turboshaft-graph-interface.cc` to `src/wasm` instead of `src/compiler`.",
      "range": {
        "startLine": 93,
        "startChar": 10,
        "endLine": 93,
        "endChar": 28
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d112eada_aae37c83",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 93,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "Sure, kept both in the same `compiler::turboshaft` namespace and added a bunch of `wasm::` prefixes (and few `using wasm::...` declarations for frequently repeated things or where there\u0027s no danger of confusing it with JS things).",
      "parentUuid": "cd79d0ca_81faa1ae",
      "range": {
        "startLine": 93,
        "startChar": 10,
        "endLine": 93,
        "endChar": 28
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c8712b2_32d26b7a",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 122,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "Can we please just bail out in that case? Shared-everything is a super-complicated proposal and the whole `trusted_instance_data` handling for it will be challenging. It is unclear who\u0027ll be responsible for then providing the necessary testing for mixing wasm-into-js-inlining with shared-everything, so there is a big risk that this will create issues in the future.\n\nThere is also no need to support this right now, shared-everything isn\u0027t going to be shipped within the next 12 months (I guess).",
      "range": {
        "startLine": 122,
        "startChar": 28,
        "endLine": 122,
        "endChar": 47
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dc536560_a9da5591",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 122,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "Yes, sure. Removed the field, bail out in `TryInlineWasmCall` now.",
      "parentUuid": "6c8712b2_32d26b7a",
      "range": {
        "startLine": 122,
        "startChar": 28,
        "endLine": 122,
        "endChar": 47
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07f51079_7b8bd171",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 142,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "`std::copy` doesn\u0027t know about `locals_.end()`, so we should probably add a `CHECK` here?",
      "range": {
        "startLine": 142,
        "startChar": 4,
        "endLine": 142,
        "endChar": 69
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cf74439b_439ba6e3",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 142,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "07f51079_7b8bd171",
      "range": {
        "startLine": 142,
        "startChar": 4,
        "endLine": 142,
        "endChar": 69
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6bc5e77_ef90732f",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 144,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "How many test cases do you have for this? #passiveAggressiveQuestion ðŸ˜Š\nMaybe you\u0027d want to add a `Bailout` here if we have non-parameter-locals and add this feature later.",
      "range": {
        "startLine": 144,
        "startChar": 7,
        "endLine": 144,
        "endChar": 43
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5ad5b057_3f764ef5",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 144,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "Haha, well, there was one test with a non-parameter local (`localTee` below), but I see your point :)\nI will leave it in, since the code required for non-parameter locals is really quite minimal, but added another test with more than one local and some swaps between locals.",
      "parentUuid": "b6bc5e77_ef90732f",
      "range": {
        "startLine": 144,
        "startChar": 7,
        "endLine": 144,
        "endChar": 43
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "93b9609b_c161bd72",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 144,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-09-09T09:22:51Z",
      "side": 1,
      "message": "Thanks!",
      "parentUuid": "5ad5b057_3f764ef5",
      "range": {
        "startLine": 144,
        "startChar": 7,
        "endLine": 144,
        "endChar": 43
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e88cab15_24aa1672",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 169,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "You\u0027ll need to provide that from the JS side, see https://source.chromium.org/chromium/chromium/src/+/main:v8/src/compiler/js-inlining.cc;l\u003d454\nThis might not be fully trivial given that you are doing the inlining later than the JS inlining.",
      "range": {
        "startLine": 169,
        "startChar": 35,
        "endLine": 169,
        "endChar": 46
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "005665b7_98150b86",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 169,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "Thanks for the pointer, will leave this open and address in a follow-up CL/part of the implementation.",
      "parentUuid": "e88cab15_24aa1672",
      "range": {
        "startLine": 169,
        "startChar": 35,
        "endLine": 169,
        "endChar": 46
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36d75e62_9801a5e8",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 239,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "I\u0027m pretty sure that most if not all of the `I64` instructions you added are broken. When not on 64 bits, you\u0027ll need to run the `turboshaft::Int64LoweringReducer`.\n\nAs you\u0027re on an experimental flag, this doesn\u0027t have to happen on this change but that\u0027s a bit of the risk of adding dozens of instructions and testing like 5 of them.",
      "range": {
        "startLine": 239,
        "startChar": 15,
        "endLine": 239,
        "endChar": 45
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f98c72d2_f9f204ab",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 239,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "Oh, you are right, and constant folding may eliminate the i64 operations in many simple test cases so it\u0027s not immediately obvious. Just adding the `Int64LoweringReducer` is also not possible to support them, since it makes some assumptions about `Parameter` and `Return` ops and assumes a (non-existent in the Wasm-in-JS inlining case) `wasm_sig`.\n\nAll in all, I have to agree that this is a bit too risky and would require a whole bunch of more changes to land right now. So I will remove i64 unary/binary ops from this CL, and only gradually extend later.\n\nI also extended the test with all unary and binary ops that are currently supported by the inliner (which required a bit of a rewrite/testing framework, otherwise it would have been a lot of repetition).",
      "parentUuid": "36d75e62_9801a5e8",
      "range": {
        "startLine": 239,
        "startChar": 15,
        "endLine": 239,
        "endChar": 45
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d82e409_f414c73a",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 239,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-09-09T09:22:51Z",
      "side": 1,
      "message": "\u003e and constant folding may eliminate the i64 operations in many simple test cases so it\u0027s not immediately obvious.\n\nYes, but even `Word64Constant` should fail without the lowering. ðŸ˜Š",
      "parentUuid": "f98c72d2_f9f204ab",
      "range": {
        "startLine": 239,
        "startChar": 15,
        "endLine": 239,
        "endChar": 45
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "61c97534_de8d6895",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 239,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-10T13:47:40Z",
      "side": 1,
      "message": "Right, I also removed support for `i64.const`. (But it\u0027s not easy to test a lone `i64.const` instruction: the wrapper inlining doesn\u0027t support `i64` in the signature on 32-bit architectures, i.e., you first need to convert it to an `i32` somehow, and that may be constant folded again.)",
      "parentUuid": "0d82e409_f414c73a",
      "range": {
        "startLine": 239,
        "startChar": 15,
        "endLine": 239,
        "endChar": 45
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f25ed09_74eb02fd",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 324,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "Just `Bailout`? I think chances are high that we\u0027ll add a new unary op at some point in time. Whoever adds that, might miss this inliner and it would be fine if we don\u0027t support the new instruction but it wouldn\u0027t be great if we then suddenly have stability issues in rare corner cases because of that.\n\nIf you think that \"the inlining should support all unary ops\", then we can add a `DCHECK` plus the bailout, so that fuzzers can find this but this shouldn\u0027t risk production stability.",
      "range": {
        "startLine": 324,
        "startChar": 8,
        "endLine": 324,
        "endChar": 22
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f5902093_ab35d828",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 324,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "My reasoning for the `UNREACHABLE` was that we should trip over it when adding a new (in this case: unary) op and forget to handle it here (in the spirit of \"make assumptions explicit\", \"constrain the valid execution paths maximally\", and \"make all handled enum cases explicit\") but I agree that this shouldn\u0027t risk stability. So instead, I am going with a three pronged approach:\n- ops that we support\n- ops that we don\u0027t support, but not a bug: `Bailout()`\n- default (ops that we \"forgot to handle\"), a bug, but should not affect stability: `DHCECK(false); Bailout()`",
      "parentUuid": "7f25ed09_74eb02fd",
      "range": {
        "startLine": 324,
        "startChar": 8,
        "endLine": 324,
        "endChar": 22
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c35ec51_2fbd354e",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 324,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-09-09T09:22:51Z",
      "side": 1,
      "message": "Sounds good!",
      "parentUuid": "f5902093_ab35d828",
      "range": {
        "startLine": 324,
        "startChar": 8,
        "endLine": 324,
        "endChar": 22
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "351841ee_1eeeb016",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 529,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "Same as above.",
      "range": {
        "startLine": 529,
        "startChar": 8,
        "endLine": 529,
        "endChar": 19
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8555c036_49764cbb",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 529,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "351841ee_1eeeb016",
      "range": {
        "startLine": 529,
        "startChar": 8,
        "endLine": 529,
        "endChar": 19
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66f27a4c_29830b4f",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 626,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "This should be correct. However, you should have an `isolate` so you should be able to just emit a `HeapConstant` for this instead of having to look up the value from the roots.\n\nI couldn\u0027t see any of your test-cases testing the result value produced by the inlining (in all cases, not just the void return one), you should do that, otherwise we only know that it didn\u0027t crash...",
      "range": {
        "startLine": 625,
        "startChar": 6,
        "endLine": 626,
        "endChar": 65
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "751752a4_c012488c",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 626,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "Changed to loading `__ HeapConstant(isolate-\u003efactory()-\u003eundefined_value())`.\n\nRegarding testing the result of the inlining: all test cases `assertEqual(unoptimizedResult, inlinedResult)`, so basically a differential oracle. I think that\u0027s good enough, but feel free to reopen if I misunderstood something.",
      "parentUuid": "66f27a4c_29830b4f",
      "range": {
        "startLine": 625,
        "startChar": 6,
        "endLine": 626,
        "endChar": 65
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c0ca80f7_9fc7dc1f",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 626,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-09-09T09:22:51Z",
      "side": 1,
      "message": "Fair, I missed the `assertEquals`. (I\u0027ll blame it on the CL size! ðŸ˜œ)",
      "parentUuid": "751752a4_c012488c",
      "range": {
        "startLine": 625,
        "startChar": 6,
        "endLine": 626,
        "endChar": 65
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c282da96_74b1f5e3",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 1110,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "Nit: I\u0027m not a fan of such comments. They tend to get outdated and then cause more confusion than without having the comment.",
      "range": {
        "startLine": 1110,
        "startChar": 20,
        "endLine": 1110,
        "endChar": 51
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6260ead0_7dcea137",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 1110,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "Done (removed).",
      "parentUuid": "c282da96_74b1f5e3",
      "range": {
        "startLine": 1110,
        "startChar": 20,
        "endLine": 1110,
        "endChar": 51
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88bdfda1_85654ba0",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 1120,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "Nit: The data members should be last (meaning this functions should all be moved above them).",
      "range": {
        "startLine": 1120,
        "startChar": 2,
        "endLine": 1120,
        "endChar": 39
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cdddddef_e6ecd80a",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 1120,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "88bdfda1_85654ba0",
      "range": {
        "startLine": 1120,
        "startChar": 2,
        "endLine": 1120,
        "endChar": 39
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d5f1747_781669eb",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 1147,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "As said above, I\u0027d like to get rid of any sharedness here.",
      "range": {
        "startLine": 1147,
        "startChar": 56,
        "endLine": 1147,
        "endChar": 73
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e5f8ae37_20fc6ec6",
        "filename": "src/compiler/turboshaft/wasm-in-js-inlining-reducer-inl.h",
        "patchSetId": 8
      },
      "lineNbr": 1147,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9d5f1747_781669eb",
      "range": {
        "startLine": 1147,
        "startChar": 56,
        "endLine": 1147,
        "endChar": 73
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c3c3fba_ef2d609f",
        "filename": "src/flags/flag-definitions.h",
        "patchSetId": 8
      },
      "lineNbr": 1395,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "Nit: I think those emphasizing `_`s are a bit more confusing than helping.",
      "range": {
        "startLine": 1395,
        "startChar": 67,
        "endLine": 1395,
        "endChar": 79
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "27eed15b_a87aa49f",
        "filename": "src/flags/flag-definitions.h",
        "patchSetId": 8
      },
      "lineNbr": 1395,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "Done (removed).",
      "parentUuid": "7c3c3fba_ef2d609f",
      "range": {
        "startLine": 1395,
        "startChar": 67,
        "endLine": 1395,
        "endChar": 79
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8968975_cb1cc9a8",
        "filename": "src/wasm/function-body-decoder-impl.h",
        "patchSetId": 8
      },
      "lineNbr": 2908,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "So, what was the reason for this change again?",
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bc584648_1bcd6abb",
        "filename": "src/wasm/function-body-decoder-impl.h",
        "patchSetId": 8
      },
      "lineNbr": 2908,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "`DecoderError()` in its body has `V8_ASSUME(ValidationTag::validate)` to help the compiler optimize (and since it\u0027s an unchecked assumption, V8_ASSUME additionally DCHECKs that it holds). Here, we call `DecodeError` in a context where `validate` could be false. I am not entirely sure why we didn\u0027t trip over this beforehand, but this is the correct thing to do and it comes up with bailouts in the `WasmInJsInliningInterface` now.",
      "parentUuid": "b8968975_cb1cc9a8",
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c085b774_a208ed7e",
        "filename": "src/wasm/function-body-decoder-impl.h",
        "patchSetId": 8
      },
      "lineNbr": 2908,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-09-09T09:22:51Z",
      "side": 1,
      "message": "Ah, I think I got it, with bailouts, we don\u0027t reach the end but we still don\u0027t want to trigger a `DecodeError` here, right?",
      "parentUuid": "bc584648_1bcd6abb",
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "647f4dd0_e3180684",
        "filename": "src/wasm/function-body-decoder-impl.h",
        "patchSetId": 8
      },
      "lineNbr": 2908,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-10T13:47:40Z",
      "side": 1,
      "message": "Yes, exactly, good explanation. I updated the comment to explicitly mention bailouts.",
      "parentUuid": "c085b774_a208ed7e",
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea715ed5_c117ee19",
        "filename": "test/message/wasm-in-js-inlining-turboshaft.js",
        "patchSetId": 8
      },
      "lineNbr": 76,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "As discussed offline, I don\u0027t think so for multi-returns as these require allocating a JSArray, so it isn\u0027t completely straight-forward.",
      "range": {
        "startLine": 76,
        "startChar": 33,
        "endLine": 76,
        "endChar": 49
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d5a9ebae_cc56df31",
        "filename": "test/message/wasm-in-js-inlining-turboshaft.js",
        "patchSetId": 8
      },
      "lineNbr": 76,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "Correct, rephrased the comment: If we want to support it, we first need to support this in the JS-to-Wasm wrapper inlining. I would rather first port the wrapper inlining to Turboshaft and then implement it, so it\u0027s quite far out (doesn\u0027t make much sense to spend time on features in the TurboFan wrapper inlining).",
      "parentUuid": "ea715ed5_c117ee19",
      "range": {
        "startLine": 76,
        "startChar": 33,
        "endLine": 76,
        "endChar": 49
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0022391f_51274dad",
        "filename": "test/message/wasm-in-js-inlining-turboshaft.js",
        "patchSetId": 8
      },
      "lineNbr": 83,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "This should be easy, we need traps anyways for all the gc instructions. But we don\u0027t really need `kExprUnreachable` (it only makes sense in combination with exceptions or other control flow).",
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "64cb299a_bcef8ad1",
        "filename": "test/message/wasm-in-js-inlining-turboshaft.js",
        "patchSetId": 8
      },
      "lineNbr": 83,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "0022391f_51274dad",
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4879922c_810cdfc4",
        "filename": "test/message/wasm-in-js-inlining-turboshaft.js",
        "patchSetId": 8
      },
      "lineNbr": 143,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "It might be better to return it or not use the error at all. I\u0027ve learnt in the past that printing errors creates confusion because someone looks at the output and thinks \"Oh, `RuntimeError: unreachable`, seems like the test has failed!\"",
      "range": {
        "startLine": 143,
        "startChar": 6,
        "endLine": 143,
        "endChar": 20
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "035ca204_41031b5d",
        "filename": "test/message/wasm-in-js-inlining-turboshaft.js",
        "patchSetId": 8
      },
      "lineNbr": 143,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "Good point, ack and done.",
      "parentUuid": "4879922c_810cdfc4",
      "range": {
        "startLine": 143,
        "startChar": 6,
        "endLine": 143,
        "endChar": 20
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "613b95c2_b540bf98",
        "filename": "test/message/wasm-in-js-inlining-turboshaft.out",
        "patchSetId": 8
      },
      "lineNbr": 3,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "Nit: You probably want to print some information about the module (e.g. the address) which helps in case of multiple instantiations.",
      "range": {
        "startLine": 3,
        "startChar": 35,
        "endLine": 3,
        "endChar": 37
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7e31bf38_3a546d77",
        "filename": "test/message/wasm-in-js-inlining-turboshaft.out",
        "patchSetId": 8
      },
      "lineNbr": 3,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "Ack and done: Use the same format as the TurboFan implementation (see also comment below).",
      "parentUuid": "613b95c2_b540bf98",
      "range": {
        "startLine": 3,
        "startChar": 35,
        "endLine": 3,
        "endChar": 37
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f6649c2_9c415f97",
        "filename": "test/message/wasm-in-js-inlining-turboshaft.out",
        "patchSetId": 8
      },
      "lineNbr": 6,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "Nit: The `successfully` seems redundant.",
      "range": {
        "startLine": 6,
        "startChar": 0,
        "endLine": 6,
        "endChar": 12
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a8ea34b0_f42dd463",
        "filename": "test/message/wasm-in-js-inlining-turboshaft.out",
        "patchSetId": 8
      },
      "lineNbr": 6,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "Ack and done: Use the same format as the TurboFan implementation (see also comment below).",
      "parentUuid": "4f6649c2_9c415f97",
      "range": {
        "startLine": 6,
        "startChar": 0,
        "endLine": 6,
        "endChar": 12
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "decfe50b_c0d5aa6f",
        "filename": "test/message/wasm-in-js-inlining-turboshaft.out",
        "patchSetId": 8
      },
      "lineNbr": 9,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "Nit: You should be able to also print the debug name if present (see the turbofan implementation that seems to do that).",
      "range": {
        "startLine": 9,
        "startChar": 35,
        "endLine": 9,
        "endChar": 37
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6475d785_842c29c1",
        "filename": "test/message/wasm-in-js-inlining-turboshaft.out",
        "patchSetId": 8
      },
      "lineNbr": 9,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "Ack and done: Use the same format as the TurboFan implementation (see also comment below).",
      "parentUuid": "decfe50b_c0d5aa6f",
      "range": {
        "startLine": 9,
        "startChar": 35,
        "endLine": 9,
        "endChar": 37
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7cfa70f7_b40b43a5",
        "filename": "test/message/wasm-in-js-inlining-turboshaft.out",
        "patchSetId": 8
      },
      "lineNbr": 27,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T10:24:39Z",
      "side": 1,
      "message": "Nit: But we \"considered\" it for inlining, otherwise we wouldn\u0027t have printed this line? ðŸ˜Š\nShould we just treat this as \"Cannot inline [...] (no feedback vector)\"?",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 27,
        "endChar": 15
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "58905a62_8aacf0c2",
        "filename": "test/message/wasm-in-js-inlining-turboshaft.out",
        "patchSetId": 8
      },
      "lineNbr": 27,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-09-05T17:48:09Z",
      "side": 1,
      "message": "This is actually output from the existing JS-to-Wasm wrapper inlining in Turbofan. I assume it is written this way to be consistent with JavaScript inlining and the positive case where inlining works out:\n```\nConsidering wasm function [24] anyConvertExternConvertAny of module 0x56523c722ac8 for inlining\n- inlining\n```\n\nI don\u0027t terribly like the format either, but it\u0027s really just bikeshedding and for consistency with the existing tracing output, I use the same format now here. The wrapper inlining is still in Turbofan, which is yet another reason to use this format.",
      "parentUuid": "7cfa70f7_b40b43a5",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 27,
        "endChar": 15
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0fceb3a8_29e33df5",
        "filename": "test/message/wasm-in-js-inlining-turboshaft.out",
        "patchSetId": 8
      },
      "lineNbr": 27,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-09-09T09:22:51Z",
      "side": 1,
      "message": "Consistency makes sense, I don\u0027t like the format too much either, but I guess, I also wanted to make it consistent with the JS inlining. ðŸ˜Š",
      "parentUuid": "58905a62_8aacf0c2",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 27,
        "endChar": 15
      },
      "revId": "e02d3514e80994a24035956464c0741317093544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}