{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "68f2a42f_40f17599",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2020-10-15T13:38:14Z",
      "side": 1,
      "message": "Ross PTAL",
      "revId": "b0512ec0c88e7cd88c739b519a184f6d418531df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5d3b6fc_b7ba5d1e",
        "filename": "include/v8.h",
        "patchSetId": 5
      },
      "lineNbr": 2281,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2020-10-15T17:03:59Z",
      "side": 1,
      "message": "As discussed below, let\u0027s avoid making this architecture specific. We try to avoid architecture specific differences in the API. I think this could just be an array of the callee saved registers rather than making it arch specific.",
      "revId": "b0512ec0c88e7cd88c739b519a184f6d418531df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "86cbec3e_96ba1112",
        "filename": "include/v8.h",
        "patchSetId": 5
      },
      "lineNbr": 2281,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2020-10-16T10:45:36Z",
      "side": 1,
      "message": "Resolving to keep only one thread open on this topic",
      "parentUuid": "c5d3b6fc_b7ba5d1e",
      "revId": "b0512ec0c88e7cd88c739b519a184f6d418531df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "481f7011_8ecd47a4",
        "filename": "include/v8.h",
        "patchSetId": 5
      },
      "lineNbr": 2293,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2020-10-15T17:03:59Z",
      "side": 1,
      "message": "I think we should just make this an architecture-independent array of callee-saved registers that is dynamically allocated (so we don\u0027t have this array on every RegisterState even though it\u0027s only allocated for top-level frames), that way it\u0027s clear when it has been populated (i.e., when there is a non-null array).",
      "revId": "b0512ec0c88e7cd88c739b519a184f6d418531df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28f737ab_c7b43b5d",
        "filename": "include/v8.h",
        "patchSetId": 5
      },
      "lineNbr": 2293,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2020-10-16T08:45:03Z",
      "side": 1,
      "message": "We only have one register state that we reuse, created in v8_unwinder[1]. There isn\u0027t one register state per frame.\n\n[1]: https://source.chromium.org/chromium/chromium/src/+/master:chrome/renderer/v8_unwinder.cc;l\u003d144;drc\u003d9099ab87f63a1e37bfb949c617a9c1d1d5031f6c\n\nBy dynamically allocated do you mean new/delete? Or something like std::vector?",
      "parentUuid": "481f7011_8ecd47a4",
      "revId": "b0512ec0c88e7cd88c739b519a184f6d418531df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea506e88_1fd1c710",
        "filename": "include/v8.h",
        "patchSetId": 5
      },
      "lineNbr": 2293,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2020-10-16T11:31:39Z",
      "side": 1,
      "message": "Ahh I missed how this API was used, I thought it was used to unwind each frame, not all frames. In that case I agree this should be static.\n\nAs discussed offline, we shouldn\u0027t have V8_TARGET_ARCH_X in the v8.h since we can\u0027t guarantee it is set by the embedder including v8.h. Let\u0027s move this definition to a seperate file, and also make it very specifically arch specific by making each register a different field rather than using an ordered array.",
      "parentUuid": "28f737ab_c7b43b5d",
      "revId": "b0512ec0c88e7cd88c739b519a184f6d418531df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "431b0a2c_a643da3a",
        "filename": "src/diagnostics/unwinder.cc",
        "patchSetId": 5
      },
      "lineNbr": 110,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2020-10-15T17:03:59Z",
      "side": 1,
      "message": "Can this be something defined in i::EntryFrameConstants and DCHECKED in the JSEntry routine?",
      "revId": "b0512ec0c88e7cd88c739b519a184f6d418531df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f315fab_9043d826",
        "filename": "src/diagnostics/unwinder.cc",
        "patchSetId": 5
      },
      "lineNbr": 110,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2020-10-16T10:45:36Z",
      "side": 1,
      "message": "Moved the constexpr to the EntryFrameConstants.\nWe do have a static_assert for the whole frame [1]. Do we want one for the intermediate steps too?\n\n[1]: https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/arm/builtins-arm.cc;l\u003d498;drc\u003d50ddb12d2c3ca29c0f906efe78c4299fdf6ef490",
      "parentUuid": "431b0a2c_a643da3a",
      "revId": "b0512ec0c88e7cd88c739b519a184f6d418531df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "afb22d44_161a2ac6",
        "filename": "src/diagnostics/unwinder.cc",
        "patchSetId": 5
      },
      "lineNbr": 121,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2020-10-15T17:03:59Z",
      "side": 1,
      "message": "I\u0027m thinking this should start living in arch specific files, e.g. maybe frames-\u003carch\u003e. We try to avoid architecture specific code in non-arch files.",
      "revId": "b0512ec0c88e7cd88c739b519a184f6d418531df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a2550307_ec2be4ad",
        "filename": "src/diagnostics/unwinder.cc",
        "patchSetId": 5
      },
      "lineNbr": 121,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2020-10-16T10:45:36Z",
      "side": 1,
      "message": "Done. I created unwinder-\u003carch\u003e files for these methods.",
      "parentUuid": "afb22d44_161a2ac6",
      "revId": "b0512ec0c88e7cd88c739b519a184f6d418531df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "53b513a0_e5332c35",
        "filename": "test/cctest/test-unwinder-code-pages.cc",
        "patchSetId": 5
      },
      "lineNbr": 20,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2020-10-15T13:38:14Z",
      "side": 1,
      "message": "Renamed the similar macro (CHECK_EQ_STACK_REGISTER) and moved it above.",
      "range": {
        "startLine": 20,
        "startChar": 8,
        "endLine": 20,
        "endChar": 31
      },
      "revId": "b0512ec0c88e7cd88c739b519a184f6d418531df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}