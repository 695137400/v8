{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c4503ce1_a890f61f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1115851
      },
      "writtenOn": "2021-01-28T16:59:41Z",
      "side": 1,
      "message": "It\u0027s interesting to me that this is entirely inside V8. There\u0027s still code in Chromium that seems to be attempting to do the copying behavior of old:\n\nhttps://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/typed_arrays/dom_array_buffer.cc;drc\u003dae1a631ceaf488f5e9cb55755de32b6a505b4b1e;l\u003d45\n\ndo you understand why that\u0027s not working?\n\nI\u0027d like to see a Chromium-side web_test (hopefully web platform test that can be shared upstream) for this behavior as well, to make sure this does what we expect when integrated (obviously that\u0027d be a separate CL from this one.",
      "revId": "c751a5ab4c9c995ae369b7ef333f54b78df40d21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a58742b1_f3dc448b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2021-01-28T17:29:20Z",
      "side": 1,
      "message": "I\u0027m not so surprised that this is a V8-only thing. This is a WebAssembly-only issue, and ArrayBuffers on the blink side don\u0027t have knowledge about whether they belong to WebAssembly or not. It is fine to post-message an ArrayBuffer. The sender is just not allowed anymore to use the ArrayBuffer anymore afterwards. However, for WebAssembly memory it is not allowed to postMessage the memory, or the buffer of the memory, if it is not shared. I agree that a web test would be great, but that would not be part of this CL.",
      "parentUuid": "c4503ce1_a890f61f",
      "revId": "c751a5ab4c9c995ae369b7ef333f54b78df40d21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84537f08_128dd326",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1115851
      },
      "writtenOn": "2021-01-28T17:32:15Z",
      "side": 1,
      "message": "The code I linked to is an attempt by the Blink side to get at this same is_detachable bit, which is effectively the same as an \"is_wasm_memory\" bit. So while in the abstract I agree that this is something that V8 can do internally, I\u0027d like to better-understand the root cause of the bug this is fixing, and why that IsDetachable() check inside Blink isn\u0027t already avoiding the sharing here.",
      "parentUuid": "a58742b1_f3dc448b",
      "revId": "c751a5ab4c9c995ae369b7ef333f54b78df40d21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41181021_d2c27ad2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1122079
      },
      "writtenOn": "2021-01-28T18:54:43Z",
      "side": 1,
      "message": "So the code on the blink side *looks* like it\u0027s doing the right thing - i.e. on printfs, it detects that the buffer is not detachable etc, but still somehow has access to the underlying backing store. My suspicion is that the backing store is somehow being shared unintentionally, but I haven\u0027t yet figured out where - still looking. \n\nIn the mean time, I sent this CL out for a couple of reasons. (a) This is the correct behavior for ArrayBuffers backed by Wasm memory as discussed in the bug. This also catches that the buffer is not detachable earlier in the flow, i.e. consistent with the other DataCloneErrors this detects that the buffer is not eligible to be PostMessaged and doesn\u0027t get to the transfer method. (b) This is small and self contained to fix the security issue that can be easily backmerged.",
      "parentUuid": "84537f08_128dd326",
      "revId": "c751a5ab4c9c995ae369b7ef333f54b78df40d21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}