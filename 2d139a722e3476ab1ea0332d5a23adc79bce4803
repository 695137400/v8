{
  "comments": [
    {
      "key": {
        "uuid": "dc24bcee_ffded1d5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1145189
      },
      "writtenOn": "2020-07-06T20:44:19Z",
      "side": 1,
      "message": "Thanks Sathya! mostly lgtm. I added a few suggestions and I think we need to fix \"UpdateFeedback\" instructions as mentioned in my comment in simplified-operator.h",
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8863e743_f01646c4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1145189
      },
      "writtenOn": "2020-07-13T15:36:19Z",
      "side": 1,
      "message": "Sorry Sathya, I keep adding comments. As I am adding tests I am finding new things.",
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "afc8b566_54d14f97",
        "filename": "src/compiler/access-builder.cc",
        "patchSetId": 10
      },
      "lineNbr": 539,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-07-15T08:38:15Z",
      "side": 1,
      "message": "Please either define a kWeakFixedArrayLengthType using WeakFixedArray::kMaxLength or have a static assert here that the two kMaxLength values are equal.",
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db068b60_1373bc7f",
        "filename": "src/compiler/access-builder.cc",
        "patchSetId": 10
      },
      "lineNbr": 539,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2020-07-15T13:35:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "afc8b566_54d14f97",
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b2b57e0_5940f26e",
        "filename": "src/compiler/access-builder.cc",
        "patchSetId": 10
      },
      "lineNbr": 854,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-07-15T08:38:15Z",
      "side": 1,
      "message": "Please make this int, you\u0027re unnecessarily casting back and forth.",
      "range": {
        "startLine": 854,
        "startChar": 49,
        "endLine": 854,
        "endChar": 61
      },
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "218f8255_a6e25ca7",
        "filename": "src/compiler/access-builder.cc",
        "patchSetId": 10
      },
      "lineNbr": 854,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2020-07-15T13:35:28Z",
      "side": 1,
      "message": "I used size_t to be consistent with the above ForFixedArraySlot. Changed to int.",
      "parentUuid": "8b2b57e0_5940f26e",
      "range": {
        "startLine": 854,
        "startChar": 49,
        "endLine": 854,
        "endChar": 61
      },
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b09907d_b4458171",
        "filename": "src/compiler/access-builder.cc",
        "patchSetId": 10
      },
      "lineNbr": 917,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-07-15T08:38:15Z",
      "side": 1,
      "message": "Since WeakFixedArrays can also contain Smis, please use MachineType::AnyTagged.",
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5417820e_f278d9c3",
        "filename": "src/compiler/access-builder.cc",
        "patchSetId": 10
      },
      "lineNbr": 917,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2020-07-15T13:35:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5b09907d_b4458171",
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a8907f0_1267fa98",
        "filename": "src/compiler/access-builder.h",
        "patchSetId": 10
      },
      "lineNbr": 291,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-07-15T08:38:15Z",
      "side": 1,
      "message": "WeakFixedArray",
      "range": {
        "startLine": 291,
        "startChar": 24,
        "endLine": 291,
        "endChar": 34
      },
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed170a86_23c7201e",
        "filename": "src/compiler/access-builder.h",
        "patchSetId": 10
      },
      "lineNbr": 291,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2020-07-15T13:35:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0a8907f0_1267fa98",
      "range": {
        "startLine": 291,
        "startChar": 24,
        "endLine": 291,
        "endChar": 34
      },
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d1e9315_bbbb1bcb",
        "filename": "src/compiler/effect-control-linearizer.cc",
        "patchSetId": 10
      },
      "lineNbr": 265,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-07-15T08:38:15Z",
      "side": 1,
      "message": "How about \"BuildIsStrongReference\" to match the other one.",
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54fa0690_315635c7",
        "filename": "src/compiler/effect-control-linearizer.cc",
        "patchSetId": 10
      },
      "lineNbr": 265,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2020-07-15T13:35:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8d1e9315_bbbb1bcb",
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "20a37a1d_5130b97f",
        "filename": "src/compiler/effect-control-linearizer.cc",
        "patchSetId": 10
      },
      "lineNbr": 1889,
      "author": {
        "id": 1145189
      },
      "writtenOn": "2020-07-06T20:44:19Z",
      "side": 1,
      "message": "Maybe use WrongMapWhenMonomorphic / MissingMapWhenMonomorphic here? Even simply using MissingMap would work too.",
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ab9cc9c_fbc9400d",
        "filename": "src/compiler/effect-control-linearizer.cc",
        "patchSetId": 10
      },
      "lineNbr": 1889,
      "author": {
        "id": 1145189
      },
      "writtenOn": "2020-07-13T15:36:19Z",
      "side": 1,
      "message": "I think this should be:\nif (feedback.state \u003d\u003d FeedbackSource::kMonomorphic) {\n  __ DeoptimizeIfNot(DeoptimizeReason::kWrongICState, ...)\n} else {\n  __ DeoptimizeIfNot(DeoptimizeReason::kTransitionedToMonomorphic, ...)\n}\n\nWe can transition from Poly -\u003e Mono and if we don\u0027t discard the code here, we will be in a deopt loop since we don\u0027t expect a monomorphic state here. So kTransitionedToMonomorphic should discard the code here.",
      "parentUuid": "20a37a1d_5130b97f",
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95231fb6_68dc6e37",
        "filename": "src/compiler/effect-control-linearizer.cc",
        "patchSetId": 10
      },
      "lineNbr": 1889,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2020-07-15T13:35:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3ab9cc9c_fbc9400d",
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6464aa37_32f7af3e",
        "filename": "src/compiler/feedback-source.h",
        "patchSetId": 10
      },
      "lineNbr": 17,
      "author": {
        "id": 1145189
      },
      "writtenOn": "2020-07-06T20:44:19Z",
      "side": 1,
      "message": "Do we want to have ICState in FeedbackSource or Feedback? I am not quite sure but to me it feels like ICState is \"Feedback\". Since this is only needed for DynamicMapChecks maybe we can add ICState as a parameter in the DynamicMapChecks and omit ICState in FeedbackSource?\n\nTobias, WDYT?",
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b81d7e5_808a61c7",
        "filename": "src/compiler/feedback-source.h",
        "patchSetId": 10
      },
      "lineNbr": 17,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2020-07-09T21:23:07Z",
      "side": 1,
      "message": "I also think putting this into DynamicMapChecks makes more sense, especially because not every FeedbackSource should be either monomorphic or polymorphic.",
      "parentUuid": "6464aa37_32f7af3e",
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce8c18fe_5004782b",
        "filename": "src/compiler/feedback-source.h",
        "patchSetId": 10
      },
      "lineNbr": 17,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-07-15T08:38:15Z",
      "side": 1,
      "message": "Agreed. Also we don\u0027t necessarily know or want to read the state when we create a FeedbackSource.",
      "parentUuid": "7b81d7e5_808a61c7",
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49ce257f_a0c1f05f",
        "filename": "src/compiler/feedback-source.h",
        "patchSetId": 10
      },
      "lineNbr": 17,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2020-07-15T13:35:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ce8c18fe_5004782b",
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a5edbe6_4e915bb0",
        "filename": "src/compiler/simplified-operator.h",
        "patchSetId": 10
      },
      "lineNbr": 424,
      "author": {
        "id": 1145189
      },
      "writtenOn": "2020-07-06T20:44:19Z",
      "side": 1,
      "message": "Also, update comment here. For dynamic map checks feedback isn\u0027t an optional parameter right?",
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e32b0e9_f7a134bc",
        "filename": "src/compiler/simplified-operator.h",
        "patchSetId": 10
      },
      "lineNbr": 424,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2020-07-15T13:35:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7a5edbe6_4e915bb0",
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6462559f_d033c3af",
        "filename": "src/compiler/simplified-operator.h",
        "patchSetId": 10
      },
      "lineNbr": 426,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-07-15T08:38:15Z",
      "side": 1,
      "message": "You\u0027re not passing the FeedbackSource to the Deoptimize* code in EffectControlLinearizer, so this comment is not true. (I think that\u0027s probably what you want, so just remove the comment.)",
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72287673_4cdf2d1f",
        "filename": "src/compiler/simplified-operator.h",
        "patchSetId": 10
      },
      "lineNbr": 426,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2020-07-15T13:35:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6462559f_d033c3af",
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "58aa555b_69c7b375",
        "filename": "src/compiler/simplified-operator.h",
        "patchSetId": 10
      },
      "lineNbr": 434,
      "author": {
        "id": 1145189
      },
      "writtenOn": "2020-07-06T20:44:19Z",
      "side": 1,
      "message": "TurboFan uses a valid feedback as an indication to generate \"UpdateFeedback\" instructions: https://cs.chromium.org/chromium/src/v8/src/compiler/backend/code-generator.cc?type\u003dcs\u0026g\u003d0\u0026l\u003d1144\n\nThese instructions are expected only for CallIC. So, passing a valid feedback here generates incorrect deoptimization data. I am not sure what\u0027s the best way to fix it. Maybe we should add an explicit variable to check if we need to generate UpdateFeedback instructions and not rely on a valid feedback?",
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14a64edb_200f1fe6",
        "filename": "src/compiler/simplified-operator.h",
        "patchSetId": 10
      },
      "lineNbr": 434,
      "author": {
        "id": 1145189
      },
      "writtenOn": "2020-07-07T16:21:54Z",
      "side": 1,
      "message": "On a second thought, I am also OK to fix these in a followup cl, given we aren\u0027t enabling this yet.",
      "parentUuid": "58aa555b_69c7b375",
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db620857_553475fb",
        "filename": "src/compiler/simplified-operator.h",
        "patchSetId": 10
      },
      "lineNbr": 434,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2020-07-15T13:35:28Z",
      "side": 1,
      "message": "Well, it\u0027s not incorrect deopt data, but just extra deopt data right? Adding TODO for now.",
      "parentUuid": "14a64edb_200f1fe6",
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45401605_97a15357",
        "filename": "src/compiler/simplified-operator.h",
        "patchSetId": 10
      },
      "lineNbr": 434,
      "author": {
        "id": 1145189
      },
      "writtenOn": "2020-07-15T15:38:39Z",
      "side": 1,
      "message": "Not really. Since we only expect the \"UpdateFeedback\" for CallICs. We do have a DCHECK here which would fail: https://cs.chromium.org/chromium/src/v8/src/objects/feedback-vector.cc?q\u003dfeedback-vector.cc\u0026sq\u003dpackage:chromium\u0026g\u003d0\u0026l\u003d892.",
      "parentUuid": "db620857_553475fb",
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab0ac41e_374e3dcc",
        "filename": "src/deoptimizer/deoptimize-reason.h",
        "patchSetId": 10
      },
      "lineNbr": 62,
      "author": {
        "id": 1145189
      },
      "writtenOn": "2020-07-06T20:44:19Z",
      "side": 1,
      "message": "Maybe this could be MissingMapForMonomorphic or something similar?",
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0bea2fc2_db71aab9",
        "filename": "src/deoptimizer/deoptimize-reason.h",
        "patchSetId": 10
      },
      "lineNbr": 62,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2020-07-15T13:35:28Z",
      "side": 1,
      "message": "I guess we can just use Missing Map for this as well",
      "parentUuid": "ab0ac41e_374e3dcc",
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0cc097fa_6e53d4df",
        "filename": "src/runtime/runtime-compiler.cc",
        "patchSetId": 10
      },
      "lineNbr": 175,
      "author": {
        "id": 1145189
      },
      "writtenOn": "2020-07-06T20:44:19Z",
      "side": 1,
      "message": "Maybe we can drop check for type here. reason \u003d\u003d MissinMap or WrongICState implies that type is eager. We could add a DCHECK(type \u003d\u003d DeoptimizeKind::kEager) inside the if.",
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5736d31_ba4fe634",
        "filename": "src/runtime/runtime-compiler.cc",
        "patchSetId": 10
      },
      "lineNbr": 175,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2020-07-15T13:35:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0cc097fa_6e53d4df",
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c8cce9f_e10ba581",
        "filename": "src/runtime/runtime-compiler.cc",
        "patchSetId": 10
      },
      "lineNbr": 176,
      "author": {
        "id": 1145189
      },
      "writtenOn": "2020-07-13T14:00:06Z",
      "side": 1,
      "message": "I just realized this doesn\u0027t work. We don\u0027t record DeoptReason always [1]. We only do it on --trace-deopt or other tracing flags. We should either start recording deopt reason always or introduce another type (like kEagerWithReuse). Maybe there are other better approaches too.\n\n[1] https://source.chromium.org/chromium/chromium/src/+/master:v8/src/compiler/backend/code-generator.cc;l\u003d168",
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "144abc9c_66af4a45",
        "filename": "src/runtime/runtime-compiler.cc",
        "patchSetId": 10
      },
      "lineNbr": 176,
      "author": {
        "id": 1145189
      },
      "writtenOn": "2020-07-14T13:42:36Z",
      "side": 1,
      "message": "Georg, this is what I mentioned during our call. Once you are done with high-level review we can discuss what\u0027s best way to do this. For now: I am using a kind of hack here: https://chromium-review.googlesource.com/c/v8/v8/+/2297460",
      "parentUuid": "7c8cce9f_e10ba581",
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49c0be78_af697d8d",
        "filename": "src/runtime/runtime-compiler.cc",
        "patchSetId": 10
      },
      "lineNbr": 176,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-07-15T08:38:15Z",
      "side": 1,
      "message": "I think a new kind makes most sense. Would that be the same new kind as for the other CL where we discussed this option a while ago?",
      "parentUuid": "144abc9c_66af4a45",
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ebf4a4e_d922c762",
        "filename": "src/runtime/runtime-compiler.cc",
        "patchSetId": 10
      },
      "lineNbr": 176,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2020-07-15T13:35:28Z",
      "side": 1,
      "message": "Added a TODO for now",
      "parentUuid": "49c0be78_af697d8d",
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8ff72ae_1b4f48ab",
        "filename": "src/runtime/runtime-compiler.cc",
        "patchSetId": 10
      },
      "lineNbr": 176,
      "author": {
        "id": 1145189
      },
      "writtenOn": "2020-07-15T15:38:39Z",
      "side": 1,
      "message": "I would prefer if we omit these changes from this cl instead of a TODO. These aren\u0027t correct and it is also not clear about what we want to do yet. If we want to add a new deopt type then these changes won\u0027t be useful anyway.\n\n\u003e\u003e Would that be the same new kind as for the other CL where we discussed this option a while ago?\nUnfortunately no. These are eager deoptimizations and the earlier ones were soft deoptimizations. Also thinking about the option we discussed earlier, if we reuse optimized code on a soft deopt or not depends on the reuse count. So, we can\u0027t mark them as the ones reusing code when generating the optimized code. I am not sure adding a new type would help the other use case much.",
      "parentUuid": "8ebf4a4e_d922c762",
      "revId": "2d139a722e3476ab1ea0332d5a23adc79bce4803",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}