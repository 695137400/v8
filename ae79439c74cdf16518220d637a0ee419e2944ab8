{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4729c32e_bf71671e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-10-19T09:50:13Z",
      "side": 1,
      "message": "ptal",
      "revId": "ae79439c74cdf16518220d637a0ee419e2944ab8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "60ccded9_6479068f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-10-19T12:35:58Z",
      "side": 1,
      "message": "Generally I think the direction is good.\nI think we can and should avoid creating/duplicating multiple states.",
      "revId": "ae79439c74cdf16518220d637a0ee419e2944ab8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93471649_a1288b00",
        "filename": "src/heap/cppgc-js/unified-heap-marking-verifier.cc",
        "patchSetId": 5
      },
      "lineNbr": 40,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-10-19T12:35:58Z",
      "side": 1,
      "message": "VerificationState\u0026",
      "range": {
        "startLine": 40,
        "startChar": 19,
        "endLine": 40,
        "endChar": 36
      },
      "revId": "ae79439c74cdf16518220d637a0ee419e2944ab8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c9a7416_8047882f",
        "filename": "src/heap/cppgc-js/unified-heap-marking-verifier.cc",
        "patchSetId": 5
      },
      "lineNbr": 40,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-10-20T09:26:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "93471649_a1288b00",
      "range": {
        "startLine": 40,
        "startChar": 19,
        "endLine": 40,
        "endChar": 36
      },
      "revId": "ae79439c74cdf16518220d637a0ee419e2944ab8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46dea624_8bc79c78",
        "filename": "src/heap/cppgc-js/unified-heap-marking-verifier.h",
        "patchSetId": 5
      },
      "lineNbr": 21,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-10-19T12:35:58Z",
      "side": 1,
      "message": "I don\u0027t think you really need this here. Since the visitors only take a reference to the state, but don\u0027t actually use it during construction, I think you can pass the state from MarkingVerifierBase and it will be safe.",
      "range": {
        "startLine": 21,
        "startChar": 37,
        "endLine": 21,
        "endChar": 43
      },
      "revId": "ae79439c74cdf16518220d637a0ee419e2944ab8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a0116d6_61b962c4",
        "filename": "src/heap/cppgc-js/unified-heap-marking-verifier.h",
        "patchSetId": 5
      },
      "lineNbr": 21,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-10-20T09:26:11Z",
      "side": 1,
      "message": "This will in the end work like marking:\n- UnifiedHeapMarkingVerifier: UnifiedHeapVerificationState\n- MarkingVerifier: MarkingState (C++ only)\n- MarkingVerifierBase: MarkingState\u0026 (to support C++ only)\n\nI added a TODO here to make this clear.",
      "parentUuid": "46dea624_8bc79c78",
      "range": {
        "startLine": 21,
        "startChar": 37,
        "endLine": 21,
        "endChar": 43
      },
      "revId": "ae79439c74cdf16518220d637a0ee419e2944ab8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11dd71b6_0c2fc15b",
        "filename": "src/heap/cppgc-js/unified-heap-marking-verifier.h",
        "patchSetId": 5
      },
      "lineNbr": 21,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-10-20T16:18:52Z",
      "side": 1,
      "message": "In that case, and since we\u0027re already \"duplicating\" the marking structure, I think we can duplicate the structure of MarkingState as well. That means MarkingVerifierBase will hold a VerificationState (not a reference) and UnifiedHeapMarkingVerifier/UnifiedHeapVerificationVisitor will additionally hold a UnifiedHeapVerificationState specifically for handling JSMembers. wdyt?\n\n(I don\u0027t like that the base class holds a reference to a field of the subclass, which I think is not necessary in this case, so I\u0027m trying to avoid it.)",
      "parentUuid": "0a0116d6_61b962c4",
      "range": {
        "startLine": 21,
        "startChar": 37,
        "endLine": 21,
        "endChar": 43
      },
      "revId": "ae79439c74cdf16518220d637a0ee419e2944ab8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c54ee278_ef457915",
        "filename": "src/heap/cppgc-js/unified-heap-marking-verifier.h",
        "patchSetId": 5
      },
      "lineNbr": 21,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-10-20T18:49:06Z",
      "side": 1,
      "message": "I agree that passing in a ref from a non-constructed child field is not ideal. It only works because the state ctor is trivial as we didn\u0027t even construct it when executing all the logic.\n\nFor your proposed approach we would pass an un-constructed ref of the VerificationState to the visitor and only execute it when we it is constructed. That\u0027s better than my initial approach but still passing around an unconstructed object. (Albeit not working with it.)\n\nHow about the following:\n- Added a Run() method to avoid overly complex ctor.\n- Added a virtual SetCurrentParent() to announce new parent objects to the actual verifiers.\n- Let the verifiers deal with how the forward parents.\n\nIt seems fully untangled this way and the MarkingVerifierBase has a sole responsibility of holding the visitor and announcing new parents without knowing exact state.",
      "parentUuid": "11dd71b6_0c2fc15b",
      "range": {
        "startLine": 21,
        "startChar": 37,
        "endLine": 21,
        "endChar": 43
      },
      "revId": "ae79439c74cdf16518220d637a0ee419e2944ab8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17288356_0daf3121",
        "filename": "src/heap/cppgc-js/unified-heap-marking-verifier.h",
        "patchSetId": 5
      },
      "lineNbr": 21,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-10-20T20:40:00Z",
      "side": 1,
      "message": "Adding a Run method sgtm, but in practice I think you are still passing an un-constructed ref when creating the visitors so I don\u0027t fully understand why it\u0027s better.\nI think both approaches (what you suggested and splitting VerificationState to VerificationState and UnifiedHeapVerificationState similarly to what we have for MarkingState) suffer from the same issues, so I leave the decision up to you.",
      "parentUuid": "c54ee278_ef457915",
      "range": {
        "startLine": 21,
        "startChar": 37,
        "endLine": 21,
        "endChar": 43
      },
      "revId": "ae79439c74cdf16518220d637a0ee419e2944ab8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6982c3c5_890a1534",
        "filename": "src/heap/cppgc/marking-verifier.cc",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-10-19T12:35:58Z",
      "side": 1,
      "message": "If we avoid duplicating states, I think we can replace this with a scope that sets/unsets the parent. Unsetting the parent is not required for correctness imo, but it still makes sense.",
      "range": {
        "startLine": 61,
        "startChar": 9,
        "endLine": 61,
        "endChar": 25
      },
      "revId": "ae79439c74cdf16518220d637a0ee419e2944ab8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "978f1fe6_fe026e53",
        "filename": "src/heap/cppgc/marking-verifier.cc",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-10-20T09:26:11Z",
      "side": 1,
      "message": "See other comment. Where would that scope store the parent?",
      "parentUuid": "6982c3c5_890a1534",
      "range": {
        "startLine": 61,
        "startChar": 9,
        "endLine": 61,
        "endChar": 25
      },
      "revId": "ae79439c74cdf16518220d637a0ee419e2944ab8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39330720_0f9cda4b",
        "filename": "src/heap/cppgc/marking-verifier.cc",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-10-20T16:18:52Z",
      "side": 1,
      "message": "nit: The scope will wrap the rest of this method and will store the parent in the VerificationState held by MarkingVerifierBase. The only diff between having the scope and not having it (i.e. current code) is unsetting the parent. Since unsetting the parent is not needed for correctness, I\u0027m downgrading this comment to a nit.",
      "parentUuid": "978f1fe6_fe026e53",
      "range": {
        "startLine": 61,
        "startChar": 9,
        "endLine": 61,
        "endChar": 25
      },
      "revId": "ae79439c74cdf16518220d637a0ee419e2944ab8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2fe9fa11_8cf06887",
        "filename": "src/heap/cppgc/marking-verifier.cc",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-10-20T18:49:06Z",
      "side": 1,
      "message": "Ack, I think this is overkill.",
      "parentUuid": "39330720_0f9cda4b",
      "range": {
        "startLine": 61,
        "startChar": 9,
        "endLine": 61,
        "endChar": 25
      },
      "revId": "ae79439c74cdf16518220d637a0ee419e2944ab8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c94df657_3c839580",
        "filename": "src/heap/cppgc/marking-verifier.cc",
        "patchSetId": 5
      },
      "lineNbr": 93,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-10-19T12:35:58Z",
      "side": 1,
      "message": "VerificationState\u0026",
      "range": {
        "startLine": 93,
        "startChar": 2,
        "endLine": 93,
        "endChar": 19
      },
      "revId": "ae79439c74cdf16518220d637a0ee419e2944ab8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "10106277_9972a00d",
        "filename": "src/heap/cppgc/marking-verifier.cc",
        "patchSetId": 5
      },
      "lineNbr": 93,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-10-20T09:26:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c94df657_3c839580",
      "range": {
        "startLine": 93,
        "startChar": 2,
        "endLine": 93,
        "endChar": 19
      },
      "revId": "ae79439c74cdf16518220d637a0ee419e2944ab8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}