{
  "comments": [
    {
      "key": {
        "uuid": "fd06d1eb_95eabc72",
        "filename": "src/objects/instance-type.h",
        "patchSetId": 16
      },
      "lineNbr": 392,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2019-05-13T20:17:46Z",
      "side": 1,
      "message": "Thanks :)",
      "range": {
        "startLine": 392,
        "startChar": 0,
        "endLine": 392,
        "endChar": 35
      },
      "revId": "21c1878f8dc2aecb06c53076c0e431acf9dc723e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "164935cd_e51901fd",
        "filename": "src/objects/instance-type.h",
        "patchSetId": 16
      },
      "lineNbr": 392,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2019-05-15T17:57:17Z",
      "side": 1,
      "message": ":)",
      "parentUuid": "fd06d1eb_95eabc72",
      "range": {
        "startLine": 392,
        "startChar": 0,
        "endLine": 392,
        "endChar": 35
      },
      "revId": "21c1878f8dc2aecb06c53076c0e431acf9dc723e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1fb81a21_a4c501ca",
        "filename": "src/objects/map-inl.h",
        "patchSetId": 16
      },
      "lineNbr": 52,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2019-05-10T23:10:51Z",
      "side": 1,
      "message": "I\u0027m not super thrilled with anything I\u0027ve come up with for this issue, so please let me know if you have another suggestion you\u0027d prefer. The problem, in short, is that Torque doesn\u0027t emit any field offset constant for fields that don\u0027t exist (such as those removed by @ifdef), but we\u0027d still like to be able to compile. Running gcmole is especially interesting, because it runs Torque once for the host platform (say, ia32), and then compiles files that include the generated Torque files using alternate definitions (say, V8_TARGET_ARCH_X64). So preprocessor definitions might be inconsistent between when torque-parser.cc was compiled and when other files like map-inl.h are compiled.\n\nOptions I\u0027ve considered:\n\n1. In patchset 16, I\u0027m using the preprocessor to avoid referencing any field offset constants that haven\u0027t been generated. Downside: requires some extra goo here in map-inl.h.\n\n2. In patchset 13, I tried another alternative where fields can be of type void to take up zero space in the layout, meaning we can successfully check things like `FIELD_SIZE(kOptionalPaddingOffset) \u003d\u003d 0`. Downside: requires duplicate definitions of the optional fields in base.tq, and of the BuildFlags list.\n\n3. We could adjust the @ifdef semantics so that a false condition would not remove the field but just squash it to zero size. Downside: @ifdef behavior might be a little surprising, and prevents us from having two cases that define the same field in different ways (I don\u0027t know if this would be useful, but it\u0027s currently possible).",
      "revId": "21c1878f8dc2aecb06c53076c0e431acf9dc723e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "157f4425_fd828f58",
        "filename": "src/objects/map-inl.h",
        "patchSetId": 16
      },
      "lineNbr": 52,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2019-05-13T09:25:32Z",
      "side": 1,
      "message": "I\u0027m not a Torque person, but here are my two cents from Map user\u0027s perspective:\n\nI\u0027d personally prefer variant (2). It may also help to have a new way of defining padding fields that will be translated to [XXX|OBJECT_POINTER]_PADDING(kAbcOffset) constructs. This approach would require a bit lessÂ @ifdefs.\n\nRegarding GCMole compilation issue, I think we should regenerate Torque files during GCMole build.",
      "parentUuid": "1fb81a21_a4c501ca",
      "revId": "21c1878f8dc2aecb06c53076c0e431acf9dc723e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f387cd5_d12a289f",
        "filename": "src/objects/map-inl.h",
        "patchSetId": 16
      },
      "lineNbr": 52,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2019-05-13T20:17:46Z",
      "side": 1,
      "message": "I agree with Igor that we should have some more automatic way to support padding eventually. I\u0027m fine with both solutions (1) and (2), but I especially like about solution (1) that it adds a bit of extra C++ compile-time checking, making it less probable that things work for the wrong reason.",
      "parentUuid": "157f4425_fd828f58",
      "revId": "21c1878f8dc2aecb06c53076c0e431acf9dc723e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b0d119c_0af76180",
        "filename": "src/objects/map-inl.h",
        "patchSetId": 16
      },
      "lineNbr": 52,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2019-05-14T17:00:03Z",
      "side": 1,
      "message": "Thanks to both of you for the useful feedback! I\u0027m leaning toward staying with variant (1) for now given Tobias\u0027s point about extra compile-time checking. Does that sound reasonable to you, Igor?",
      "parentUuid": "1f387cd5_d12a289f",
      "revId": "21c1878f8dc2aecb06c53076c0e431acf9dc723e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34698816_28eac6cb",
        "filename": "src/objects/map-inl.h",
        "patchSetId": 16
      },
      "lineNbr": 52,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2019-05-14T17:45:20Z",
      "side": 1,
      "message": "Seth, I\u0027m sorry for pushing you back and forth. More ideas on this topic:\nI personally prefer \n  if (DEBUG_BOOL) {\n    blah\n  }\nstyle instead of\n  #ifdef DEBUG\n    blah\n  #endif\nwhere possible because the former helps to find compilation issues quicker, that\u0027s why (2) is my favorite. \n\nHow about @ifs (and maybe @ifnot if it\u0027s easier to implement) instead of @ifdefs?\n  @if(TAGGED_SIZE_8_BYTES) optional_padding: uint32;\n  @if(!TAGGED_SIZE_8_BYTES) optional_padding: void;\n\n  @if(V8_DOUBLE_FIELDS_UNBOXING) layout_descriptor: LayoutDescriptor;\n  @if(!V8_DOUBLE_FIELDS_UNBOXING) layout_descriptor: void;\n\nBtw, does the stuff inside @if() have to be a real macro? I guess it\u0027s enough to require it to be a constexpr. It could even be written this way:\n  @if(kTaggedSize \u003d\u003d 8) optional_padding: uint32;\n  @if(kTaggedSize \u003d\u003d 4) optional_padding: void;\n\n  @if(FLAG_unbox_double_fields) layout_descriptor: LayoutDescriptor;\n  @if(!FLAG_unbox_double_fields) layout_descriptor: void;\n\nTobias, Seth, WDYT?",
      "parentUuid": "5b0d119c_0af76180",
      "revId": "21c1878f8dc2aecb06c53076c0e431acf9dc723e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b23a0b9_85e35d90",
        "filename": "src/objects/map-inl.h",
        "patchSetId": 16
      },
      "lineNbr": 52,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2019-05-14T17:55:03Z",
      "side": 1,
      "message": "Thanks again, and no worries about the back and forth, this is a great discussion :) . @ifdef is a bit of a misnomer at present, it really acts more like #if. I didn\u0027t call it @if because @if caused problems in the formatter, but that should be a pretty quick fix. The stuff inside the parentheses is not a real macro, just an identifier that needs to match one of the items in the list in torque-parser.cc. I doubt we\u0027d want to open up to using arbitrary expressions inside the parentheses, but I think updating to @if and @ifnot would be pretty easy.",
      "parentUuid": "34698816_28eac6cb",
      "revId": "21c1878f8dc2aecb06c53076c0e431acf9dc723e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54780595_43da34e8",
        "filename": "src/objects/map-inl.h",
        "patchSetId": 16
      },
      "lineNbr": 52,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2019-05-15T11:42:28Z",
      "side": 1,
      "message": "constexpr will fundamentally not work because the Torque compiler doesn\u0027t know the truth value of a constexpr bool.",
      "parentUuid": "5b23a0b9_85e35d90",
      "revId": "21c1878f8dc2aecb06c53076c0e431acf9dc723e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9af828f1_4ee54239",
        "filename": "src/objects/map-inl.h",
        "patchSetId": 16
      },
      "lineNbr": 52,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2019-05-15T17:57:17Z",
      "side": 1,
      "message": "Tobias, what do you think about Igor\u0027s idea of using @if and @ifnot to avoid needing to add both positive and negative cases in the BuildFlags list?",
      "parentUuid": "54780595_43da34e8",
      "revId": "21c1878f8dc2aecb06c53076c0e431acf9dc723e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "885575ae_df8e0119",
        "filename": "src/objects/map-inl.h",
        "patchSetId": 16
      },
      "lineNbr": 52,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2019-05-16T14:17:00Z",
      "side": 1,
      "message": "@if and @ifnot sounds good, @ifdef was indeed a bit of a misnomer and @ifnot is better than adding negated constants.",
      "parentUuid": "9af828f1_4ee54239",
      "revId": "21c1878f8dc2aecb06c53076c0e431acf9dc723e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "231254c8_73641925",
        "filename": "src/torque/torque-parser.cc",
        "patchSetId": 16
      },
      "lineNbr": 41,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2019-05-13T20:17:46Z",
      "side": 1,
      "message": "How about actually adding a preprocessor macro to globals.h for this? To maintain the convention that this just reifies preprocessor macros.",
      "range": {
        "startLine": 41,
        "startChar": 42,
        "endLine": 41,
        "endChar": 58
      },
      "revId": "21c1878f8dc2aecb06c53076c0e431acf9dc723e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe21dc31_512baccb",
        "filename": "src/torque/torque-parser.cc",
        "patchSetId": 16
      },
      "lineNbr": 41,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2019-05-14T17:00:03Z",
      "side": 1,
      "message": "Good idea, thanks.",
      "parentUuid": "231254c8_73641925",
      "range": {
        "startLine": 41,
        "startChar": 42,
        "endLine": 41,
        "endChar": 58
      },
      "revId": "21c1878f8dc2aecb06c53076c0e431acf9dc723e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fecdc596_0f50b528",
        "filename": "src/torque/torque-parser.cc",
        "patchSetId": 16
      },
      "lineNbr": 41,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2019-05-14T17:55:03Z",
      "side": 1,
      "message": "On second thought, I\u0027m not too sure about this. kTaggedSize is based on some logic including other constexpr values, so getting the preprocessor to know whether kTaggedSize is 8 would require duplicating some logic via #define that already exists via constexpr (for instance, we\u0027d need a preprocessor equivalent for determining kSystemPointerSize). Alternately, we could just `#define TAGGED_SIZE_8_BYTES (kTaggedSize \u003d\u003d 8)`, which is short and would work fine for this usage but would (perhaps surprisingly) always evaluate to false in #if directives.",
      "parentUuid": "fe21dc31_512baccb",
      "range": {
        "startLine": 41,
        "startChar": 42,
        "endLine": 41,
        "endChar": 58
      },
      "revId": "21c1878f8dc2aecb06c53076c0e431acf9dc723e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f01f0dfc_bc3da9bd",
        "filename": "src/torque/torque-parser.cc",
        "patchSetId": 16
      },
      "lineNbr": 41,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2019-05-15T11:42:28Z",
      "side": 1,
      "message": "I actually thought of using something like\n\n#if V8_TARGET_ARCH_64_BIT \u0026\u0026 !defined(V8_COMPRESS_POINTERS)\n#define TAGGED_SIZE_8_BYTES true\n#else ...\n\nand then having a static assert to make sure it\u0027s the same.",
      "parentUuid": "fecdc596_0f50b528",
      "range": {
        "startLine": 41,
        "startChar": 42,
        "endLine": 41,
        "endChar": 58
      },
      "revId": "21c1878f8dc2aecb06c53076c0e431acf9dc723e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a2bc305_4ea6eada",
        "filename": "src/torque/torque-parser.cc",
        "patchSetId": 16
      },
      "lineNbr": 41,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2019-05-15T12:06:51Z",
      "side": 1,
      "message": "Oh, yeah that\u0027s pretty simple, thanks for the detailed explanation. I must have been forgetting that V8_TARGET_ARCH_64_BIT already exists. And good point on using a static assert.",
      "parentUuid": "f01f0dfc_bc3da9bd",
      "range": {
        "startLine": 41,
        "startChar": 42,
        "endLine": 41,
        "endChar": 58
      },
      "revId": "21c1878f8dc2aecb06c53076c0e431acf9dc723e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2863292b_88f0413d",
        "filename": "src/torque/torque-parser.cc",
        "patchSetId": 16
      },
      "lineNbr": 41,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2019-05-15T17:57:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9a2bc305_4ea6eada",
      "range": {
        "startLine": 41,
        "startChar": 42,
        "endLine": 41,
        "endChar": 58
      },
      "revId": "21c1878f8dc2aecb06c53076c0e431acf9dc723e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}