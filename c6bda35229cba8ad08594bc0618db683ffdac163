{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "063e4fb4_1158fb98",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-02-24T15:06:59Z",
      "side": 1,
      "message": "+Santiago for the string wrapper case in lookup.cc",
      "revId": "c6bda35229cba8ad08594bc0618db683ffdac163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bfdd6ade_f17e80b5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2021-02-24T15:57:45Z",
      "side": 1,
      "message": "Let me know if I can provide more info on the String side of things.",
      "revId": "c6bda35229cba8ad08594bc0618db683ffdac163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e146e0f7_825e566d",
        "filename": "src/compiler/js-heap-broker.cc",
        "patchSetId": 9
      },
      "lineNbr": 3914,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2021-02-24T15:57:45Z",
      "side": 1,
      "message": "Would these STATIC_ASSERTs bring false sense of security? We are moving by method now instead of by class and it would be possible to not have consistency between `object`, `elements_kind` and `elements` if we move one of these to do direct reads e.g. GetElementsKind()",
      "range": {
        "startLine": 3914,
        "startChar": 4,
        "endLine": 3914,
        "endChar": 40
      },
      "revId": "c6bda35229cba8ad08594bc0618db683ffdac163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a037e3ba_6bfeea02",
        "filename": "src/compiler/js-heap-broker.cc",
        "patchSetId": 9
      },
      "lineNbr": 3914,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-25T07:38:39Z",
      "side": 1,
      "message": "You\u0027re right, there\u0027s no security guarantee. I\u0027m using them more as a reminder of which places to update once e.g. JSObject is no longer serialized.",
      "parentUuid": "e146e0f7_825e566d",
      "range": {
        "startLine": 3914,
        "startChar": 4,
        "endLine": 3914,
        "endChar": 40
      },
      "revId": "c6bda35229cba8ad08594bc0618db683ffdac163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d5c6275_bde5e845",
        "filename": "src/compiler/js-heap-broker.cc",
        "patchSetId": 9
      },
      "lineNbr": 3917,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-02-24T15:06:59Z",
      "side": 1,
      "message": "Please print a warning with TRACE_BROKER_MISSING so that we can trace such situations.\n\nDid you actually observe this case?",
      "revId": "c6bda35229cba8ad08594bc0618db683ffdac163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "94beac93_ab962e66",
        "filename": "src/compiler/js-heap-broker.cc",
        "patchSetId": 9
      },
      "lineNbr": 3917,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-25T07:38:39Z",
      "side": 1,
      "message": "Yes, it happens because the serializer only handles smi indices, while the optimization understands heap numbers too. Done.",
      "parentUuid": "8d5c6275_bde5e845",
      "revId": "c6bda35229cba8ad08594bc0618db683ffdac163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2a343b9_8d23ffc7",
        "filename": "src/compiler/js-heap-broker.cc",
        "patchSetId": 9
      },
      "lineNbr": 3929,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-02-24T15:06:59Z",
      "side": 1,
      "message": "It would be good if TryGetOwnConstantElement can also print these warnings when it gives up (but not when it successfully determines that the element doesn\u0027t exist).",
      "revId": "c6bda35229cba8ad08594bc0618db683ffdac163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ba30c48_83a334be",
        "filename": "src/compiler/js-heap-broker.cc",
        "patchSetId": 9
      },
      "lineNbr": 3929,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-02-26T14:04:25Z",
      "side": 1,
      "message": "Please do that, it will be very helpful to easily see which optimizations had to be skipped when we have to debug performance issues.",
      "parentUuid": "d2a343b9_8d23ffc7",
      "revId": "c6bda35229cba8ad08594bc0618db683ffdac163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb2cc965_83825290",
        "filename": "src/compiler/js-heap-broker.cc",
        "patchSetId": 9
      },
      "lineNbr": 3939,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-02-24T15:11:31Z",
      "side": 1,
      "message": "Can we now remove GetOwnElementFromHeap?",
      "revId": "c6bda35229cba8ad08594bc0618db683ffdac163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6fb8bf8c_79829883",
        "filename": "src/compiler/js-heap-broker.cc",
        "patchSetId": 9
      },
      "lineNbr": 3939,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-25T07:38:39Z",
      "side": 1,
      "message": "It unfortunately still has a few callsites.",
      "parentUuid": "eb2cc965_83825290",
      "revId": "c6bda35229cba8ad08594bc0618db683ffdac163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "97e6c275_cdd0173d",
        "filename": "src/compiler/js-heap-broker.cc",
        "patchSetId": 9
      },
      "lineNbr": 3939,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-02-26T14:04:25Z",
      "side": 1,
      "message": "Hmm, after this CL I think they are all essentially obsolete. Might require some refactoring though.",
      "parentUuid": "6fb8bf8c_79829883",
      "revId": "c6bda35229cba8ad08594bc0618db683ffdac163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b68897cd_84f48341",
        "filename": "src/compiler/serializer-for-background-compilation.cc",
        "patchSetId": 9
      },
      "lineNbr": 3327,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2021-02-24T15:57:45Z",
      "side": 1,
      "message": "Nice catch!",
      "range": {
        "startLine": 3327,
        "startChar": 0,
        "endLine": 3327,
        "endChar": 58
      },
      "revId": "c6bda35229cba8ad08594bc0618db683ffdac163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cdd3699d_451f36dd",
        "filename": "src/objects/lookup.cc",
        "patchSetId": 9
      },
      "lineNbr": 1329,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2021-02-24T15:57:45Z",
      "side": 1,
      "message": "typo: 3",
      "range": {
        "startLine": 1329,
        "startChar": 5,
        "endLine": 1329,
        "endChar": 6
      },
      "revId": "c6bda35229cba8ad08594bc0618db683ffdac163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "76fa8aa8_0be33cb5",
        "filename": "src/objects/lookup.cc",
        "patchSetId": 9
      },
      "lineNbr": 1329,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-25T07:38:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cdd3699d_451f36dd",
      "range": {
        "startLine": 1329,
        "startChar": 5,
        "endLine": 1329,
        "endChar": 6
      },
      "revId": "c6bda35229cba8ad08594bc0618db683ffdac163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46b82b1e_dda1480f",
        "filename": "src/objects/lookup.cc",
        "patchSetId": 9
      },
      "lineNbr": 1333,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-02-24T15:06:59Z",
      "side": 1,
      "message": "Please spell that out.",
      "range": {
        "startLine": 1333,
        "startChar": 37,
        "endLine": 1333,
        "endChar": 41
      },
      "revId": "c6bda35229cba8ad08594bc0618db683ffdac163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "01a8eac8_5110c68f",
        "filename": "src/objects/lookup.cc",
        "patchSetId": 9
      },
      "lineNbr": 1333,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-25T07:38:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "46b82b1e_dda1480f",
      "range": {
        "startLine": 1333,
        "startChar": 37,
        "endLine": 1333,
        "endChar": 41
      },
      "revId": "c6bda35229cba8ad08594bc0618db683ffdac163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40eab2d4_1c7e9b50",
        "filename": "src/objects/lookup.cc",
        "patchSetId": 9
      },
      "lineNbr": 1356,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-02-24T15:06:59Z",
      "side": 1,
      "message": "Is that a guess or did you look at benchmarks or the history of this TF optimization?",
      "range": {
        "startLine": 1355,
        "startChar": 59,
        "endLine": 1356,
        "endChar": 70
      },
      "revId": "c6bda35229cba8ad08594bc0618db683ffdac163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b4f2092_7ccc8889",
        "filename": "src/objects/lookup.cc",
        "patchSetId": 9
      },
      "lineNbr": 1356,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-25T07:38:39Z",
      "side": 1,
      "message": "It\u0027s an educated guess. I looked at the initial CL: https://chromium-review.googlesource.com/677603, and the motivation back then was frozen elements and string wrappers.\n\nDONT_DELETE|READ_ONLY dictionary elements seem like a very exotic case to optimize for.",
      "parentUuid": "40eab2d4_1c7e9b50",
      "range": {
        "startLine": 1355,
        "startChar": 59,
        "endLine": 1356,
        "endChar": 70
      },
      "revId": "c6bda35229cba8ad08594bc0618db683ffdac163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8719f09_f60caa18",
        "filename": "src/objects/lookup.cc",
        "patchSetId": 9
      },
      "lineNbr": 1356,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-02-26T14:04:25Z",
      "side": 1,
      "message": "I\u0027d hope so.",
      "parentUuid": "7b4f2092_7ccc8889",
      "range": {
        "startLine": 1355,
        "startChar": 59,
        "endLine": 1356,
        "endChar": 70
      },
      "revId": "c6bda35229cba8ad08594bc0618db683ffdac163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "302100d5_62b945df",
        "filename": "src/objects/lookup.cc",
        "patchSetId": 9
      },
      "lineNbr": 1370,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2021-02-24T15:57:45Z",
      "side": 1,
      "message": "The SharedStringAccessGuardIfNeeded acquires the string_access [1] shared lock from the isolate. The only place where the main thread acquires this is in MakeExternal. Therefore, what it is guarding against is the MakeExternal transition. I\u0027ll admit the comment in the code is not explicit about this so I marked an action item for myself to make it clear what\u0027s guarding.\n\nSince, from the BG thread, we would be reading only internalized strings we are guaranteed to have either an internalized external string, or an internalized non-external string (and they will remain in that way).\n\nWe did this to limit ourselves to the most common cases of strings that appeared, while not performing the optimization in the other cases. We do encounter non-internalized strings in the compiler, but it is rarer.\n\n[1]: https://source.chromium.org/chromium/chromium/src/+/master:v8/src/execution/isolate.h;l\u003d640;drc\u003d9d1a1d6154cae517f76de279682185c8abc30868\n\nWhat I\u0027d suggest is having a templatized version of the method with LocalIsolate/Isolate and then:\n1) Use that parameter for accessing the lock rather than using the string itself. It is faster, and the lock won\u0027t be acquired on the main thread (i.e. with the proper isolate). This is also solved by calling the String::Get method with a LocalIsoalte/Isolate parameter https://source.chromium.org/chromium/chromium/src/+/master:v8/src/objects/string-inl.h;l\u003d582;drc\u003d61219381be5d2405dcd1aac31fc60eaf6342896a\n2) In the lines above (maybe before the length check()) return {} if we have a LocalIsolate and the string is a non-internalized one. We haven\u0027t made sure those are safe to read from the BG yet. I think that we can make them safe but they are not safe yet.",
      "range": {
        "startLine": 1370,
        "startChar": 6,
        "endLine": 1370,
        "endChar": 67
      },
      "revId": "c6bda35229cba8ad08594bc0618db683ffdac163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b727a22_bd79f754",
        "filename": "src/objects/lookup.cc",
        "patchSetId": 9
      },
      "lineNbr": 1370,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-25T07:38:39Z",
      "side": 1,
      "message": "I see; what I wanted to prevent with this lock was all in-place rewrites of the string, including flattening and other shape changes. It feels like a string_access_ lock should protect these operations as well, wdyt?\n\nRe efficiency, we don\u0027t have a LocalIsolate here, how did you mean to templatize? Also, this method can run both on main and bg threads, depending on whether concurrent inlining is on.",
      "parentUuid": "302100d5_62b945df",
      "range": {
        "startLine": 1370,
        "startChar": 6,
        "endLine": 1370,
        "endChar": 67
      },
      "revId": "c6bda35229cba8ad08594bc0618db683ffdac163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dccd2f5e_4ebf2000",
        "filename": "src/objects/lookup.cc",
        "patchSetId": 9
      },
      "lineNbr": 1370,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2021-02-25T10:09:18Z",
      "side": 1,
      "message": "Re string_access_ lock, I guess it is theoretically possible to include those cases but we haven\u0027t taken a look at them. We would need to make sure that the main thread locks exclusively every time their contents are modified and between each possible transition (https://docs.google.com/document/d/1OzMXX-boAMssbCR3s2XsL4-wtX5LxbcagwFXmB6-ns0/edit#heading\u003dh.2wcr3outnpgu). They are quite a lot which is why we ended up only reading / locking for InternalizedStrings which is only recently being close to being done. We could re-assess if other string types are needed.\n\nRe Isolate, we have some cases where we call the same function with either an Isolate or a LocalIsolate (e.g. String::Get https://source.chromium.org/chromium/chromium/src/+/master:v8/src/objects/string-inl.h;l\u003d582;drc\u003d9c6d177a45e95e3072de79b5165055b0b955e569). We then do different things whether we have an Isolate or a LocalIsolate. Templating would just be a convenience for the actual solution of \"Have two methods, one that takes an Isolate, and one that takes a LocalIsolate\".\nProbably the TryGetOwnConstantElement method itself doesn\u0027t know if it\u0027s on the main thread or not. However, we know it from the js-heap-broker call using IsMainThread() https://source.chromium.org/chromium/chromium/src/+/master:v8/src/compiler/js-heap-broker.h;l\u003d318;drc\u003d6531b4f2fda5515c3315e50d1cfb709e607d53e6. We could do:\n  if (IsMainThread()) {\n    TryGetOwnConstantElement(broker()-\u003eisolate(), ...);\n  } else {\n    TryGetOwnConstantElement(broker()-\u003elocal_isolate(), ...);\n  }\n\nThis would help the string case, but we would need to check if we could use a LocalIsolate in the other places where {isolate} is being used.",
      "parentUuid": "8b727a22_bd79f754",
      "range": {
        "startLine": 1370,
        "startChar": 6,
        "endLine": 1370,
        "endChar": 67
      },
      "revId": "c6bda35229cba8ad08594bc0618db683ffdac163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03175f12_abf34dd8",
        "filename": "src/objects/lookup.cc",
        "patchSetId": 9
      },
      "lineNbr": 1370,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2021-02-25T12:22:44Z",
      "side": 1,
      "message": "FYI I created cleanup CLs to fix prompted by these comments:\nA) Naming \u0026 comments of SharedMutexes https://chromium-review.googlesource.com/c/v8/v8/+/2718145\nB) Unification of local_isolate calls https://chromium-review.googlesource.com/c/v8/v8/+/2718609",
      "parentUuid": "dccd2f5e_4ebf2000",
      "range": {
        "startLine": 1370,
        "startChar": 6,
        "endLine": 1370,
        "endChar": 67
      },
      "revId": "c6bda35229cba8ad08594bc0618db683ffdac163",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}