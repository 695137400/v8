{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6305c0a9_0638877e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1440073
      },
      "writtenOn": "2024-03-06T16:44:10Z",
      "side": 1,
      "message": "Hey Clemens!\nCould you maybe take just a very quick high-level look to see what you think of the current state and if this is something you also had in mind?\n\n\nNote: I didn\u0027t test if this behaves how it should and if I handled the separation of type- and instruction-generation properly.",
      "revId": "3026a5ac062052f412d252005f07cb6ea6df14b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bae447e8_f89d13c2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-03-06T16:52:28Z",
      "side": 1,
      "message": "I would propose to make this all static instead of dynamic, to avoid having to allocate a `std::vector` for every single decision, and to generally speed things up. The fuzzers will be separate binaries anyway.\n\nFor now I would propose to start with just enabling or disabling SIMD (to keep it simple), so having a `struct WasmModuleGenerationOptions { bool generate_simd; }`, and passing this around as a template argument: `template\u003cWasmModuleGenerationOptions options\u003e base::Vector\u003cuint8_t\u003e GenerateRandomWasmModule(...);`.\nThis makes it nicely extensible and readable.\n\nGenerating the arrays statically based on the template argument requires some careful coding, but can be done. Let me know if we should pair-program together a bit.",
      "revId": "3026a5ac062052f412d252005f07cb6ea6df14b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2423c4bf_af342655",
        "filename": "src/wasm/fuzzing/random-module-generation.cc",
        "patchSetId": 1
      },
      "lineNbr": 168,
      "author": {
        "id": 1440073
      },
      "writtenOn": "2024-03-06T16:44:10Z",
      "side": 1,
      "message": "Make a struct out of these:\n\n```\nstruct TypeLimitations {\n   bool include_numeric_types;\n   ...\n}\n```",
      "range": {
        "startLine": 161,
        "startChar": 0,
        "endLine": 168,
        "endChar": 56
      },
      "revId": "3026a5ac062052f412d252005f07cb6ea6df14b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a34a75fd_f2ecb6c5",
        "filename": "src/wasm/fuzzing/random-module-generation.cc",
        "patchSetId": 1
      },
      "lineNbr": 2404,
      "author": {
        "id": 1440073
      },
      "writtenOn": "2024-03-06T16:44:10Z",
      "side": 1,
      "message": "I am unsure about this separation",
      "range": {
        "startLine": 2396,
        "startChar": 0,
        "endLine": 2404,
        "endChar": 63
      },
      "revId": "3026a5ac062052f412d252005f07cb6ea6df14b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3562d28_ad8db537",
        "filename": "src/wasm/fuzzing/random-module-generation.h",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1440073
      },
      "writtenOn": "2024-03-06T16:44:10Z",
      "side": 1,
      "message": "Should we add strings here too? Or should it be a default with wasmGC or always a default?\n\nWhat about exceptions? (kExn, kNoExn). Should they be part of the general setup of the fuzzer?",
      "range": {
        "startLine": 22,
        "startChar": 7,
        "endLine": 22,
        "endChar": 20
      },
      "revId": "3026a5ac062052f412d252005f07cb6ea6df14b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:approval_code-owners"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "3026a5ac062052f412d252005f07cb6ea6df14b1",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "3026a5ac062052f412d252005f07cb6ea6df14b1",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "3026a5ac062052f412d252005f07cb6ea6df14b1",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "3026a5ac062052f412d252005f07cb6ea6df14b1",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}