{
  "comments": [
    {
      "key": {
        "uuid": "857c0991_a8265481",
        "filename": "BUILD.gn",
        "patchSetId": 41
      },
      "lineNbr": 2677,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-21T08:07:13Z",
      "side": 1,
      "message": "Feels weird to have non-arm-specific files in the arm/arm64-specific sections. Let\u0027s just make constant-pool.{h,cc} global and #ifdef target-specific parts?",
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9fa5d47c_7aaa2c95",
        "filename": "src/arm/assembler-arm.cc",
        "patchSetId": 41
      },
      "lineNbr": 562,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-21T08:07:13Z",
      "side": 1,
      "message": "Let\u0027s do this in the .h :)\n\n virtual ~Assembler() \u003d default;",
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ba421ce_b8efe1ae",
        "filename": "src/arm/assembler-arm.cc",
        "patchSetId": 41
      },
      "lineNbr": 1402,
      "author": {
        "id": 1221720
      },
      "writtenOn": "2018-08-20T13:23:11Z",
      "side": 1,
      "message": "This doesn\u0027t need to change, it can stay as before, can\u0027t it?",
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2df27852_d13f9147",
        "filename": "src/arm/assembler-arm.cc",
        "patchSetId": 41
      },
      "lineNbr": 5042,
      "author": {
        "id": 1221720
      },
      "writtenOn": "2018-08-20T13:23:11Z",
      "side": 1,
      "message": "Here and later in this file, could you use is_const_pool_blocked() and is_const_pool_empty()?",
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27f0b75a_6ee6018a",
        "filename": "src/arm/assembler-arm.cc",
        "patchSetId": 41
      },
      "lineNbr": 5122,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-21T08:07:13Z",
      "side": 1,
      "message": "So this clears as well? Suggestion: EmitAndClear().",
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "871755ae_2436819c",
        "filename": "src/arm/assembler-arm.cc",
        "patchSetId": 41
      },
      "lineNbr": 5182,
      "author": {
        "id": 1221720
      },
      "writtenOn": "2018-08-20T13:23:11Z",
      "side": 1,
      "message": "Isn\u0027t this case obsolete now?",
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17351922_5a9fa5f4",
        "filename": "src/arm/assembler-arm.cc",
        "patchSetId": 41
      },
      "lineNbr": 5193,
      "author": {
        "id": 1221720
      },
      "writtenOn": "2018-08-20T13:23:11Z",
      "side": 1,
      "message": "Can you assert that Entry64Count() is zero instead?",
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "598243b0_41243e16",
        "filename": "src/arm/assembler-arm.cc",
        "patchSetId": 41
      },
      "lineNbr": 5209,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-21T08:07:13Z",
      "side": 1,
      "message": "Nit: return is not needed ;)",
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0384e3e_6bc3b4e3",
        "filename": "src/arm/assembler-arm.cc",
        "patchSetId": 41
      },
      "lineNbr": 5220,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-21T08:07:13Z",
      "side": 1,
      "message": "What\u0027s an opportunity dist?\n\n(It\u0027s great to have these constants well-named and in one place btw :)",
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5843b511_8cd5dfca",
        "filename": "src/arm/assembler-arm.h",
        "patchSetId": 41
      },
      "lineNbr": 1502,
      "author": {
        "id": 1221720
      },
      "writtenOn": "2018-08-20T13:23:11Z",
      "side": 1,
      "message": "Can this also be shared?",
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06085530_74ba05ea",
        "filename": "src/arm64/assembler-arm64.cc",
        "patchSetId": 41
      },
      "lineNbr": 352,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-21T08:07:13Z",
      "side": 1,
      "message": "Nit: No need for unresolved_branches here, is there?",
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f19ad43_9f08d507",
        "filename": "src/arm64/assembler-arm64.cc",
        "patchSetId": 41
      },
      "lineNbr": 4585,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-21T08:07:13Z",
      "side": 1,
      "message": "With the refactored block below this comment is a bit confusing. IMO we can remove it.",
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5ac7d83_86f69a3e",
        "filename": "src/arm64/assembler-arm64.cc",
        "patchSetId": 41
      },
      "lineNbr": 4596,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-21T08:07:13Z",
      "side": 1,
      "message": "Here as well. Please add an enum at least for require_jump here and elsewhere. \n\nBy the way, why do we pass \u0027true\u0027 to ComputeSize when we are actually passed a \u0027require_jump\u0027 parameter in this function? We pass in require_jump on arm at least.",
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73635774_dcb7d586",
        "filename": "src/arm64/assembler-arm64.cc",
        "patchSetId": 41
      },
      "lineNbr": 4602,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-21T08:07:13Z",
      "side": 1,
      "message": "What is the 1 * kInstrSize? It\u0027s not added on arm.",
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d86f93c_17a93bcf",
        "filename": "src/arm64/assembler-arm64.cc",
        "patchSetId": 41
      },
      "lineNbr": 4788,
      "author": {
        "id": 1221720
      },
      "writtenOn": "2018-08-20T13:23:11Z",
      "side": 1,
      "message": "If I\u0027m not mistaken, the marker now includes the size of the marker itself (taken into account in ComputeSize). Before, it didn\u0027t.",
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0dc51ad6_2178c85f",
        "filename": "src/arm64/assembler-arm64.cc",
        "patchSetId": 41
      },
      "lineNbr": 4799,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-21T08:07:13Z",
      "side": 1,
      "message": "Nit: prologue_size",
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28b7dfca_5b60d6b5",
        "filename": "src/arm64/assembler-arm64.h",
        "patchSetId": 41
      },
      "lineNbr": 3382,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-21T08:07:13Z",
      "side": 1,
      "message": "I realize this is old code, but these calls (and CheckVeneerPool above) are super-unreadable :(",
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13a6ea2b_c69933d5",
        "filename": "src/arm64/assembler-arm64.h",
        "patchSetId": 41
      },
      "lineNbr": 3413,
      "author": {
        "id": 1221720
      },
      "writtenOn": "2018-08-20T13:23:11Z",
      "side": 1,
      "message": "Since we don\u0027t add 32-bit entries, should there be a DCHECK that Entry32Count is zero instead?",
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b45bea67_624b0379",
        "filename": "src/arm64/assembler-arm64.h",
        "patchSetId": 41
      },
      "lineNbr": 3421,
      "author": {
        "id": 1221720
      },
      "writtenOn": "2018-08-20T13:23:11Z",
      "side": 1,
      "message": "This should be kApproxDistToPool64.",
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c578fec9_a8901066",
        "filename": "src/constant-pool.cc",
        "patchSetId": 41
      },
      "lineNbr": 44,
      "author": {
        "id": 1221720
      },
      "writtenOn": "2018-08-20T13:23:11Z",
      "side": 1,
      "message": "It doesn\u0027t look like this will request pool emission after the next instruction. The number of entries is not checked in ShouldEmitNow, and next_check_ doesn\u0027t seem to be used in that calculation either. Am I missing something?",
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c242f71c_40b86c5b",
        "filename": "src/constant-pool.cc",
        "patchSetId": 41
      },
      "lineNbr": 58,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-21T08:07:13Z",
      "side": 1,
      "message": "Do we still protect from veneer pools here?",
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a63ca85f_ec8272a9",
        "filename": "src/constant-pool.cc",
        "patchSetId": 41
      },
      "lineNbr": 105,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-21T08:07:13Z",
      "side": 1,
      "message": "Nit: Less cognitive load:\n\n if (blocked_nesting_ \u003d\u003d 0) next_check_ \u003d kMaxInt;\n blocked_nesting_++;",
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97614bdf_0358cf67",
        "filename": "src/constant-pool.cc",
        "patchSetId": 41
      },
      "lineNbr": 113,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-21T08:07:13Z",
      "side": 1,
      "message": "Likewise",
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2ad4367_2faf44e1",
        "filename": "src/constant-pool.cc",
        "patchSetId": 41
      },
      "lineNbr": 168,
      "author": {
        "id": 1221720
      },
      "writtenOn": "2018-08-20T13:23:11Z",
      "side": 1,
      "message": "Could you elaborate in the comment on why you calculate the distance from *any* of the entries instead of the first one? I think it would be useful if revisiting the code in the future.\n\nI can think of two different reasons:\n1) the entries might be emitted out of order\n2) when mixing 64-bit entries with 32-bit instructions that access them, even if entries are kept in order, it wouldn\u0027t be enough to check that the first entry is within the range of its use.\nPerhaps there\u0027s more obvious reasons, but these could cause subtle bugs so they\u0027d be useful to mention.",
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d36f9783_dffbf3fa",
        "filename": "src/constant-pool.cc",
        "patchSetId": 41
      },
      "lineNbr": 175,
      "author": {
        "id": 1221720
      },
      "writtenOn": "2018-08-20T13:23:11Z",
      "side": 1,
      "message": "I wonder if the pool_end calculation could be relaxed a little - can we just assume the worst case, that we always need alignment and a jump? kCheckConstPoolInterval and kOpportunityDistToPool already mean that where a pool is emitted is not very precise.",
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "903dfd52_f247f698",
        "filename": "src/constant-pool.cc",
        "patchSetId": 41
      },
      "lineNbr": 178,
      "author": {
        "id": 1221720
      },
      "writtenOn": "2018-08-20T13:23:11Z",
      "side": 1,
      "message": "Will there be cases where Entry64Count and Entry32Count will both be non-zero for an architecture? This isn\u0027t the case for arm and arm64 so effectively this case is not tested currently, right?\n\nWould it make sense to set kMaxDistToPoolX, kOpportunityDistToPoolX etc to a known constant (e.g. 0 which would always force returning true here) for the unused type of entry, and have a DCHECK that if the entry count is non-zero then these constants have to be properly defined?",
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d56eefe8_a7462b22",
        "filename": "src/constant-pool.cc",
        "patchSetId": 41
      },
      "lineNbr": 202,
      "author": {
        "id": 1221720
      },
      "writtenOn": "2018-08-20T13:23:11Z",
      "side": 1,
      "message": "Will kInstrSize work for architectures other than arm/arm64?",
      "range": {
        "startLine": 202,
        "startChar": 50,
        "endLine": 202,
        "endChar": 61
      },
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be4d2130_37c93f63",
        "filename": "src/constant-pool.cc",
        "patchSetId": 41
      },
      "lineNbr": 218,
      "author": {
        "id": 1221720
      },
      "writtenOn": "2018-08-20T13:23:11Z",
      "side": 1,
      "message": "I think last_entry_64 is off by 4. Could this be written as:\nsize_t pool_end \u003d pc_offset + ComputeSize(...);\nsize_t last_entry_32 \u003d pool_end - sizeof(uint32_t);\nsize_t last_entry_64 \u003d pool_end - Entry32Count() * sizeof(uint32_t) - sizeof(uint64_t);\n\n(I find it a bit easier to read sizeof(uint32_t) instead of 4 as the entry size and not an instruction size or alignment, or something else).",
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17ece30b_173d96c3",
        "filename": "src/constant-pool.h",
        "patchSetId": 41
      },
      "lineNbr": 1,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-21T08:07:13Z",
      "side": 1,
      "message": "Please don\u0027t forget to also move remaining constant pool things from assembler.h (ConstantPoolBuilder, ConstantPoolEntry) in here and remove the reloc-info.h include from there. Also fine in a follow-up though if you prefer.",
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "935164e1_ae8b53e4",
        "filename": "src/constant-pool.h",
        "patchSetId": 41
      },
      "lineNbr": 45,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-21T08:07:13Z",
      "side": 1,
      "message": "Nitting on old code: I\u0027d prefer a named constant instead of magic 0. On x64 we now use \u0027ConstPool::kDummyDispValue\u0027 although the naming could still be improved :)",
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f160e07b_4bc30a64",
        "filename": "src/constant-pool.h",
        "patchSetId": 41
      },
      "lineNbr": 93,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-21T08:07:13Z",
      "side": 1,
      "message": "Nit: The callsites would be much clearer if this returned an enum, e.g. RELOC_INFO_REQUIRED and NO_WRITE_NEEDED or similar. Otherwise, the function name doesn\u0027t give any clue what the return value means.",
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f39d0ffd_a35afc31",
        "filename": "src/constant-pool.h",
        "patchSetId": 41
      },
      "lineNbr": 112,
      "author": {
        "id": 1221720
      },
      "writtenOn": "2018-08-20T13:23:11Z",
      "side": 1,
      "message": "It\u0027d be good to have a warning here about using BlockFor() with caution.\n\narm and arm64 perform the check for pool emission in different places as far as I can tell - arm before emitting an instruction, arm64 after emitting an instruction. So something like:\n\n__ Add(x0,x0,x0);\nconstpool_.BlockFor(1);\n__ Add(x1,x1,x1);\n\ndoes not mean there will not be a pool between the two add instructions in arm64.\n\nThere is also always the risk we can block the pool for too long with this method.",
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "275826a7_c6ce81e3",
        "filename": "src/constant-pool.h",
        "patchSetId": 41
      },
      "lineNbr": 167,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-21T08:07:13Z",
      "side": 1,
      "message": "The value is a pc offset? Please either add a typedef or a short comment.",
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a068820_41fdbf90",
        "filename": "src/constant-pool.h",
        "patchSetId": 41
      },
      "lineNbr": 170,
      "author": {
        "id": 1221720
      },
      "writtenOn": "2018-08-20T13:23:11Z",
      "side": 1,
      "message": "It feels like next_check_ does not really belong in the pool at the moment, since the pool itself does not check against it (only updates it).\n\nIs it possible to hide next_check_ from the assembler - pass the pc_offset to the pool and have the pool do the check instead?",
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d30b0f2_7c2944df",
        "filename": "test/cctest/test-assembler-arm64.cc",
        "patchSetId": 41
      },
      "lineNbr": 6772,
      "author": {
        "id": 1221720
      },
      "writtenOn": "2018-08-20T13:23:11Z",
      "side": 1,
      "message": "I\u0027m not sure I understand - why does the order of the branch and the NOPs matter for constant pool emission (and specifically opportunity emission)?",
      "revId": "10d769bd6b2b33dad04c37a17cf2d308d3758671",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}