{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "88c37972_e52dde4a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-03-11T14:55:03Z",
      "side": 1,
      "message": "Had a quick skim and looking good in general, nice work! Will have a closer look on Monday, maybe the design doc is also ready by then ;)",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3165847_0f0331cb",
        "filename": "src/baseline/arm64/baseline-assembler-arm64-inl.h",
        "patchSetId": 17
      },
      "lineNbr": 114,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-03-15T09:07:41Z",
      "side": 1,
      "message": "This changes behavior in the non-short-builtin-calls case from calling through the entry table to calling to the target address directly; intentional? Same for TailCallBuiltin and on x64.",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ce82e11_90b8efcf",
        "filename": "src/baseline/arm64/baseline-assembler-arm64-inl.h",
        "patchSetId": 17
      },
      "lineNbr": 114,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-03-16T14:28:06Z",
      "side": 1,
      "message": "Good point. Done.",
      "parentUuid": "c3165847_0f0331cb",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b70126c_2e81dc81",
        "filename": "src/codegen/arm64/macro-assembler-arm64.cc",
        "patchSetId": 17
      },
      "lineNbr": 1775,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-03-15T09:07:41Z",
      "side": 1,
      "message": "Please update the comment.",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "833e7c4c_517fef48",
        "filename": "src/codegen/arm64/macro-assembler-arm64.cc",
        "patchSetId": 17
      },
      "lineNbr": 1775,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-03-16T14:28:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5b70126c_2e81dc81",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62e148e0_a38051d1",
        "filename": "src/codegen/arm64/macro-assembler-arm64.cc",
        "patchSetId": 17
      },
      "lineNbr": 1777,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-03-15T09:07:41Z",
      "side": 1,
      "message": "Afaict this isn\u0027t used outside TA so the change seems unnecessary.",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9c5c09f4_27bbb8eb",
        "filename": "src/codegen/arm64/macro-assembler-arm64.cc",
        "patchSetId": 17
      },
      "lineNbr": 1777,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-03-16T14:28:06Z",
      "side": 1,
      "message": "This is necessary in order to get access to the options().code_range value.",
      "parentUuid": "62e148e0_a38051d1",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31ced19f_0d210278",
        "filename": "src/codegen/arm64/macro-assembler-arm64.cc",
        "patchSetId": 17
      },
      "lineNbr": 1780,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-03-15T09:07:41Z",
      "side": 1,
      "message": "Suggestion (optional): with a third case entering the mix I\u0027d suggest refactoring to\n\n switch (rmode) {\n  case WASM_CALL:\n  case WASM_STUB_CALL:\n   ..\n  case RUNTIME_ENTRY:\n   ..\n  default:\n   ..\n }\n\nOr some other way that\u0027s more obvious than the nested ifs.",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1b010444_5d652d1c",
        "filename": "src/codegen/arm64/macro-assembler-arm64.cc",
        "patchSetId": 17
      },
      "lineNbr": 1780,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-03-16T14:28:06Z",
      "side": 1,
      "message": "Restructured ifs. Done.",
      "parentUuid": "31ced19f_0d210278",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f9dc78b_db0f7071",
        "filename": "src/codegen/arm64/macro-assembler-arm64.cc",
        "patchSetId": 17
      },
      "lineNbr": 1783,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-03-15T09:07:41Z",
      "side": 1,
      "message": "Comment about RUNTIME_ENTRY: I was confused how this works, until I realized RUNTIME_ENTRY is currently unused (besides cctest).\n\nFor the new use you are adding here (i.e. unembedded builtin targets), the old name doesn\u0027t fit. Please rename to UNEMBEDDED_BUILTIN_ENTRY or so.",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de3350da_07e88f1b",
        "filename": "src/codegen/arm64/macro-assembler-arm64.cc",
        "patchSetId": 17
      },
      "lineNbr": 1783,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-03-16T14:28:06Z",
      "side": 1,
      "message": "Let me do the renaming in a follow-up CL. I added respective TODOs in reloc-info.h.",
      "parentUuid": "7f9dc78b_db0f7071",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3b12743_5b5296f3",
        "filename": "src/codegen/arm64/macro-assembler-arm64.cc",
        "patchSetId": 17
      },
      "lineNbr": 1785,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-03-15T09:07:41Z",
      "side": 1,
      "message": "Please comment here or above what we encode (code-range-start to target offset), and when this can happen (e.g. it doesn\u0027t happen for builtin-to-builtin calls, and not during mksnapshot; it does happen at runtime for code-to-builtin calls).\n\nWhen is the code-range-to-target offset translated into the final offset? A pointer to that would be nice too.",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "613780e0_80bb6a1c",
        "filename": "src/codegen/arm64/macro-assembler-arm64.cc",
        "patchSetId": 17
      },
      "lineNbr": 1785,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-03-16T14:28:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f3b12743_5b5296f3",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d36287b_382d0267",
        "filename": "src/codegen/arm64/macro-assembler-arm64.cc",
        "patchSetId": 17
      },
      "lineNbr": 1809,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-03-15T09:07:41Z",
      "side": 1,
      "message": "`cond` is ignored, please either handle it or CHECK(cond \u003d\u003d always).",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2506fbe8_aecde163",
        "filename": "src/codegen/arm64/macro-assembler-arm64.cc",
        "patchSetId": 17
      },
      "lineNbr": 1809,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-03-16T14:28:06Z",
      "side": 1,
      "message": "Good catch! Thanks!",
      "parentUuid": "2d36287b_382d0267",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb06740b_6891e2c0",
        "filename": "src/codegen/arm64/macro-assembler-arm64.cc",
        "patchSetId": 17
      },
      "lineNbr": 1923,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-03-15T09:07:41Z",
      "side": 1,
      "message": "IMO these conditions require explanation. \n\n- enable_root_array_delta_access: I don\u0027t see the connection. IIUC the short-call mechanism doesn\u0027t use the root register, and what you actually want to check is \u0027not currently in mksnapshot\u0027? You could either check Isolate::IsGeneratingEmbeddedBuiltins().\n\nOr add AssemblerOptions::short_builtin_calls and initialize that properly based on FLAG_short_builtin_calls etc. This is probably most consistent.\n\n- code_range_start: This is probably the same as above and could be dropped?",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "662ad421_6fcd458d",
        "filename": "src/codegen/arm64/macro-assembler-arm64.cc",
        "patchSetId": 17
      },
      "lineNbr": 1923,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-03-16T14:28:06Z",
      "side": 1,
      "message": "Good idea! Thanks!",
      "parentUuid": "eb06740b_6891e2c0",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e15c9c73_330ad077",
        "filename": "src/codegen/arm64/macro-assembler-arm64.cc",
        "patchSetId": 17
      },
      "lineNbr": 1942,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-03-15T09:07:41Z",
      "side": 1,
      "message": "Same here",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3bd125a0_5e54a6b9",
        "filename": "src/codegen/arm64/macro-assembler-arm64.cc",
        "patchSetId": 17
      },
      "lineNbr": 1942,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-03-16T14:28:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e15c9c73_330ad077",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec513d9a_41b93094",
        "filename": "src/codegen/arm64/macro-assembler-arm64.cc",
        "patchSetId": 17
      },
      "lineNbr": 1947,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-03-15T09:07:41Z",
      "side": 1,
      "message": "Please extend this comment, it\u0027s not clear to me what it\u0027s saying. What\u0027s the benefit? Is this SP-specific?",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3f15069_7a77b26a",
        "filename": "src/codegen/arm64/macro-assembler-arm64.cc",
        "patchSetId": 17
      },
      "lineNbr": 1947,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-03-16T14:28:06Z",
      "side": 1,
      "message": "This is CFI-specific stuff. Added a comment.",
      "parentUuid": "ec513d9a_41b93094",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83c1a303_65bc5499",
        "filename": "src/codegen/reloc-info.h",
        "patchSetId": 17
      },
      "lineNbr": 68,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-03-11T14:55:03Z",
      "side": 1,
      "message": "At some spot we should define properties of \u0027on-heap embedded builtins\u0027 -\u003e they\u0027re still immortal-immovable, live in Code space, and still contain only instruction streams and not Code objects, but are no longer embedded.",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15056a60_5361d6fc",
        "filename": "src/codegen/reloc-info.h",
        "patchSetId": 17
      },
      "lineNbr": 68,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-03-15T09:07:41Z",
      "side": 1,
      "message": "Suggest in another comment: just rename to a more appropriate name, it\u0027s no longer used for actual runtime entries.",
      "parentUuid": "83c1a303_65bc5499",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c0e7ca1b_04a918c1",
        "filename": "src/codegen/reloc-info.h",
        "patchSetId": 17
      },
      "lineNbr": 68,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-03-16T14:28:06Z",
      "side": 1,
      "message": "Let me add a TODO for now and rename this in a follow-up CL to avoid too much of a churn.",
      "parentUuid": "15056a60_5361d6fc",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3afd6bcb_6c295295",
        "filename": "src/codegen/x64/assembler-x64.cc",
        "patchSetId": 17
      },
      "lineNbr": 1455,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-03-15T09:07:41Z",
      "side": 1,
      "message": "If renaming RUNTIME_ENTRY, this should be renamed too. The   `DCHECK_NE(options().code_range_start, 0);` should move inside it since that\u0027s where it actually matters.",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a91edfdf_f411da6a",
        "filename": "src/codegen/x64/assembler-x64.cc",
        "patchSetId": 17
      },
      "lineNbr": 1455,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-03-16T14:28:06Z",
      "side": 1,
      "message": "Done here and in call implementation.\nAdded TODO about renaming.",
      "parentUuid": "3afd6bcb_6c295295",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a57fdca2_fc2f56a1",
        "filename": "src/codegen/x64/macro-assembler-x64.cc",
        "patchSetId": 17
      },
      "lineNbr": 1661,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-03-15T09:07:41Z",
      "side": 1,
      "message": "nit: are these DCHECKs helpful? They just seem to be restating the obvious.",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9b4c4811_c1754290",
        "filename": "src/codegen/x64/macro-assembler-x64.cc",
        "patchSetId": 17
      },
      "lineNbr": 1661,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-03-16T14:28:06Z",
      "side": 1,
      "message": "It\u0027s a leftover. Removed.",
      "parentUuid": "a57fdca2_fc2f56a1",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16588135_7246fccb",
        "filename": "src/codegen/x64/macro-assembler-x64.cc",
        "patchSetId": 17
      },
      "lineNbr": 1708,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-03-15T09:07:41Z",
      "side": 1,
      "message": "Same comments as for arm64 here and below.",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "27833939_3657ed57",
        "filename": "src/codegen/x64/macro-assembler-x64.cc",
        "patchSetId": 17
      },
      "lineNbr": 1708,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-03-16T14:28:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "16588135_7246fccb",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d5f921c_11023c0d",
        "filename": "src/codegen/x64/macro-assembler-x64.h",
        "patchSetId": 17
      },
      "lineNbr": 528,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-03-11T14:55:03Z",
      "side": 1,
      "message": "Does this new overload help in this CL? We could simply remove it and possibly do the change to Builtins::Name later, right?",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a028552_723c797a",
        "filename": "src/codegen/x64/macro-assembler-x64.h",
        "patchSetId": 17
      },
      "lineNbr": 528,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-03-16T14:28:06Z",
      "side": 1,
      "message": "I did this here in order to address Toon\u0027s offline comment to make the code look nicer on Sparkplug side. I think we can keep this change until we migrate to Builtins::Name builtin_index everywhere.",
      "parentUuid": "0d5f921c_11023c0d",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ed3e791_6bf5d8a6",
        "filename": "src/common/globals.h",
        "patchSetId": 17
      },
      "lineNbr": 107,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-03-11T14:55:03Z",
      "side": 1,
      "message": "Why not check this in BUILD.gn along with other similar feature implications?",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "73945084_1ec2d822",
        "filename": "src/common/globals.h",
        "patchSetId": 17
      },
      "lineNbr": 107,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-03-16T14:28:06Z",
      "side": 1,
      "message": "Added the assert to the BUILD.gn to fail earlier, but let\u0027s leave this error here.",
      "parentUuid": "2ed3e791_6bf5d8a6",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6abc4c3_7add422c",
        "filename": "src/execution/isolate.cc",
        "patchSetId": 17
      },
      "lineNbr": 3363,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-03-15T09:07:41Z",
      "side": 1,
      "message": "When is embedded_blob_code_ \u003d\u003d nullptr?",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "279936be_87baf9c9",
        "filename": "src/execution/isolate.cc",
        "patchSetId": 17
      },
      "lineNbr": 3363,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-03-16T14:28:06Z",
      "side": 1,
      "message": "Ah! Seems to be a leftover. Done.",
      "parentUuid": "e6abc4c3_7add422c",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c52f50d8_ace73176",
        "filename": "src/execution/isolate.cc",
        "patchSetId": 17
      },
      "lineNbr": 3370,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-03-11T14:55:03Z",
      "side": 1,
      "message": "Feels like this function should go into heap/ since it\u0027s closely related to code space logic.",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af0784ef_aeb2c21a",
        "filename": "src/execution/isolate.cc",
        "patchSetId": 17
      },
      "lineNbr": 3370,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-03-16T14:28:06Z",
      "side": 1,
      "message": "Given that \na) MemoryAllocator and Heap are not aware of the EmbeddedBlob business,\nb) in the end we have to set update fields,\nc) simplicity of the code,\n\nI think it\u0027s ok to have this remapping code in the Isolate.",
      "parentUuid": "c52f50d8_ace73176",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5de86731_e941f34d",
        "filename": "src/execution/isolate.cc",
        "patchSetId": 17
      },
      "lineNbr": 3375,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-03-15T09:07:41Z",
      "side": 1,
      "message": "A bit confused by this condition. Can this ever happen? Why 8? Code range sizes are fixed, no? Also, why not just make this a CHECK instead of `if (cond) V8::Fatal()`?\n\nI\u0027d suggest just removing this block.",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6d46f767_65a640dd",
        "filename": "src/execution/isolate.cc",
        "patchSetId": 17
      },
      "lineNbr": 3375,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-03-16T14:28:06Z",
      "side": 1,
      "message": "The code range size is configurable via API. Indeed, let\u0027s simplify this. Having just\n  CHECK_LE(embedded_blob_code_size_, code_range.size())\nshould be enough.",
      "parentUuid": "5de86731_e941f34d",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c1c967e_ca546ccf",
        "filename": "src/execution/isolate.cc",
        "patchSetId": 17
      },
      "lineNbr": 3377,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-03-15T09:07:41Z",
      "side": 1,
      "message": "nit: \u0027Blob\u0027, also the camel-case name is not really used anywhere else. I\u0027d prefer just \u0027The embedded code blob doesn\u0027t ...\u0027.",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de87d89b_016e6e44",
        "filename": "src/execution/isolate.cc",
        "patchSetId": 17
      },
      "lineNbr": 3377,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-03-16T14:28:06Z",
      "side": 1,
      "message": "I turned the condition into CHECK, so the error message is gone.",
      "parentUuid": "5c1c967e_ca546ccf",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "464bc8a0_1fe2c3b3",
        "filename": "src/execution/isolate.cc",
        "patchSetId": 17
      },
      "lineNbr": 3382,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-03-17T07:45:55Z",
      "side": 1,
      "message": "One question I still have is, do you ensure that these code pages are never allocated for real Code in the future?",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d075fee0_19061cbc",
        "filename": "src/execution/isolate.cc",
        "patchSetId": 17
      },
      "lineNbr": 3382,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-03-17T07:47:12Z",
      "side": 1,
      "message": "(Just to reiterate I think this should be in heap/. We are messing with a heap space here.)",
      "parentUuid": "464bc8a0_1fe2c3b3",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81dbeea1_e9d5d980",
        "filename": "src/execution/isolate.cc",
        "patchSetId": 17
      },
      "lineNbr": 3382,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2021-03-17T08:19:00Z",
      "side": 1,
      "message": "+1 I also don\u0027t see how we prevent allocating other code objects in this range.",
      "parentUuid": "d075fee0_19061cbc",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3457cebd_38f27614",
        "filename": "src/execution/isolate.cc",
        "patchSetId": 17
      },
      "lineNbr": 3382,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-03-17T08:27:37Z",
      "side": 1,
      "message": "When we have a code_range() the code_page_allocator is a BoundedPageAllocator within that code range. It guarantees that the pages will not be allocated second time until we free them.\nAnd when we don\u0027t have a code range (and therefore the proper code_page_allocator) then the whole story with remapping doesn\u0027t make sense and doesn\u0027t happen.",
      "parentUuid": "81dbeea1_e9d5d980",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8ac5447_6d049df7",
        "filename": "src/execution/isolate.cc",
        "patchSetId": 17
      },
      "lineNbr": 3382,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-03-17T08:37:19Z",
      "side": 1,
      "message": "Ah! Good catch! I forgot to allocate those pages before I started manipulating with the permissions.",
      "parentUuid": "3457cebd_38f27614",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab101572_00e963ef",
        "filename": "src/execution/isolate.cc",
        "patchSetId": 17
      },
      "lineNbr": 3620,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-03-11T14:55:03Z",
      "side": 1,
      "message": "Given the impl I\u0027d suggest \u0027MaybeRemap...\u0027",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8872fac2_c70632ed",
        "filename": "src/execution/isolate.cc",
        "patchSetId": 17
      },
      "lineNbr": 3620,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-03-16T14:28:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ab101572_00e963ef",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "583480cc_2d3503a4",
        "filename": "src/objects/code.cc",
        "patchSetId": 17
      },
      "lineNbr": 156,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-03-15T09:07:41Z",
      "side": 1,
      "message": "Builtin Code objects can be in RO space, I\u0027m curious why GetIsolateFromWritableObject doesn\u0027t crash there.",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d63c5725_b1643ec0",
        "filename": "src/objects/code.cc",
        "patchSetId": 17
      },
      "lineNbr": 156,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-03-16T14:28:06Z",
      "side": 1,
      "message": "That\u0027s exactly the reason why the short_embedded_builtin_calls feature requires pointer compression. When pointer compression is enabled the all the GetIsolateFromXXX() functions are implemented as round-down to 4Gb alignment which always works regardless of whether the object is read-only or writable.\n\nI added an explanatory comment.",
      "parentUuid": "583480cc_2d3503a4",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b71841c2_2a4c6bbc",
        "filename": "src/objects/code.cc",
        "patchSetId": 17
      },
      "lineNbr": 156,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-03-17T06:58:24Z",
      "side": 1,
      "message": "Huh, interesting. In that case, IMO the function should be renamed (or a new overload introduced) s.t. \u0027writable\u0027 is not mentioned, and that fails if ptr compression is not enabled. That way the comment isn\u0027t necessary. In a followup is also fine.",
      "parentUuid": "d63c5725_b1643ec0",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "30cd1450_50bb4ddb",
        "filename": "src/objects/code.cc",
        "patchSetId": 17
      },
      "lineNbr": 156,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-03-17T08:32:03Z",
      "side": 1,
      "message": "I guess the proper fix would be to just pass the Isolate from outside, but given that these changes are rather temporary...",
      "parentUuid": "b71841c2_2a4c6bbc",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "786e9d2f_72b984c6",
        "filename": "test/cctest/test-code-pages.cc",
        "patchSetId": 17
      },
      "lineNbr": 73,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-03-15T09:07:41Z",
      "side": 1,
      "message": "super-nit: PagesContainsRange",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0426d1df_6d00ce16",
        "filename": "test/cctest/test-code-pages.cc",
        "patchSetId": 17
      },
      "lineNbr": 73,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-03-16T14:28:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "786e9d2f_72b984c6",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd104c8b_3228c56c",
        "filename": "test/cctest/test-code-pages.cc",
        "patchSetId": 17
      },
      "lineNbr": 110,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-03-15T09:07:41Z",
      "side": 1,
      "message": "included",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bc2df0cb_a9cd3d3a",
        "filename": "test/cctest/test-code-pages.cc",
        "patchSetId": 17
      },
      "lineNbr": 110,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-03-16T14:28:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dd104c8b_3228c56c",
      "revId": "4fff4d928596442731a23bc7be8611656f3f17be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}