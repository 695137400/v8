{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "68db9f57_284b8921",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2022-04-26T09:52:42Z",
      "side": 1,
      "message": "I replaced `constexpr` with `inline` in `GCTracer::Scope::Name` and `GCTracer::Scope::NeedsYoungEpoch`, to avoid the error in gcc. I verified that both clang and gcc generate the same code.",
      "revId": "08b18153a85321b2ca3f2e4bfa520e9b951015ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14ee4b03_fe6d3c98",
        "filename": "src/heap/gc-tracer.h",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2022-04-26T09:56:06Z",
      "side": 1,
      "message": "You can use `V8_INLINE` if `inline` doesn\u0027t work. I suppose it did for you though.",
      "range": {
        "startLine": 100,
        "startChar": 11,
        "endLine": 100,
        "endChar": 17
      },
      "revId": "08b18153a85321b2ca3f2e4bfa520e9b951015ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f4a5a43e_926c8203",
        "filename": "src/heap/gc-tracer.h",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2022-04-26T10:01:43Z",
      "side": 1,
      "message": "`V8_INLINE` tries to force inlining, e.g. with `__attribute__((always_inline))`.\nIt\u0027s better here if we avoid this and have a non-inline version with the full switch, for the cases that the scope id is not known at compile time. This is what `constexpr` did: it inlined and optimized away when the id was known at compile time, otherwise it introduced a regular call. This is also what `inline` does.",
      "parentUuid": "14ee4b03_fe6d3c98",
      "range": {
        "startLine": 100,
        "startChar": 11,
        "endLine": 100,
        "endChar": 17
      },
      "revId": "08b18153a85321b2ca3f2e4bfa520e9b951015ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53b58041_1938b41e",
        "filename": "src/heap/gc-tracer.h",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2022-04-26T09:56:06Z",
      "side": 1,
      "message": "constexpr didn\u0027t work because of `UNREACHABLE()`?",
      "range": {
        "startLine": 101,
        "startChar": 11,
        "endLine": 101,
        "endChar": 17
      },
      "revId": "08b18153a85321b2ca3f2e4bfa520e9b951015ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a287c294_689d20ba",
        "filename": "src/heap/gc-tracer.h",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2022-04-26T10:01:43Z",
      "side": 1,
      "message": "Yes. `UNREACHABLE` eventually calls `V8_Fatal` and this is not a constant expression. Clang did not complain but gcc did.\n\nUnfortunately, there\u0027s currently no good way to have a non-exhaustive `switch` in a `constexpr` function.",
      "parentUuid": "53b58041_1938b41e",
      "range": {
        "startLine": 101,
        "startChar": 11,
        "endLine": 101,
        "endChar": 17
      },
      "revId": "08b18153a85321b2ca3f2e4bfa520e9b951015ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6d0ef27c_5fb9e6c7",
        "filename": "src/heap/gc-tracer.h",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2022-04-26T10:35:14Z",
      "side": 1,
      "message": "How did it complain? I think we used to have CHECK paths in constexpr which did work (and should also use Fatal() behind the scenes)",
      "parentUuid": "a287c294_689d20ba",
      "range": {
        "startLine": 101,
        "startChar": 11,
        "endLine": 101,
        "endChar": 17
      },
      "revId": "08b18153a85321b2ca3f2e4bfa520e9b951015ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06b99b56_8812ff05",
        "filename": "src/heap/gc-tracer.h",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2022-04-26T10:58:30Z",
      "side": 1,
      "message": "Here\u0027s the build that failed:\nhttps://ci.chromium.org/ui/p/v8/builders/ci/V8%20Linux%20gcc%20-%20builder/1646/overview\nThe message was (repeated twice):\n```\nIn file included from ../../src/base/optional.h:15:0,\n                 from ../../src/base/platform/platform.h:33,\n                 from ../../src/heap/gc-tracer-inl.h:8,\n                 from ../../check-header-includes/test-include-src-heap-gc-tracer-inl.cc:1:\n../../src/heap/gc-tracer-inl.h: In static member function ‘static constexpr const char* v8::internal::GCTracer::Scope::Name(v8::internal::GCTracer::Scope::ScopeId)’:\n../../src/base/logging.h:35:28: error: call to non-constexpr function ‘void V8_Fatal(const char*, ...)’\n #define FATAL(...) V8_Fatal(__VA_ARGS__)\n                    ~~~~~~~~^~~~~~~~~~~~~\n../../src/base/logging.h:49:23: note: in expansion of macro ‘FATAL’\n #define UNREACHABLE() FATAL(\"unreachable code\")\n                       ^~~~~\n../../src/heap/gc-tracer-inl.h:91:3: note: in expansion of macro ‘UNREACHABLE’\n   UNREACHABLE();\n   ^~~~~~~~~~~\n```\n\nI didn\u0027t find a `constexpr` with a `CHECK` somewhere in the code base, but there are many with `DCHECK`. Actually, you\u0027re right, this should also fail: https://source.chromium.org/chromium/chromium/src/+/main:v8/src/base/optional.h;drc\u003dd67f06067200f2c9acef422dbce0b3d732148afe;l\u003d560\nI think the difference is that `DCHECK` calls `V8_Dcheck` conditionally:\n```\nif (V8_UNLIKELY(!(condition))) {          \\\n  V8_Dcheck(__FILE__, __LINE__, message); \\\n} \n```\nand if the condition evaluates as false at compile time, maybe this is the reason it doesn\u0027t complain. In our case, `UNREACHABLE` calls `V8_Fatal` unconditionally.",
      "parentUuid": "6d0ef27c_5fb9e6c7",
      "range": {
        "startLine": 101,
        "startChar": 11,
        "endLine": 101,
        "endChar": 17
      },
      "revId": "08b18153a85321b2ca3f2e4bfa520e9b951015ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8f273446_84567be4",
        "filename": "src/heap/gc-tracer.h",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2022-04-26T11:17:58Z",
      "side": 1,
      "message": "I guess this is because you preserve a fall through for `Scope::NUMBER_OF_SCOPES` which would reach UNREACHABLE() which is not constexpr.\n\nIf you could get rid of `NUMBER_OF_SCOPES` somehow (and thus the only `break`) it may work.",
      "parentUuid": "06b99b56_8812ff05",
      "range": {
        "startLine": 101,
        "startChar": 11,
        "endLine": 101,
        "endChar": 17
      },
      "revId": "08b18153a85321b2ca3f2e4bfa520e9b951015ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}