{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0f3a31bb_522867fb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 3350333
      },
      "writtenOn": "2024-03-19T03:05:47Z",
      "side": 1,
      "message": "Here are the benchmark results, we run every case separately, and calculate the final score by geomean, the [score] column uses the threshold flag value equal to 2048Kb.\n\n```shell\n\n                               benchmark:    score |  master_ |      % |\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d+\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d+\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d+\n                                Richards:  26677.0 |  26759.3 |   -0.3 |\n                               DeltaBlue:  72286.2 |  72433.9 |   -0.2 |\n                                  Crypto:  34642.3 |  34675.2 |        |\n                                RayTrace:  59820.3 |  59818.8 |        |   \n                             EarleyBoyer:  54722.8 |  54553.3 |    0.3 |  \n                                  RegExp:   6516.3 |   6510.6 |        | \n                                   Splay:  31047.1 |  14973.9 |  107.3 |\n                            SplayLatency:  93771.0 |  24812.8 |  277.9 |\n                            NavierStokes:  30657.4 |  30653.8 |        |  \n                                   PdfJS:  45244.6 |  45305.7 |   -0.1 | \n                                Mandreel:  35895.0 |  35629.8 |    0.7 |\n                         MandreelLatency:  48882.3 |  48667.0 |    0.4 | \n                                 Gameboy:  73739.2 |  73349.2 |    0.5 |\n                                CodeLoad:  32064.4 |  31944.6 |    0.4 |\n                                   Box2D:  27013.7 |  26944.8 |    0.3 |\n                                    zlib:  57529.6 |  57457.7 |    0.1 |\n                              Typescript:  59091.1 |  58223.1 |    1.5 |     \n                                  Octane:  40152.7 |  34907.1 |   15.0 |\n---------------------------------------------------+----------+--------+\n```",
      "revId": "ce16c97e9e988dd5993e2567989c490c8faed72e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4f3c94a_bdd17918",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1420650
      },
      "writtenOn": "2024-03-27T09:18:48Z",
      "side": 1,
      "message": "Zhenwei is from our nodejs team and they would like to tune the pretenuring heuristic for better workloads performance.\n\nAnd I also found that adjusting this threshold can improve the performance of Speedometer2/EmberJS-Debug by up to ~50%. Is this a known issue?\nhttps://pinpoint-dot-chromeperf.appspot.com/job/104d10ccde0000",
      "revId": "ce16c97e9e988dd5993e2567989c490c8faed72e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ecce1f2_3782b76a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2024-03-27T11:45:43Z",
      "side": 1,
      "message": "No it\u0027s not known. Can you run with 100 iterations on S2 and also start a run for S3?",
      "parentUuid": "f4f3c94a_bdd17918",
      "revId": "ce16c97e9e988dd5993e2567989c490c8faed72e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a0237f8_4e238c3d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2024-03-27T11:50:24Z",
      "side": 1,
      "message": "Also, is this improvement due to a change in GC timing or because pretenuring actually works better this way?",
      "parentUuid": "1ecce1f2_3782b76a",
      "revId": "ce16c97e9e988dd5993e2567989c490c8faed72e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0adaab51_adef8d0b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1420650
      },
      "writtenOn": "2024-03-28T09:28:21Z",
      "side": 1,
      "message": "For the performance impact in S2, I didn\u0027t reproduce the improvement at `HEAD` commit (`9d6a9f718349093310559ca17a7a0efe0864b585`), but I found a ~50% performance gap between `HEAD` and the commit I used to do the test (`02fc06ba6e8123cb8f7d7076f2227aefeda3aa87`)\nhttps://pinpoint-dot-chromeperf.appspot.com/job/1547d04c3e0000\n\nZhenwei\u0027s previous test also shows a +15% improvement to Octane, but we only see the improvement when we run each subcase separately (Running the whole Octane doesn\u0027t seems to be influenced). And we found that tuning the threshold can make pretenuring works better by allocating a nested objects to old space:\n\n```\nfunction GeneratePayloadTree(depth, tag) {\n  if (depth \u003d\u003d 0) {\n    return {\n      array  : [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ],\n      string : \u0027String for key \u0027 + tag + \u0027 in leaf node\u0027\n    };\n  } else {\n    return {\n      left:  GeneratePayloadTree(depth - 1, tag),\n      right: GeneratePayloadTree(depth - 1, tag)\n    };\n  }\n}\n```",
      "parentUuid": "1a0237f8_4e238c3d",
      "revId": "ce16c97e9e988dd5993e2567989c490c8faed72e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}