{
  "comments": [
    {
      "key": {
        "uuid": "8c58ad4f_34dca592",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2020-08-07T08:52:42Z",
      "side": 1,
      "message": "ptal",
      "revId": "5dc945c3ef09fdc79867c1c7a7ddf767187bef44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23ad7478_41b13840",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2020-08-07T20:17:15Z",
      "side": 1,
      "message": "Generally looks fine, but I\u0027m no expert on the invariants of ArrayBuffers\u0027 backing stores, so some questions first:\n\n- The comments suggest that the backing buffer may be deleted and re-allocated. In that case, wouldn\u0027t we need to re-key location_lists, since they\u0027d be stale?\n\n- If deleted and re-allocated backing stores are always at the same address, how come we need to store waiting_location_ separately?",
      "revId": "5dc945c3ef09fdc79867c1c7a7ddf767187bef44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d97bd14_b4db1aa5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2020-08-10T17:23:43Z",
      "side": 1,
      "message": "I find the reasoning for storing waiting_location_ as well as re-verifying upon lookup somewhat subtle. marja@ explained it to me, and AIUI:\n\n1. The reason it has to be stored ahead of time instead of reconstructed via backing_store + addr is so that nodes can be removed in the case of e.g. timing out, since the backing store may have died, therefore making the location un-reconstructable.\n\n2. The reason it has to be re-verified is that if the backing store died and another backing store was allocated at the same address, we have no way to distinguish the two locations.\n\nThe root cause for the complexity is that there\u0027s no good way to tell the waiter list a backing store has died and to clean up stale nodes. Since removal is done opportunistically, all code that touch waiter lists must guard against staleness.\n\nSince there\u0027s worse complexity involved in implementing a sweep after a backing store dies and I don\u0027t have a better idea, I\u0027m fine with the current approach.\n\nA comment in the header describing about the possibility of stale nodes would help.",
      "revId": "5dc945c3ef09fdc79867c1c7a7ddf767187bef44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b38cbbc_7cf186c3",
        "filename": "src/execution/futex-emulation.cc",
        "patchSetId": 5
      },
      "lineNbr": 638,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2020-08-07T20:17:15Z",
      "side": 1,
      "message": "I don\u0027t quite understand this comment or the need to store waiting_location_.\n\nThis comment describes an ABA problem with the backing store, but an ABA problem shouldn\u0027t affect the waiting_location_, right?\n\nOr is the problem here that the backing_store might have been deleted between the time when the node was first looked up in location_lists and this point?",
      "revId": "5dc945c3ef09fdc79867c1c7a7ddf767187bef44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90af3da9_80f30a29",
        "filename": "src/execution/futex-emulation.cc",
        "patchSetId": 5
      },
      "lineNbr": 638,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2020-08-11T06:48:02Z",
      "side": 1,
      "message": "This was discussed offline.\n\n- There are 2 separate problems: 1) the ABA, which means we need to check the liveness of the buffer here 2) need to store wait_location_ since we can\u0027t reconstruct it later.",
      "parentUuid": "1b38cbbc_7cf186c3",
      "revId": "5dc945c3ef09fdc79867c1c7a7ddf767187bef44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "06aac170_2759f465",
        "filename": "src/execution/futex-emulation.cc",
        "patchSetId": 5
      },
      "lineNbr": 639,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2020-08-10T17:23:43Z",
      "side": 1,
      "message": "Can we assert that backing_store.get() !\u003d node_backing_store.get() implies node_backing_store.get() \u003d\u003d nullptr?",
      "revId": "5dc945c3ef09fdc79867c1c7a7ddf767187bef44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8afdb3d3_e9f120d1",
        "filename": "src/execution/futex-emulation.cc",
        "patchSetId": 5
      },
      "lineNbr": 639,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2020-08-11T06:48:02Z",
      "side": 1,
      "message": "Done;\n\nNew structure of the code:\n    if (backing_store.get() \u003d\u003d node_backing_store.get()) {\n      DCHECK_EQ(addr, node-\u003ewait_addr_);\n      ..\n      continue;\n    }\n    DCHECK_EQ(nullptr, node_backing_store.get());\n    if (node-\u003easync_timeout_time_ \u003d\u003d base::TimeTicks()) {\n      ...\n    }\n    if (node-\u003eIsAsync() \u0026\u0026 node-\u003enative_context_.IsEmpty()) {\n      ...\n    }",
      "parentUuid": "06aac170_2759f465",
      "revId": "5dc945c3ef09fdc79867c1c7a7ddf767187bef44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c77a18a8_7cd545e0",
        "filename": "src/execution/futex-emulation.cc",
        "patchSetId": 5
      },
      "lineNbr": 845,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2020-08-07T20:17:15Z",
      "side": 1,
      "message": "This doesn\u0027t seem safe compared to the usual `it \u003d location_lists.erase(it)`.",
      "revId": "5dc945c3ef09fdc79867c1c7a7ddf767187bef44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f640846d_35f9e0e0",
        "filename": "src/execution/futex-emulation.h",
        "patchSetId": 5
      },
      "lineNbr": 107,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2020-08-10T17:23:43Z",
      "side": 1,
      "message": "I think it\u0027d be good for comments to explicitly say that this is backing_store_.get() + wait_addr_ at the time of the node\u0027s creation.",
      "revId": "5dc945c3ef09fdc79867c1c7a7ddf767187bef44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "998b9ec8_4dfc9945",
        "filename": "src/execution/futex-emulation.h",
        "patchSetId": 5
      },
      "lineNbr": 107,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2020-08-11T06:48:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f640846d_35f9e0e0",
      "revId": "5dc945c3ef09fdc79867c1c7a7ddf767187bef44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "49a069b3_9ac21993",
        "filename": "src/execution/futex-emulation.h",
        "patchSetId": 5
      },
      "lineNbr": 108,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2020-08-10T17:23:43Z",
      "side": 1,
      "message": "Since this might possibly be stale, WDYT about naming this to reflect that? I thought of wait_location_snapshot_, but not clear how clear that is.",
      "revId": "5dc945c3ef09fdc79867c1c7a7ddf767187bef44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f230fbbe_3db1cfb9",
        "filename": "src/execution/futex-emulation.h",
        "patchSetId": 5
      },
      "lineNbr": 108,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2020-08-11T06:48:02Z",
      "side": 1,
      "message": "\"Snapshot\" in V8 means something totally different, so IMO that would be even more confusing. I was also trying to wrap my head around what exactly gets stale; the buffer pointer can be stale (cleared weak pointer) but the location is not \"stale\", it\u0027s just a memory location.\n\n-\u003e Couldn\u0027t figure out a better name, left as is.",
      "parentUuid": "49a069b3_9ac21993",
      "revId": "5dc945c3ef09fdc79867c1c7a7ddf767187bef44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}