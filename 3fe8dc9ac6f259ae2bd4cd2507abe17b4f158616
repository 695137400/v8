{
  "comments": [
    {
      "key": {
        "uuid": "46ec2bd2_bacebac2",
        "filename": "src/heap/cppgc/asm/x64/push_registers_win.S",
        "patchSetId": 35
      },
      "lineNbr": 16,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-03-30T11:47:59Z",
      "side": 1,
      "message": "72?",
      "range": {
        "startLine": 16,
        "startChar": 32,
        "endLine": 16,
        "endChar": 34
      },
      "revId": "3fe8dc9ac6f259ae2bd4cd2507abe17b4f158616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a24f69b4_2deff61f",
        "filename": "src/heap/cppgc/asm/x64/push_registers_win.S",
        "patchSetId": 35
      },
      "lineNbr": 16,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-30T12:58:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "46ec2bd2_bacebac2",
      "range": {
        "startLine": 16,
        "startChar": 32,
        "endLine": 16,
        "endChar": 34
      },
      "revId": "3fe8dc9ac6f259ae2bd4cd2507abe17b4f158616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf930e34_98c66d30",
        "filename": "src/heap/cppgc/stack.cc",
        "patchSetId": 35
      },
      "lineNbr": 29,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-03-30T11:47:59Z",
      "side": 1,
      "message": "This is not consistent with IteratePointersImpl that does not include start_start_",
      "range": {
        "startLine": 29,
        "startChar": 19,
        "endLine": 29,
        "endChar": 20
      },
      "revId": "3fe8dc9ac6f259ae2bd4cd2507abe17b4f158616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f9c2221_1beb0ce6",
        "filename": "src/heap/cppgc/stack.cc",
        "patchSetId": 35
      },
      "lineNbr": 29,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-30T12:58:01Z",
      "side": 1,
      "message": "Rewrote using start and end inclusivity.",
      "parentUuid": "cf930e34_98c66d30",
      "range": {
        "startLine": 29,
        "startChar": 19,
        "endLine": 29,
        "endChar": 20
      },
      "revId": "3fe8dc9ac6f259ae2bd4cd2507abe17b4f158616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ed94b72_12b26829",
        "filename": "src/heap/cppgc/stack.cc",
        "patchSetId": 35
      },
      "lineNbr": 62,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-03-30T12:44:14Z",
      "side": 1,
      "message": "Why do we really need to scan the fake stack? Everything that is reachable should be reachable from the regular stack. Maybe this is an opportunity to rethink this.\n(I would understand why we would need it if we were compacting while there are pointers on the stack, but given that we don\u0027t I\u0027m not sure why we will miss live objects if we don\u0027t scan it.)",
      "range": {
        "startLine": 62,
        "startChar": 12,
        "endLine": 62,
        "endChar": 43
      },
      "revId": "3fe8dc9ac6f259ae2bd4cd2507abe17b4f158616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6807a7a0_496b6a65",
        "filename": "src/heap/cppgc/stack.cc",
        "patchSetId": 35
      },
      "lineNbr": 62,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-30T12:58:01Z",
      "side": 1,
      "message": "No, not everything is reachable from the stack. The reasoning is in the comment below. The link shows that we set up a fake stack that is passed around everywhere which means that only the fake stack contains the actual values.\n\nYou can test it out setting up asan storing to a stack variable and trying to find the value on  the native stack: it won\u0027t be there.",
      "parentUuid": "4ed94b72_12b26829",
      "range": {
        "startLine": 62,
        "startChar": 12,
        "endLine": 62,
        "endChar": 43
      },
      "revId": "3fe8dc9ac6f259ae2bd4cd2507abe17b4f158616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c321dfed_c5dccc38",
        "filename": "src/heap/cppgc/stack.cc",
        "patchSetId": 35
      },
      "lineNbr": 62,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-03-30T13:41:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6807a7a0_496b6a65",
      "range": {
        "startLine": 62,
        "startChar": 12,
        "endLine": 62,
        "endChar": 43
      },
      "revId": "3fe8dc9ac6f259ae2bd4cd2507abe17b4f158616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a8f2577_d0e19901",
        "filename": "src/heap/cppgc/stack.cc",
        "patchSetId": 35
      },
      "lineNbr": 73,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-03-30T11:47:59Z",
      "side": 1,
      "message": "Nit: real_stack_slot would be easier to understand for me.",
      "range": {
        "startLine": 73,
        "startChar": 10,
        "endLine": 73,
        "endChar": 20
      },
      "revId": "3fe8dc9ac6f259ae2bd4cd2507abe17b4f158616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8b3168d_34b3592b",
        "filename": "src/heap/cppgc/stack.cc",
        "patchSetId": 35
      },
      "lineNbr": 73,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-30T12:58:01Z",
      "side": 1,
      "message": "real_stack_frame as it\u0027s not a slot but the frame start.",
      "parentUuid": "8a8f2577_d0e19901",
      "range": {
        "startLine": 73,
        "startChar": 10,
        "endLine": 73,
        "endChar": 20
      },
      "revId": "3fe8dc9ac6f259ae2bd4cd2507abe17b4f158616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7bfb0591_8c518363",
        "filename": "src/heap/cppgc/stack.cc",
        "patchSetId": 35
      },
      "lineNbr": 78,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-03-30T11:47:59Z",
      "side": 1,
      "message": "Should this be a strict \u003e ?",
      "range": {
        "startLine": 78,
        "startChar": 52,
        "endLine": 78,
        "endChar": 53
      },
      "revId": "3fe8dc9ac6f259ae2bd4cd2507abe17b4f158616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db3ba1b0_0fb8f4f3",
        "filename": "src/heap/cppgc/stack.cc",
        "patchSetId": 35
      },
      "lineNbr": 78,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-30T12:58:01Z",
      "side": 1,
      "message": "Assuming begin and end are inclusive.",
      "parentUuid": "7bfb0591_8c518363",
      "range": {
        "startLine": 78,
        "startChar": 52,
        "endLine": 78,
        "endChar": 53
      },
      "revId": "3fe8dc9ac6f259ae2bd4cd2507abe17b4f158616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9643e78b_e7bac222",
        "filename": "src/heap/cppgc/stack.cc",
        "patchSetId": 35
      },
      "lineNbr": 81,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-03-30T11:47:59Z",
      "side": 1,
      "message": "Ditto?",
      "range": {
        "startLine": 81,
        "startChar": 22,
        "endLine": 81,
        "endChar": 23
      },
      "revId": "3fe8dc9ac6f259ae2bd4cd2507abe17b4f158616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ea0b521_6c2cb361",
        "filename": "src/heap/cppgc/stack.cc",
        "patchSetId": 35
      },
      "lineNbr": 81,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-30T12:58:01Z",
      "side": 1,
      "message": "Assuming begin and end are inclusive.",
      "parentUuid": "9643e78b_e7bac222",
      "range": {
        "startLine": 81,
        "startChar": 22,
        "endLine": 81,
        "endChar": 23
      },
      "revId": "3fe8dc9ac6f259ae2bd4cd2507abe17b4f158616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a91cb83e_0abc98ac",
        "filename": "src/heap/cppgc/stack.cc",
        "patchSetId": 35
      },
      "lineNbr": 99,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-03-30T11:47:59Z",
      "side": 1,
      "message": "Shouldn\u0027t we round up here?",
      "range": {
        "startLine": 99,
        "startChar": 7,
        "endLine": 99,
        "endChar": 61
      },
      "revId": "3fe8dc9ac6f259ae2bd4cd2507abe17b4f158616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07176805_fc933830",
        "filename": "src/heap/cppgc/stack.cc",
        "patchSetId": 35
      },
      "lineNbr": 99,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-30T13:09:40Z",
      "side": 1,
      "message": "Removing rounding and added CHECK for alignment.",
      "parentUuid": "a91cb83e_0abc98ac",
      "range": {
        "startLine": 99,
        "startChar": 7,
        "endLine": 99,
        "endChar": 61
      },
      "revId": "3fe8dc9ac6f259ae2bd4cd2507abe17b4f158616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "984086fb_55c11269",
        "filename": "src/heap/cppgc/stack.h",
        "patchSetId": 35
      },
      "lineNbr": 15,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-03-30T12:44:14Z",
      "side": 1,
      "message": "nit: const void*",
      "range": {
        "startLine": 15,
        "startChar": 28,
        "endLine": 15,
        "endChar": 32
      },
      "revId": "3fe8dc9ac6f259ae2bd4cd2507abe17b4f158616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c080d02_11da3cbe",
        "filename": "src/heap/cppgc/stack.h",
        "patchSetId": 35
      },
      "lineNbr": 15,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-30T12:58:01Z",
      "side": 1,
      "message": "It\u0027s a void* as it points to memory which we cast (or lookup) a HeapObjectHeader* that we mutate.",
      "parentUuid": "984086fb_55c11269",
      "range": {
        "startLine": 15,
        "startChar": 28,
        "endLine": 15,
        "endChar": 32
      },
      "revId": "3fe8dc9ac6f259ae2bd4cd2507abe17b4f158616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b641f7b_a6d76192",
        "filename": "src/heap/cppgc/stack.h",
        "patchSetId": 35
      },
      "lineNbr": 15,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-03-30T13:41:05Z",
      "side": 1,
      "message": "In the current Oilpan, the method that returns HeapObjectHeader always returns a mutable object since the common case where we need the header is when we need to change it (i.e. in marking or sweeping). If the current usage didn\u0027t need it to be mutable, it simply held it as a const locally. Why not align with that?\n\nhttps://osscs.corp.google.com/chromium/chromium/src/+/master:third_party/blink/renderer/platform/heap/heap_page.h;bpv\u003d1;bpt\u003d1;l\u003d205?q\u003dheap_page.h\u0026ss\u003dchromium\u0026gsn\u003dFromPayload\u0026gs\u003dkythe%3A%2F%2Fchromium.googlesource.com%2Fchromium%2Fsrc%3Flang%3Dc%252B%252B%3Fpath%3Dsrc%2Fthird_party%2Fblink%2Frenderer%2Fplatform%2Fheap%2Fheap_page.h%23W8vU10hil6ElvLokfVwhzsy-53QSvQHPb0Wv0XRhWYM",
      "parentUuid": "6c080d02_11da3cbe",
      "range": {
        "startLine": 15,
        "startChar": 28,
        "endLine": 15,
        "endChar": 32
      },
      "revId": "3fe8dc9ac6f259ae2bd4cd2507abe17b4f158616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39272092_a3e7c513",
        "filename": "src/heap/cppgc/stack.h",
        "patchSetId": 35
      },
      "lineNbr": 15,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-30T13:47:27Z",
      "side": 1,
      "message": "Why do you think that the memory returned here is not mutable? The visitor returns some void* and the caller needs to figure out whether it\u0027s safe to modify that memory or not. The visitor doesn\u0027t care.",
      "parentUuid": "1b641f7b_a6d76192",
      "range": {
        "startLine": 15,
        "startChar": 28,
        "endLine": 15,
        "endChar": 32
      },
      "revId": "3fe8dc9ac6f259ae2bd4cd2507abe17b4f158616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97f2c901_6e9cd26e",
        "filename": "src/heap/cppgc/stack.h",
        "patchSetId": 35
      },
      "lineNbr": 24,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-03-30T12:44:14Z",
      "side": 1,
      "message": "Please use \"const void*\" here and below.\nNone of this is supposed to change the stack (with the exception of the embedded asm), so we can make everything const.",
      "range": {
        "startLine": 24,
        "startChar": 17,
        "endLine": 24,
        "endChar": 21
      },
      "revId": "3fe8dc9ac6f259ae2bd4cd2507abe17b4f158616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a171fdc_5e7cf7bc",
        "filename": "src/heap/cppgc/stack.h",
        "patchSetId": 35
      },
      "lineNbr": 24,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-30T12:58:01Z",
      "side": 1,
      "message": "See above.",
      "parentUuid": "97f2c901_6e9cd26e",
      "range": {
        "startLine": 24,
        "startChar": 17,
        "endLine": 24,
        "endChar": 21
      },
      "revId": "3fe8dc9ac6f259ae2bd4cd2507abe17b4f158616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "237dd451_720cd7c8",
        "filename": "src/heap/cppgc/stack.h",
        "patchSetId": 35
      },
      "lineNbr": 29,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-03-30T12:44:14Z",
      "side": 1,
      "message": "stack?",
      "range": {
        "startLine": 29,
        "startChar": 35,
        "endLine": 29,
        "endChar": 39
      },
      "revId": "3fe8dc9ac6f259ae2bd4cd2507abe17b4f158616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0dd1b21_689eabbe",
        "filename": "src/heap/cppgc/stack.h",
        "patchSetId": 35
      },
      "lineNbr": 29,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-03-30T12:44:14Z",
      "side": 1,
      "message": "double space",
      "range": {
        "startLine": 29,
        "startChar": 56,
        "endLine": 29,
        "endChar": 57
      },
      "revId": "3fe8dc9ac6f259ae2bd4cd2507abe17b4f158616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10c66519_4a4ff23d",
        "filename": "src/heap/cppgc/stack.h",
        "patchSetId": 35
      },
      "lineNbr": 29,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-30T12:58:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f0dd1b21_689eabbe",
      "range": {
        "startLine": 29,
        "startChar": 56,
        "endLine": 29,
        "endChar": 57
      },
      "revId": "3fe8dc9ac6f259ae2bd4cd2507abe17b4f158616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "999a5fcf_bfe85012",
        "filename": "src/heap/cppgc/stack.h",
        "patchSetId": 35
      },
      "lineNbr": 29,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-30T12:58:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "237dd451_720cd7c8",
      "range": {
        "startLine": 29,
        "startChar": 35,
        "endLine": 29,
        "endChar": 39
      },
      "revId": "3fe8dc9ac6f259ae2bd4cd2507abe17b4f158616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7ab7839_0950cade",
        "filename": "test/unittests/heap/cppgc/stack_unittest.cc",
        "patchSetId": 35
      },
      "lineNbr": 56,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-03-30T12:44:14Z",
      "side": 1,
      "message": "nit: you can move this outside \"#ifdef V8_OS_WIN\"",
      "range": {
        "startLine": 56,
        "startChar": 8,
        "endLine": 56,
        "endChar": 35
      },
      "revId": "3fe8dc9ac6f259ae2bd4cd2507abe17b4f158616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c96bbbb9_4083b3c5",
        "filename": "test/unittests/heap/cppgc/stack_unittest.cc",
        "patchSetId": 35
      },
      "lineNbr": 56,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-30T12:58:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c7ab7839_0950cade",
      "range": {
        "startLine": 56,
        "startChar": 8,
        "endLine": 56,
        "endChar": 35
      },
      "revId": "3fe8dc9ac6f259ae2bd4cd2507abe17b4f158616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bdc38867_4e01de44",
        "filename": "test/unittests/heap/cppgc/stack_unittest.cc",
        "patchSetId": 35
      },
      "lineNbr": 114,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-03-30T12:44:14Z",
      "side": 1,
      "message": "If you keep count of how many times you found the needle rather than if you found it, you could verify that keeping it on stack adds another location where it is found.",
      "range": {
        "startLine": 114,
        "startChar": 5,
        "endLine": 114,
        "endChar": 13
      },
      "revId": "3fe8dc9ac6f259ae2bd4cd2507abe17b4f158616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8947664_f5caae6e",
        "filename": "test/unittests/heap/cppgc/stack_unittest.cc",
        "patchSetId": 35
      },
      "lineNbr": 114,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-30T12:58:01Z",
      "side": 1,
      "message": "It\u0027s not robust as we may add more than 1 more slot where it\u0027s reachable. It depends on how the compiler uses registers and redzone.",
      "parentUuid": "bdc38867_4e01de44",
      "range": {
        "startLine": 114,
        "startChar": 5,
        "endLine": 114,
        "endChar": 13
      },
      "revId": "3fe8dc9ac6f259ae2bd4cd2507abe17b4f158616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "001d9f77_67bc6070",
        "filename": "test/unittests/heap/cppgc/stack_unittest.cc",
        "patchSetId": 35
      },
      "lineNbr": 114,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-03-30T13:41:05Z",
      "side": 1,
      "message": "Adding more than 1 slot is still fine. We can check that we found *more* than we did before. The idea would be to verify that putting the value on the stack introduces more locations where we can find it. Otherwise, we could for example always find it in the redzone or temporary (as your comment mentions) but completely miss method parameters.",
      "parentUuid": "c8947664_f5caae6e",
      "range": {
        "startLine": 114,
        "startChar": 5,
        "endLine": 114,
        "endChar": 13
      },
      "revId": "3fe8dc9ac6f259ae2bd4cd2507abe17b4f158616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7775b763_31d50eb6",
        "filename": "test/unittests/heap/cppgc/stack_unittest.cc",
        "patchSetId": 35
      },
      "lineNbr": 114,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-30T13:47:27Z",
      "side": 1,
      "message": "All these tests are approximate.\n\nWe cannot even check for more, because there could be multiple references in the redzone after the setup and 0 after the assignment to a stack-local. The only thing we know is that after assignment there should be \u003e0 slots to keep it alive from.",
      "parentUuid": "001d9f77_67bc6070",
      "range": {
        "startLine": 114,
        "startChar": 5,
        "endLine": 114,
        "endChar": 13
      },
      "revId": "3fe8dc9ac6f259ae2bd4cd2507abe17b4f158616",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}