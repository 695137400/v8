{
  "comments": [
    {
      "key": {
        "uuid": "e7ca03a5_07b3e7d8",
        "filename": "src/interpreter/bytecode-generator.cc",
        "patchSetId": 2
      },
      "lineNbr": 4152,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2020-04-21T10:03:47Z",
      "side": 1,
      "message": "I\u0027m not keen on the double switch here. I think we should avoid early returning here and integrate this logic into the block below, to ensure we keep the same logic for the assignment (e.g., right now you don\u0027t have the \nbuilder()-\u003eSetExpressionPosition(expr) on this operation which will cause debugging issues).\n\nMaybe something like:\n\nLabel short_circuit;\nif (binop-\u003eop() \u003d\u003d Token::NULLISH) {\n  BytecodeLabel nullish;\n  builder()\n     -\u003eJumpIfUndefinedOrNull(\u0026nullish)\n     .Jump(\u0026short_circuit)\n     .Bind(\u0026nullish);\n     VisitForAccumulatorValue(expr-\u003evalue());\n} else if (binop-\u003eop() \u003d\u003d Token::OR) {\n  builder()-\u003eJumpIfTrue(ToBooleanMode::kConvertToBoolean,\n                        \u0026short_circuit);\n  VisitForAccumulatorValue(expr-\u003evalue());\n} else if (binop-\u003eop() \u003d\u003d Token::AND) {\n  ...\n} else if (expr-\u003evalue()-\u003eIsSmiLiteral()) {\n  ...\n} else {\n  ...\n}\n\nbuilder()-\u003eSetExpressionPosition(expr);\nBuildAssignment(lhs_data, expr-\u003eop(), expr-\u003elookup_hoisting_mode());\nbuilder()-\u003eBind(\u0026short_circuit);",
      "revId": "9a1580742ff1181bf5e5033b2dfe20aa5695741f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ab5a1b5_53639bef",
        "filename": "src/interpreter/bytecode-generator.cc",
        "patchSetId": 2
      },
      "lineNbr": 4152,
      "author": {
        "id": 1145189
      },
      "writtenOn": "2020-04-21T10:48:12Z",
      "side": 1,
      "message": "+1 to Ross\u0027s suggestion.",
      "parentUuid": "e7ca03a5_07b3e7d8",
      "revId": "9a1580742ff1181bf5e5033b2dfe20aa5695741f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3fbc3238_ec6cd38c",
        "filename": "src/parsing/parse-info.h",
        "patchSetId": 2
      },
      "lineNbr": 334,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2020-04-21T08:17:36Z",
      "side": 1,
      "message": "Did you mean 32 here?",
      "range": {
        "startLine": 334,
        "startChar": 43,
        "endLine": 334,
        "endChar": 45
      },
      "revId": "9a1580742ff1181bf5e5033b2dfe20aa5695741f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48217cbb_ef660f92",
        "filename": "src/parsing/parse-info.h",
        "patchSetId": 2
      },
      "lineNbr": 334,
      "author": {
        "id": 1274103
      },
      "writtenOn": "2020-04-21T14:56:07Z",
      "side": 1,
      "message": "no I commented on the first patchset, there are some old flags here that shu is removing, once that\u0027s updated I\u0027ll be able to fix this (2^32 is out of range here)",
      "parentUuid": "3fbc3238_ec6cd38c",
      "range": {
        "startLine": 334,
        "startChar": 43,
        "endLine": 334,
        "endChar": 45
      },
      "revId": "9a1580742ff1181bf5e5033b2dfe20aa5695741f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}