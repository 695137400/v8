{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "729f8cb7_53e83088",
        "filename": "src/wasm/baseline/x64/liftoff-assembler-x64-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 545,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-07-26T22:22:03Z",
      "side": 1,
      "message": "To check my understanding, there\u0027s no conditional check for F16C or AVX2 support because `kF32LoadF16` is replaced by an I32 load if the these features aren\u0027t supported, and this `CpuFeatureScope` will `DCHECK` that.",
      "revId": "0f87ec2982f1de8c032e8a03035bb3add099d4f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "12786aa4_6449d474",
        "filename": "src/wasm/baseline/x64/liftoff-assembler-x64-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 545,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2024-07-29T10:50:19Z",
      "side": 1,
      "message": "Yes; see line 4394 below.",
      "parentUuid": "729f8cb7_53e83088",
      "revId": "0f87ec2982f1de8c032e8a03035bb3add099d4f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20aeef13_0440113e",
        "filename": "src/wasm/baseline/x64/liftoff-assembler-x64-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 546,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-07-26T22:22:03Z",
      "side": 1,
      "message": "https://www.felixcloutier.com/x86/vpbroadcastb:vpbroadcastw:vpbroadcastd:vpbroadcastq lists `vpbroadcastw` as AVX512, not AVX2. Does AVX2 include AVX512 in V8\u0027s codebase?",
      "revId": "0f87ec2982f1de8c032e8a03035bb3add099d4f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e11942c3_fa8e3321",
        "filename": "src/wasm/baseline/x64/liftoff-assembler-x64-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 546,
      "author": {
        "id": 1545467
      },
      "writtenOn": "2024-07-29T16:27:36Z",
      "side": 1,
      "message": "I believe it is a part of AVX2 as stated here https://www.felixcloutier.com/x86/vpbroadcast",
      "parentUuid": "20aeef13_0440113e",
      "revId": "0f87ec2982f1de8c032e8a03035bb3add099d4f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e72932a_e6e1ab9f",
        "filename": "src/wasm/baseline/x64/liftoff-assembler-x64-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 588,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2024-07-29T10:50:19Z",
      "side": 1,
      "message": "I\u0027m pretty sure this is a bug: Liftoff considers all \"src\" registers to be read-only, and the value could still be in use. To perform a register-to-register conversion operation, you\u0027ll need to use a temp register.\n\nTo reproduce the bug, store the same value into two locals, and assert that reading one doesn\u0027t write to the other. Roughly:\n```\n  (func test (param $var0 f32)\n  (local $var1 f32)\n  local.get $var0\n  local.set $var1\n  local.get $var0\n  SomethingThatCallsLiftoffAssemblerStore\n  local.get $var1\n  )\n```\nI predict that with this code as  written, $var1\u0027s value will be the result of the `ps2ph` conversion of the parameter, rather than its unmodified value as it should be. (I haven\u0027t tested the snippet; if it doesn\u0027t work then check generated code; I think an f32 param should be passed in a register, but if for any reason it isn\u0027t then you may need to force it there, e.g. by performing some arithmetic operation on it.)",
      "range": {
        "startLine": 588,
        "startChar": 6,
        "endLine": 588,
        "endChar": 39
      },
      "revId": "0f87ec2982f1de8c032e8a03035bb3add099d4f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a09daff_5a817174",
        "filename": "src/wasm/baseline/x64/liftoff-assembler-x64-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 588,
      "author": {
        "id": 1545467
      },
      "writtenOn": "2024-07-29T16:27:36Z",
      "side": 1,
      "message": "Nice catch. Fixed with a temp register.",
      "parentUuid": "0e72932a_e6e1ab9f",
      "range": {
        "startLine": 588,
        "startChar": 6,
        "endLine": 588,
        "endChar": 39
      },
      "revId": "0f87ec2982f1de8c032e8a03035bb3add099d4f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9d62420_b97b87f0",
        "filename": "src/wasm/baseline/x64/liftoff-assembler-x64-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 589,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-07-26T22:22:03Z",
      "side": 1,
      "message": "Stupid question: why can\u0027t you use `vmovss`?",
      "revId": "0f87ec2982f1de8c032e8a03035bb3add099d4f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "43b28446_04308ed1",
        "filename": "src/wasm/baseline/x64/liftoff-assembler-x64-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 589,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2024-07-29T10:50:19Z",
      "side": 1,
      "message": "AFAIK `vmovss` always writes 32 bits, we need to write only 16 bits. Since storage could be packed (e.g. in an array), we can\u0027t just write more.\n\nOn hardware where `pextrw` isn\u0027t available, we could probably use a sequence of `vmovss` to a GP register, and then `movw` into memory, but I guess there is no hardware in existence that has `vcvtps2ph` (F16C/AVX512) but not `pextrw` (SSE4.1).",
      "parentUuid": "f9d62420_b97b87f0",
      "revId": "0f87ec2982f1de8c032e8a03035bb3add099d4f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}