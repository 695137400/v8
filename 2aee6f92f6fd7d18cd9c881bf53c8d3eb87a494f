{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "212622e4_4f450769",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2023-04-27T10:01:31Z",
      "side": 1,
      "message": "lgtm modulo redness",
      "revId": "2aee6f92f6fd7d18cd9c881bf53c8d3eb87a494f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c35c54a6_6e31a756",
        "filename": "src/sandbox/external-pointer-table.cc",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2023-04-27T13:35:10Z",
      "side": 1,
      "message": "Are the GC parts really specific to EPT or should they be available to all of these tables?",
      "range": {
        "startLine": 31,
        "startChar": 31,
        "endLine": 31,
        "endChar": 46
      },
      "revId": "2aee6f92f6fd7d18cd9c881bf53c8d3eb87a494f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5cfb2f9_acafa2de",
        "filename": "src/sandbox/external-pointer-table.cc",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1519522
      },
      "writtenOn": "2023-04-27T14:03:38Z",
      "side": 1,
      "message": "So there are some practical problems with trying to do that:\n- Moving `Mark` into ExternalEntityTable is easy, but also not really useful since all it\u0027d do is `at(index).Mark()` and we\u0027d still need ExternalPointerTable::Mark to perform the handle -\u003e index conversion\n- Moving `SweepAndCompact` into ExternalEntityTable is tricky because\n    - compaction requires knowledge of how ExternalPointerTableHandles look like (see `ResolveEvacuationEntryDuringSweeping`), and that\u0027s something only the EPT (not the EET) should know about\n    - compaction assumes that there is a 1:1 relationship between HeapObject and Entry, which is the case for the EPT, but not necessarily for e.g. the upcoming CodePointerTable\n    - It becomes really awkward trying to split up Sweeping and Compacting (at least all my attempts at doing so needed some weird hacks to work). I tried moving the logic into `Entry::Sweep()`, but that also doesn\u0027t work because for compaction, you need to be able to access other entries in the table during sweeping. Only if you walk over the table twice (1st time just to compact, 2nd time to sweep) can you nicely separate the things, but that seems a bit too expensive?\n    \nSo in short, yes, it seems the GC parts (in particular, compacting) are specific to EPT and cannot cleanly be separated from the other GC parts.",
      "parentUuid": "c35c54a6_6e31a756",
      "range": {
        "startLine": 31,
        "startChar": 31,
        "endLine": 31,
        "endChar": 46
      },
      "revId": "2aee6f92f6fd7d18cd9c881bf53c8d3eb87a494f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a59efc53_4bc7de78",
        "filename": "src/sandbox/external-pointer-table.cc",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2023-04-27T14:56:14Z",
      "side": 1,
      "message": "(1) Do you envision that the GC reaches through the EET?\n(2) How will entries be reclaimed?\n\nI guess if the answer to (1) is yes, and (2) is \"somehow GC\", we should think about how to move the GC helpers there as well?",
      "parentUuid": "c5cfb2f9_acafa2de",
      "range": {
        "startLine": 31,
        "startChar": 31,
        "endLine": 31,
        "endChar": 46
      },
      "revId": "2aee6f92f6fd7d18cd9c881bf53c8d3eb87a494f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22bb2198_bd77cb28",
        "filename": "src/sandbox/external-pointer-table.cc",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1519522
      },
      "writtenOn": "2023-04-27T15:04:34Z",
      "side": 1,
      "message": "I see EET as an incomplete class that necessarily needs to be extended (that\u0027s why everything is `protected:`), and one of the things the derived class must implement is some way of reclaiming entries (in theory the derived class could even use explicit memory management if e.g. the external objects themselves own the entires, but currently that doesn\u0027t seem to be needed).\nWhile EET could implement a simple GC algorithm (essentially `Mark` and `Sweep` that simply forward to `Entry::Mark` and `Entry::Sweep` respectively, because only those know how the marking scheme is implemented), currently it seems EPT couldn\u0027t use that code at all because it also needs compaction to happen at the same time, and that logic is very EPT-specific (awareness of ExternalPointerHandle, etc.).\nI guess when we implement the CodePointerTable, we\u0027ll see how GC for that will work. Probably it\u0027ll be a simpler GC that just does Sweep but not Compact. We can then check if we can move some common parts of EPT::SweepAndCompact and CPT::Sweep into EET, but I\u0027m not too optimistic that we\u0027ll be able to share a lot of code...",
      "parentUuid": "a59efc53_4bc7de78",
      "range": {
        "startLine": 31,
        "startChar": 31,
        "endLine": 31,
        "endChar": 46
      },
      "revId": "2aee6f92f6fd7d18cd9c881bf53c8d3eb87a494f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}