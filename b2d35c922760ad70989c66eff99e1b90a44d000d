{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d9ab6211_4bd73a5b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 10
      },
      "lineNbr": 11,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2022-06-29T13:57:24Z",
      "side": 1,
      "message": "What is the semantics of the `TryTruncateFloat64To*` operators? Do they fail on out-of-bounds or also on non-integer numbers? From reading the code, I got the impression that `TryTruncateFloat64ToInt32` fails on fractional numbers while `TryTruncateFloat64ToUint32` only fails on out-of-bounds?",
      "range": {
        "startLine": 11,
        "startChar": 31,
        "endLine": 11,
        "endChar": 56
      },
      "revId": "b2d35c922760ad70989c66eff99e1b90a44d000d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72a6a6af_ed1dc6fd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 10
      },
      "lineNbr": 11,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2022-07-01T16:54:04Z",
      "side": 1,
      "message": "As discussed offline, they should both handle fractional numbers and just round them according to https://webidl.spec.whatwg.org/#EnforceRange. Added some comments in the code.",
      "parentUuid": "d9ab6211_4bd73a5b",
      "range": {
        "startLine": 11,
        "startChar": 31,
        "endLine": 11,
        "endChar": 56
      },
      "revId": "b2d35c922760ad70989c66eff99e1b90a44d000d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e5bb62a_be68e50e",
        "filename": "src/codegen/x64/macro-assembler-x64.cc",
        "patchSetId": 10
      },
      "lineNbr": 1194,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2022-06-29T13:57:24Z",
      "side": 1,
      "message": "How about doing this: First unconditionally subtract the floating-point value 2^31, then convert to signed int32, then add 2^31? This should generate less branches and less instructions.",
      "range": {
        "startLine": 1194,
        "startChar": 5,
        "endLine": 1194,
        "endChar": 25
      },
      "revId": "b2d35c922760ad70989c66eff99e1b90a44d000d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1a01bee7_dc0955a6",
        "filename": "src/codegen/x64/macro-assembler-x64.cc",
        "patchSetId": 10
      },
      "lineNbr": 1194,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2022-07-01T16:54:04Z",
      "side": 1,
      "message": "Also as discussed offline, this code is somewhat confusing. We decided there\u0027s not an easy way to spare instructions, so I\u0027m leaving it as it is for the sake of correctness.",
      "parentUuid": "1e5bb62a_be68e50e",
      "range": {
        "startLine": 1194,
        "startChar": 5,
        "endLine": 1194,
        "endChar": 25
      },
      "revId": "b2d35c922760ad70989c66eff99e1b90a44d000d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}