{
  "comments": [
    {
      "key": {
        "uuid": "c6c3ae38_8aab69f1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2020-09-01T19:45:33Z",
      "side": 1,
      "message": "Patch set 3 Release mode results:\n- mjsunit and test262 pass without errors.\n- cctest has 20 errors. At first glance, looks like test-specific fixes are needed.\n- unittests have 9 errors. At first glance, looks like a variety of different issues that need investigation.\n- messages is expected to fail because extra `printf` statements are still in the patch. I think inspector-tests are in the same boat?",
      "revId": "17a012340445978d610baf6de432118b072cd0bf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fe6b66f7_e7d13571",
        "filename": "src/base/platform/platform-posix.cc",
        "patchSetId": 3
      },
      "lineNbr": 157,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-09-02T07:39:50Z",
      "side": 1,
      "message": "q: what about jitless builds?",
      "revId": "17a012340445978d610baf6de432118b072cd0bf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "035b45c7_8d33590a",
        "filename": "src/base/platform/platform-posix.cc",
        "patchSetId": 3
      },
      "lineNbr": 157,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-09-08T11:17:52Z",
      "side": 1,
      "message": "Friendly ping (since you may have missed this due to missing email notifications before setting this CL active).",
      "parentUuid": "fe6b66f7_e7d13571",
      "revId": "17a012340445978d610baf6de432118b072cd0bf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef03a585_02c59aa0",
        "filename": "src/base/platform/platform-posix.cc",
        "patchSetId": 3
      },
      "lineNbr": 157,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2020-09-09T19:56:19Z",
      "side": 1,
      "message": "Per offline discussion, I\u0027ll add `!defined(V8_OS_IOS)` for now, because we can\u0027t access FLAG_jitless from here, and iOS is the situation where jitless support really matters.\n\nFuture plan: when we address the other TODO by passing around a parameter to address space reservation requests indicating that we\u0027re planning to use that space for code later, then we can use that same mechanism to make sure we only set this parameter when FLAG_jitless \u003d\u003d false. Alternatively, if/when we implement full w^x exclusion everywhere, we won\u0027t need this at all any more.",
      "parentUuid": "035b45c7_8d33590a",
      "revId": "17a012340445978d610baf6de432118b072cd0bf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb8f2c0a_8410baa8",
        "filename": "src/base/platform/platform-posix.cc",
        "patchSetId": 3
      },
      "lineNbr": 157,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-09-10T05:54:10Z",
      "side": 1,
      "message": "Just to point out: this may also matter on tvOS, perhaps elsewhere? We should definitely fix this s.t. jitless works out of the box everywhere, but I\u0027m okay with doing it in follow-ups as you describe above (as long as it actually happens :).",
      "parentUuid": "ef03a585_02c59aa0",
      "revId": "17a012340445978d610baf6de432118b072cd0bf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48d32a03_5ae16c03",
        "filename": "src/base/platform/platform-posix.cc",
        "patchSetId": 3
      },
      "lineNbr": 157,
      "author": {
        "id": 1243531
      },
      "writtenOn": "2020-09-10T20:23:42Z",
      "side": 1,
      "message": "For Cobalt, we have a custom V8_OS_STARBOARD that normally prevents V8_OS_MACOSX or other V8_OS_* macros from being defined. https://cobalt.googlesource.com/cobalt/+/refs/heads/master/src/v8/include/v8config.h#78\n\nHowever, V8_OS_MACOSX is used when building emulator to generate the V8 snapshot for our tvOS build (which is jitless). In our particular case, the #if still fails since V8_HOST_ARCH_ARM64 is not true -- but that will change once arm64 Macs start rolling out.\n\nSo this is a potential issue for our tvOS build in the future.",
      "parentUuid": "eb8f2c0a_8410baa8",
      "revId": "17a012340445978d610baf6de432118b072cd0bf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd3cbec5_b9442538",
        "filename": "src/base/platform/platform-posix.cc",
        "patchSetId": 3
      },
      "lineNbr": 157,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2020-09-11T11:49:16Z",
      "side": 1,
      "message": "Yes, this is not meant to be a permanent solution.\nI\u0027ve looked into making the flag more fine-grained at https://chromium-review.googlesource.com/c/v8/v8/+/2404778, but I\u0027m not quite happy with that particular attempt. At any rate, we won\u0027t leave it like it is permanently.",
      "parentUuid": "48d32a03_5ae16c03",
      "revId": "17a012340445978d610baf6de432118b072cd0bf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}