{
  "comments": [
    {
      "key": {
        "uuid": "d9e1dcba_cf2f5916",
        "filename": "include/v8-profiler.h",
        "patchSetId": 10
      },
      "lineNbr": 66,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2019-05-21T12:58:07Z",
      "side": 1,
      "message": "Can you just use \n    void* contexts[kMaxFramesCount] \u003d {0};\nin the member definition?",
      "range": {
        "startLine": 66,
        "startChar": 4,
        "endLine": 66,
        "endChar": 42
      },
      "revId": "2db0d500e4dac655fe876c8ddf4c97bdf7b4a17a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f71e6b90_0d69bfcc",
        "filename": "include/v8-profiler.h",
        "patchSetId": 10
      },
      "lineNbr": 66,
      "author": {
        "id": 1305811
      },
      "writtenOn": "2019-05-29T20:33:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d9e1dcba_cf2f5916",
      "range": {
        "startLine": 66,
        "startChar": 4,
        "endLine": 66,
        "endChar": 42
      },
      "revId": "2db0d500e4dac655fe876c8ddf4c97bdf7b4a17a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "89976ad0_80cca50b",
        "filename": "include/v8-profiler.h",
        "patchSetId": 10
      },
      "lineNbr": 122,
      "author": {
        "id": 1115861
      },
      "writtenOn": "2019-05-21T22:08:36Z",
      "side": 1,
      "message": "\u003d nullptr",
      "revId": "2db0d500e4dac655fe876c8ddf4c97bdf7b4a17a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "837c41a0_4784cce1",
        "filename": "include/v8-profiler.h",
        "patchSetId": 10
      },
      "lineNbr": 122,
      "author": {
        "id": 1305811
      },
      "writtenOn": "2019-05-29T20:33:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "89976ad0_80cca50b",
      "revId": "2db0d500e4dac655fe876c8ddf4c97bdf7b4a17a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "04876178_3cdeb6f9",
        "filename": "include/v8-profiler.h",
        "patchSetId": 10
      },
      "lineNbr": 344,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2019-05-21T12:58:07Z",
      "side": 1,
      "message": "I think the convention is to convert Locals to Handles within the API layer before calling into internal::. That is difficult here where context is a member of the options class, because we\u0027d have to have a \u0027shadow\u0027 internal::CpuProfilingOptions class which is the same except this arg is a Handle instead. Not sure how to address this here",
      "range": {
        "startLine": 344,
        "startChar": 22,
        "endLine": 344,
        "endChar": 32
      },
      "revId": "2db0d500e4dac655fe876c8ddf4c97bdf7b4a17a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd949686_c5829bc8",
        "filename": "include/v8-profiler.h",
        "patchSetId": 10
      },
      "lineNbr": 344,
      "author": {
        "id": 1305811
      },
      "writtenOn": "2019-05-29T20:33:52Z",
      "side": 1,
      "message": "Agreed, we should likely produce some internal, isomorphic CpuProfilingOptions. I\u0027ll think about this some more.",
      "parentUuid": "04876178_3cdeb6f9",
      "range": {
        "startLine": 344,
        "startChar": 22,
        "endLine": 344,
        "endChar": 32
      },
      "revId": "2db0d500e4dac655fe876c8ddf4c97bdf7b4a17a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d25b9be_03d38c85",
        "filename": "include/v8-profiler.h",
        "patchSetId": 10
      },
      "lineNbr": 349,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2019-05-21T12:58:07Z",
      "side": 1,
      "message": "I would rename this to make it clear that it\u0027s for filtering, e.g. filter_context",
      "range": {
        "startLine": 349,
        "startChar": 17,
        "endLine": 349,
        "endChar": 24
      },
      "revId": "2db0d500e4dac655fe876c8ddf4c97bdf7b4a17a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62742f2e_9ee03ce3",
        "filename": "include/v8-profiler.h",
        "patchSetId": 10
      },
      "lineNbr": 349,
      "author": {
        "id": 1305811
      },
      "writtenOn": "2019-05-29T20:33:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8d25b9be_03d38c85",
      "range": {
        "startLine": 349,
        "startChar": 17,
        "endLine": 349,
        "endChar": 24
      },
      "revId": "2db0d500e4dac655fe876c8ddf4c97bdf7b4a17a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce2eea83_6dbeae0a",
        "filename": "src/profiler/profile-generator.cc",
        "patchSetId": 10
      },
      "lineNbr": 538,
      "author": {
        "id": 1115861
      },
      "writtenOn": "2019-05-21T22:08:36Z",
      "side": 1,
      "message": "why\u0027s the change?",
      "revId": "2db0d500e4dac655fe876c8ddf4c97bdf7b4a17a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "beb9d24c_f876a1eb",
        "filename": "src/profiler/profile-generator.cc",
        "patchSetId": 10
      },
      "lineNbr": 538,
      "author": {
        "id": 1305811
      },
      "writtenOn": "2019-05-29T20:33:52Z",
      "side": 1,
      "message": "It\u0027s now possible for a profile to receive samples from before it started, with the changes to CpuProfiler::StartProfiling to start the processor prior to starting a profiler.",
      "parentUuid": "ce2eea83_6dbeae0a",
      "revId": "2db0d500e4dac655fe876c8ddf4c97bdf7b4a17a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "219a2580_460559be",
        "filename": "src/profiler/profile-generator.cc",
        "patchSetId": 10
      },
      "lineNbr": 849,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2019-05-21T12:58:07Z",
      "side": 1,
      "message": "I prefer not to have this custom mechanism for tracking moving contexts, to some extent it re-implements Handles.\n\nCould we store a GlobalHandle inside ContextFilter which is weak instead? Then it will be updated by the GC on movement, but it won\u0027t keep the context alive unnecessarily. The code to use would be GlobalHandles::MakeWeak(). At the API level, Globals are called Persistents.",
      "range": {
        "startLine": 849,
        "startChar": 28,
        "endLine": 849,
        "endChar": 72
      },
      "revId": "2db0d500e4dac655fe876c8ddf4c97bdf7b4a17a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ec09770_62e83a09",
        "filename": "src/profiler/profile-generator.cc",
        "patchSetId": 10
      },
      "lineNbr": 849,
      "author": {
        "id": 1305811
      },
      "writtenOn": "2019-05-29T20:33:52Z",
      "side": 1,
      "message": "The issue with this is that if the native context moves while a sample is enqueued for processing, the profile generator will compare native contexts using the most up-to-date native context addresses, rather than the ones at the time the sample was taken. This is likely to cause false negatives.",
      "parentUuid": "219a2580_460559be",
      "range": {
        "startLine": 849,
        "startChar": 28,
        "endLine": 849,
        "endChar": 72
      },
      "revId": "2db0d500e4dac655fe876c8ddf4c97bdf7b4a17a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "645e0df3_529a4530",
        "filename": "src/profiler/profile-generator.cc",
        "patchSetId": 10
      },
      "lineNbr": 849,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2019-06-17T13:10:42Z",
      "side": 1,
      "message": "Ah. Yes that\u0027s a problem. We always run into this problem in V8 where we want to identify objects uniquely by address but that doesn\u0027t work with a moving GC... Not sure how to deal with this here.\n\nI\u0027ll add Yang, maybe he has an idea.\n\nFrom briefly chatting to GC folks, it would be acceptable to add context moves to the code move event API if there is no other way to do this. The code move events are already behind a templatized interface so there is basically no overhead when profiling is not enabled.\n\nOther ideas I\u0027ll throw out there:\n1. Can we uniquely identify a context some other way, like an ID assigned on creation? The problem is that we need to deref the context during the signal handler and it might be in some weird halfway state.\n2. Make contexts non-moving. Seems like a big hammer.\n3. Do the filtering during the interrupt rather than during the processing. We\u0027d have to expose weak handles of the context to filter to the signal handler. I think we run into problems with this where one sample doesn\u0027t only map to one profile, it could go to multiple profiles with different filters.",
      "parentUuid": "1ec09770_62e83a09",
      "range": {
        "startLine": 849,
        "startChar": 28,
        "endLine": 849,
        "endChar": 72
      },
      "revId": "2db0d500e4dac655fe876c8ddf4c97bdf7b4a17a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18dcad76_1d69133f",
        "filename": "src/profiler/tick-sample.cc",
        "patchSetId": 10
      },
      "lineNbr": 314,
      "author": {
        "id": 1115861
      },
      "writtenOn": "2019-05-21T22:08:36Z",
      "side": 1,
      "message": "I wonder why can\u0027t we just pull the native_context() from the JSFunction object during CodeEntry construction instead?\nIs it a different context?",
      "revId": "2db0d500e4dac655fe876c8ddf4c97bdf7b4a17a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77bedcff_ce38990a",
        "filename": "src/profiler/tick-sample.cc",
        "patchSetId": 10
      },
      "lineNbr": 314,
      "author": {
        "id": 1305811
      },
      "writtenOn": "2019-05-23T01:44:48Z",
      "side": 1,
      "message": "Good point - a few things:\n\n- The current CodeEntry logging uses SharedFunctionInfo objects for non-optimized code objects. We could add JSFunction logging, but there would likely be memory overhead.\n- IIUC, it\u0027s possible to execute a function with a different context than its creation context. See v8::Function::Call. We may not want to include these outliers to avoid leaking execution info cross-context.\n\nI\u0027m open to exploring your suggestion, I figured that this approach would be the safest (mapping most closely to the Incumbent Realm concept in HTML5).",
      "parentUuid": "18dcad76_1d69133f",
      "revId": "2db0d500e4dac655fe876c8ddf4c97bdf7b4a17a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "78af3fb1_158064dd",
        "filename": "test/cctest/test-cpu-profiler.cc",
        "patchSetId": 10
      },
      "lineNbr": 3375,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2019-05-21T12:58:07Z",
      "side": 1,
      "message": "You now need %PrepareFunctionForOptimization before calling %OptimizeFunctionOnNextCall. Normally you do\n\n    %PrepareFunctionForOptimization(foo)\n    foo();\n    foo();\n    %OptimizeFunctionOnNextCall(foo)\n\nand call foo twice before optimizing to get any possible IC state from uninitialized -\u003e pre-monomorphic -\u003e monomorphic.",
      "range": {
        "startLine": 3375,
        "startChar": 9,
        "endLine": 3375,
        "endChar": 35
      },
      "revId": "2db0d500e4dac655fe876c8ddf4c97bdf7b4a17a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1bba6a22_030ef5c5",
        "filename": "test/cctest/test-cpu-profiler.cc",
        "patchSetId": 10
      },
      "lineNbr": 3375,
      "author": {
        "id": 1305811
      },
      "writtenOn": "2019-05-29T20:33:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "78af3fb1_158064dd",
      "range": {
        "startLine": 3375,
        "startChar": 9,
        "endLine": 3375,
        "endChar": 35
      },
      "revId": "2db0d500e4dac655fe876c8ddf4c97bdf7b4a17a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}