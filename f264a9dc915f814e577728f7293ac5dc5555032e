{
  "comments": [
    {
      "key": {
        "uuid": "d2b3e7b2_b0fe3989",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1440073
      },
      "writtenOn": "2020-09-16T17:38:01Z",
      "side": 1,
      "message": "Hi!\nCould you please review this change?",
      "revId": "f264a9dc915f814e577728f7293ac5dc5555032e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7fc3f2d0_7940a5f9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2020-09-17T06:00:29Z",
      "side": 1,
      "message": "Very nice already, mostly nits.",
      "revId": "f264a9dc915f814e577728f7293ac5dc5555032e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a389baa_1db544e9",
        "filename": "src/builtins/x64/builtins-x64.cc",
        "patchSetId": 2
      },
      "lineNbr": 3725,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2020-09-17T06:00:29Z",
      "side": 1,
      "message": "The order in which you handle the return types seems weird to me: I64 -\u003e F32 -\u003e F64 -\u003e I32. Above in the conditions you have I32 -\u003e I64 -\u003e F32 -\u003e F64. Could you use the I I32 -\u003e I64 -\u003e F32 -\u003e F64 order everywhere consistently?",
      "revId": "f264a9dc915f814e577728f7293ac5dc5555032e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "567a8d51_5c30e980",
        "filename": "src/builtins/x64/builtins-x64.cc",
        "patchSetId": 2
      },
      "lineNbr": 3725,
      "author": {
        "id": 1440073
      },
      "writtenOn": "2020-09-17T07:30:03Z",
      "side": 1,
      "message": "Ok. \n(I assume that the conversion to heapnumber should be in one block with the whole i32 case)",
      "parentUuid": "0a389baa_1db544e9",
      "revId": "f264a9dc915f814e577728f7293ac5dc5555032e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0aa75073_8a83aeaf",
        "filename": "src/builtins/x64/builtins-x64.cc",
        "patchSetId": 2
      },
      "lineNbr": 3732,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2020-09-17T06:00:29Z",
      "side": 1,
      "message": "I wonder if we should just reload param_count after \u0026return_done, instead of at the end of each return type conversion.\nPro:\n* Less code;\n* Less error prone, as we would reload the param_count right before the use.\nCon:\n* One additional instruction in the case where we return a Smi.\n\nQuestion: why is the param_count even loaded before the handling of the return, could we not just load it at \u0026return_done?\n\nThibaud, what do you think?",
      "revId": "f264a9dc915f814e577728f7293ac5dc5555032e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0706b12_f30181c0",
        "filename": "src/builtins/x64/builtins-x64.cc",
        "patchSetId": 2
      },
      "lineNbr": 3732,
      "author": {
        "id": 1440073
      },
      "writtenOn": "2020-09-17T07:30:03Z",
      "side": 1,
      "message": "I think I loaded param_count in l.3592, because I will remove it from the stack with the LeaveFrame in l.3623 and back then I wanted it to be right after the call. \nSo, yes, makes sense to load it after \u0026return_done.\nThanks!",
      "parentUuid": "0aa75073_8a83aeaf",
      "revId": "f264a9dc915f814e577728f7293ac5dc5555032e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "653c43c5_40052844",
        "filename": "src/builtins/x64/builtins-x64.cc",
        "patchSetId": 2
      },
      "lineNbr": 3732,
      "author": {
        "id": 1345975
      },
      "writtenOn": "2020-09-17T14:37:02Z",
      "side": 1,
      "message": "A few thoughts:\n\nI think an additional stack move in the Smi case could have a noticeable impact on performance.\n\nCurrently we save and restore \"param_count\" at each param builtin call. I think that this is no longer necessary with the suggested change, since \"param_count\" is not used until it is reloaded after \"return_done\". So this could be a small speed-up for the builtin case.\n\nI still think optimizing the Smi case is important if we want the comparison with TurboFan-generated wrappers to be fair. But I am fine with leaving that for later, if we even observe a difference. The suggested change looks good.\n\nRelated side note: I just noticed that we use the same register for the \"thread_in_wasm\" flag (r12). I am wondering how that works currently since we seem to expect \"param_count\" to be live until the end of the builtin (we never set it to \"no_reg\"). It\u0027s getting hard to keep track of live ranges manually, though, maybe it is correct.",
      "parentUuid": "b0706b12_f30181c0",
      "revId": "f264a9dc915f814e577728f7293ac5dc5555032e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d35cd88_2b7a7c10",
        "filename": "src/builtins/x64/builtins-x64.cc",
        "patchSetId": 2
      },
      "lineNbr": 3732,
      "author": {
        "id": 1440073
      },
      "writtenOn": "2020-09-17T15:51:30Z",
      "side": 1,
      "message": "Sorry, I didn\u0027t set the registers to no_reg. After the wasm call, I just assumed that none of these registers contain the expected values. So after the wasm call we have to load again into every register we\u0027ll need (that is return_count and param_count). \nI thought about setting every register alias to no_reg after the contents may change. For example I could set each of these register aliases used for the loop (current param, param_limit, current_param_slot) to no_reg after I finished the loop, but then I have Debug check failed: is_valid() error. I guess the problem is that I use these register aliases in the deferred code and that\u0027s placed after the normal flow code, and that\u0027s why I have this error. \nPossible solution is just to reset these aliases in the deferred code, but I didn\u0027t like it that way. But if you think it\u0027s better, I can change it.\nSame happens when I want to set param_count to no_reg after the wasm call.\n\nAnd about the Smi case:\nWe need param_count in the Smi case too to remove the caller frame slots.\nIn the current version (patchset 4) I just moved the loading to param_count to the return_done label, so there\u0027s no additional load. I realized that by moving it there I don\u0027t need to reset it after the builtin calls, because we get to this return_done label after the builtin call.",
      "parentUuid": "653c43c5_40052844",
      "revId": "f264a9dc915f814e577728f7293ac5dc5555032e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}