{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "bf3925a3_33d560a9",
        "filename": "include/v8-isolate.h",
        "patchSetId": 3
      },
      "lineNbr": 1253,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-11-22T09:21:33Z",
      "side": 1,
      "message": "nit: If calling it twice is incorrect, you could check that it\u0027s only called once.",
      "range": {
        "startLine": 1252,
        "startChar": 64,
        "endLine": 1253,
        "endChar": 16
      },
      "revId": "1b07294d9d6402519e780e7b9d33c3073b54b787",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb565e48_4f5f9ccc",
        "filename": "include/v8-isolate.h",
        "patchSetId": 3
      },
      "lineNbr": 1253,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2021-11-22T10:11:22Z",
      "side": 1,
      "message": "No, calling it again is not incorrect; it just does nothing. I will remove the word \"once\" from the comment.",
      "parentUuid": "bf3925a3_33d560a9",
      "range": {
        "startLine": 1252,
        "startChar": 64,
        "endLine": 1253,
        "endChar": 16
      },
      "revId": "1b07294d9d6402519e780e7b9d33c3073b54b787",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5a21ffcf_c30a86ee",
        "filename": "include/v8-isolate.h",
        "patchSetId": 3
      },
      "lineNbr": 1253,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2021-11-22T11:25:52Z",
      "side": 1,
      "message": "Actually, this sentence went away altogether.",
      "parentUuid": "fb565e48_4f5f9ccc",
      "range": {
        "startLine": 1252,
        "startChar": 64,
        "endLine": 1253,
        "endChar": 16
      },
      "revId": "1b07294d9d6402519e780e7b9d33c3073b54b787",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88d15264_02536e15",
        "filename": "src/logging/counters.h",
        "patchSetId": 3
      },
      "lineNbr": 543,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-11-22T09:21:33Z",
      "side": 1,
      "message": "The implementation is currently only thread safe because context creation is synchronized. I would drop this.",
      "range": {
        "startLine": 543,
        "startChar": 43,
        "endLine": 543,
        "endChar": 60
      },
      "revId": "1b07294d9d6402519e780e7b9d33c3073b54b787",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "872469b7_61effe71",
        "filename": "src/logging/counters.h",
        "patchSetId": 3
      },
      "lineNbr": 543,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2021-11-22T10:11:22Z",
      "side": 1,
      "message": "I\u0027m happy to drop this. But, unless I\u0027m missing something, the implementation is thread-safe because there\u0027s an atomic test-and-set (line #303 of counters.cc); it is not because context creation is synchronized.",
      "parentUuid": "88d15264_02536e15",
      "range": {
        "startLine": 543,
        "startChar": 43,
        "endLine": 543,
        "endChar": 60
      },
      "revId": "1b07294d9d6402519e780e7b9d33c3073b54b787",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c895d734_07ce4321",
        "filename": "src/logging/counters.h",
        "patchSetId": 3
      },
      "lineNbr": 543,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-11-22T10:36:48Z",
      "side": 1,
      "message": "The atomic exchange is not enough. This could happen without the external locking:\n1) Thread A sets the flag.\n2) Thread B checks the flag, sees that it\u0027s set and returns.\n3) Thread B uses the existing (nullptr) histogram.\n4) Thread A initializes the histograms.",
      "parentUuid": "872469b7_61effe71",
      "range": {
        "startLine": 543,
        "startChar": 43,
        "endLine": 543,
        "endChar": 60
      },
      "revId": "1b07294d9d6402519e780e7b9d33c3073b54b787",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7abea495_006981e1",
        "filename": "src/logging/counters.h",
        "patchSetId": 3
      },
      "lineNbr": 543,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-11-22T10:39:57Z",
      "side": 1,
      "message": "Btw std::atomic::exchange is not a compare and swap. It\u0027s just a swap that returns the old value. It doesn\u0027t fail if the value changed.\nI guess it works in this case anyway because the only transition is from false to true.\nAlso, if we want to make sure only have thread sets the flag, we need to sync the threads and std::memory_order_relaxed wouldn\u0027t do that. The relaxed order is enough for double checked locking because the mutex will sync the threads.",
      "parentUuid": "c895d734_07ce4321",
      "range": {
        "startLine": 543,
        "startChar": 43,
        "endLine": 543,
        "endChar": 60
      },
      "revId": "1b07294d9d6402519e780e7b9d33c3073b54b787",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8adeb450_eb287cdf",
        "filename": "src/logging/counters.h",
        "patchSetId": 3
      },
      "lineNbr": 543,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2021-11-22T11:25:52Z",
      "side": 1,
      "message": "I\u0027m dropping the sentence about the persistent histogram allocator, as per previous comment. I scenario above would not be incorrect, in the sense that a nullptr histogram can be used (it\u0027s just dropping samples). But I\u0027m happy to drop the comment about thread-safety altogether, if you prefer. I\u0027m not following what you\u0027re writing about std::atomic::exchange, let\u0027s take this offline.",
      "parentUuid": "7abea495_006981e1",
      "range": {
        "startLine": 543,
        "startChar": 43,
        "endLine": 543,
        "endChar": 60
      },
      "revId": "1b07294d9d6402519e780e7b9d33c3073b54b787",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}