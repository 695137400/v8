{
  "comments": [
    {
      "key": {
        "uuid": "cb1979ba_3dd9cbe7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1204345
      },
      "writtenOn": "2020-09-30T15:03:23Z",
      "side": 1,
      "message": "Thanks\n\nCC:tebbi, bbudge to look at the test-code-stub-assembler Context strangeness.",
      "revId": "d1b5c4ebe4afce74db7df659cf714387ba8a670a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8591fa28_20f3f5db",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1204345
      },
      "writtenOn": "2020-09-30T15:03:49Z",
      "side": 1,
      "message": "+Ross for overall OWNERS",
      "revId": "d1b5c4ebe4afce74db7df659cf714387ba8a670a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "717d9a31_94220d32",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2020-09-30T16:55:47Z",
      "side": 1,
      "message": "Thanks for the lengthy cleanup! LGTM % that comment regarding maybe adding static asserts.\n\nAs discussed offline, we will later have to track the UntypedParameters down to be able to eliminate that pesky Node*.",
      "revId": "d1b5c4ebe4afce74db7df659cf714387ba8a670a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "13ef1565_89050981",
        "filename": "src/builtins/builtins-utils-gen.h",
        "patchSetId": 8
      },
      "lineNbr": 46,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2020-09-30T16:55:47Z",
      "side": 1,
      "message": "Double checking this. Do we want a static assert to only use this with std::is_base_of\u003cT, Object\u003e? Alternatively, it could be an enable_if instead of the static assert.\n\nSimilarly down with UncheckedParameter and UntaggedT.",
      "revId": "d1b5c4ebe4afce74db7df659cf714387ba8a670a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93c42a44_514bd339",
        "filename": "src/builtins/builtins-utils-gen.h",
        "patchSetId": 8
      },
      "lineNbr": 46,
      "author": {
        "id": 1204345
      },
      "writtenOn": "2020-09-30T17:49:06Z",
      "side": 1,
      "message": "I think I prefer the static_assert since the error message is less confusing than if enable_if deleted the function. (Not sure if you were suggesting Parameter would use enable_if to select between a checked/unchecked implementation depending on whether the type was an Object subtype, but I think for now I\u0027d rather leave it explicit).\n\nI\u0027ve changed it to use std::is_convertible\u003cTNode\u003cT\u003e, TNode\u003cObject\u003e\u003e::value (which works with Union types and copied from Cast in code-assembler.h) and put it in code-assembler.h since the function here always calls that one anyway.\n\nUncheckedParameter is used in places where previously people were writing UncheckedCast\u003c...\u003e(Parameter(...)). Sometimes they used types Object subtypes, so I\u0027m trying to preserve the behaviour there.\n\nUltimately these all go through the original casts so anything that\u0027s not caught here will be caught there, so I\u0027m not concerned with replicating that all here.",
      "parentUuid": "13ef1565_89050981",
      "revId": "d1b5c4ebe4afce74db7df659cf714387ba8a670a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "638e1c08_057ebc0c",
        "filename": "src/builtins/builtins-utils-gen.h",
        "patchSetId": 8
      },
      "lineNbr": 46,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2020-10-01T09:03:37Z",
      "side": 1,
      "message": "\u003e (Not sure if you were suggesting Parameter would use enable_if to select between a checked/unchecked implementation depending on whether the type was an Object subtype, but I think for now I\u0027d rather leave it explicit).\n\nI meant to keep them separate and have both with enable_if. static_assert sounds the better solution of the two though.\n\n\u003e UncheckedParameter is used in places where previously people were writing UncheckedCast\u003c...\u003e(Parameter(...)). Sometimes they used types Object subtypes, so I\u0027m trying to preserve the behaviour there.\n\nHuh, I thought we only did that for UntaggedT derived classes.\n\nPS 8..9 LGTM",
      "parentUuid": "93c42a44_514bd339",
      "revId": "d1b5c4ebe4afce74db7df659cf714387ba8a670a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "86cddf58_45bcb6a6",
        "filename": "src/builtins/builtins-utils-gen.h",
        "patchSetId": 8
      },
      "lineNbr": 46,
      "author": {
        "id": 1204345
      },
      "writtenOn": "2020-10-01T10:18:43Z",
      "side": 1,
      "message": "\u003e \u003e UncheckedParameter is used in places where previously people were writing UncheckedCast\u003c...\u003e(Parameter(...)). Sometimes they used types Object subtypes, so I\u0027m trying to preserve the behaviour there.\n\u003e \n\u003e Huh, I thought we only did that for UntaggedT derived classes.\n\nIt\u0027s perhaps something we should tighten up afterwards. I guess UncheckedCast couldn\u0027t do it but maybe it make UncheckedParameter should.",
      "parentUuid": "638e1c08_057ebc0c",
      "revId": "d1b5c4ebe4afce74db7df659cf714387ba8a670a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}