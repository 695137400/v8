{
  "comments": [
    {
      "key": {
        "uuid": "41d70206_9d5a3782",
        "filename": "src/objects/transitions.cc",
        "patchSetId": 15
      },
      "lineNbr": 47,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2020-06-24T07:46:12Z",
      "side": 1,
      "message": "Don\u0027t we already know from the context that index will be kNotFound?",
      "revId": "184f7fb9917d22a48da1fbdf7d3592d7b5959a02",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "457c261d_b0129b4b",
        "filename": "src/objects/transitions.cc",
        "patchSetId": 15
      },
      "lineNbr": 47,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2020-06-24T08:29:49Z",
      "side": 1,
      "message": "We know that for kUninitialized and kMigrationTarget since the array is empty. We do not know that for kWeakRef though. It could be a PROPERTY_TRANSITION (i.e not a SIMPLE one) which could be found. Then, we could special case for the first two (kWeakRef needs to check).\n\nHowever, we still need to search to fill in the correct insertion_index, which fills in index without overhead. Also, avoiding special casing helps reading from already super special cased method(s).",
      "parentUuid": "41d70206_9d5a3782",
      "revId": "184f7fb9917d22a48da1fbdf7d3592d7b5959a02",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a413f2c_d67eb589",
        "filename": "src/objects/transitions.cc",
        "patchSetId": 15
      },
      "lineNbr": 47,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2020-06-25T09:22:04Z",
      "side": 1,
      "message": "I see. It would be nice if this were done outside of InsertWithNewArray though. Why did we create a new array if we were going to overwrite a value anyway...?",
      "parentUuid": "457c261d_b0129b4b",
      "revId": "184f7fb9917d22a48da1fbdf7d3592d7b5959a02",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7cc0c0b_aefa5c59",
        "filename": "src/objects/transitions.cc",
        "patchSetId": 15
      },
      "lineNbr": 47,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2020-06-25T10:37:44Z",
      "side": 1,
      "message": "Not sure. Maybe for performance reasons it was done to search only once in the array? Although, creating an array also has performance cost.\n\nMaybe for code complexity reasons? To keep it simpler?\n\nIn any case, how would you prefer we proceed? I see two options:\n1) we leave at as is and we create an array even though we might not have needed it\n2) add an else case in line 113 that searches the array and if it finds the property, replaces the target and does not create a new one. Then, in InsertWithNewArray we can CHECK_EQ(index, kNotFound)\n\nOrthogonal to this, there are two cases in which we know that the array is empty and the new transition will be inserted in index 0:\nA) kUninitialized and kMigrationTarget (in line 98)\nB) kWeakRef line 128\nFor A and B we could:\n1) have a second method that would set the number of descriptors, target, etc; or\n2) add a parameter \"bool no_transitions\" which will skip the search and insert in index 0. We can safeguard by adding DCHECK_IMPLIES(no_transitions, new_array-\u003enumber_of_transitions() \u003d\u003d 0);",
      "parentUuid": "5a413f2c_d67eb589",
      "revId": "184f7fb9917d22a48da1fbdf7d3592d7b5959a02",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54661bb6_b8129d75",
        "filename": "src/objects/transitions.cc",
        "patchSetId": 15
      },
      "lineNbr": 47,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2020-06-25T11:31:20Z",
      "side": 1,
      "message": "Replied in the other comment. I guess the old code was simply a little sloppier so it was easier to write.",
      "parentUuid": "c7cc0c0b_aefa5c59",
      "revId": "184f7fb9917d22a48da1fbdf7d3592d7b5959a02",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "918b1e2b_0192a528",
        "filename": "src/objects/transitions.cc",
        "patchSetId": 15
      },
      "lineNbr": 47,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2020-06-25T12:44:18Z",
      "side": 1,
      "message": "Let\u0027s recap, there are different topics that we are talking about:\n1) Avoid allocating array if not needed. This would be extending the check in 104 to consider all flags.\n2) Avoid searching if we know the array has 0 elements. This is for kUninitialized, kMigrationTarget, and one particular case of kWeakRef.\n3) Propose an alternative to search, which would be to use a compare since we know that we have only one element in the array.\n\nTopic 1) might have performance improvements since the allocation wasn\u0027t needed after all; 2) would be a possible special case improvement with the only drawback of making our code bigger; 3) would be a mix of CompareName and CompareDetails",
      "parentUuid": "54661bb6_b8129d75",
      "revId": "184f7fb9917d22a48da1fbdf7d3592d7b5959a02",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e68db10b_5cb83978",
        "filename": "src/objects/transitions.cc",
        "patchSetId": 15
      },
      "lineNbr": 47,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2020-06-25T14:39:42Z",
      "side": 1,
      "message": "There are only 2 cases: \n1) we know the previous transition didn\u0027t exist or is definitely dropped\n2) the previous transition was a simple named property transition\n\nin the second case there are 2 cases:\n1) the incoming value is a SIMPLE_PROPERTY_TRANSITION what matches the key/attributes of the existing transition. If so we can reuse the same case as original code line 44\n2) the incoming value is different from the existing transition somehow (either SIMPLE_PROPERTY_TRANSITION with different key or attributes, or not a SIMPLE_PROPERTY_TRANSITION in which case I guess the key is guaranteed to be different); in which case we need a new transition array that\u0027s big enough for both the original and the new entry.\n\nWe don\u0027t need to \"search\" to verify any of this, we just need to compare name+details for 2.1 vs 2.2.",
      "parentUuid": "918b1e2b_0192a528",
      "revId": "184f7fb9917d22a48da1fbdf7d3592d7b5959a02",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8778b56_69478317",
        "filename": "src/objects/transitions.cc",
        "patchSetId": 15
      },
      "lineNbr": 47,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2020-06-25T15:20:04Z",
      "side": 1,
      "message": "What searching does is search for the insertion_index to insert, i.e compares the new name+details and returns the insertion_index. I don\u0027t see the benefit of inlining the comparison and not calling search for 2.2. We would be duplicating the logic of Search.\n\n\u003e or not a SIMPLE_PROPERTY_TRANSITION in which case I guess the key is guaranteed to be different\n\nCan we rely on this for our logic?",
      "parentUuid": "e68db10b_5cb83978",
      "revId": "184f7fb9917d22a48da1fbdf7d3592d7b5959a02",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "343f1050_e8f4063a",
        "filename": "src/objects/transitions.cc",
        "patchSetId": 15
      },
      "lineNbr": 47,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2020-06-25T15:30:28Z",
      "side": 1,
      "message": "But there is no search? Either it\u0027s 0 or it\u0027s not present. I\u0027m quite confused.\n\nYes you can rely on it. SIMPLE_PROPERTY_TRANSITION only works because the target transition\u0027s last added property is the thing you transition to.",
      "parentUuid": "b8778b56_69478317",
      "revId": "184f7fb9917d22a48da1fbdf7d3592d7b5959a02",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bbec41d3_104d9fa1",
        "filename": "src/objects/transitions.cc",
        "patchSetId": 15
      },
      "lineNbr": 47,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2020-06-25T15:32:02Z",
      "side": 1,
      "message": "Oh you mean the order so we can set it? I suppose you could simply move that to the only place where you insert 2 elements and use the \"search\" to decide in which order to insert the 2 elements. I\u0027d prefer not to have shared code that isn\u0027t actually shared.",
      "parentUuid": "343f1050_e8f4063a",
      "revId": "184f7fb9917d22a48da1fbdf7d3592d7b5959a02",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab591206_e1aae301",
        "filename": "src/objects/transitions.cc",
        "patchSetId": 15
      },
      "lineNbr": 103,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2020-06-22T16:04:40Z",
      "side": 1,
      "message": "simple_transition is different than null iff encoding is kWeakRef.\nThis was implicit in the code before, this change just makes it clearer",
      "range": {
        "startLine": 100,
        "startChar": 8,
        "endLine": 103,
        "endChar": 0
      },
      "revId": "184f7fb9917d22a48da1fbdf7d3592d7b5959a02",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fbdb49c2_dbf23565",
        "filename": "src/objects/transitions.h",
        "patchSetId": 15
      },
      "lineNbr": 44,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-06-24T08:59:25Z",
      "side": 1,
      "message": "Please explain the argument, similar to the previous CL. It would also be helpful to say something about the first constructor\u0027s usage wrt. thread safety.",
      "revId": "184f7fb9917d22a48da1fbdf7d3592d7b5959a02",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ee1e8f2_80dc6b87",
        "filename": "src/objects/transitions.h",
        "patchSetId": 15
      },
      "lineNbr": 44,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2020-06-24T11:03:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fbdb49c2_dbf23565",
      "revId": "184f7fb9917d22a48da1fbdf7d3592d7b5959a02",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1e55c2be_6b1cd16e",
        "filename": "src/objects/transitions.h",
        "patchSetId": 15
      },
      "lineNbr": 160,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2020-06-22T16:04:40Z",
      "side": 1,
      "message": "Willing to bikeshed name.",
      "range": {
        "startLine": 160,
        "startChar": 7,
        "endLine": 160,
        "endChar": 25
      },
      "revId": "184f7fb9917d22a48da1fbdf7d3592d7b5959a02",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b4be376_a881fde8",
        "filename": "src/objects/transitions.h",
        "patchSetId": 15
      },
      "lineNbr": 161,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-06-24T08:59:25Z",
      "side": 1,
      "message": "From reading this description the role of new_array is not clear to me. Similarly the role of that array being \"newly allocated\" (what does that actually mean)?",
      "revId": "184f7fb9917d22a48da1fbdf7d3592d7b5959a02",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f00c4e3b_c4fafcb9",
        "filename": "src/objects/transitions.h",
        "patchSetId": 15
      },
      "lineNbr": 161,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2020-06-24T11:03:36Z",
      "side": 1,
      "message": "Updated comment, WDYT?",
      "parentUuid": "0b4be376_a881fde8",
      "revId": "184f7fb9917d22a48da1fbdf7d3592d7b5959a02",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}