{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "da8a8a58_2065269c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 55
      },
      "lineNbr": 0,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-02-13T11:59:05Z",
      "side": 1,
      "message": "I\u0027ve addressed your comments, please take another look :)",
      "revId": "f0eaff9e27c881dae0d767116d2dd967a6c27008",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b9a1a8b_a84dfccc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 55
      },
      "lineNbr": 0,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2023-02-17T16:52:51Z",
      "side": 1,
      "message": "rd.send_keys(\"",
      "revId": "f0eaff9e27c881dae0d767116d2dd967a6c27008",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe1b8df0_8f2672ed",
        "filename": "src/compiler/effect-control-linearizer.cc",
        "patchSetId": 55
      },
      "lineNbr": 2772,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2023-02-17T16:52:51Z",
      "side": 1,
      "message": "Toon was thinking about removing the distinction between 1- and 2-byte sliced strings. Just FYI",
      "range": {
        "startLine": 2772,
        "startChar": 6,
        "endLine": 2772,
        "endChar": 74
      },
      "revId": "f0eaff9e27c881dae0d767116d2dd967a6c27008",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4dc0b419_22af54c8",
        "filename": "src/compiler/string-builder-optimizer.cc",
        "patchSetId": 55
      },
      "lineNbr": 71,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2023-02-17T16:52:51Z",
      "side": 1,
      "message": "How about calling this `ConcatResult`? The current name sounds too much like a least-upper-bound in my opinion.",
      "range": {
        "startLine": 71,
        "startChar": 50,
        "endLine": 71,
        "endChar": 61
      },
      "revId": "f0eaff9e27c881dae0d767116d2dd967a6c27008",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db2fa7de_468d713d",
        "filename": "src/compiler/string-builder-optimizer.cc",
        "patchSetId": 55
      },
      "lineNbr": 83,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2023-02-17T16:52:51Z",
      "side": 1,
      "message": "Is this a heuristic or do things break (beyond deopt looos) if the result is wrong? Maybe add a comment answering this question.",
      "range": {
        "startLine": 83,
        "startChar": 66,
        "endLine": 83,
        "endChar": 77
      },
      "revId": "f0eaff9e27c881dae0d767116d2dd967a6c27008",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0182056_251b5337",
        "filename": "src/compiler/string-builder-optimizer.cc",
        "patchSetId": 55
      },
      "lineNbr": 228,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2023-02-17T16:52:51Z",
      "side": 1,
      "message": "Toon mentioned recently that externalization can turn 1-byte into two-byte strings... I wonder if this can break anything here.",
      "range": {
        "startLine": 228,
        "startChar": 50,
        "endLine": 228,
        "endChar": 62
      },
      "revId": "f0eaff9e27c881dae0d767116d2dd967a6c27008",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60b00376_21511075",
        "filename": "src/compiler/string-builder-optimizer.cc",
        "patchSetId": 55
      },
      "lineNbr": 474,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2023-02-17T16:52:51Z",
      "side": 1,
      "message": "This explanation doesn\u0027t fit the code, we do return `true` for `kStringLength`. Maybe this function checks if the operation can make the input escape (except for deoptimization...)?",
      "range": {
        "startLine": 472,
        "startChar": 0,
        "endLine": 474,
        "endChar": 14
      },
      "revId": "f0eaff9e27c881dae0d767116d2dd967a6c27008",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0dc028d8_1b60f3e7",
        "filename": "src/compiler/string-builder-optimizer.cc",
        "patchSetId": 55
      },
      "lineNbr": 521,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2023-02-17T16:52:51Z",
      "side": 1,
      "message": "Hmm, I\u0027m having difficulty understanding what exactly is wrong here. The picture above looks fine to me even if `child` modifies the string builder, as long as `other_child` is using the last version of the string builder regarding the control flow that reaches it.",
      "range": {
        "startLine": 516,
        "startChar": 0,
        "endLine": 521,
        "endChar": 33
      },
      "revId": "f0eaff9e27c881dae0d767116d2dd967a6c27008",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00435876_d2a7b5b6",
        "filename": "src/compiler/string-builder-optimizer.cc",
        "patchSetId": 55
      },
      "lineNbr": 954,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2023-02-17T16:52:51Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 954,
        "startChar": 35,
        "endLine": 954,
        "endChar": 46
      },
      "revId": "f0eaff9e27c881dae0d767116d2dd967a6c27008",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7e8699b_391227fa",
        "filename": "src/compiler/string-builder-optimizer.h",
        "patchSetId": 55
      },
      "lineNbr": 162,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2023-02-17T16:52:51Z",
      "side": 1,
      "message": "Maybe add a comment explaining the difference between `kUnknown` and `kCantKnow`?",
      "revId": "f0eaff9e27c881dae0d767116d2dd967a6c27008",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3d0cce6_860c3bf8",
        "filename": "src/compiler/string-builder-optimizer.h",
        "patchSetId": 55
      },
      "lineNbr": 199,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2023-02-17T16:52:51Z",
      "side": 1,
      "message": "I guess a string builder end is not allowed to happen in the middle of a loop body? Maybe mention here how we prevent that.",
      "range": {
        "startLine": 198,
        "startChar": 2,
        "endLine": 199,
        "endChar": 57
      },
      "revId": "f0eaff9e27c881dae0d767116d2dd967a6c27008",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba56fcdf_e0ae2f5d",
        "filename": "src/compiler/string-builder-optimizer.h",
        "patchSetId": 55
      },
      "lineNbr": 217,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2023-02-17T16:52:51Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 217,
        "startChar": 68,
        "endLine": 217,
        "endChar": 73
      },
      "revId": "f0eaff9e27c881dae0d767116d2dd967a6c27008",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eece7e98_4d666400",
        "filename": "src/compiler/string-builder-optimizer.h",
        "patchSetId": 55
      },
      "lineNbr": 231,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2023-02-17T16:52:51Z",
      "side": 1,
      "message": "typo, should be `beginning`. Also in other places.",
      "range": {
        "startLine": 231,
        "startChar": 49,
        "endLine": 231,
        "endChar": 57
      },
      "revId": "f0eaff9e27c881dae0d767116d2dd967a6c27008",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33499f0a_efa3bea0",
        "filename": "src/compiler/string-builder-optimizer.h",
        "patchSetId": 55
      },
      "lineNbr": 267,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2023-02-17T16:52:51Z",
      "side": 1,
      "message": "Slow exponential growth (like `* 1.1`) wastes hardly any space but still behaves better in pretty much any situation: less memory for small numbers, less copying for big numbers.",
      "range": {
        "startLine": 262,
        "startChar": 6,
        "endLine": 267,
        "endChar": 56
      },
      "revId": "f0eaff9e27c881dae0d767116d2dd967a6c27008",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fefcfcc_c256ab60",
        "filename": "src/compiler/string-builder-optimizer.h",
        "patchSetId": 55
      },
      "lineNbr": 327,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2023-02-17T16:52:51Z",
      "side": 1,
      "message": "not really accurate, no?",
      "range": {
        "startLine": 325,
        "startChar": 31,
        "endLine": 327,
        "endChar": 17
      },
      "revId": "f0eaff9e27c881dae0d767116d2dd967a6c27008",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}