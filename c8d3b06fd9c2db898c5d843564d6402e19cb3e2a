{
  "comments": [
    {
      "key": {
        "uuid": "a5f3305d_c0c54113",
        "filename": "src/regexp/regexp-ast.h",
        "patchSetId": 5
      },
      "lineNbr": 67,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2019-06-27T09:18:31Z",
      "side": 1,
      "message": "minor optimisation: since we rely only on from() for is_empty checks, we could make this branchless by making to \u003d\u003d kNone - 1 in the default constructor.",
      "range": {
        "startLine": 67,
        "startChar": 28,
        "endLine": 67,
        "endChar": 42
      },
      "revId": "c8d3b06fd9c2db898c5d843564d6402e19cb3e2a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "609d2a7e_4ec7e656",
        "filename": "src/regexp/regexp-compiler.cc",
        "patchSetId": 5
      },
      "lineNbr": 2567,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2019-06-27T09:18:31Z",
      "side": 1,
      "message": "this might be better to pass by value, it\u0027s only 2 registers on x64 and the code appears to be more compact (https://godbolt.org/z/C5Zzt_)",
      "range": {
        "startLine": 2567,
        "startChar": 22,
        "endLine": 2567,
        "endChar": 59
      },
      "revId": "c8d3b06fd9c2db898c5d843564d6402e19cb3e2a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75d51449_cee5f03f",
        "filename": "src/regexp/regexp-compiler.cc",
        "patchSetId": 5
      },
      "lineNbr": 2578,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2019-06-27T09:18:31Z",
      "side": 1,
      "message": "nit: ~0 or ~uint64_t(0) might be cleaner, your call.",
      "range": {
        "startLine": 2578,
        "startChar": 8,
        "endLine": 2578,
        "endChar": 44
      },
      "revId": "c8d3b06fd9c2db898c5d843564d6402e19cb3e2a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45d6d850_0b4ae61e",
        "filename": "src/regexp/regexp-compiler.cc",
        "patchSetId": 5
      },
      "lineNbr": 2598,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-06-27T07:22:37Z",
      "side": 1,
      "message": "As discussed offline I will upload another PS that changes this back to the way it was before, i.e.: call AddRange and then set all bits (instead of calling SetAll, which sets w_ to kLatticeUnknown).",
      "revId": "c8d3b06fd9c2db898c5d843564d6402e19cb3e2a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0bc43f54_bf11ff96",
        "filename": "src/regexp/regexp-compiler.cc",
        "patchSetId": 5
      },
      "lineNbr": 2598,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2019-06-27T09:18:31Z",
      "side": 1,
      "message": "I think SetAll is correct, by my reading AddRange with an interval exceeding kMapSize will  always return false for both `ranges[0] \u003c\u003d new_range.from()` and `new_range.to() \u003c ranges[0]`, so the for loop will always return kLatticeUnknown",
      "parentUuid": "45d6d850_0b4ae61e",
      "revId": "c8d3b06fd9c2db898c5d843564d6402e19cb3e2a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "112340b4_5972be32",
        "filename": "src/regexp/regexp-compiler.cc",
        "patchSetId": 5
      },
      "lineNbr": 2678,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2019-06-27T09:18:31Z",
      "side": 1,
      "message": "optional: if you\u0027re looking at maximum efficiency, this iteration could be a tiny bit more efficient by pre-splitting the bitset into its two halves, and then iterating first over the lsb, then over the msb.",
      "range": {
        "startLine": 2678,
        "startChar": 16,
        "endLine": 2678,
        "endChar": 33
      },
      "revId": "c8d3b06fd9c2db898c5d843564d6402e19cb3e2a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c07f8b0b_30714a98",
        "filename": "src/regexp/regexp-compiler.cc",
        "patchSetId": 5
      },
      "lineNbr": 2735,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2019-06-27T09:18:31Z",
      "side": 1,
      "message": "inline into the return? or leave as is for self-documenting code I guess, up to you.",
      "range": {
        "startLine": 2735,
        "startChar": 12,
        "endLine": 2735,
        "endChar": 16
      },
      "revId": "c8d3b06fd9c2db898c5d843564d6402e19cb3e2a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}