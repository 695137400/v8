{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "51992537_54944691",
        "filename": "src/interpreter/bytecode-generator.cc",
        "patchSetId": 1
      },
      "lineNbr": 2457,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2023-01-09T07:11:42Z",
      "side": 1,
      "message": "I hope I\u0027m holding this right. The \"VisitTryFinallyStatement\" does the same thing.",
      "range": {
        "startLine": 2457,
        "startChar": 6,
        "endLine": 2457,
        "endChar": 24
      },
      "revId": "95e4e7a87feab8ec24d6782b45fd460895064892",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05f556d8_b292da13",
        "filename": "src/interpreter/bytecode-generator.cc",
        "patchSetId": 1
      },
      "lineNbr": 2457,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2023-01-09T07:36:26Z",
      "side": 1,
      "message": "Hm, not sure, `VisitTryFinallyStatement` can do this because that\u0027s a user try-finally block, while this is a de-sugared one. We used to have a DESUGARING prediction but it got removed, and it was roughly equivalent to CAUGHT (https://chromium-review.googlesource.com/c/v8/v8/+/3003468). Then again, that one was for when both exception and catch are from desugared code, while here the exception is a user exception. What are the consequences if this is `CAUGHT` and not `catch_prediction()`?\n\nCan you also check BuildFinalizeIteration? That one suppresses the thrown exception if the continuation token is `RETHROW`.",
      "parentUuid": "51992537_54944691",
      "range": {
        "startLine": 2457,
        "startChar": 6,
        "endLine": 2457,
        "endChar": 24
      },
      "revId": "95e4e7a87feab8ec24d6782b45fd460895064892",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}