{
  "comments": [
    {
      "key": {
        "uuid": "bad798a5_5802fe43",
        "filename": "src/builtins/builtins-async-gen.cc",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2017-08-07T06:42:37Z",
      "side": 1,
      "message": "Suggestion: FIRST_GENERATOR_OBJECT_TYPE/LAST_GENERATOR_OBJECT_TYPE macros.",
      "revId": "6fc185abd3aa51025d888d447a9bd9da06ec0688",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "314f3308_cd40cf5f",
        "filename": "src/builtins/builtins-async-gen.cc",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2017-08-07T06:42:37Z",
      "side": 1,
      "message": "Please don\u0027t move and change Await in the same CL, the review interface unfortunately can\u0027t handle that well. I\u0027d suggest first making the Await changes (stub conversion etc.) such that the UI still displays a decent diff, and moving the function without any other changes afterwards.\n\nOn a similar note, the commit message mentions several different changes - unless they\u0027re trivial one-liners, it\u0027d be awesome to have these in separate CLs as well.",
      "revId": "6fc185abd3aa51025d888d447a9bd9da06ec0688",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5c14faa_2bb4ad7a",
        "filename": "src/builtins/builtins-async-generator-gen.cc",
        "patchSetId": 1
      },
      "lineNbr": 605,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2017-08-07T06:42:37Z",
      "side": 1,
      "message": "Could var_on_resolve be a TVARIABLE of IntPtrT type?",
      "revId": "6fc185abd3aa51025d888d447a9bd9da06ec0688",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a79e242_608fcd28",
        "filename": "src/builtins/builtins-definitions.h",
        "patchSetId": 1
      },
      "lineNbr": 353,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2017-08-07T06:42:37Z",
      "side": 1,
      "message": "With so many args, I wonder if the register allocator still handles calls well, or if it generates a ton of register moves pre- and post-call.",
      "revId": "6fc185abd3aa51025d888d447a9bd9da06ec0688",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b90cc449_378c65bb",
        "filename": "src/builtins/builtins-definitions.h",
        "patchSetId": 1
      },
      "lineNbr": 353,
      "author": {
        "id": 1162379
      },
      "writtenOn": "2017-08-11T16:27:45Z",
      "side": 1,
      "message": "I\u0027ve spent some time analyzing AsyncGeneratorAwait in a debug build.\n\nThe worst juggling, it looks like, is that `generator` is saved in `r8` and on the stack (on x64). `r8` for immediate use, and on the stack for use after the stub call.\n\nThere are also some slightly mysterious things, like the `on_reject_shared_info` is saved both on stack (for the stub call because it\u0027s the only argument not passed in registers), but also saved in r11 (which is then unused). But that\u0027s a really minor thing and shouldn\u0027t cause any problems.\n\nOf course, because the arguments to AsyncGeneratorAwait don\u0027t map cleanly to the arguments to Await, there is some juggling of the other register arguments. I don\u0027t know that this can be improved on without giving the Await stub a custom interface descriptor, but it\u0027s still very little code, just a handful of extra 3byte instructions.\n\n```\nkind \u003d BUILTIN\nname \u003d AsyncGeneratorAwait\ncompiler \u003d turbofan\nInstructions (size \u003d 262)\n0xed4af51a500     0  55             push rbp\n0xed4af51a501     1  4889e5         REX.W movq rbp,rsp\n0xed4af51a504     4  6a16           push 0x16\n0xed4af51a506     6  4883ec28       REX.W subq rsp,0x28\n\n--- Node* const request \u003d LoadFirstAsyncGeneratorRequestFromQueue(generator)\n0xed4af51a50a     a  4c8bc0         REX.W movq r8,rax         --- r8 \u003d `generator`\n0xed4af51a50d     d  488945f0       REX.W movq [rbp-0x10],rax --- [rbp-0x10] \u003d `generator` (Saved on stack for use after stub call)\n0xed4af51a511    11  498b404f       REX.W movq rax,[r8+0x4f]  --- rax \u003d `request`\n\n--- CSA_ASSERT(this, IsNotUndefined(request))\n0xed4af51a515    15  493945a0       REX.W cmpq [r13-0x60],rax\n0xed4af51a519    19  0f8455000000   jz 0xed4af51a574  (AsyncGeneratorAwait)\n\n--- Node* outer_promise \u003d LoadObjectField(request, AsyncGeneratorRequest::kPromiseOffset)\n0xed4af51a51f    1f  488b401f       REX.W movq rax,[rax+0x1f] --- rax \u003d `outer_promise`\n\n--- Node* promise \u003d Await(context, generator, value, outer_promise, is_caught, Context::ASYNC_GENERATOR_AWAIT_RESOLVE_SHARED_FUN,\n                          Context::ASYNC_GENERATOR_AWAIT_REJECT_SHARED_FUN);\n0xed4af51a523    23  488b5627       REX.W movq rdx,[rsi+0x27] --- rdx \u003d `LoadNativeContext(context)`\n0xed4af51a527    27  bf13000000     movl rdi,0x13             --- `rdi \u003d Context::ASYNC_GENERATOR_AWAIT_RESOLVE_SHARED_FUN`\n0xed4af51a52c    2c  488b7cfa0f     REX.W movq rdi,[rdx+rdi*8+0xf] --- rdi (Descriptor::kOnResolveSharedInfo) \u003d `LoadContextElement(native_context, ...)`\n0xed4af51a531    31  41b912000000   movl r9,0x12              --- r9 \u003d `Context::ASYNC_GENERATOR_AWAIT_REJECT_SHARED_FUN`\n0xed4af51a537    37  4e8b5cca0f     REX.W movq r11,[rdx+r9*8+0xf] --- r11 \u003d `LoadContextElement(native_context, ...)`\n0xed4af51a53c    3c  42ff74ca0f     push [rdx+r9*8+0xf]           --- push stack argument for stub (***why is this in r11?)\n0xed4af51a541    41  488bd1         REX.W movq rdx,rcx            --- rdx (Descriptor::kIsCaught) \u003d `Parameter(Descriptor::kIsCaught)`\n0xed4af51a544    44  488bc8         REX.W movq rcx,rax            --- rcx (Descriptor::kOuterPromise) \u003d `outer_promise`\n0xed4af51a547    47  498bc0         REX.W movq rax,r8             --- rax (Descriptor::kGenerator) \u003d `generator`\n0xed4af51a54a    4a  e811daebff     call 0xed4af3d7f60  (Await)    ;; code: BUILTIN\n\n--- StoreObjectField(generator, JSAsyncGeneratorObject::kAwaitedPromiseOffset, promise)\n0xed4af51a54f    4f  488b5df0       REX.W movq rbx,[rbp-0x10] --- rbx \u003d `generator`\n0xed4af51a553    53  48894357       REX.W movq [rbx+0x57],rax --- StoreObjectField(...)\n\n--- stack alignment stuff?\n0xed4af51a557    57  48c7c10000f8ff REX.W movq rcx,0xfff80000\n0xed4af51a55e    5e  4823cb         REX.W andq rcx,rbx\n0xed4af51a561    61  f6410804       testb [rcx+0x8],0x4\n0xed4af51a565    65  0f8554000000   jnz 0xed4af51a5bf  (AsyncGeneratorAwait)\n\n--- Return(UndefinedConstant())\n0xed4af51a56b    6b  498b45a0       REX.W movq rax,[r13-0x60]\n0xed4af51a56f    6f  488be5         REX.W movq rsp,rbp\n0xed4af51a572    72  5d             pop rbp\n0xed4af51a573    73  c3             retl\n\n--- Assertiom failures...\n0xed4af51a574    74  488945d0       REX.W movq [rbp-0x30],rax\n0xed4af51a578    78  48b8214ff8c552030000 REX.W movq rax,0x352c5f84f21    ;; object: 0x352c5f84f21 \u003cString[100]\\: CSA_ASSERT failed: IsNotUndefined(request) [../../src/builtins/builtins-async-generator-gen.cc:366]\\n\u003e\n0xed4af51a582    82  50             push rax\n0xed4af51a583    83  48895de8       REX.W movq [rbp-0x18],rbx\n0xed4af51a587    87  48894de0       REX.W movq [rbp-0x20],rcx\n0xed4af51a58b    8b  488975d8       REX.W movq [rbp-0x28],rsi\n0xed4af51a58f    8f  48bb90360c0501000000 REX.W movq rbx,0x1050c3690    ;; external reference (Runtime::GlobalPrint)\n0xed4af51a599    99  b801000000     movl rax,0x1\n0xed4af51a59e    9e  33f6           xorl rsi,rsi\n0xed4af51a5a0    a0  e8bb9de6ff     call 0xed4af384360       ;; code: STUB, CEntryStub, minor: 8\n0xed4af51a5a5    a5  cc             int3l\n0xed4af51a5a6    a6  4c8b45f0       REX.W movq r8,[rbp-0x10]\n0xed4af51a5aa    aa  488b5de8       REX.W movq rbx,[rbp-0x18]\n0xed4af51a5ae    ae  488b4de0       REX.W movq rcx,[rbp-0x20]\n0xed4af51a5b2    b2  488b75d8       REX.W movq rsi,[rbp-0x28]\n0xed4af51a5b6    b6  488b45d0       REX.W movq rax,[rbp-0x30]\n0xed4af51a5ba    ba  e960ffffff     jmp 0xed4af51a51f  (AsyncGeneratorAwait)\n0xed4af51a5bf    bf  a801           test al,0x1\n0xed4af51a5c1    c1  74a8           jz 0xed4af51a56b  (AsyncGeneratorAwait)\n0xed4af51a5c3    c3  48c7c10000f8ff REX.W movq rcx,0xfff80000\n0xed4af51a5ca    ca  4823c8         REX.W andq rcx,rax\n0xed4af51a5cd    cd  f6410802       testb [rcx+0x8],0x2\n0xed4af51a5d1    d1  7498           jz 0xed4af51a56b  (AsyncGeneratorAwait)\n0xed4af51a5d3    d3  488d5357       REX.W leaq rdx,[rbx+0x57]\n0xed4af51a5d7    d7  e8043ee8ff     call 0xed4af39e3e0       ;; code: STUB, RecordWriteStub, minor: 8723\n0xed4af51a5dc    dc  eb8d           jmp 0xed4af51a56b  (AsyncGeneratorAwait)\n0xed4af51a5de    de  90             nop\n0xed4af51a5df    df  90             nop\n```",
      "parentUuid": "1a79e242_608fcd28",
      "revId": "6fc185abd3aa51025d888d447a9bd9da06ec0688",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33efd635_4f3fec85",
        "filename": "src/builtins/builtins-definitions.h",
        "patchSetId": 1
      },
      "lineNbr": 353,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2017-08-14T14:58:26Z",
      "side": 1,
      "message": "Out of interest, why did you analyze this in a debug build? The debug build has a mass of CSA_ASSERTs which will change the generated code substantially.",
      "parentUuid": "b90cc449_378c65bb",
      "revId": "6fc185abd3aa51025d888d447a9bd9da06ec0688",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ce95e4d_5884db8e",
        "filename": "src/builtins/builtins-definitions.h",
        "patchSetId": 1
      },
      "lineNbr": 353,
      "author": {
        "id": 1162379
      },
      "writtenOn": "2017-08-14T18:40:03Z",
      "side": 1,
      "message": "It was faster than adding the v8_enable_disassembler flag to args.gn for my release build.\n\nTBF, the analysis is virtually identical. All of the non-assertion code is exactly the same as it was apart from having different addresses, which makes sense since it\u0027s a pretty small function without that many assertions (excluding the CSA_SLOW_ASSERTS, which weren\u0027t present in my debug analysis).\n\nFor completeness, here\u0027s the release code:\n\n```\nkind \u003d BUILTIN\nname \u003d AsyncGeneratorAwait\ncompiler \u003d turbofan\nInstructions (size \u003d 163)\n0x2a6a824726c0     0  55             push rbp\n0x2a6a824726c1     1  4889e5         REX.W movq rbp,rsp\n0x2a6a824726c4     4  6a16           push 0x16\n0x2a6a824726c6     6  4883ec08       REX.W subq rsp,0x8\n\n--- Node* const request \u003d LoadFirstAsyncGeneratorRequestFromQueue(generator)\n0x2a6a824726ca     a  4c8bc0         REX.W movq r8,rax          --- r8 \u003d `generator`\n0x2a6a824726cd     d  488945f0       REX.W movq [rbp-0x10],rax  --- [rbp-0x10] \u003d `generator` (Saved on stack for use after stub call)\n0x2a6a824726d1    11  498b404f       REX.W movq rax,[r8+0x4f]   --- rax \u003d `request`\n\n--- Node* outer_promise \u003d LoadObjectField(request, AsyncGeneratorRequest::kPromiseOffset)\n0x2a6a824726d5    15  488b401f       REX.W movq rax,[rax+0x1f]\n\n--- Node* promise \u003d Await(context, generator, value, outer_promise, is_caught, Context::ASYNC_GENERATOR_AWAIT_RESOLVE_SHARED_FUN,\n                          Context::ASYNC_GENERATOR_AWAIT_REJECT_SHARED_FUN);\n0x2a6a824726d9    19  488b5627       REX.W movq rdx,[rsi+0x27]      --- rdx \u003d `LoadNativeContext(context)`\n0x2a6a824726dd    1d  bf13000000     movl rdi,0x13                  --- `rdi \u003d Context::ASYNC_GENERATOR_AWAIT_RESOLVE_SHARED_FUN`\n0x2a6a824726e2    22  488b7cfa0f     REX.W movq rdi,[rdx+rdi*8+0xf] --- rdi (Descriptor::kOnResolveSharedInfo) \u003d `LoadContextElement(native_context, ...)`\n0x2a6a824726e7    27  41b912000000   movl r9,0x12                   --- r9 \u003d `Context::ASYNC_GENERATOR_AWAIT_REJECT_SHARED_FUN`\n0x2a6a824726ed    2d  4e8b5cca0f     REX.W movq r11,[rdx+r9*8+0xf]  --- r11 \u003d `LoadContextElement(native_context, ...)`\n0x2a6a824726f2    32  42ff74ca0f     push [rdx+r9*8+0xf]            --- push stack argument for stub (***why is this in r11?)\n0x2a6a824726f7    37  488bd1         REX.W movq rdx,rcx             --- rdx (Descriptor::kIsCaught) \u003d `Parameter(Descriptor::kIsCaught)`\n0x2a6a824726fa    3a  488bc8         REX.W movq rcx,rax             --- rcx (Descriptor::kOuterPromise) \u003d `outer_promise`\n0x2a6a824726fd    3d  498bc0         REX.W movq rax,r8              --- rax (Descriptor::kGenerator) \u003d `generator`\n0x2a6a82472700    40  e8dbfcf5ff     call 0x2a6a823d23e0  (Await)    ;; code: BUILTIN\n\n--- StoreObjectField(generator, JSAsyncGeneratorObject::kAwaitedPromiseOffset, promise)\n0x2a6a82472705    45  488b5df0       REX.W movq rbx,[rbp-0x10]      --- rbx \u003d `generator`\n0x2a6a82472709    49  48894357       REX.W movq [rbx+0x57],rax      --- StoreObjectField(...)\n\n--- Return(UndefinedConstant()) including stack cleanup stuff\n0x2a6a8247270d    4d  48c7c10000f8ff REX.W movq rcx,0xfff80000\n0x2a6a82472714    54  4823cb         REX.W andq rcx,rbx\n0x2a6a82472717    57  f6410804       testb [rcx+0x8],0x4\n0x2a6a8247271b    5b  0f8509000000   jnz 0x2a6a8247272a  (AsyncGeneratorAwait)\n0x2a6a82472721    61  498b45a0       REX.W movq rax,[r13-0x60]\n0x2a6a82472725    65  488be5         REX.W movq rsp,rbp\n0x2a6a82472728    68  5d             pop rbp\n0x2a6a82472729    69  c3             retl\n0x2a6a8247272a    6a  a801           test al,0x1\n0x2a6a8247272c    6c  74f3           jz 0x2a6a82472721  (AsyncGeneratorAwait)\n0x2a6a8247272e    6e  48c7c10000f8ff REX.W movq rcx,0xfff80000\n0x2a6a82472735    75  4823c8         REX.W andq rcx,rax\n0x2a6a82472738    78  f6410802       testb [rcx+0x8],0x2\n0x2a6a8247273c    7c  74e3           jz 0x2a6a82472721  (AsyncGeneratorAwait)\n0x2a6a8247273e    7e  488d5357       REX.W leaq rdx,[rbx+0x57]\n0x2a6a82472742    82  e879adf2ff     call 0x2a6a8239d4c0     ;; code: STUB, RecordWriteStub, minor: 8723\n0x2a6a82472747    87  ebd8           jmp 0x2a6a82472721  (AsyncGeneratorAwait)\n0x2a6a82472749    89  90             nop\n0x2a6a8247274a    8a  6690           nop\n```\n\n\nIt would be nice if the Await calling convention allowed just adding the on resolve/on reject stuff to the stack and jumping directly, but the slight register juggling doesn\u0027t seem that bad to me.\n\nStill, the only real known benefit to this is slightly reduced code size (and as mentioned, only by a few kb). I don\u0027t have an application or benchmark to profile so it\u0027s hard to see the perf impact of the change.",
      "parentUuid": "33efd635_4f3fec85",
      "revId": "6fc185abd3aa51025d888d447a9bd9da06ec0688",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}