{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3d60db45_c37e502a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2022-07-08T20:10:46Z",
      "side": 1,
      "message": "PTAL",
      "revId": "bcf5fd846183a821c2c67402a7f15e46d26d7231",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "307ccfd8_b0eddf8b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2022-07-10T12:06:50Z",
      "side": 1,
      "message": "lgtm with nits and suggestions",
      "revId": "bcf5fd846183a821c2c67402a7f15e46d26d7231",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "160dc581_c200e09d",
        "filename": "src/builtins/array-to-spliced.tq",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2022-07-10T12:06:50Z",
      "side": 1,
      "message": "I think we can skip initializing FixedDoubleArrays because GC will not look at the raw data anyway.",
      "revId": "bcf5fd846183a821c2c67402a7f15e46d26d7231",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ea1f3c15_dbbb8c2f",
        "filename": "src/builtins/array-to-spliced.tq",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2022-07-12T01:49:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "160dc581_c200e09d",
      "revId": "bcf5fd846183a821c2c67402a7f15e46d26d7231",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "add7c6c0_f99e2da1",
        "filename": "src/builtins/array-to-spliced.tq",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2022-07-10T12:06:50Z",
      "side": 1,
      "message": "As an alternative approach, please consider allocating the JSArray later once all the elements are initialized.",
      "revId": "bcf5fd846183a821c2c67402a7f15e46d26d7231",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7648d504_86093e1a",
        "filename": "src/builtins/array-to-spliced.tq",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2022-07-12T01:49:53Z",
      "side": 1,
      "message": "That would be the ideal, but the issue is that inserting items may transition the ElementsKind. To allocate the right ElementsKind ahead of time means we can\u0027t use `CSA::CopyElements` when the original kind and the copy kind differs, and would need to use `CSA::CopyFixedArrayElements`, which, for the 3 ElementsKinds supported here, would be 6 calls to that macro to deal with all possible pairs, making this builtin very large. The current approach is a tradeoff between a less brittle fast path and code size by calling to the runtime to transition the copy\u0027s ElementsKind if needed.\n\nPerhaps there\u0027s a better way to do this that I\u0027m missing?",
      "parentUuid": "add7c6c0_f99e2da1",
      "revId": "bcf5fd846183a821c2c67402a7f15e46d26d7231",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8efa66a7_9e5c9076",
        "filename": "src/builtins/array-to-spliced.tq",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2022-07-12T10:07:52Z",
      "side": 1,
      "message": "Ah, indeed, it\u0027s more complicated than I initially thought.",
      "parentUuid": "7648d504_86093e1a",
      "revId": "bcf5fd846183a821c2c67402a7f15e46d26d7231",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6701e487_b6ad08b7",
        "filename": "src/codegen/code-stub-assembler.cc",
        "patchSetId": 1
      },
      "lineNbr": 4758,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2022-07-10T12:06:50Z",
      "side": 1,
      "message": "This could just be a\n  TNode\u003cIntPtrT\u003e start\nwhich you could pass as IntPtrConstant(0) when start is not available...",
      "range": {
        "startLine": 4758,
        "startChar": 4,
        "endLine": 4758,
        "endChar": 40
      },
      "revId": "bcf5fd846183a821c2c67402a7f15e46d26d7231",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3513a165_dcb112bf",
        "filename": "src/codegen/code-stub-assembler.cc",
        "patchSetId": 1
      },
      "lineNbr": 4758,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2022-07-12T01:49:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6701e487_b6ad08b7",
      "range": {
        "startLine": 4758,
        "startChar": 4,
        "endLine": 4758,
        "endChar": 40
      },
      "revId": "bcf5fd846183a821c2c67402a7f15e46d26d7231",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5c9e5df_c882a51a",
        "filename": "src/codegen/code-stub-assembler.cc",
        "patchSetId": 1
      },
      "lineNbr": 4771,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2022-07-10T12:06:50Z",
      "side": 1,
      "message": "... because the offset computation is able to benefit from constant parameters.",
      "revId": "bcf5fd846183a821c2c67402a7f15e46d26d7231",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e9e501dd_7005e59a",
        "filename": "src/codegen/code-stub-assembler.cc",
        "patchSetId": 1
      },
      "lineNbr": 4771,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2022-07-12T01:49:53Z",
      "side": 1,
      "message": "Awesome, didn\u0027t know. Thanks for the suggestion.",
      "parentUuid": "f5c9e5df_c882a51a",
      "revId": "bcf5fd846183a821c2c67402a7f15e46d26d7231",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "481bffde_877da5ca",
        "filename": "src/codegen/code-stub-assembler.cc",
        "patchSetId": 1
      },
      "lineNbr": 4788,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2022-07-10T12:06:50Z",
      "side": 1,
      "message": "Ditto.",
      "range": {
        "startLine": 4788,
        "startChar": 35,
        "endLine": 4788,
        "endChar": 71
      },
      "revId": "bcf5fd846183a821c2c67402a7f15e46d26d7231",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "91b2e037_5aabe402",
        "filename": "src/codegen/code-stub-assembler.cc",
        "patchSetId": 1
      },
      "lineNbr": 4788,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2022-07-12T01:49:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "481bffde_877da5ca",
      "range": {
        "startLine": 4788,
        "startChar": 35,
        "endLine": 4788,
        "endChar": 71
      },
      "revId": "bcf5fd846183a821c2c67402a7f15e46d26d7231",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}