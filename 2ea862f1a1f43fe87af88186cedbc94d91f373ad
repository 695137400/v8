{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ba339d6e_b9cfcc88",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2021-09-20T16:27:59Z",
      "side": 1,
      "message": "I\u0027d expected changes related to serializing/deserializing the length of array buffers, and checks on deserialized length instead of serialized length (it fit in a typed array, it\u0027s hopefully correct? If not, the deserializer should catch it?)",
      "revId": "2ea862f1a1f43fe87af88186cedbc94d91f373ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b600d74_9a8f15d5",
        "filename": "src/api/api.cc",
        "patchSetId": 4
      },
      "lineNbr": 3383,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2021-09-20T17:25:37Z",
      "side": 1,
      "message": "{size} is a {size_t}, so checking whether its value is in range for a {size_t} is pointless (it\u0027ll always return true). So that means you could drop the check and the {else}-branch; however I\u0027m not sure we really want no size limit at all here. Keep in mind that V8 mostly runs on 64-bit platforms these days, so if we want a 4GB limit here, we have to explicitly check for that.",
      "range": {
        "startLine": 3383,
        "startChar": 6,
        "endLine": 3383,
        "endChar": 54
      },
      "revId": "2ea862f1a1f43fe87af88186cedbc94d91f373ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09a8daf0_7088e6d2",
        "filename": "src/api/api.cc",
        "patchSetId": 4
      },
      "lineNbr": 3383,
      "author": {
        "id": 1522823
      },
      "writtenOn": "2021-09-21T01:04:48Z",
      "side": 1,
      "message": "Thank you Jakob. Yes, {size} is a {size_t}, and I\u0027m actually also considering to drop this check and the {else}-branch, because this check makes buffers larger than 2GB and successfully serialized by {ValueSerializer} cannot be deserialized. Perhaps {ValueSerializer} and {ValueDeserializer} should act symmetrically? If so, we could let {ValueSerializer} and {ValueDeserializer} both work with largest buffers v8 allows (4GB), or set the same limit to {ValueSerializer}. My code do the later, but the former also a good way to me.",
      "parentUuid": "3b600d74_9a8f15d5",
      "range": {
        "startLine": 3383,
        "startChar": 6,
        "endLine": 3383,
        "endChar": 54
      },
      "revId": "2ea862f1a1f43fe87af88186cedbc94d91f373ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39070097_35affe64",
        "filename": "src/api/api.cc",
        "patchSetId": 4
      },
      "lineNbr": 3386,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2021-09-20T17:25:37Z",
      "side": 1,
      "message": "{size} is a {size_t}, so static_casting it to {size_t} is pointless.",
      "range": {
        "startLine": 3386,
        "startChar": 42,
        "endLine": 3386,
        "endChar": 67
      },
      "revId": "2ea862f1a1f43fe87af88186cedbc94d91f373ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6cb15608_dcc38b26",
        "filename": "src/api/api.cc",
        "patchSetId": 4
      },
      "lineNbr": 3386,
      "author": {
        "id": 1522823
      },
      "writtenOn": "2021-09-21T01:04:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "39070097_35affe64",
      "range": {
        "startLine": 3386,
        "startChar": 42,
        "endLine": 3386,
        "endChar": 67
      },
      "revId": "2ea862f1a1f43fe87af88186cedbc94d91f373ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d874459d_3716b3c7",
        "filename": "src/objects/value-serializer.cc",
        "patchSetId": 4
      },
      "lineNbr": 362,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2021-09-20T17:25:37Z",
      "side": 1,
      "message": "Why is this tied to TypedArray::kMaxLength? I think if we want such a limit here, then it should be a custom limit defined and used by the serializer. That said, what\u0027s wrong with just trying to serialize however much we can without running out of memory? The heap size will create an upper bound anyway.",
      "range": {
        "startLine": 362,
        "startChar": 27,
        "endLine": 362,
        "endChar": 53
      },
      "revId": "2ea862f1a1f43fe87af88186cedbc94d91f373ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "28aad9cf_b532297b",
        "filename": "src/objects/value-serializer.cc",
        "patchSetId": 4
      },
      "lineNbr": 362,
      "author": {
        "id": 1522823
      },
      "writtenOn": "2021-09-21T01:04:48Z",
      "side": 1,
      "message": "I perviously added this limit because it would trigger an assertion in nodejs, so I thought we also needed a limit here.\n\nIf we really need it, {ValueSerializer::ExpandBuffer} could be the right place to set it, because we do not know the buffer size we need until we\u0027ve done expanding it.\n\nIf we do not need a limit on serializing, I think we do not need it on deserializing too. Otherwise, we may not be able to deserialize huge buffers serialized by {ValueSerialize}.\n\nI\u0027d like to define a custom limit. ðŸ˜Š",
      "parentUuid": "d874459d_3716b3c7",
      "range": {
        "startLine": 362,
        "startChar": 27,
        "endLine": 362,
        "endChar": 53
      },
      "revId": "2ea862f1a1f43fe87af88186cedbc94d91f373ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e27b669_7f9b7a41",
        "filename": "src/objects/value-serializer.cc",
        "patchSetId": 4
      },
      "lineNbr": 409,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2021-09-20T16:27:59Z",
      "side": 1,
      "message": "It\u0027s unclear to me why this needs to be added here, and why out_of_memory_ isn\u0027t good enough.",
      "revId": "2ea862f1a1f43fe87af88186cedbc94d91f373ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40fa76ed_16187a7b",
        "filename": "src/objects/value-serializer.cc",
        "patchSetId": 4
      },
      "lineNbr": 409,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2021-09-20T17:25:37Z",
      "side": 1,
      "message": "Agreed; especially since we detect the error condition when trying to grow the buffer, and the buffer holds more than one object. A single error condition should be enough.",
      "parentUuid": "0e27b669_7f9b7a41",
      "revId": "2ea862f1a1f43fe87af88186cedbc94d91f373ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "24f10131_cf6d9161",
        "filename": "src/objects/value-serializer.cc",
        "patchSetId": 4
      },
      "lineNbr": 409,
      "author": {
        "id": 1522823
      },
      "writtenOn": "2021-09-21T01:04:48Z",
      "side": 1,
      "message": "@verwaest Please see https://chromium-review.googlesource.com/c/v8/v8/+/3170411/comments/d874459d_3716b3c7\n\n@verwaest @jkummerow\nLet me draw a conclusion, and see if you agree with me. ðŸ˜Š\n\n1. If we need a buffer size limit,\n   1.1 We need it both on serializing and deserializing, otherwise, we will not be able to deserialize huge buffers which are serialized by {ValueSerializer} (That\u0027s why I submit this patch).\n   1.2 We have already set the limit on deserializing. We also need the same limit on serializing. The proper place to add the limit could be {ValueSerializer::ExpandBuffer}, because we don\u0027t know the buffer size we need until we\u0027ve done expanding it.\n   1.3 We need a new type of error when exceeding buffer size limit on serializing to tell apart from out of memory, because we are not actually run out of memory in this case. That\u0027s why I added {DataCloneErrorObjectTooLarge}.\n\n2. If we don\u0027t need a limit,\n   2.1 We could remove {IsValueInRangeForNumericType} check, and also its {else}-branch, and also all {CHECK(!private_-\u003ehas_aborted)} lines, because {!private_-\u003ehas_aborted} is set to {true} only when {IsValueInRangeForNumericType} returns {false}.\n   2.2 We could just let {ValueSerializer::ExpandBuffer} run out of memory and throw {DataCloneErrorOutOfMemory}.\n   \nBoth these two ways work for me. I personally prefer the second one. I\u0027ll update my code when we make a decision.",
      "parentUuid": "40fa76ed_16187a7b",
      "revId": "2ea862f1a1f43fe87af88186cedbc94d91f373ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e346f02_ba3393ba",
        "filename": "src/objects/value-serializer.cc",
        "patchSetId": 4
      },
      "lineNbr": 409,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2021-09-21T12:22:38Z",
      "side": 1,
      "message": "I don\u0027t think we need serializer-specific limits. We just need to make sure that what we deserialize doesn\u0027t break the object model: in the case someone manages to write garbage into the intermediate format we have to make sure we fail gracefully.",
      "parentUuid": "24f10131_cf6d9161",
      "revId": "2ea862f1a1f43fe87af88186cedbc94d91f373ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cb847f05_965f6e8a",
        "filename": "src/objects/value-serializer.cc",
        "patchSetId": 4
      },
      "lineNbr": 409,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2021-09-21T21:26:51Z",
      "side": 1,
      "message": "Sounds good to me.",
      "parentUuid": "2e346f02_ba3393ba",
      "revId": "2ea862f1a1f43fe87af88186cedbc94d91f373ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}