{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c64f4ad6_340e68ff",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1540328
      },
      "writtenOn": "2023-01-06T10:53:26Z",
      "side": 1,
      "message": "Hi there~\nThe ECMAScript specification about the hoisting and binding is here: https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-functiondeclarationinstantiation:~:text\u003d3.%20If%20n%20is%20not%20an%20element.\nIf I got it right, when a variable shared a name with a function inside another function, this variable should not be bound during initialization.\nBesides, this bug does not occur in JavaScriptCore and SpiderMonkey.\nPTAL, thanks~",
      "revId": "2a7e962568b694c1b1408fbe7b72cc4caecce94c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4192498c_459b2485",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2023-01-09T07:44:51Z",
      "side": 1,
      "message": "Hi, thanks for sending this. I just got back to work and this is on my radar. I might not have time to look into it today, but I\u0027ll do it tomorrow-ish.",
      "revId": "2a7e962568b694c1b1408fbe7b72cc4caecce94c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f1664dd_6d1fd85b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2023-01-10T12:42:04Z",
      "side": 1,
      "message": "Starting some try jobs to see if there are test failures. I didn\u0027t yet verify whether this is the most reasonable approach, but nevertheless, a comment below:",
      "revId": "2a7e962568b694c1b1408fbe7b72cc4caecce94c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "68a71e94_efefc1e9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2023-01-11T09:37:22Z",
      "side": 1,
      "message": "I think this approach works, at least I\u0027m not able to come up with an example where it would do the wrong thing. Some comments below. Thanks!",
      "revId": "2a7e962568b694c1b1408fbe7b72cc4caecce94c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85aae0cb_6134ba6a",
        "filename": "src/parsing/parser.cc",
        "patchSetId": 9
      },
      "lineNbr": 3328,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2023-01-11T09:37:22Z",
      "side": 1,
      "message": "Could you add a comment explaining what the new logic does?",
      "range": {
        "startLine": 3328,
        "startChar": 2,
        "endLine": 3328,
        "endChar": 34
      },
      "revId": "2a7e962568b694c1b1408fbe7b72cc4caecce94c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "326b0268_441eebd2",
        "filename": "src/parsing/parser.cc",
        "patchSetId": 9
      },
      "lineNbr": 3331,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2023-01-11T09:37:22Z",
      "side": 1,
      "message": "Why are we still adding let declarations to immune_vars? (Might not matter for the outcome, since they\u0027re not allowed to conflict with param names anyway.)\n\nWhat\u0027s immune_vars meant to contain? Only function declarations are relevant here, no? Could there be a more descriptive name?",
      "range": {
        "startLine": 3331,
        "startChar": 8,
        "endLine": 3331,
        "endChar": 49
      },
      "revId": "2a7e962568b694c1b1408fbe7b72cc4caecce94c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2cabd19d_9deba1a0",
        "filename": "src/parsing/parser.cc",
        "patchSetId": 9
      },
      "lineNbr": 3343,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2023-01-10T12:42:04Z",
      "side": 1,
      "message": "This is quadratic behavior, as the number of declarations in the scope increases. Unlike LookupLocal, which is a hash map. I\u0027m not convinced we want to do this..",
      "range": {
        "startLine": 3342,
        "startChar": 0,
        "endLine": 3343,
        "endChar": 60
      },
      "revId": "2a7e962568b694c1b1408fbe7b72cc4caecce94c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4960772a_1903e735",
        "filename": "src/parsing/parser.cc",
        "patchSetId": 9
      },
      "lineNbr": 3343,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2023-01-10T13:05:50Z",
      "side": 1,
      "message": "Ah, wait, not, you\u0027re using a set, only the var_param_bindings is a vector. Oops, pls ignore this",
      "parentUuid": "2cabd19d_9deba1a0",
      "range": {
        "startLine": 3342,
        "startChar": 0,
        "endLine": 3343,
        "endChar": 60
      },
      "revId": "2a7e962568b694c1b1408fbe7b72cc4caecce94c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed572480_d4432d54",
        "filename": "test/mjsunit/regress/regress-v8-13459.js",
        "patchSetId": 9
      },
      "lineNbr": 1,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2023-01-11T09:37:22Z",
      "side": 1,
      "message": "We\u0027re in 2023 now ðŸ˜Š",
      "range": {
        "startLine": 1,
        "startChar": 13,
        "endLine": 1,
        "endChar": 17
      },
      "revId": "2a7e962568b694c1b1408fbe7b72cc4caecce94c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6b129e1_fcc2ed02",
        "filename": "test/mjsunit/regress/regress-v8-13459.js",
        "patchSetId": 9
      },
      "lineNbr": 17,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2023-01-11T09:37:22Z",
      "side": 1,
      "message": "Afaics the bug occurred with parameter names in non-simple parameter lists. Could you add tests with other kinds of non-simple parameter lists, like function f(x \u003d 0) { }?\n\n\nCould you also add tests for all the possible cases, like: parameter shadowed by a function (no \u0027var\u0027, parameter shadowed by \u0027var\u0027, (parameter shadowed by let is not possible, it\u0027ll throw an error), and the \u0027var\u0027 might have an initializer, or not. And all these for simple and non-simple parameter lists? Those tests could be in a different file. I\u0027m not sure if we\u0027re already covering all the possible cases with existing tests.\n\nLike:\n\nfunction f(x) {\n  var x \u003d 5;\n  //assert something interesting\n}\n\nf(1);\n\n\nfunction f(x) {\n  var x;\n  //assert something interesting\n}\n\nf(1);\n\nfunction f(x \u003d 3) {\n  var x \u003d 5;\n  //assert something interesting\n}\n\nf(1);\n\n\nfunction f(x \u003d 3) {\n  var x;\n  //assert something interesting\n}\n\nf(1);\n\nfunction f(...x) {\n  var x \u003d 5;\n  //assert something interesting\n}\n\nf(1);\n\n\nfunction f(...x) {\n  var x;\n  //assert something interesting\n}\n\nf(1);\n\n\n-\u003e Your CL shouldn\u0027t change the behavior with these ones.",
      "range": {
        "startLine": 17,
        "startChar": 7,
        "endLine": 17,
        "endChar": 8
      },
      "revId": "2a7e962568b694c1b1408fbe7b72cc4caecce94c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}