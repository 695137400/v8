{
  "comments": [
    {
      "key": {
        "uuid": "4afff7ec_e41f4f5f",
        "filename": "src/codegen/code-stub-assembler.h",
        "patchSetId": 1
      },
      "lineNbr": 863,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2019-09-11T09:53:38Z",
      "side": 1,
      "message": "Could this use AnyTaggedT too?",
      "range": {
        "startLine": 860,
        "startChar": 27,
        "endLine": 863,
        "endChar": 3
      },
      "revId": "485a59b29c701e1d763c90ab58871387afea27d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec729fbf_a6c16b2f",
        "filename": "src/codegen/code-stub-assembler.h",
        "patchSetId": 1
      },
      "lineNbr": 863,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2019-09-11T10:13:48Z",
      "side": 1,
      "message": "Not yet, because of this will make the methods ambiguous when the argument is TNode\u003cObject\u003e. But once we TNodify everything then yes.",
      "parentUuid": "4afff7ec_e41f4f5f",
      "range": {
        "startLine": 860,
        "startChar": 27,
        "endLine": 863,
        "endChar": 3
      },
      "revId": "485a59b29c701e1d763c90ab58871387afea27d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce79889e_cc07bff9",
        "filename": "src/compiler/code-assembler.h",
        "patchSetId": 1
      },
      "lineNbr": 636,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-09-11T10:02:53Z",
      "side": 1,
      "message": "Could you explain what \u0027NonPointerBits\u0027 means? Just by reading the name I don\u0027t what what this does.. Is it \u0027all tagged objects that are not pointers\u0027? So what else is there except Smis? \n\nAnd is there a significance to \u0027bits\u0027 in the name? I ask because BitcastTaggedToWord does not contain \u0027bits\u0027.",
      "revId": "485a59b29c701e1d763c90ab58871387afea27d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1ea0c05_de265bd5",
        "filename": "src/compiler/code-assembler.h",
        "patchSetId": 1
      },
      "lineNbr": 636,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2019-09-11T10:13:48Z",
      "side": 1,
      "message": "See the comment in machine-operator.h.\nTLDR: this operation guarantees to preserve only smi and weak tags and Smi value if the tagged is a Smi. If the value is a strong or weak heap pointer then the values are not guaranteed to be preserved because GC may move the object we are bitcasting.\n\nThe difference between this bitcast and BitcastTaggedToWord is that the former one can be hoisted over GC calls while the second is guaranteed to be non-hoistable over GC calls.",
      "parentUuid": "ce79889e_cc07bff9",
      "revId": "485a59b29c701e1d763c90ab58871387afea27d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9203fad7_be93021c",
        "filename": "src/compiler/code-assembler.h",
        "patchSetId": 1
      },
      "lineNbr": 636,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-09-11T10:22:53Z",
      "side": 1,
      "message": "I see, thanks. I still think \u0027NonPointerBits\u0027 is kinda tough to parse. Especially since in the smi case, it does actually also bitcast the \u0027pointer bits\u0027, we just don\u0027t guarantee they will be the correct value.\n\nIgor, Tobias, wdyt of making the name positive instead, e.g. BitcastSmiAndTagBitsOfTaggedToWord or similar? It\u0027s longer but perhaps makes it a bit clearer what\u0027s going on.\n\nJust intended as a suggestion + slight preference, if you prefer the current name I\u0027m okay with that.",
      "parentUuid": "f1ea0c05_de265bd5",
      "revId": "485a59b29c701e1d763c90ab58871387afea27d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2545dcb8_a61dc47d",
        "filename": "src/compiler/machine-operator.h",
        "patchSetId": 1
      },
      "lineNbr": 305,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2019-09-11T09:53:38Z",
      "side": 1,
      "message": "Can we add that it is illegal to look at the pointer bits? Because it might work accidentially.\nWe could actually remove the pointer bits in debug mode ... :)",
      "revId": "485a59b29c701e1d763c90ab58871387afea27d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d832e010_e5d8762e",
        "filename": "src/compiler/machine-operator.h",
        "patchSetId": 1
      },
      "lineNbr": 305,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2019-09-11T10:13:48Z",
      "side": 1,
      "message": "Updated the comment. I\u0027d suggest to leave the implementation as is for now ))",
      "parentUuid": "2545dcb8_a61dc47d",
      "revId": "485a59b29c701e1d763c90ab58871387afea27d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}