{
  "comments": [
    {
      "key": {
        "uuid": "9e3a3a89_7be82ed9",
        "filename": "src/heap/scavenge-job.cc",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-10-12T09:47:44Z",
      "side": 1,
      "message": "That looks like a completely separate (hard to catch) bugfix? If so, please split it out of this CL.",
      "range": {
        "startLine": 106,
        "startChar": 35,
        "endLine": 106,
        "endChar": 44
      },
      "revId": "ff0aaac60525e1104e78f295d1d103db143b8c07",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31d36f09_d2da909f",
        "filename": "src/heap/scavenge-job.cc",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 1148031
      },
      "writtenOn": "2017-10-12T17:31:08Z",
      "side": 1,
      "message": "This fix is necessitated by the current CL. During heap tear down we remove observers now. We may have already disabled tasks, but we may yet end up doing a step which might try to schedule a task here.",
      "parentUuid": "9e3a3a89_7be82ed9",
      "range": {
        "startLine": 106,
        "startChar": 35,
        "endLine": 106,
        "endChar": 44
      },
      "revId": "ff0aaac60525e1104e78f295d1d103db143b8c07",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6478314_2c0db2f5",
        "filename": "src/heap/spaces.cc",
        "patchSetId": 1
      },
      "lineNbr": 2201,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2017-10-12T10:31:42Z",
      "side": 1,
      "message": "At the time of calling this function \"top\" contains the actual new top.\nTo avoid confusion, can we remove the \"new_top\" parameter and unconditionally clear top_on_previous_step_ after SetTopAndLimit(NULL, NULL) in line 1705?",
      "range": {
        "startLine": 2201,
        "startChar": 59,
        "endLine": 2201,
        "endChar": 66
      },
      "revId": "ff0aaac60525e1104e78f295d1d103db143b8c07",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0ba27aa_b410087b",
        "filename": "src/heap/spaces.cc",
        "patchSetId": 1
      },
      "lineNbr": 2201,
      "author": {
        "id": 1148031
      },
      "writtenOn": "2017-10-12T17:31:08Z",
      "side": 1,
      "message": "1) I want to have the implementation of this function between NewSpace and PagedSpace be identical. The next CL after this one will introduce SpaceWithLinearArea superclass which which will hold the implementation of this function and others related.\n2) There is another call point that pass values of new_top that is subtly different from the value returned by top().. NewSpace::EnsureAllocation. I think it is cleaner to keep the adjustment of `top_on_previous_step_` here in this function. \n\nNote that {New,Paged}Space::PauseAllocation observer do indeed do an unnecessary clearing of `top_on_previous_step_` that I would like to remove as well. I have about 7 CLs queued behind this fix that do cleanup, but I would like this one to be focussed on the bugfix.",
      "parentUuid": "e6478314_2c0db2f5",
      "range": {
        "startLine": 2201,
        "startChar": 59,
        "endLine": 2201,
        "endChar": 66
      },
      "revId": "ff0aaac60525e1104e78f295d1d103db143b8c07",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05e7d532_106c9a9d",
        "filename": "src/heap/spaces.cc",
        "patchSetId": 1
      },
      "lineNbr": 2201,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2017-10-12T18:27:41Z",
      "side": 1,
      "message": "Sorry, I didn\u0027t know that NewSpace::InlineAllocationStep already uses this \"top and new_top\" pattern. I find it confusing because it is trying to predict where the top is going to be in the future and there is no way to check the correctness of new_top argument at this point. The prediction and the actual future value can get out of sync.\n\nSince this pattern is already in TOT, the change looks good to me. Long term I would be happy if allocation observer mechanism reacted to linear allocation updates instead of anticipating the updates. Maybe we are missing \"CreatedAllocationArea\", \"AbandonedAllocationArea\" notifications for the allocation observer mechanism?",
      "parentUuid": "f0ba27aa_b410087b",
      "range": {
        "startLine": 2201,
        "startChar": 59,
        "endLine": 2201,
        "endChar": 66
      },
      "revId": "ff0aaac60525e1104e78f295d1d103db143b8c07",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9037a780_218cb9dd",
        "filename": "src/heap/spaces.cc",
        "patchSetId": 1
      },
      "lineNbr": 2205,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-10-12T09:47:44Z",
      "side": 1,
      "message": "Here and below: Can we just call AllocationStep() right away? This logic here also seems to be missing a CreateFiller for |soon_object| (see AllocationStep).",
      "range": {
        "startLine": 2205,
        "startChar": 23,
        "endLine": 2205,
        "endChar": 27
      },
      "revId": "ff0aaac60525e1104e78f295d1d103db143b8c07",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b40b59a5_57553a5a",
        "filename": "src/heap/spaces.cc",
        "patchSetId": 1
      },
      "lineNbr": 2205,
      "author": {
        "id": 1148031
      },
      "writtenOn": "2017-10-12T17:31:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9037a780_218cb9dd",
      "range": {
        "startLine": 2205,
        "startChar": 23,
        "endLine": 2205,
        "endChar": 27
      },
      "revId": "ff0aaac60525e1104e78f295d1d103db143b8c07",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}