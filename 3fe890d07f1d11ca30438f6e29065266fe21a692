{
  "comments": [
    {
      "key": {
        "uuid": "2df3b038_c617507e",
        "filename": "src/isolate-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1144619
      },
      "writtenOn": "2017-07-31T23:42:04Z",
      "side": 1,
      "message": "Should this be nullptr instead of NULL?",
      "revId": "3fe890d07f1d11ca30438f6e29065266fe21a692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d26ffd1f_d6835ab8",
        "filename": "src/isolate-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1224119
      },
      "writtenOn": "2017-08-01T20:57:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2df3b038_c617507e",
      "revId": "3fe890d07f1d11ca30438f6e29065266fe21a692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5297a836_bec01238",
        "filename": "src/runtime/runtime-wasm.cc",
        "patchSetId": 4
      },
      "lineNbr": 161,
      "author": {
        "id": 1144619
      },
      "writtenOn": "2017-07-31T23:42:04Z",
      "side": 1,
      "message": "Would it be possible to use Runtime_WasmThrow instead, and find the object to throw through some other means? I\u0027d guess the exception object will be somewhere at hand since we can only rethrow from within a catch block.\n\nThat said, the WasmRethrow runtime call may be cleaner overall.",
      "revId": "3fe890d07f1d11ca30438f6e29065266fe21a692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "461c4633_9f71b61d",
        "filename": "src/runtime/runtime-wasm.cc",
        "patchSetId": 4
      },
      "lineNbr": 161,
      "author": {
        "id": 1224119
      },
      "writtenOn": "2017-08-01T20:57:54Z",
      "side": 1,
      "message": "Leaving as Runtime_WasmRethrow, since we need to handle opaque exceptions in a catch_all block.",
      "parentUuid": "5297a836_bec01238",
      "revId": "3fe890d07f1d11ca30438f6e29065266fe21a692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e530a5e9_a2d2c270",
        "filename": "src/runtime/runtime-wasm.cc",
        "patchSetId": 4
      },
      "lineNbr": 177,
      "author": {
        "id": 1144619
      },
      "writtenOn": "2017-07-31T23:42:04Z",
      "side": 1,
      "message": "To make sure I understand, this function gets called by the unwinder to tell Wasm about the exception?\n\nWhy is this called WasmGetCaughtExceptionValue rather than WasmSetCaughtExceptionValue?",
      "revId": "3fe890d07f1d11ca30438f6e29065266fe21a692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5492300_051b951a",
        "filename": "src/runtime/runtime-wasm.cc",
        "patchSetId": 4
      },
      "lineNbr": 177,
      "author": {
        "id": 1224119
      },
      "writtenOn": "2017-08-01T20:57:54Z",
      "side": 1,
      "message": "This is poorly named. Using WasmSetCaughtExceptionValue.",
      "parentUuid": "e530a5e9_a2d2c270",
      "revId": "3fe890d07f1d11ca30438f6e29065266fe21a692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43882ffc_de70294e",
        "filename": "src/wasm/function-body-decoder.cc",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 1144619
      },
      "writtenOn": "2017-07-31T23:42:04Z",
      "side": 1,
      "message": "Why this change?",
      "revId": "3fe890d07f1d11ca30438f6e29065266fe21a692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6410049e_7f005f9a",
        "filename": "src/wasm/function-body-decoder.cc",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 1224119
      },
      "writtenOn": "2017-08-01T20:57:54Z",
      "side": 1,
      "message": "I added \"error(pc_)\" because the API for a decoder error (temporarily) changed to require the pc_ argument. I added the \":\" because I think it makes it clearer that the message following is in terms of the opcode.\n\nHowever, someone has reverted from using c++ style error message generation back to the C format style. So this has been changed to match the C format style.",
      "parentUuid": "43882ffc_de70294e",
      "revId": "3fe890d07f1d11ca30438f6e29065266fe21a692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6184ad7_5d0ebb89",
        "filename": "src/wasm/function-body-decoder.cc",
        "patchSetId": 4
      },
      "lineNbr": 84,
      "author": {
        "id": 1144619
      },
      "writtenOn": "2017-07-31T23:42:04Z",
      "side": 1,
      "message": "catch_count is the number of catches associated with this try, correct?",
      "revId": "3fe890d07f1d11ca30438f6e29065266fe21a692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d6f7726_a6f05d3e",
        "filename": "src/wasm/function-body-decoder.cc",
        "patchSetId": 4
      },
      "lineNbr": 84,
      "author": {
        "id": 1224119
      },
      "writtenOn": "2017-08-01T20:57:54Z",
      "side": 1,
      "message": "Yes. Added comment to make clear.",
      "parentUuid": "b6184ad7_5d0ebb89",
      "revId": "3fe890d07f1d11ca30438f6e29065266fe21a692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "117d32d6_6aa37127",
        "filename": "src/wasm/function-body-decoder.cc",
        "patchSetId": 4
      },
      "lineNbr": 806,
      "author": {
        "id": 1144619
      },
      "writtenOn": "2017-07-31T23:42:04Z",
      "side": 1,
      "message": "Is opcode_pc used anywhere?",
      "revId": "3fe890d07f1d11ca30438f6e29065266fe21a692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55b9338d_5675dd35",
        "filename": "src/wasm/function-body-decoder.cc",
        "patchSetId": 4
      },
      "lineNbr": 806,
      "author": {
        "id": 1224119
      },
      "writtenOn": "2017-08-01T20:57:54Z",
      "side": 1,
      "message": "Note: Used in \"#if DEBUG\" on line 1402 to print better debugging messages for throw/catches.\n\nHowever, I originally needed it to be able to read what was happening. However, the debugging code (in general) doesn\u0027t print arguments to the opcode. Hence removing.",
      "parentUuid": "117d32d6_6aa37127",
      "revId": "3fe890d07f1d11ca30438f6e29065266fe21a692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e43d2274_98f613f7",
        "filename": "src/wasm/function-body-decoder.cc",
        "patchSetId": 4
      },
      "lineNbr": 851,
      "author": {
        "id": 1144619
      },
      "writtenOn": "2017-07-31T23:42:04Z",
      "side": 1,
      "message": "Did you figure out what was up with unreachable and EndControl? Is the comment here still accurate?",
      "revId": "3fe890d07f1d11ca30438f6e29065266fe21a692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8de3055_df0304a0",
        "filename": "src/wasm/function-body-decoder.cc",
        "patchSetId": 4
      },
      "lineNbr": 851,
      "author": {
        "id": 1224119
      },
      "writtenOn": "2017-08-01T20:57:54Z",
      "side": 1,
      "message": "The problem still exists, so I left it. Will try to fix in a later CL.",
      "parentUuid": "e43d2274_98f613f7",
      "revId": "3fe890d07f1d11ca30438f6e29065266fe21a692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae392225_9a7491ab",
        "filename": "src/wasm/function-body-decoder.cc",
        "patchSetId": 4
      },
      "lineNbr": 1437,
      "author": {
        "id": 1224119
      },
      "writtenOn": "2017-08-01T20:57:54Z",
      "side": 1,
      "message": "Here is the use of opcode_pc.",
      "revId": "3fe890d07f1d11ca30438f6e29065266fe21a692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed59ddb2_845d41fa",
        "filename": "src/wasm/function-body-decoder.cc",
        "patchSetId": 4
      },
      "lineNbr": 1438,
      "author": {
        "id": 1144619
      },
      "writtenOn": "2017-07-31T23:42:04Z",
      "side": 1,
      "message": "What does this output look like? Is it distinguishable from other control information?",
      "revId": "3fe890d07f1d11ca30438f6e29065266fe21a692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5286172a_bc1b95d8",
        "filename": "src/wasm/function-body-decoder.cc",
        "patchSetId": 4
      },
      "lineNbr": 1438,
      "author": {
        "id": 1224119
      },
      "writtenOn": "2017-08-01T20:57:54Z",
      "side": 1,
      "message": "Since none of the other displayed opcodes show arguments, I removed this switch statement. I originally added it so that I could more easily debug test cases.",
      "parentUuid": "ed59ddb2_845d41fa",
      "revId": "3fe890d07f1d11ca30438f6e29065266fe21a692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "593edcfa_aa747a40",
        "filename": "src/wasm/module-decoder.cc",
        "patchSetId": 4
      },
      "lineNbr": 327,
      "author": {
        "id": 1144619
      },
      "writtenOn": "2017-07-31T23:42:04Z",
      "side": 1,
      "message": "Why is the exception section treated differently from the others? Are multiple exception sections allowed? Can they come out of order?",
      "revId": "3fe890d07f1d11ca30438f6e29065266fe21a692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf541344_56879282",
        "filename": "src/wasm/module-decoder.cc",
        "patchSetId": 4
      },
      "lineNbr": 327,
      "author": {
        "id": 1224119
      },
      "writtenOn": "2017-08-01T20:57:54Z",
      "side": 1,
      "message": "Unfortunately, because there was no section reserved for exception sections, and the exception section must come before function bodies (so that we can find them when streaming), the only real solution was to give it a value that was out of order, and allow it to appear before function bodies. Hence, the need for the special case.\n\nOn the other hand, the module shouldn\u0027t have multiple exception sections, and this code doesn\u0027t handle that. Adding code to fix this problem.",
      "parentUuid": "593edcfa_aa747a40",
      "revId": "3fe890d07f1d11ca30438f6e29065266fe21a692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1facdfde_162f54ff",
        "filename": "src/wasm/wasm-text.cc",
        "patchSetId": 4
      },
      "lineNbr": 149,
      "author": {
        "id": 1144619
      },
      "writtenOn": "2017-07-31T23:42:04Z",
      "side": 1,
      "message": "I think the Get, Set and TeeLocal cases should stay as a LocalIndexOperand, but Catch and Throw should use the new ExceptionIndexOperand, right?",
      "revId": "3fe890d07f1d11ca30438f6e29065266fe21a692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e29ce567_106e5050",
        "filename": "src/wasm/wasm-text.cc",
        "patchSetId": 4
      },
      "lineNbr": 149,
      "author": {
        "id": 1224119
      },
      "writtenOn": "2017-08-01T20:57:54Z",
      "side": 1,
      "message": "Good point. Fixing.",
      "parentUuid": "1facdfde_162f54ff",
      "revId": "3fe890d07f1d11ca30438f6e29065266fe21a692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c360c38_ef6fa849",
        "filename": "test/mjsunit/wasm/exceptions.js",
        "patchSetId": 4
      },
      "lineNbr": 14,
      "author": {
        "id": 1144619
      },
      "writtenOn": "2017-07-31T23:42:04Z",
      "side": 1,
      "message": "kSig_v_v means to me \"returns void and takes no parameters.\" My understanding of the spec proposal is that exceptions only have parameters but no return values. Is that correct? (I\u0027m guessing kSig_v_v has the same encoding as kSig_v would have)",
      "revId": "3fe890d07f1d11ca30438f6e29065266fe21a692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27ba509e_ba2a0a24",
        "filename": "test/mjsunit/wasm/exceptions.js",
        "patchSetId": 4
      },
      "lineNbr": 14,
      "author": {
        "id": 1224119
      },
      "writtenOn": "2017-08-01T20:57:54Z",
      "side": 1,
      "message": "That is correct. I used functions signatures (with void result type) so that I did not need to add a new concept to the wasm builder.",
      "parentUuid": "6c360c38_ef6fa849",
      "revId": "3fe890d07f1d11ca30438f6e29065266fe21a692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9c905fc_e91170da",
        "filename": "test/mjsunit/wasm/exceptions.js",
        "patchSetId": 4
      },
      "lineNbr": 16,
      "author": {
        "id": 1144619
      },
      "writtenOn": "2017-07-31T23:42:04Z",
      "side": 1,
      "message": "What about naming this \"throw_if_param_not_zero\"? The way it is now makes me think this should throw the parameter as an argument to the exception, meaning the exception should have kSig_v_i instead of kSig_v_v.",
      "revId": "3fe890d07f1d11ca30438f6e29065266fe21a692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2bb87ea_803a0271",
        "filename": "test/mjsunit/wasm/exceptions.js",
        "patchSetId": 4
      },
      "lineNbr": 16,
      "author": {
        "id": 1224119
      },
      "writtenOn": "2017-08-01T20:57:54Z",
      "side": 1,
      "message": "I agree the name is badly named (I just used the name from an old example below). Fixing.\n\nCurrently, we can\u0027t throw values with an exception. We can only check if the exception tags match. The values associated with an exception (tag) is separate. Exceptions are \"opaque\" and that includes the tag. It is up to the implementation to decide how exception matching is implemented.",
      "parentUuid": "e9c905fc_e91170da",
      "revId": "3fe890d07f1d11ca30438f6e29065266fe21a692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "768ad488_29f239c8",
        "filename": "test/mjsunit/wasm/exceptions.js",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1144619
      },
      "writtenOn": "2017-07-31T23:42:04Z",
      "side": 1,
      "message": "nit: Couldn\u0027t this be simplified with kExprI32Eqz?",
      "revId": "3fe890d07f1d11ca30438f6e29065266fe21a692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ef0e62f_7d790f53",
        "filename": "test/mjsunit/wasm/exceptions.js",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1224119
      },
      "writtenOn": "2017-08-01T20:57:54Z",
      "side": 1,
      "message": "It could if the writer (me) realized it! Simplifying.",
      "parentUuid": "768ad488_29f239c8",
      "revId": "3fe890d07f1d11ca30438f6e29065266fe21a692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ef13a40_f54ed870",
        "filename": "test/mjsunit/wasm/exceptions.js",
        "patchSetId": 4
      },
      "lineNbr": 73,
      "author": {
        "id": 1144619
      },
      "writtenOn": "2017-07-31T23:42:04Z",
      "side": 1,
      "message": "I\u0027d also add:\n\nassertEquals(1, test_catch.exports.simple_throw_catch_to_0_1(1));",
      "revId": "3fe890d07f1d11ca30438f6e29065266fe21a692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e404393_b7f9ecd6",
        "filename": "test/mjsunit/wasm/exceptions.js",
        "patchSetId": 4
      },
      "lineNbr": 73,
      "author": {
        "id": 1224119
      },
      "writtenOn": "2017-08-01T20:57:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0ef13a40_f54ed870",
      "revId": "3fe890d07f1d11ca30438f6e29065266fe21a692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a7fddc7_e9c09236",
        "filename": "test/unittests/wasm/function-body-decoder-unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 225,
      "author": {
        "id": 1144619
      },
      "writtenOn": "2017-07-31T23:42:04Z",
      "side": 1,
      "message": "Where does this limit come from?",
      "revId": "3fe890d07f1d11ca30438f6e29065266fe21a692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82f26317_63cbfdc2",
        "filename": "test/unittests/wasm/function-body-decoder-unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 225,
      "author": {
        "id": 1224119
      },
      "writtenOn": "2017-08-01T20:57:54Z",
      "side": 1,
      "message": "This code is fragile, in that it doesn\u0027t allow multibyte encodings of unsigned integers. This happens not just here, but in many places in this file (see line 215).\n\nChanged to use constant kMaxByteSizedLeb128.",
      "parentUuid": "8a7fddc7_e9c09236",
      "revId": "3fe890d07f1d11ca30438f6e29065266fe21a692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e283bd4_ef04a823",
        "filename": "test/unittests/wasm/function-body-decoder-unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 2297,
      "author": {
        "id": 1144619
      },
      "writtenOn": "2017-07-31T23:42:04Z",
      "side": 1,
      "message": "For this to verify, there should be a drop after WASM_CATCH(1), right?",
      "revId": "3fe890d07f1d11ca30438f6e29065266fe21a692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "faf2b424_cc2b0eda",
        "filename": "test/unittests/wasm/function-body-decoder-unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 2297,
      "author": {
        "id": 1224119
      },
      "writtenOn": "2017-08-01T20:57:54Z",
      "side": 1,
      "message": "EXPECT_FAILURE doesn\u0027t actually check a complete function body. It only tests if a sequence of instructions validates. Hence, no need to worry about the stack state at the end.",
      "parentUuid": "2e283bd4_ef04a823",
      "revId": "3fe890d07f1d11ca30438f6e29065266fe21a692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}