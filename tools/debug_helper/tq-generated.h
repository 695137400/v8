// Copyright 2019 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Imagine that this file is generated by the Torque compiler.

#ifndef V8_GEN_TORQUE_GENERATED_DEBUG_HELPER_TQ_H_
#define V8_GEN_TORQUE_GENERATED_DEBUG_HELPER_TQ_H_

#include <cstdint>
#include <vector>

#include "debug-helper-internal.h"

namespace v8 {
namespace debug_helper_internal {

// This base class would be hard-coded:
class TqObject {
 public:
  inline TqObject(uintptr_t address) : address_(address) {}
  std::vector<std::unique_ptr<ObjectProperty>> GetProperties(
      d::MemoryAccessor accessor);

 protected:
  uintptr_t address_;
};

// The rest would be generated. Just a few are implemented as an example. Each
// has a method GetProperties which calls the superclass and then adds any local
// properties. It also provides accessors for all local properties.

class TqHeapObject : public TqObject {
 public:
  inline TqHeapObject(uintptr_t address) : TqObject(address) {}
  std::vector<std::unique_ptr<ObjectProperty>> GetProperties(
      d::MemoryAccessor accessor);
  d::Value GetMap(d::MemoryAccessor accessor);
};

class TqJsReceiver : public TqHeapObject {
 public:
  inline TqJsReceiver(uintptr_t address) : TqHeapObject(address) {}
  std::vector<std::unique_ptr<ObjectProperty>> GetProperties(
      d::MemoryAccessor accessor);
  d::Value GetPropertiesOrHash(d::MemoryAccessor accessor);
};

class TqJsObject : public TqJsReceiver {
 public:
  inline TqJsObject(uintptr_t address) : TqJsReceiver(address) {}
  std::vector<std::unique_ptr<ObjectProperty>> GetProperties(
      d::MemoryAccessor accessor);
  d::Value GetElements(d::MemoryAccessor accessor);
};

class TqJsArray : public TqJsObject {
 public:
  inline TqJsArray(uintptr_t address) : TqJsObject(address) {}
  std::vector<std::unique_ptr<ObjectProperty>> GetProperties(
      d::MemoryAccessor accessor);
  d::Value GetLength(d::MemoryAccessor accessor);
};

class TqMap : public TqHeapObject {
 public:
  inline TqMap(uintptr_t address) : TqHeapObject(address) {}
  std::vector<std::unique_ptr<ObjectProperty>> GetProperties(
      d::MemoryAccessor accessor);
  d::Value GetInstanceSizeInWords(d::MemoryAccessor accessor);
  d::Value GetInObjectPropertiesStartOrConstructorFunctionIndex(
      d::MemoryAccessor accessor);
  d::Value GetUsedOrUnusedInstanceSizeInWords(d::MemoryAccessor accessor);
  d::Value GetVisitorId(d::MemoryAccessor accessor);
  d::Value GetInstanceType(d::MemoryAccessor accessor);
  // etc...
};

}  // namespace debug_helper_internal
}  // namespace v8

#endif
