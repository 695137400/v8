// Copyright 2019 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Imagine that this file is generated by the Torque compiler.

#include "tq-generated.h"
#include "include/v8-internal.h"

namespace i = v8::internal;

namespace v8 {
namespace debug_helper_internal {

// This one is hard coded:
std::vector<std::unique_ptr<ObjectProperty>> TqObject::GetProperties(
    d::MemoryAccessor accessor) {
  return std::vector<std::unique_ptr<ObjectProperty>>();
}

// All the rest are generated from Torque metadata. Code would differ slightly
// by platform; this is for x64 with pointer compression.

std::vector<std::unique_ptr<ObjectProperty>> TqHeapObject::GetProperties(
    d::MemoryAccessor accessor) {
  std::vector<std::unique_ptr<ObjectProperty>> result =
      TqObject::GetProperties(accessor);
  result.push_back(std::make_unique<ObjectProperty>("map", "v8::internal::Map",
                                                    GetMap(accessor)));
  return result;
}
d::Value TqHeapObject::GetMap(d::MemoryAccessor accessor) {
  uint32_t value = 0;
  d::MemoryAccessResult validity =
      accessor(address_ - i::kHeapObjectTag + 0,
               reinterpret_cast<uint8_t*>(&value), sizeof(value));
  return {validity, Decompress(value, address_)};
}

std::vector<std::unique_ptr<ObjectProperty>> TqJsReceiver::GetProperties(
    d::MemoryAccessor accessor) {
  std::vector<std::unique_ptr<ObjectProperty>> result =
      TqHeapObject::GetProperties(accessor);
  // Note: for union types, use the closest ancestor type. So for this property
  // of type "FixedArrayBase | Smi", report it as Object.
  result.push_back(std::make_unique<ObjectProperty>(
      "properties_or_hash", "v8::internal::Object",
      GetPropertiesOrHash(accessor)));
  return result;
}
d::Value TqJsReceiver::GetPropertiesOrHash(d::MemoryAccessor accessor) {
  uint32_t value = 0;
  d::MemoryAccessResult validity =
      accessor(address_ - i::kHeapObjectTag + 4,
               reinterpret_cast<uint8_t*>(&value), sizeof(value));
  return {validity, Decompress(value, address_)};
}

std::vector<std::unique_ptr<ObjectProperty>> TqJsObject::GetProperties(
    d::MemoryAccessor accessor) {
  std::vector<std::unique_ptr<ObjectProperty>> result =
      TqJsReceiver::GetProperties(accessor);
  result.push_back(std::make_unique<ObjectProperty>(
      "elements", "v8::internal::FixedArrayBase", GetElements(accessor)));
  return result;
}
d::Value TqJsObject::GetElements(d::MemoryAccessor accessor) {
  uint32_t value = 0;
  d::MemoryAccessResult validity =
      accessor(address_ - i::kHeapObjectTag + 8,
               reinterpret_cast<uint8_t*>(&value), sizeof(value));
  return {validity, Decompress(value, address_)};
}

std::vector<std::unique_ptr<ObjectProperty>> TqJsArray::GetProperties(
    d::MemoryAccessor accessor) {
  std::vector<std::unique_ptr<ObjectProperty>> result =
      TqJsObject::GetProperties(accessor);
  result.push_back(std::make_unique<ObjectProperty>(
      "length", "v8::internal::Object", GetLength(accessor)));
  return result;
}
d::Value TqJsArray::GetLength(d::MemoryAccessor accessor) {
  uint32_t value = 0;
  d::MemoryAccessResult validity =
      accessor(address_ - i::kHeapObjectTag + 12,
               reinterpret_cast<uint8_t*>(&value), sizeof(value));
  return {validity, Decompress(value, address_)};
}

std::vector<std::unique_ptr<ObjectProperty>> TqMap::GetProperties(
    d::MemoryAccessor accessor) {
  std::vector<std::unique_ptr<ObjectProperty>> result =
      TqHeapObject::GetProperties(accessor);
  result.push_back(std::make_unique<ObjectProperty>(
      "instance_size_in_words", "unsigned char",
      GetInstanceSizeInWords(accessor)));
  result.push_back(std::make_unique<ObjectProperty>(
      "in_object_properties_start_or_constructor_function_index",
      "unsigned char",
      GetInObjectPropertiesStartOrConstructorFunctionIndex(accessor)));
  result.push_back(std::make_unique<ObjectProperty>(
      "used_or_unused_instance_size_in_words", "unsigned char",
      GetUsedOrUnusedInstanceSizeInWords(accessor)));
  result.push_back(std::make_unique<ObjectProperty>(
      "visitor_id", "unsigned char", GetVisitorId(accessor)));
  result.push_back(std::make_unique<ObjectProperty>("instance_type", "short",
                                                    GetInstanceType(accessor)));
  // etc...
  return result;
}
d::Value TqMap::GetInstanceSizeInWords(d::MemoryAccessor accessor) {
  uint8_t value = 0;
  d::MemoryAccessResult validity =
      accessor(address_ - i::kHeapObjectTag + 4,
               reinterpret_cast<uint8_t*>(&value), sizeof(value));
  return {validity, value};
}
d::Value TqMap::GetInObjectPropertiesStartOrConstructorFunctionIndex(
    d::MemoryAccessor accessor) {
  uint8_t value = 0;
  d::MemoryAccessResult validity =
      accessor(address_ - i::kHeapObjectTag + 5,
               reinterpret_cast<uint8_t*>(&value), sizeof(value));
  return {validity, value};
}
d::Value TqMap::GetUsedOrUnusedInstanceSizeInWords(d::MemoryAccessor accessor) {
  uint8_t value = 0;
  d::MemoryAccessResult validity =
      accessor(address_ - i::kHeapObjectTag + 6,
               reinterpret_cast<uint8_t*>(&value), sizeof(value));
  return {validity, value};
}
d::Value TqMap::GetVisitorId(d::MemoryAccessor accessor) {
  uint8_t value = 0;
  d::MemoryAccessResult validity =
      accessor(address_ - i::kHeapObjectTag + 7,
               reinterpret_cast<uint8_t*>(&value), sizeof(value));
  return {validity, value};
}
d::Value TqMap::GetInstanceType(d::MemoryAccessor accessor) {
  int16_t value = 0;
  d::MemoryAccessResult validity =
      accessor(address_ - i::kHeapObjectTag + 8,
               reinterpret_cast<uint8_t*>(&value), sizeof(value));
  return {validity, value};
}

}  // namespace debug_helper_internal
}  // namespace v8
