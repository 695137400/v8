{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a29587f1_63e55e0e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-04-26T09:40:10Z",
      "side": 1,
      "message": "PTAL ðŸ˜Š",
      "revId": "3966f0ca6ceb2fc2c8550c87945e6e9a4f6473af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cb006961_50040b40",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2024-04-26T09:58:50Z",
      "side": 1,
      "message": "Thanks for taking a look into that already!",
      "revId": "3966f0ca6ceb2fc2c8550c87945e6e9a4f6473af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c908ff8_b09b264b",
        "filename": "src/deoptimizer/frame-description.h",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2024-04-26T09:58:50Z",
      "side": 1,
      "message": "I think we should actually get rid of the user defined `operator new` entirely. I was thinking of this (which should have the same behavior, if I don\u0027t miss anything):\n```\nvoid* memory \u003d base::Malloc(size + frame_size - kSystemPointerSize);\nreturn new (memory) FrameDescriptor(frame_size, parameter_count, isolate);\n```\nThe advantages I see is that it doesn\u0027t require the additional `new` implementation and instead uses a \"simple\" placement new, which is a more established pattern imho. Wdyt?",
      "range": {
        "startLine": 87,
        "startChar": 4,
        "endLine": 88,
        "endChar": 63
      },
      "revId": "3966f0ca6ceb2fc2c8550c87945e6e9a4f6473af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fb77c48_8d047e4e",
        "filename": "src/deoptimizer/frame-description.h",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-04-30T08:07:05Z",
      "side": 1,
      "message": "Hm, I\u0027m not convinced. I think having the custom `operator new` is a feature, not a bug.\nIf anybody wrote `new FrameDescription(x, 42, isolate);` this would create a compiler error due to the overloaded `operator new` (even inside the FrameDescription).\nWith the same reason let\u0027s make the `FrameDescription` constructor private, so this whole allocation issues don\u0027t leak outside of the class.",
      "parentUuid": "8c908ff8_b09b264b",
      "range": {
        "startLine": 87,
        "startChar": 4,
        "endLine": 88,
        "endChar": 63
      },
      "revId": "3966f0ca6ceb2fc2c8550c87945e6e9a4f6473af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d68b4c2c_ba46419a",
        "filename": "src/deoptimizer/frame-description.h",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2024-05-02T06:42:35Z",
      "side": 1,
      "message": "Right, but if we make the constructor private, such that the only way to create a new `FrameDescriptor` is using `FrameDescriptor::Create`, there is no point in having this overloaded `operator new` or am I missing something?",
      "parentUuid": "8fb77c48_8d047e4e",
      "range": {
        "startLine": 87,
        "startChar": 4,
        "endLine": 88,
        "endChar": 63
      },
      "revId": "3966f0ca6ceb2fc2c8550c87945e6e9a4f6473af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb27061c_bfdd11e9",
        "filename": "src/deoptimizer/frame-description.h",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-05-02T08:07:10Z",
      "side": 1,
      "message": "I mean, not until someone adds a second way. It\u0027s a separation of concerns to have the allocation done by `new` as that\u0027s the concept that should be used for allocating memory for an object.\nMaybe the clearer argument: We also need a custom `operator delete` so that allocation and deallocation are in sync. So we should overload both `operator new` and `operator delete`.\nSo, if this blocks this CL otherwise, I can remove the `operator new` (in the end it\u0027s just a one-liner implementation) but I\u0027m still convinced that it\u0027s existence has its merit and I wouldn\u0027t feel inclined to remove it.",
      "parentUuid": "d68b4c2c_ba46419a",
      "range": {
        "startLine": 87,
        "startChar": 4,
        "endLine": 88,
        "endChar": 63
      },
      "revId": "3966f0ca6ceb2fc2c8550c87945e6e9a4f6473af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "458f1437_f85b0889",
        "filename": "src/deoptimizer/frame-description.h",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2024-04-26T09:58:50Z",
      "side": 1,
      "message": "What do we do with the delete?\n\nWe can either keep it (which is kind of okay imho) or provide another function to destroy the instance.\n\nWho/how are they actually deleted? Could it make sense to have the `Create` return a `std::unique_ptr\u003c\u003e` to have proper ownership?",
      "range": {
        "startLine": 91,
        "startChar": 2,
        "endLine": 91,
        "endChar": 22
      },
      "revId": "3966f0ca6ceb2fc2c8550c87945e6e9a4f6473af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b033389_8cb7d61e",
        "filename": "src/deoptimizer/frame-description.h",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-04-30T08:07:05Z",
      "side": 1,
      "message": "They are deleted via the delete operator here: https://source.chromium.org/chromium/chromium/src/+/main:v8/src/deoptimizer/deoptimizer.cc;l\u003d668\nWe can\u0027t use `unique_ptr` as the pointer is accessed from builtins.",
      "parentUuid": "458f1437_f85b0889",
      "range": {
        "startLine": 91,
        "startChar": 2,
        "endLine": 91,
        "endChar": 22
      },
      "revId": "3966f0ca6ceb2fc2c8550c87945e6e9a4f6473af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d6b4477e_3936711f",
        "filename": "src/deoptimizer/frame-description.h",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2024-05-02T06:42:35Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "5b033389_8cb7d61e",
      "range": {
        "startLine": 91,
        "startChar": 2,
        "endLine": 91,
        "endChar": 22
      },
      "revId": "3966f0ca6ceb2fc2c8550c87945e6e9a4f6473af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}