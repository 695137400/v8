{
  "comments": [
    {
      "key": {
        "uuid": "efaf190a_4877bc56",
        "filename": "src/interface-descriptors.h",
        "patchSetId": 2
      },
      "lineNbr": 274,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-01-09T11:15:44Z",
      "side": 1,
      "message": "Could this be pure virtual?",
      "revId": "e32c2582c1848c290ad3aec8e49221757f739b3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac72c9a2_617a273e",
        "filename": "src/interface-descriptors.h",
        "patchSetId": 2
      },
      "lineNbr": 274,
      "author": {
        "id": 1192025
      },
      "writtenOn": "2019-01-09T12:48:56Z",
      "side": 1,
      "message": "It cannot be pure virtual because clang complains that instance of CallInterfaceDescriptor is defined in src/callable.h",
      "parentUuid": "efaf190a_4877bc56",
      "revId": "e32c2582c1848c290ad3aec8e49221757f739b3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e611e5a_fee7e838",
        "filename": "src/interface-descriptors.h",
        "patchSetId": 2
      },
      "lineNbr": 392,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-01-09T11:15:44Z",
      "side": 1,
      "message": "Nit: \u0027/* D\u0027 and each line should contain a complete terminated /* .. */ style comment.",
      "revId": "e32c2582c1848c290ad3aec8e49221757f739b3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "634bdbb3_2ba48681",
        "filename": "src/interface-descriptors.h",
        "patchSetId": 2
      },
      "lineNbr": 392,
      "author": {
        "id": 1192025
      },
      "writtenOn": "2019-01-09T12:48:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8e611e5a_fee7e838",
      "revId": "e32c2582c1848c290ad3aec8e49221757f739b3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9fe72ffd_092c9fca",
        "filename": "src/mips/interface-descriptors-mips.cc",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-01-09T11:15:44Z",
      "side": 1,
      "message": "From a quick look I only see two descriptors that have float parameters (WasmI64AtomicWaitDescriptor, WasmI32AtomicWaitDescriptor). Are there others?\n\nIt seems a bit unexpected that the default register assignment changes based on the # of float params. Would it make sense to define custom platform-specific registers instead of mucking with default initialization?\n\nIf we do use this solution, please elaborate in the comment above why special handling is needed for float params.",
      "revId": "e32c2582c1848c290ad3aec8e49221757f739b3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6051bf1_71fb6604",
        "filename": "src/mips/interface-descriptors-mips.cc",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1192025
      },
      "writtenOn": "2019-01-09T12:48:56Z",
      "side": 1,
      "message": "There are no other descriptors that have float parameters.\n\nClass CallInterfaceDescriptorData has only array of normal(non-floating-point) registers for parameters\u0027. Float parameters can only be distinguished by calling \u0027param_type(of their index). When it is defined to use float register for parameters (like in WasmI64AtomicWaitDescriptor or WasmI32AtomicWaitDescriptor), float register that is chosen to be used for parameter is the one that corresponds numerically to the next available register in array \u0027default_stub_registers\u0027. \n\nE.g. on MIPS32, numerical values of registers a0, a1, a2, a3 (if they are cast to int) are 4, 5, 6, 7. Therefore for descriptor WasmI64AtomicWaitDescriptor, the f7 float register is chosen for kTimeout parameter. But on MIPS it is not allowed to store floating-point data to odd numbered float registers. (According to MIPS ABI f12 and f14 must be used for parameters.) That was the reason because mksnapshot was unable to make snapshot in debug mode.",
      "parentUuid": "9fe72ffd_092c9fca",
      "revId": "e32c2582c1848c290ad3aec8e49221757f739b3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}