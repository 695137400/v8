{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "722143db_6966fa92",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2020-11-12T18:49:41Z",
      "side": 1,
      "message": "PTAL",
      "revId": "90dc099fac74cfd80549e7eccf717555185bb853",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8e11cc1_ad4ee4c5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2020-11-16T13:31:52Z",
      "side": 1,
      "message": "Ping",
      "revId": "90dc099fac74cfd80549e7eccf717555185bb853",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4ac5d8a6_da071745",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1411293
      },
      "writtenOn": "2020-11-16T16:54:45Z",
      "side": 1,
      "message": "LGTM, but I think the whole br_table algorithm is needlessly complex. Essentially what we have to do is typecheck the stack values against each block type. Maybe we should simplify it in the future. ",
      "revId": "90dc099fac74cfd80549e7eccf717555185bb853",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eba4465f_23a28114",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2020-11-16T21:06:57Z",
      "side": 1,
      "message": "The current algorithm is implemented according to the spec. It was implemented differently before (I don\u0027t remember how), but the old implementation could not handle all corner cases with sub-typing. Back then the current implementation was the most robust one, w.r.t. all spec corner cases. The spec changed in the meantime though, maybe with the new sub-typing things got easier.\n\nAbout the approach you proposed, I\u0027m not convinced that it makes much of a difference to first pop all values off the stack and then type-check with each block type, or to first calculate the actual type of the br_table from the block types and then type-check the stack values. With the current design of the decoder, calculating the type first seems more consistent. In terms of complexity both approaches seem the same.\n\nI don\u0027t really think it\u0027s worth spending time on it though.",
      "parentUuid": "4ac5d8a6_da071745",
      "revId": "90dc099fac74cfd80549e7eccf717555185bb853",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d4782121_c9f5ec5b",
        "filename": "test/mjsunit/regress/wasm/regress-1046472.js",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1411293
      },
      "writtenOn": "2020-11-16T16:54:45Z",
      "side": 1,
      "message": "I don\u0027t like this error message, it needlessly exposes \u003cbot\u003e to the user.",
      "revId": "90dc099fac74cfd80549e7eccf717555185bb853",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ad817c09_39d1513d",
        "filename": "test/mjsunit/regress/wasm/regress-1046472.js",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2020-11-16T21:06:57Z",
      "side": 1,
      "message": "This is the error message we produce at the moment. What other error message would you prefer?",
      "parentUuid": "d4782121_c9f5ec5b",
      "revId": "90dc099fac74cfd80549e7eccf717555185bb853",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a918f74c_38aae8f2",
        "filename": "test/mjsunit/regress/wasm/regress-1046472.js",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1411293
      },
      "writtenOn": "2020-11-17T13:46:40Z",
      "side": 1,
      "message": "I would prefer comparing the types of the branch values directly to each branch target, but as you mentioned, this would require restructuring the algorithm and is probably not worth it.",
      "parentUuid": "ad817c09_39d1513d",
      "revId": "90dc099fac74cfd80549e7eccf717555185bb853",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}