{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ffb83359_d6ade889",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-05-19T15:54:19Z",
      "side": 1,
      "message": "Mythri / Toon PTAL thanks.",
      "revId": "25129ef557d9a246f478047eee49198738dc330f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a43bf93d_e35b7d9d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2021-05-19T15:57:59Z",
      "side": 1,
      "message": "Do you have an estimate of bytecode size implications from having \u0027dead\u0027 feedback slots? I assume it\u0027s not high but it\u0027d be good to verify.",
      "revId": "25129ef557d9a246f478047eee49198738dc330f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c03202d_85224554",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-05-19T16:08:12Z",
      "side": 1,
      "message": "I think it was negligible. Mythri do you remember if we saw any change in bytecode size when we disabled the flag a while ago?",
      "parentUuid": "a43bf93d_e35b7d9d",
      "revId": "25129ef557d9a246f478047eee49198738dc330f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2e09316_ee5d07a8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2021-05-19T16:11:49Z",
      "side": 1,
      "message": "For configurations that ship sparkplug we might even want to remove all feedback-related code from Ignition since we\u0027ll tier up to sparkplug once we allocate a feedback vector.\n\nWe\u0027d need to add a separate set of handlers for --jitless, but I think that would be a good idea anyway. Otherwise we\u0027re spending time tracking even feedback that\u0027s unhelpful to the interpreter, as well as dealing with interruptbudgets. (Although that part is still helpful to allocate the feedback vector; but perhaps it\u0027s a bit expensive just for lazy feedback allocation.)",
      "parentUuid": "0c03202d_85224554",
      "revId": "25129ef557d9a246f478047eee49198738dc330f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "68b38204_66c6ec7c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-05-19T16:19:45Z",
      "side": 1,
      "message": "I just checked and at least for Octane (which I admit isn\u0027t likely a bit source of IIFEs) it was 0.2% increase in bytecode size [1]\n\n[1] https://chromeperf.appspot.com/report?sid\u003df075302df4e1eb91b99418e2279cf997e18581a641b644f1259a64922ca60c40\u0026start_rev\u003d65808\u0026end_rev\u003d66587",
      "parentUuid": "a2e09316_ee5d07a8",
      "revId": "25129ef557d9a246f478047eee49198738dc330f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a68a1a77_67e14b5f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1145189
      },
      "writtenOn": "2021-05-19T16:58:53Z",
      "side": 1,
      "message": "Thanks! lgtm.",
      "revId": "25129ef557d9a246f478047eee49198738dc330f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "568feb06_71c72350",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1145189
      },
      "writtenOn": "2021-05-19T16:58:53Z",
      "side": 1,
      "message": "There was some regression in the bytecode size but it was too small to impact overall memory. I collected some data on number of loads / stores / calls / literal creation that would have a feedback slot with one shot optimisation disabled here: https://docs.google.com/document/d/1YfbRCNNxdZDfi0nCJblWKfHkrUmMgvOWcKiWgCTzMu8/edit#heading\u003dh.loqtb24chn30\nApart from maps and sheets it\u0027s more in the order of 1000s. For maps and sheets it was more like 20-40K. I didn\u0027t record it as a percentage.\n\n\nToon, regarding interrupt budget handling in interpreter, don\u0027t we anyway need it even to tier up to sparkplug? Or are you suggesting that we could just use invocation count for tier up / lazy FV allocation and drop interrupt budget tracking in interpreter?",
      "parentUuid": "68b38204_66c6ec7c",
      "revId": "25129ef557d9a246f478047eee49198738dc330f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "265d0ec6_ac214373",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2021-05-20T08:04:16Z",
      "side": 1,
      "message": "2 independent issues:\n- for jitless we don\u0027t tier up at all (beyond the feedback vector), so keeping track of interrupt budgets during the entire execution time is just overhead. Not just interrupt budgets, but also e.g., binary op and compare op feedback that doesn\u0027t benefit performance of the interpreter.\n- for default we always check if we have a feedback vector in the handlers and do the generic access if we don\u0027t; but if we do tier up to sparkplug we allocate the feedback vector at the same time (or roughly the same time) as we allocate the feedback vector, so I\u0027m not sure there\u0027s value to the bytecode handlers dealing with feedback at all. Not dealing with it avoids loading the feedback vector and checking whether it\u0027s present for many bytecodes.\n\nIf we want to fix the former we should have different handlers for jitless probably, but I\u0027d guess that would have quite a big impact at least on loops.",
      "parentUuid": "568feb06_71c72350",
      "revId": "25129ef557d9a246f478047eee49198738dc330f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}