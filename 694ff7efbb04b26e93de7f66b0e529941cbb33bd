{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "10ea5949_3963f66e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1519522
      },
      "writtenOn": "2022-03-14T15:48:56Z",
      "side": 1,
      "message": "Hey Michael, PTAL at heap/. I\u0027ve now removed the IsAPIWrapper method as it is effectively duplicating the `MayHaveEmbedderFields` logic.",
      "revId": "694ff7efbb04b26e93de7f66b0e529941cbb33bd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c294c2cd_77aa1dde",
        "filename": "src/objects/js-objects.cc",
        "patchSetId": 9
      },
      "lineNbr": 2833,
      "author": {
        "id": 1519522
      },
      "writtenOn": "2022-03-14T15:48:56Z",
      "side": 1,
      "message": "mlippautz@ Please double check this change as it doesn\u0027t have the exact same semantics as before, but should, from what I can tell, still be correct.",
      "revId": "694ff7efbb04b26e93de7f66b0e529941cbb33bd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2c49e99_dfaefbc2",
        "filename": "src/objects/js-objects.cc",
        "patchSetId": 9
      },
      "lineNbr": 2833,
      "author": {
        "id": 1519522
      },
      "writtenOn": "2022-03-14T16:28:50Z",
      "side": 1,
      "message": "Ok I\u0027ve brought the function back under a different name now (IsAnyApiObject) since I\u0027m not sure I really understand this logic (IsUnmodifiedApiObject), but maybe double check if that is really still required :)",
      "parentUuid": "c294c2cd_77aa1dde",
      "revId": "694ff7efbb04b26e93de7f66b0e529941cbb33bd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9840169_49452f1e",
        "filename": "src/objects/js-objects.cc",
        "patchSetId": 9
      },
      "lineNbr": 2833,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2022-03-14T16:35:21Z",
      "side": 1,
      "message": "Missed this part: Here\u0027s what this is used for:\n\n- `ScriptWrappable` (C++) / Wrapper (JS) pairs generally live and die together\n- The exception (yay!) is during Scavenge, where the Scavenger treats all wrapper objects that are still unmodified as potentially reclaimable.\n- V8 wil check for those unmodified wrappers and ask Blink whether it can really drop them.\n- If Blink knows how to recreate empty wrapper objects (it does for most types), V8 will reclaim those wrappers on Scavenge.\n\nReturning `false` should be always safe in production. Maybe some unit tests fail?\n\nIf we return `false` where we could return `true` for Blink, you may end up with a memory regression.",
      "parentUuid": "c2c49e99_dfaefbc2",
      "revId": "694ff7efbb04b26e93de7f66b0e529941cbb33bd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8dea9fa_2521cec6",
        "filename": "src/objects/js-objects.cc",
        "patchSetId": 9
      },
      "lineNbr": 2833,
      "author": {
        "id": 1519522
      },
      "writtenOn": "2022-03-14T16:44:57Z",
      "side": 1,
      "message": "Thanks! So if we turn \n```\nif (!js_object.IsAnyApiObject()) return false;\n```\ninto\n```\nif (!js_object.MayHaveEmbedderFields()) return false;\n```\nWe would end up asking Blink whether we can drop other objects with EmbedderDataSlots, such as global objects, ArrayBuffers, TypedArrays, DataViews, etc. Is that desirable? I guess if Blink can\u0027t construct these, there\u0027s no point in asking and so we should use `IsAnyApiObject` here?",
      "parentUuid": "a9840169_49452f1e",
      "revId": "694ff7efbb04b26e93de7f66b0e529941cbb33bd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d69e3f31_dc53dd9a",
        "filename": "src/objects/js-objects.cc",
        "patchSetId": 9
      },
      "lineNbr": 2833,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2022-03-14T16:54:58Z",
      "side": 1,
      "message": "\u003e Thanks! So if we turn \n\u003e ```\n\u003e if (!js_object.IsAnyApiObject()) return false;\n\u003e ```\n\u003e into\n\u003e ```\n\u003e if (!js_object.MayHaveEmbedderFields()) return false;\n\u003e ```\n\u003e We would end up asking Blink whether we can drop other objects with EmbedderDataSlots, such as global objects, ArrayBuffers, TypedArrays, DataViews, etc. Is that desirable? I guess if Blink can\u0027t construct these, there\u0027s no point in asking and so we should use `IsAnyApiObject` here?\n\nBlink will not be able to recreated those and return true here: https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/platform/heap/thread_state.cc;drc\u003d30309877d4b10434eeaa9f85e8ba00ca91c7d731;bpv\u003d1;bpt\u003d1;l\u003d34\n\nI think it makes sense to leave the code as is with the most precise naming because the getters will really only be used for this part of the GC.\n\n(We\u0027d love to get rid of the special handling alltogether but we are talking about 1-2% PMF here.)",
      "parentUuid": "a8dea9fa_2521cec6",
      "revId": "694ff7efbb04b26e93de7f66b0e529941cbb33bd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}