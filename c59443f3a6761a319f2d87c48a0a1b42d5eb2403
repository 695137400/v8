{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3663385a_ab3c3f44",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2024-07-19T10:48:33Z",
      "side": 1,
      "message": "Splat",
      "range": {
        "startLine": 9,
        "startChar": 23,
        "endLine": 9,
        "endChar": 28
      },
      "revId": "c59443f3a6761a319f2d87c48a0a1b42d5eb2403",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aaf0969d_f2f4a2f4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2024-07-19T10:48:33Z",
      "side": 1,
      "message": "The tracking bug probably doesn\u0027t need to be access-restricted, does it?",
      "range": {
        "startLine": 12,
        "startChar": 5,
        "endLine": 12,
        "endChar": 14
      },
      "revId": "c59443f3a6761a319f2d87c48a0a1b42d5eb2403",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a64619f9_3a71f3f7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2024-07-19T10:48:33Z",
      "side": 1,
      "message": "LGTM with some comments.",
      "revId": "c59443f3a6761a319f2d87c48a0a1b42d5eb2403",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67e1c6d6_e6d281b4",
        "filename": "src/wasm/baseline/liftoff-compiler.cc",
        "patchSetId": 2
      },
      "lineNbr": 4342,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2024-07-19T10:48:33Z",
      "side": 1,
      "message": "Don\u0027t forget to update the NaN detection in `EmitUnOp` for fp16 before turning on fuzzer coverage. Maybe add a `TODO` to remind yourself?",
      "range": {
        "startLine": 4342,
        "startChar": 15,
        "endLine": 4342,
        "endChar": 23
      },
      "revId": "c59443f3a6761a319f2d87c48a0a1b42d5eb2403",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1cca0ab0_8300c07a",
        "filename": "src/wasm/function-body-decoder-impl.h",
        "patchSetId": 2
      },
      "lineNbr": 4562,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2024-07-19T10:48:33Z",
      "side": 1,
      "message": "I\u0027m pretty sure you need such a check for `kExprF16x8Splat` as well, probably with `[[fallthrough]]` to the `default:` case.",
      "range": {
        "startLine": 4562,
        "startChar": 8,
        "endLine": 4562,
        "endChar": 47
      },
      "revId": "c59443f3a6761a319f2d87c48a0a1b42d5eb2403",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9767e0f_8bd959da",
        "filename": "src/wasm/wasm-opcodes-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 136,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2024-07-19T10:48:33Z",
      "side": 1,
      "message": "This also returns `true` for the fp16 opcodes. That\u0027s probably fine (and even required for the correct behavior of `WasmOpcodes::Signature`); but for accurate measuring of feature usage in the wild, you may want to update `DECODE(Simd)` in `function-body-decoder-impl.h`:\n```\nif (WasmOpcodes::IsFP16SimdOpcode(full_opcode)) {\n  detected_-\u003eadd_fp16();\n} else if (WasmOpcodes::IsRelaxedSimdOpcode(full_opcode)) {\n  ...\n```",
      "range": {
        "startLine": 136,
        "startChar": 9,
        "endLine": 136,
        "endChar": 39
      },
      "revId": "c59443f3a6761a319f2d87c48a0a1b42d5eb2403",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34d76691_3071838c",
        "filename": "test/cctest/cctest.status",
        "patchSetId": 2
      },
      "lineNbr": 664,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2024-07-19T10:48:33Z",
      "side": 1,
      "message": "Focusing on cctests is fine for now, but remember that we\u0027ll eventually also need mjsunit `WasmModuleBuilder` support for all the new instructions.",
      "range": {
        "startLine": 664,
        "startChar": 3,
        "endLine": 664,
        "endChar": 20
      },
      "revId": "c59443f3a6761a319f2d87c48a0a1b42d5eb2403",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3faf45f7_52265aeb",
        "filename": "test/cctest/wasm/test-run-wasm-f16.cc",
        "patchSetId": 2
      },
      "lineNbr": 85,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2024-07-19T10:48:33Z",
      "side": 1,
      "message": "I haven\u0027t tested to see if it works, but I think this could be replaced with the following simplification:\n```\n  r.Build({WASM_SIMD_F16x8_SPLAT(WASM_F32(3.14159f)),\n           WASM_F32(0.0f), WASM_SIMD_OP(kExprF16x8ReplaceLane), 0,\n           WASM_F32(1.0f), WASM_SIMD_OP(kExprF16x8ReplaceLane), 1,\n           WASM_F32(2.0f), WASM_SIMD_OP(kExprF16x8ReplaceLane), 2,\n           WASM_F32(3.0f), WASM_SIMD_OP(kExprF16x8ReplaceLane), 3,\n           WASM_F32(4.0f), WASM_SIMD_OP(kExprF16x8ReplaceLane), 4,\n           WASM_F32(5.0f), WASM_SIMD_OP(kExprF16x8ReplaceLane), 5,\n           WASM_F32(6.0f), WASM_SIMD_OP(kExprF16x8ReplaceLane), 6,\n           WASM_F32(7.0f), WASM_SIMD_OP(kExprF16x8ReplaceLane), 7,\n           kExprGlobalSet, 0,\n           WASM_ONE});\n```\nUse whichever version you prefer :-)",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 85,
        "endChar": 22
      },
      "revId": "c59443f3a6761a319f2d87c48a0a1b42d5eb2403",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f447d287_b7a28d1a",
        "filename": "test/cctest/wasm/test-run-wasm-f16.cc",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2024-07-19T10:48:33Z",
      "side": 1,
      "message": "This still has the limitation that it wouldn\u0027t catch a bug that misinterprets the lane index (e.g. counting from the wrong end of the vector).\nAs a quick fix, you could add another runner that only extracts one lane (say, the 6th), and checks that the result is 6.\nOr you could change this test to add another 8 `kWasmF32`-typed globals as outputs, and instead of the additions have a sequence of\n```\n  WASM_GLOBAL_SET(i, WASM_SIMD_F16x8_EXTRACT_LANE(i, WASM_GLOBAL_GET(8))),\n```\nand then `CHECK_EQ(g0, 0)` etc.\n\n(Don\u0027t overengineer it with macros and loops; some repetition is fine if it makes it super easy to see what the test does.)",
      "range": {
        "startLine": 109,
        "startChar": 11,
        "endLine": 109,
        "endChar": 40
      },
      "revId": "c59443f3a6761a319f2d87c48a0a1b42d5eb2403",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}