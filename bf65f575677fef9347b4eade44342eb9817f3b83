{
  "comments": [
    {
      "key": {
        "uuid": "817ddc07_269cb3a0",
        "filename": "src/heap/cppgc/marker.cc",
        "patchSetId": 4
      },
      "lineNbr": 124,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-07-16T11:11:21Z",
      "side": 1,
      "message": "I don\u0027t think this holds. We have PostNonNestableTask that guarantees that, but PostIdleTask has no such guarantees and the embedder can invoke it with a stack.",
      "range": {
        "startLine": 124,
        "startChar": 5,
        "endLine": 124,
        "endChar": 65
      },
      "revId": "bf65f575677fef9347b4eade44342eb9817f3b83",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0cecd1c9_c65a5ca4",
        "filename": "src/heap/cppgc/marker.cc",
        "patchSetId": 4
      },
      "lineNbr": 124,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-07-16T12:18:05Z",
      "side": 1,
      "message": "I\u0027ve based this on our current implementation in blink (that has the same comment).\nLooking at traces, our idle tasks in blink indeed never have a stack.\nDoes v8\u0027s platform behaves differently than blink\u0027s platform? If it does then this could be an issue.\n\n(Also, idle task should be executed only when there is nothing else to run, so intuitively I\u0027d say that it doesn\u0027t make sense to run it with a stack.)",
      "parentUuid": "817ddc07_269cb3a0",
      "range": {
        "startLine": 124,
        "startChar": 5,
        "endLine": 124,
        "endChar": 65
      },
      "revId": "bf65f575677fef9347b4eade44342eb9817f3b83",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08760dcb_dd1b7f40",
        "filename": "src/heap/cppgc/marker.cc",
        "patchSetId": 4
      },
      "lineNbr": 124,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-07-16T13:04:10Z",
      "side": 1,
      "message": "The difference is that V8\u0027s platform can be implemented by other embedders besides Blink and those can choose to drain idle task queue with a stack.",
      "parentUuid": "0cecd1c9_c65a5ca4",
      "range": {
        "startLine": 124,
        "startChar": 5,
        "endLine": 124,
        "endChar": 65
      },
      "revId": "bf65f575677fef9347b4eade44342eb9817f3b83",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bcd60c2_1d3d520c",
        "filename": "src/heap/cppgc/marker.cc",
        "patchSetId": 4
      },
      "lineNbr": 177,
      "author": {
        "id": 1344750
      },
      "writtenOn": "2020-07-15T18:02:34Z",
      "side": 1,
      "message": "We don\u0027t visit the stack in the beginning of incremental marking (only in the atomic pause). This seems to break it, if config contains non-empty stack (like in one of the tests in the CL).",
      "revId": "bf65f575677fef9347b4eade44342eb9817f3b83",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fdcc1c19_c28705dd",
        "filename": "src/heap/cppgc/marker.cc",
        "patchSetId": 4
      },
      "lineNbr": 177,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-07-16T12:18:05Z",
      "side": 1,
      "message": "Good point. Also added a comment to explain why we don\u0027t do it.",
      "parentUuid": "8bcd60c2_1d3d520c",
      "revId": "bf65f575677fef9347b4eade44342eb9817f3b83",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "57e4b34a_ec3498d6",
        "filename": "src/heap/cppgc/marker.cc",
        "patchSetId": 4
      },
      "lineNbr": 251,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-07-16T11:11:21Z",
      "side": 1,
      "message": "Why do we need this and cannot use IncrementalMarkingStep in tests?",
      "range": {
        "startLine": 251,
        "startChar": 17,
        "endLine": 251,
        "endChar": 49
      },
      "revId": "bf65f575677fef9347b4eade44342eb9817f3b83",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f507dd99_f85fbab1",
        "filename": "src/heap/cppgc/marker.cc",
        "patchSetId": 4
      },
      "lineNbr": 251,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-07-16T12:18:05Z",
      "side": 1,
      "message": "I added it because I don\u0027t see a reason to expose IncrementalMarkingStep to users right now (IncrementalMarkingStep is currently protected). If such a need arise later, we can remove the ForTesting method. I would prefer for the public api of Marker to include only the needed minimum.",
      "parentUuid": "57e4b34a_ec3498d6",
      "range": {
        "startLine": 251,
        "startChar": 17,
        "endLine": 251,
        "endChar": 49
      },
      "revId": "bf65f575677fef9347b4eade44342eb9817f3b83",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9baa522_c6b7eef4",
        "filename": "src/heap/cppgc/marker.cc",
        "patchSetId": 4
      },
      "lineNbr": 251,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-07-16T13:04:10Z",
      "side": 1,
      "message": "I see, thanks.",
      "parentUuid": "f507dd99_f85fbab1",
      "range": {
        "startLine": 251,
        "startChar": 17,
        "endLine": 251,
        "endChar": 49
      },
      "revId": "bf65f575677fef9347b4eade44342eb9817f3b83",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16455745_26c57983",
        "filename": "src/heap/cppgc/marker.h",
        "patchSetId": 4
      },
      "lineNbr": 144,
      "author": {
        "id": 1344750
      },
      "writtenOn": "2020-07-15T18:02:34Z",
      "side": 1,
      "message": "nit: not needed now",
      "range": {
        "startLine": 144,
        "startChar": 2,
        "endLine": 144,
        "endChar": 10
      },
      "revId": "bf65f575677fef9347b4eade44342eb9817f3b83",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0852ceb1_b4e7a139",
        "filename": "src/heap/cppgc/marker.h",
        "patchSetId": 4
      },
      "lineNbr": 144,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-07-16T12:18:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "16455745_26c57983",
      "range": {
        "startLine": 144,
        "startChar": 2,
        "endLine": 144,
        "endChar": 10
      },
      "revId": "bf65f575677fef9347b4eade44342eb9817f3b83",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}