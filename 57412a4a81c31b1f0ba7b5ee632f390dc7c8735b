{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "13acfda4_064dad0f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2021-05-10T15:09:32Z",
      "side": 1,
      "message": "PTAL",
      "revId": "57412a4a81c31b1f0ba7b5ee632f390dc7c8735b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "65aaa71f_311353b5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2021-05-10T16:25:23Z",
      "side": 1,
      "message": "LGTM, with the hope that test case can be made at least a little bit faster.",
      "revId": "57412a4a81c31b1f0ba7b5ee632f390dc7c8735b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c6a0b40_5b5de4ae",
        "filename": "test/mjsunit/regress/regress-1206412.js",
        "patchSetId": 2
      },
      "lineNbr": 122,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2021-05-10T16:25:23Z",
      "side": 1,
      "message": "Can this count be reduced?",
      "range": {
        "startLine": 122,
        "startChar": 30,
        "endLine": 122,
        "endChar": 33
      },
      "revId": "57412a4a81c31b1f0ba7b5ee632f390dc7c8735b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6bd19587_78cfe78f",
        "filename": "test/mjsunit/regress/regress-1206412.js",
        "patchSetId": 2
      },
      "lineNbr": 122,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2021-05-10T16:56:48Z",
      "side": 1,
      "message": "Unfortunately not. I think it plays together with the loop below: We just need to give background compilation enough time to finish the function. I can remove the loop below if I increase to 250 here - that gives me a ~4.5% change of reproduction (45 out of 1000 runs). I could also make this time based:\n\n  let start \u003d performance.now();\n  while (performance.now() - start \u003c 100) {\n    try {\n      await new WasmModuleBuilder().instantiate();\n    } catch {}\n  }\n\nThat has a ~50% chance on my machine.\nOr should I just drop the regression test, since this is \"just\" a disassembler bug anyway?",
      "parentUuid": "5c6a0b40_5b5de4ae",
      "range": {
        "startLine": 122,
        "startChar": 30,
        "endLine": 122,
        "endChar": 33
      },
      "revId": "57412a4a81c31b1f0ba7b5ee632f390dc7c8735b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f9ae5ed_ff0afc63",
        "filename": "test/mjsunit/regress/regress-1206412.js",
        "patchSetId": 2
      },
      "lineNbr": 122,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2021-05-11T14:29:42Z",
      "side": 1,
      "message": "So the test relies on a race condition, that\u0027s even worse than just being slow...\n\nI think dropping the test would be an option. While it\u0027s nice to ensure that the disassembler is correct and complete, I\u0027m not sure how much of our testing budget we should be spending on that.\n\nMaking the test faster and more reliable would also be an option, if you think it\u0027s worth the effort. Since you mention background compilation, presumably it was optimized code that triggered the issue? The usual pattern is to collect type feedback and then force (synchronous) optimization:\n\n  let builder \u003d new WasmModuleBuilder();\n  %PrepareFunctionForOptimization(builder.toBuffer);\n  for (var i \u003d 0; i \u003c 3; i++) {\n    await builder.instantiate();\n  }\n  %OptimizeFunctionOnNextCall(builder.toBuffer);\n  await builder.instantiate();",
      "parentUuid": "6bd19587_78cfe78f",
      "range": {
        "startLine": 122,
        "startChar": 30,
        "endLine": 122,
        "endChar": 33
      },
      "revId": "57412a4a81c31b1f0ba7b5ee632f390dc7c8735b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cc43700c_192d4817",
        "filename": "test/mjsunit/regress/regress-1206412.js",
        "patchSetId": 2
      },
      "lineNbr": 122,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2021-05-19T12:01:28Z",
      "side": 1,
      "message": "I tried that (in different variants) but it did not reliably reproduce. I thus decided to drop the test.",
      "parentUuid": "6f9ae5ed_ff0afc63",
      "range": {
        "startLine": 122,
        "startChar": 30,
        "endLine": 122,
        "endChar": 33
      },
      "revId": "57412a4a81c31b1f0ba7b5ee632f390dc7c8735b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd910920_fe5141db",
        "filename": "test/mjsunit/regress/regress-1206412.js",
        "patchSetId": 2
      },
      "lineNbr": 129,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2021-05-10T16:25:23Z",
      "side": 1,
      "message": "Is this loop really necessary?",
      "range": {
        "startLine": 127,
        "startChar": 2,
        "endLine": 129,
        "endChar": 3
      },
      "revId": "57412a4a81c31b1f0ba7b5ee632f390dc7c8735b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba31175c_8e6109b9",
        "filename": "test/mjsunit/regress/regress-1206412.js",
        "patchSetId": 2
      },
      "lineNbr": 129,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2021-05-10T16:56:48Z",
      "side": 1,
      "message": "See above.",
      "parentUuid": "dd910920_fe5141db",
      "range": {
        "startLine": 127,
        "startChar": 2,
        "endLine": 129,
        "endChar": 3
      },
      "revId": "57412a4a81c31b1f0ba7b5ee632f390dc7c8735b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}