{
  "comments": [
    {
      "key": {
        "uuid": "0aa04591_671fcae3",
        "filename": "src/compiler/pipeline.cc",
        "patchSetId": 2
      },
      "lineNbr": 1127,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2020-06-01T13:36:30Z",
      "side": 1,
      "message": "This doesn\u0027t need an extra scope, it can just live in the \"if (data_.broker()-\u003eis_concurrent_inlining()) {\" part. \n\nIn fact, I\u0027d prefer that all these timers moved into the actual function being called (e.g., CreateGraph, OptimizeGraphForMidTier, OptimizeGraph, AssembleCode).  \n\nThinking about this even further, I think we could make this more structured by having BeginPhaseKind / EndPhaseKind create automatically add RCS timer scopes for each of these phase kinds in a similar same way as PipelineImpl::Run(Args\u0026\u0026... args) does for the phases within.",
      "revId": "8df6c3018a637b19097ecc9379d5d14881a473be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba2aca80_dec92def",
        "filename": "src/compiler/pipeline.cc",
        "patchSetId": 2
      },
      "lineNbr": 1127,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2020-06-01T14:24:52Z",
      "side": 1,
      "message": "\u003e This doesn\u0027t need an extra scope, it can just live in the \"if (data_.broker()-\u003eis_concurrent_inlining()) {\" part. \n\nAck\n\n\u003e In fact, I\u0027d prefer that all these timers moved into the actual function being called (e.g., CreateGraph, OptimizeGraphForMidTier, OptimizeGraph, AssembleCode).  \n\nCreateGraph and AssembleCode are called from other places as well. If we inline them there, we are going to be counting more than just the dispatcher job. Would this be intended?\n\n\u003e Thinking about this even further, I think we could make this more structured by having BeginPhaseKind / EndPhaseKind create automatically add RCS timer scopes for each of these phase kinds in a similar same way as PipelineImpl::Run(Args\u0026\u0026... args) does for the phases within.\n\nI don\u0027t think it would be straightforward. Looking at the code, both OptimizeGraphForMidTier and OptimizeGraph use BeginPhaseKind more than one time for example. Also, there are some cases where BeginPhaseKind is only called if specific flags are enabled.",
      "parentUuid": "0aa04591_671fcae3",
      "revId": "8df6c3018a637b19097ecc9379d5d14881a473be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "671ef785_a226222c",
        "filename": "src/compiler/pipeline.cc",
        "patchSetId": 2
      },
      "lineNbr": 1127,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2020-06-01T15:00:27Z",
      "side": 1,
      "message": "\u003e CreateGraph and AssembleCode are called from other places as well. If we inline them there, we are going to be counting more than just the dispatcher job. Would this be intended?\n\nYes this is what we want, we aren\u0027t trying to explicitly count just dispatcher job time, we are wanting to be more specific about where time is going in general, so this would move any unaccounted time for CreateGraph,  AssembleCode, etc. functions to these new counters, rather than whatever catch-all timer is scoped above it.\n\n\u003e I don\u0027t think it would be straightforward. Looking at the code, both OptimizeGraphForMidTier and OptimizeGraph use BeginPhaseKind more than one time for example. \n\nWhat I\u0027m suggesting is that you add timers explicitly for each PhaseKind there is - we don\u0027t need to have a single timer for OptimizeGraph, etc, instead we are having a phase-kind scoping timer which is capturing any time spent in this particular phase-kind that isn\u0027t captured in the phases themself.\n\n\u003e Also, there are some cases where BeginPhaseKind is only called if specific flags are enabled.\n\nAgain this should be fine as long as the Begin/EndPhaseKinds are all well-scoped. This means the timers associated with that particular PhaseKind will only ever get incremented if that flag is enabled, which is what we want.\n\nIt would probably be easier to structure this if we had an explicit scoped object that starts/ends PhaseKinds (similar to PipelineRunScope) - maybe we should start with that refactoring?",
      "parentUuid": "ba2aca80_dec92def",
      "revId": "8df6c3018a637b19097ecc9379d5d14881a473be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e489a8b_adfbb4f6",
        "filename": "src/compiler/pipeline.cc",
        "patchSetId": 2
      },
      "lineNbr": 1129,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2020-06-01T13:36:30Z",
      "side": 1,
      "message": "These should be kThreadSpecific counters, since ExecuteJobImpl can be (and generally is) run on a background worker thread.",
      "revId": "8df6c3018a637b19097ecc9379d5d14881a473be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19a50e65_07cc3541",
        "filename": "src/compiler/pipeline.cc",
        "patchSetId": 2
      },
      "lineNbr": 1129,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2020-06-01T14:24:52Z",
      "side": 1,
      "message": "I tried doing that in patchset 1 (https://chromium-review.googlesource.com/c/v8/v8/+/2224213/1) but I got failures that said that the counter was not appropiate for threads. That\u0027s why I updated them to not be thread specific.\n\nAlso, other RuntimeCallTimerScopes in this file are also not thread specific.",
      "parentUuid": "2e489a8b_adfbb4f6",
      "revId": "8df6c3018a637b19097ecc9379d5d14881a473be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c526f5d6_708e6e18",
        "filename": "src/compiler/pipeline.cc",
        "patchSetId": 2
      },
      "lineNbr": 1129,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2020-06-01T15:00:27Z",
      "side": 1,
      "message": "The ones I\u0027m talking about are defined in DECL_PIPELINE_PHASE_CONSTANTS, and are all kThreadSpecific (the remaining ones are explicitly not thread specific and so are using).   Added some comments on PS1 on how to fix the thread specific issue.",
      "parentUuid": "19a50e65_07cc3541",
      "revId": "8df6c3018a637b19097ecc9379d5d14881a473be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}