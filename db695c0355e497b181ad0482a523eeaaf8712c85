{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "00499fa4_d6121971",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 7,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-03-16T12:45:37Z",
      "side": 1,
      "message": "Please generally use \"Wasm\" or \"WebAssembly\".",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "358a213f_abe53ecb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 7,
      "author": {
        "id": 1528943
      },
      "writtenOn": "2022-03-17T15:23:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "00499fa4_d6121971",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8c0741c_9688c30e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 24,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-03-16T12:45:37Z",
      "side": 1,
      "message": "This link is dead. I think the new link is https://github.com/WebAssembly/tool-conventions/blob/main/CodeMetadata.md",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3c3856a9_109dcedc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 24,
      "author": {
        "id": 1528943
      },
      "writtenOn": "2022-03-17T15:23:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e8c0741c_9688c30e",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "327ef6ba_f2a9df3e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-03-16T12:45:37Z",
      "side": 1,
      "message": "Thanks, this looks better. I left another round of review, but some things still look very rough, so this might need more review rounds.\nAs mentioned before, we should be very careful not to introduce overhead for modules which do not use instruction tracing. Can you please measure how much overhead the current implementation introduces?",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1324144d_1c95dc76",
        "filename": "src/codegen/arm64/assembler-arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 440,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-03-16T12:45:37Z",
      "side": 1,
      "message": "What\u0027s the plan with arm64? In its current form, this method could just be skipped, and the instruction selector would just not emit anything.",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "748b3e43_aeb0c7a6",
        "filename": "src/codegen/arm64/assembler-arm64.cc",
        "patchSetId": 5
      },
      "lineNbr": 440,
      "author": {
        "id": 1528943
      },
      "writtenOn": "2022-03-17T15:23:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1324144d_1c95dc76",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e3bc0f9_362b338a",
        "filename": "src/codegen/x64/assembler-x64.cc",
        "patchSetId": 5
      },
      "lineNbr": 2070,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-03-16T12:45:37Z",
      "side": 1,
      "message": "Do we have some documentation we can link about the different instructions we emit here?",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f396afa8_076c5c0e",
        "filename": "src/codegen/x64/assembler-x64.cc",
        "patchSetId": 5
      },
      "lineNbr": 2070,
      "author": {
        "id": 1528943
      },
      "writtenOn": "2022-03-24T20:32:26Z",
      "side": 1,
      "message": "We are working on getting some of this documentation linked here as we continue to iterate on this",
      "parentUuid": "5e3bc0f9_362b338a",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b3409f0_3da01ca8",
        "filename": "src/compiler/machine-operator.cc",
        "patchSetId": 5
      },
      "lineNbr": 1429,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-03-16T12:45:37Z",
      "side": 1,
      "message": "I don\u0027t see those comments on other methods in this file. I would suggest dropping it here as well.",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "44bc4470_2e420c94",
        "filename": "src/compiler/machine-operator.cc",
        "patchSetId": 5
      },
      "lineNbr": 1429,
      "author": {
        "id": 1528943
      },
      "writtenOn": "2022-03-24T21:23:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5b3409f0_3da01ca8",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d57d317_979f6b57",
        "filename": "src/compiler/wasm-compiler.cc",
        "patchSetId": 5
      },
      "lineNbr": 717,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-03-16T12:45:37Z",
      "side": 1,
      "message": "Here as well.",
      "range": {
        "startLine": 717,
        "startChar": 50,
        "endLine": 717,
        "endChar": 55
      },
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c8fcf1a_e2b7cee4",
        "filename": "src/compiler/wasm-compiler.cc",
        "patchSetId": 5
      },
      "lineNbr": 717,
      "author": {
        "id": 1528943
      },
      "writtenOn": "2022-03-24T20:32:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7d57d317_979f6b57",
      "range": {
        "startLine": 717,
        "startChar": 50,
        "endLine": 717,
        "endChar": 55
      },
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb774c04_4a9b9eaf",
        "filename": "src/compiler/wasm-compiler.h",
        "patchSetId": 5
      },
      "lineNbr": 285,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-03-16T12:45:37Z",
      "side": 1,
      "message": "This should be \"mark_id\", I think.",
      "range": {
        "startLine": 285,
        "startChar": 34,
        "endLine": 285,
        "endChar": 39
      },
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bb4eb91e_c8b5d1ff",
        "filename": "src/compiler/wasm-compiler.h",
        "patchSetId": 5
      },
      "lineNbr": 285,
      "author": {
        "id": 1528943
      },
      "writtenOn": "2022-03-24T20:32:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bb774c04_4a9b9eaf",
      "range": {
        "startLine": 285,
        "startChar": 34,
        "endLine": 285,
        "endChar": 39
      },
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "208cf7ad_706dbf7c",
        "filename": "src/diagnostics/x64/disasm-x64.cc",
        "patchSetId": 5
      },
      "lineNbr": 2340,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-03-16T12:45:37Z",
      "side": 1,
      "message": "Please integrate this better. It looks like the 0x64 prefix was not used so far, so maybe define it and check against it here, then handle this special case within the block for the new prefix, and fail if the following bytes are something unexpected.",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "478c0518_1ab6f0af",
        "filename": "src/diagnostics/x64/disasm-x64.cc",
        "patchSetId": 5
      },
      "lineNbr": 2340,
      "author": {
        "id": 1528943
      },
      "writtenOn": "2022-03-24T20:32:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "208cf7ad_706dbf7c",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3e8202b_c8f55862",
        "filename": "src/wasm/baseline/x64/liftoff-assembler-x64.h",
        "patchSetId": 5
      },
      "lineNbr": 1035,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-03-16T12:45:37Z",
      "side": 1,
      "message": "Also here, is there a way to express this via existing assembler methods instead of hard-coding the bytes?",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "013cf383_908fe556",
        "filename": "src/wasm/baseline/x64/liftoff-assembler-x64.h",
        "patchSetId": 5
      },
      "lineNbr": 1035,
      "author": {
        "id": 1528943
      },
      "writtenOn": "2022-03-24T20:32:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a3e8202b_c8f55862",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "812453db_7dc155f4",
        "filename": "src/wasm/function-body-decoder-impl.h",
        "patchSetId": 5
      },
      "lineNbr": 1090,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-03-16T12:45:37Z",
      "side": 1,
      "message": "Wouldn\u0027t we have to find the beginning of trace marks for the current function?",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26624356_ea612f28",
        "filename": "src/wasm/function-body-decoder-impl.h",
        "patchSetId": 5
      },
      "lineNbr": 1090,
      "author": {
        "id": 1528943
      },
      "writtenOn": "2022-03-24T20:32:26Z",
      "side": 1,
      "message": "The current solution implemented is good for small numbers of traces, but suboptimal. One way to make this easier/simpler would be to have something that allows to know which function we are currently decoding? I found a couple methods, but they involve doing searching across the module, and I can only see them used in debugging",
      "parentUuid": "812453db_7dc155f4",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "51dbd931_ef828101",
        "filename": "src/wasm/function-body-decoder-impl.h",
        "patchSetId": 5
      },
      "lineNbr": 1090,
      "author": {
        "id": 1528943
      },
      "writtenOn": "2022-06-14T15:30:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "26624356_ea612f28",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fbe320de_6f615e86",
        "filename": "src/wasm/function-body-decoder-impl.h",
        "patchSetId": 5
      },
      "lineNbr": 2179,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-03-16T12:45:37Z",
      "side": 1,
      "message": "This is missing a trailing underscore (see style guide), and I suggest to store a single pointer instead of an iterator (see below).",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e171283c_9491ef19",
        "filename": "src/wasm/function-body-decoder-impl.h",
        "patchSetId": 5
      },
      "lineNbr": 2179,
      "author": {
        "id": 1528943
      },
      "writtenOn": "2022-03-24T20:32:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fbe320de_6f615e86",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ab7222f_1ea7e399",
        "filename": "src/wasm/function-body-decoder-impl.h",
        "patchSetId": 5
      },
      "lineNbr": 2390,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-03-16T12:45:37Z",
      "side": 1,
      "message": "Did you measure the performance impact of this, for validation or Liftoff compilation? I would assume this to take significant time.\n\nI would suggest two things to make this faster:\n1) Store a single pointer, and add an \"invalid\" entry at the end of the vector, such that we can dereference past the actual end, but we will never match that last entry.\n2) If there is remaining performance overhead, we should try to avoid the additional computation here and instead transfer the vector at some point to contain pointers instead of offsets.",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dad33507_29804378",
        "filename": "src/wasm/function-body-decoder-impl.h",
        "patchSetId": 5
      },
      "lineNbr": 2390,
      "author": {
        "id": 1528943
      },
      "writtenOn": "2022-03-31T17:55:05Z",
      "side": 1,
      "message": "Validation of Performance Impact\nThis is based on the current implementation so we have some numbers to work with. Still working on the other suggestions for improvement, so I expect to see this improve.\n\nSummary:\nIn summary, I can find no difference in decode time for the trace instructions. \nI modified one large Wasm module into 3 additional modules. One is the extreme \ncase, which triples the file size. One is a milder extreme case, which just \ndoubles the file size. And the last one increases the file size by ~3%. All of \nthese are what we consider the worst case, it does not make sense to add this \nmany traces. We expect users to add a maximum of a few dozen trace marks at a \ntime.\n\n\nDetails:\n\nTest Code:\n    f \u003d arguments[0]\n    b \u003d readbuffer(f);\n    start \u003d performance.now()\n    m \u003d new WebAssembly.Module(b);\n    stop \u003d performance.now()\n    t_ms \u003d stop - start;\n    print(t_ms)\n\nI ran the test code in a harness that ran it 50 times, then averaged the time.\n\n\nD8 commands:\nWithout Tracing\n    d8 harness.js -- earthwasm.wasm\n    \nWith Tracing\n    d8 harness.js --experimental-wasm-instruction-tracing -- earthwasm.wasm\n\n  \n  \nearthwasm.wasm:\n    size:                 20,410,954 bytes\n    trace count:          0 traces\n    without tracing time: 6,555.858ms +- 166,490.414ms\n    with tracing time:    6,333.822ms +-   3,089.230ms\n\nearthwasm_large.wasm:\n    size:                 60,392,786 bytes\n    trace count:          5,838,582 traces\n    without tracing time: 6,379.287ms +- 10,132.305ms\n    with tracing time:    6,342.293ms +-  3,598.859ms\n\nearthwasm_medium.wasm:\n    size:                 45,469,582 bytes\n    trace count:          3,649,917 traces\n    without tracing time: 6,325.598ms +- 5,885.890ms\n    with tracing time:    6,347.215ms +- 5,468.551ms\n\nearthwasm_small.wasm:\n    size:                 20,981,041 bytes\n    trace count:          73,285 traces\n    without tracing time: 6,374.573ms +- 14,984.142ms\n    with tracing time:    6,332.986ms +-  5,626.252ms",
      "parentUuid": "9ab7222f_1ea7e399",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6dd40aa9_0ac095b3",
        "filename": "src/wasm/function-body-decoder-impl.h",
        "patchSetId": 5
      },
      "lineNbr": 2390,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-04-01T16:00:24Z",
      "side": 1,
      "message": "Thanks for those numbers. They are not measuring what I am most worried about though: Regressions in modules that do *not* contain trace marks. Can you compare validation time (using WebAssembly.validate) and Liftoff compilation time (\"new WebAssembly.Module\" with --liftoff-only) on earth, using a d8 before your change and d8 after this CL?",
      "parentUuid": "dad33507_29804378",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5fc4e4f7_9141d80a",
        "filename": "src/wasm/function-body-decoder-impl.h",
        "patchSetId": 5
      },
      "lineNbr": 2390,
      "author": {
        "id": 1528943
      },
      "writtenOn": "2022-04-21T22:07:50Z",
      "side": 1,
      "message": "I finally got good enough data for this. There is a lot of variability in measurement.  But my conclusion is that for both the validation and compilation, the typical percent difference is ~1%. \n\nWhat I have 2 test harnesses:\nfor validate\n    start \u003d performance.now();\n    valid \u003d WebAssembly.validate(b);\n    stop \u003d performance.now();\n    t_ms \u003d stop - start;\n    \nfor compile: run with liftoff\n    start \u003d performance.now();\n    m \u003d new WebAssembly.Module(b);\n    stop \u003d performance.now();\n    t_ms \u003d stop - start;\n    \n    \nWhat I call Original is my changes with code in function-body-decoder-impl.h and module-decoder.cc commented out\nWhat I call Trace is the full working change\n\nHere are the percent differences in time\n\n    For Validation N\u003d300\n    Run  1:  5.535 \n    Run  2:  2.399\n    Run  3: 15.663\n    Run  4:  3.628\n    Run  5:  2.062\n    Run  6:  0.876\n    Run  7:  3.322\n    Run  8:  6.917\n    Run  9:  6.802\n    Run 10: 11.382\n\n    For Compile N\u003d300\n    Run  1:  3.035\n    Run  2:  0.119\n    Run  3:  1.596\n    Run  4:  1.071\n    Run  5:  1.761\n    Run  6:  1.321\n    Run  7: 10.622\n    Run  8:  0.289\n    Run  9:  7.351\n    Run 10:  6.614\n    \n    For Validation N\u003d500\n    Run  1:  9.920\n    Run  2:  7.517\n    Run  3: 12.761\n    Run  4:  1.941\n    Run  5:  0.904\n    Run  6:  1.946\n    Run  7:  1.584\n    Run  8:  4.236\n    Run  9: 34.292\n    Run 10: 39.956\n    \n    For Compile N\u003d500\n    Run  1:  1.252\n    Run  2:  1.229\n    Run  3:  7.079\n    Run  4:  3.180\n    Run  5:  1.100\n    Run  6:  1.843\n    Run  7:  0.863\n    Run  8:  2.691\n    Run  9: 24.652\n    Run 10:  1.908",
      "parentUuid": "6dd40aa9_0ac095b3",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ab3864f_eee9d1f6",
        "filename": "src/wasm/function-body-decoder-impl.h",
        "patchSetId": 5
      },
      "lineNbr": 2390,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-04-25T17:09:40Z",
      "side": 1,
      "message": "Let\u0027s focus on validation time, which should see most regression, since not much work is happening per bytecode. Locally I measure between 2 and 3 percent of slowdown, see this sheet: https://docs.google.com/spreadsheets/d/1YbpoJjqPsknwWzZ-1skuywWYVmrS2X_ObHSF5xCUmno/edit?usp\u003dsharing\n\nThat seems a little bit too much for a feature which is not expected to be enabled for any significant number of users. Do you see any way to avoid that regression?",
      "parentUuid": "5fc4e4f7_9141d80a",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8e5b84de_5021f6ef",
        "filename": "src/wasm/function-body-decoder-impl.h",
        "patchSetId": 5
      },
      "lineNbr": 2390,
      "author": {
        "id": 1528943
      },
      "writtenOn": "2022-06-14T15:30:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0ab3864f_eee9d1f6",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad955810_5762b57c",
        "filename": "src/wasm/module-decoder.cc",
        "patchSetId": 5
      },
      "lineNbr": 450,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-03-16T12:45:37Z",
      "side": 1,
      "message": "This is still talking about the compilation hints section.",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3fb6187_111b04e4",
        "filename": "src/wasm/module-decoder.cc",
        "patchSetId": 5
      },
      "lineNbr": 450,
      "author": {
        "id": 1528943
      },
      "writtenOn": "2022-03-24T20:32:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ad955810_5762b57c",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "051b6c51_1729d688",
        "filename": "src/wasm/module-decoder.cc",
        "patchSetId": 5
      },
      "lineNbr": 1140,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-03-16T12:45:37Z",
      "side": 1,
      "message": "This might access after the end of the vector.\nPlease try to rewrite this whole loop to make it easier to read. Maybe something like:\n\n  for (; inst_traces_it !\u003d this-\u003einst_traces_.end() \u0026\u0026\n         inst_traces_it-\u003efirst \u003d\u003d i;\n         ++inst_traces_it) {\n    ...\n  }",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "84a596a2_b9939891",
        "filename": "src/wasm/module-decoder.cc",
        "patchSetId": 5
      },
      "lineNbr": 1140,
      "author": {
        "id": 1528943
      },
      "writtenOn": "2022-03-24T20:32:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "051b6c51_1729d688",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f415e84_d7c7147c",
        "filename": "src/wasm/module-decoder.cc",
        "patchSetId": 5
      },
      "lineNbr": 1330,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-03-16T12:45:37Z",
      "side": 1,
      "message": "This looks unnecessary. If you like, you can make it part of the loop condition to exit earlier.",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3548a1b4_b2860a89",
        "filename": "src/wasm/module-decoder.cc",
        "patchSetId": 5
      },
      "lineNbr": 1330,
      "author": {
        "id": 1528943
      },
      "writtenOn": "2022-03-24T20:32:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1f415e84_d7c7147c",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55501dbb_fe3c833f",
        "filename": "src/wasm/module-decoder.cc",
        "patchSetId": 5
      },
      "lineNbr": 1339,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-03-16T12:45:37Z",
      "side": 1,
      "message": "This could just be a part of the loop condition above.",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c705e706_1be237ac",
        "filename": "src/wasm/module-decoder.cc",
        "patchSetId": 5
      },
      "lineNbr": 1339,
      "author": {
        "id": 1528943
      },
      "writtenOn": "2022-03-24T20:32:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "55501dbb_fe3c833f",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fb85c3f_fec25b2f",
        "filename": "src/wasm/module-decoder.cc",
        "patchSetId": 5
      },
      "lineNbr": 1681,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-03-16T12:45:37Z",
      "side": 1,
      "message": "This needs more documentation.",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "655fc29f_edd1e40c",
        "filename": "src/wasm/module-decoder.cc",
        "patchSetId": 5
      },
      "lineNbr": 1681,
      "author": {
        "id": 1528943
      },
      "writtenOn": "2022-03-24T20:32:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8fb85c3f_fec25b2f",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "efa8115f_477f66ad",
        "filename": "tools/turbolizer/package-lock.json",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-03-16T12:45:37Z",
      "side": 1,
      "message": "This file looks unrelated; please delete.",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87c0b24e_487c6968",
        "filename": "tools/turbolizer/package-lock.json",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1528943
      },
      "writtenOn": "2022-03-17T15:23:55Z",
      "side": 1,
      "message": "Should this file exist or not? In the first round of comments it was missing, now it is extra?",
      "parentUuid": "efa8115f_477f66ad",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6abc0ff5_6e6176ef",
        "filename": "tools/turbolizer/package-lock.json",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-03-17T15:48:49Z",
      "side": 1,
      "message": "Oh, I probably looked at a diff between a previous patchset and the current patchset, so it showed the file as added. Comparing base and the latest patchset shows that the file is unaffected, so everything is fine.",
      "parentUuid": "87c0b24e_487c6968",
      "revId": "db695c0355e497b181ad0482a523eeaaf8712c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}