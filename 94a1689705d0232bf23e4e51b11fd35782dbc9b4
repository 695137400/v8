{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f300730d_e4582533",
        "filename": "src/runtime/runtime-compiler.cc",
        "patchSetId": 4
      },
      "lineNbr": 222,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2022-05-20T09:33:46Z",
      "side": 1,
      "message": "we don\u0027t actually check this though, right? We check for whether there exists an osr loop containing the current deopt point, the \"outermost\" part is irrelevant (just an early exit)",
      "range": {
        "startLine": 221,
        "startChar": 3,
        "endLine": 222,
        "endChar": 14
      },
      "revId": "94a1689705d0232bf23e4e51b11fd35782dbc9b4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "efe140d7_b0e5a71f",
        "filename": "src/runtime/runtime-compiler.cc",
        "patchSetId": 4
      },
      "lineNbr": 222,
      "author": {
        "id": 1313365
      },
      "writtenOn": "2022-05-20T10:09:24Z",
      "side": 1,
      "message": "No, the \"outermost\" is relevant. OSR compilation do loop peeling, the whole nesting loop which includes OSR entry are compiled. If deopt exit is outside of loop of OSR entry but inside of the nesting loop, the OSR code should also be removed.",
      "parentUuid": "f300730d_e4582533",
      "range": {
        "startLine": 221,
        "startChar": 3,
        "endLine": 222,
        "endChar": 14
      },
      "revId": "94a1689705d0232bf23e4e51b11fd35782dbc9b4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "adddbd3d_c3ddc564",
        "filename": "src/runtime/runtime-compiler.cc",
        "patchSetId": 4
      },
      "lineNbr": 324,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2022-05-20T09:33:46Z",
      "side": 1,
      "message": "we only mark the first found osr_code here. Should we not really mark _all_ osr codes containing the deopt exit for deopt? Maybe there should really be a DeoptAllOsrLoopsContainingDeoptExit function?",
      "range": {
        "startLine": 324,
        "startChar": 6,
        "endLine": 324,
        "endChar": 45
      },
      "revId": "94a1689705d0232bf23e4e51b11fd35782dbc9b4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcd70b7e_d230da03",
        "filename": "src/runtime/runtime-compiler.cc",
        "patchSetId": 4
      },
      "lineNbr": 324,
      "author": {
        "id": 1313365
      },
      "writtenOn": "2022-05-20T10:09:24Z",
      "side": 1,
      "message": "Great idea!\nYes, it\u0027s possible multiple OSR codes contain the deopt exit when the later OSR miss previous OSR code cache. BTW, it\u0027s the second problem of another OSR topic \"Regression caused by current OSR implementation\".\nI\u0027ll modify this part to DeoptAllOsrLoopsContainingDeoptExit later.",
      "parentUuid": "adddbd3d_c3ddc564",
      "range": {
        "startLine": 324,
        "startChar": 6,
        "endLine": 324,
        "endChar": 45
      },
      "revId": "94a1689705d0232bf23e4e51b11fd35782dbc9b4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}