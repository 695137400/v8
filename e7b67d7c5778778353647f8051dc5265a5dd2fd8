{
  "comments": [
    {
      "key": {
        "uuid": "1da7dce8_65dbca28",
        "filename": "include/cppgc/gc-info.h",
        "patchSetId": 12
      },
      "lineNbr": 18,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-03-23T09:41:52Z",
      "side": 1,
      "message": "nit: The max index supported by the table is 14 bits. You can use uint16_t instead.",
      "range": {
        "startLine": 18,
        "startChar": 20,
        "endLine": 18,
        "endChar": 28
      },
      "revId": "e7b67d7c5778778353647f8051dc5265a5dd2fd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5fda6b48_fdd51a02",
        "filename": "include/cppgc/gc-info.h",
        "patchSetId": 12
      },
      "lineNbr": 18,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-23T10:06:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1da7dce8_65dbca28",
      "range": {
        "startLine": 18,
        "startChar": 20,
        "endLine": 18,
        "endChar": 28
      },
      "revId": "e7b67d7c5778778353647f8051dc5265a5dd2fd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b63d364_6fb330df",
        "filename": "include/cppgc/platform.h",
        "patchSetId": 12
      },
      "lineNbr": 14,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-03-23T09:41:52Z",
      "side": 1,
      "message": "Is this meant to replace HeapAllocator?",
      "range": {
        "startLine": 14,
        "startChar": 26,
        "endLine": 14,
        "endChar": 39
      },
      "revId": "e7b67d7c5778778353647f8051dc5265a5dd2fd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43c80b77_a9ced238",
        "filename": "include/cppgc/platform.h",
        "patchSetId": 12
      },
      "lineNbr": 14,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-23T10:06:03Z",
      "side": 1,
      "message": "No, this is what embedders need to provide to the library so that we can allocate. For Blink this will already be available through V8.\n\nThe TODO is about untangling the deps after we can have larger refactorings in V8 again.",
      "parentUuid": "9b63d364_6fb330df",
      "range": {
        "startLine": 14,
        "startChar": 26,
        "endLine": 14,
        "endChar": 39
      },
      "revId": "e7b67d7c5778778353647f8051dc5265a5dd2fd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8e0071b_56cdd00d",
        "filename": "include/cppgc/platform.h",
        "patchSetId": 12
      },
      "lineNbr": 14,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-03-23T12:33:27Z",
      "side": 1,
      "message": "I wasn\u0027t referring to the TODO.\n\nTo be more specific, which of the following 3 options will be the end state:\n1) HeapAllocator depends on PageAllocator\n2) PageAllocator \u003d HeapAllocator\n3) HeapAllocator is deprecated and removed\n?",
      "parentUuid": "43c80b77_a9ced238",
      "range": {
        "startLine": 14,
        "startChar": 26,
        "endLine": 14,
        "endChar": 39
      },
      "revId": "e7b67d7c5778778353647f8051dc5265a5dd2fd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "369f7420_9cacfafb",
        "filename": "include/cppgc/platform.h",
        "patchSetId": 12
      },
      "lineNbr": 14,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-23T13:28:03Z",
      "side": 1,
      "message": "If you are talking about this HeapAllocator: https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/platform/heap/heap_allocator.h;l\u003d52?q\u003dHeapAllocator\u0026ss\u003dchromium\u0026originalUrl\u003dhttps:%2F%2Fcs.chromium.org%2Fsearch%2F\n\nIt\u0027s a bag of internals that interface with WTF. We will need to provide low-level APIs that HeapAllocator can use to interface with WTF.\n\nPageAllocator here will not provide that interface. I haven\u0027t looked into the details of what exact APIs we need there. (A few things at the top of my head: Write barrier, moving callbacks, allocation to specific area)",
      "parentUuid": "f8e0071b_56cdd00d",
      "range": {
        "startLine": 14,
        "startChar": 26,
        "endLine": 14,
        "endChar": 39
      },
      "revId": "e7b67d7c5778778353647f8051dc5265a5dd2fd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25bdc1a5_62f8510d",
        "filename": "src/base/macros.h",
        "patchSetId": 12
      },
      "lineNbr": 148,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-03-23T09:41:52Z",
      "side": 1,
      "message": "Why use a dynamic abort instead of deleting the operator and getting a compile time error?",
      "range": {
        "startLine": 148,
        "startChar": 45,
        "endLine": 148,
        "endChar": 50
      },
      "revId": "e7b67d7c5778778353647f8051dc5265a5dd2fd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ecdcecb6_5b318d0e",
        "filename": "src/base/macros.h",
        "patchSetId": 12
      },
      "lineNbr": 148,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-23T10:06:03Z",
      "side": 1,
      "message": "operator delete[] [1] cannot be deleted. We could delete the others and should do so after moving ahead with V8. I kept changes here to a minimal.\n\n[1] https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/platform/heap/heap.h;l\u003d494?q\u003dMakeGarbageCollected\u0026ss\u003dchromium\u0026originalUrl\u003dhttps:%2F%2Fcs.chromium.org%2Fsearch%2F",
      "parentUuid": "25bdc1a5_62f8510d",
      "range": {
        "startLine": 148,
        "startChar": 45,
        "endLine": 148,
        "endChar": 50
      },
      "revId": "e7b67d7c5778778353647f8051dc5265a5dd2fd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2fb95e0e_f6586c20",
        "filename": "src/base/macros.h",
        "patchSetId": 12
      },
      "lineNbr": 148,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-03-23T12:33:27Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ecdcecb6_5b318d0e",
      "range": {
        "startLine": 148,
        "startChar": 45,
        "endLine": 148,
        "endChar": 50
      },
      "revId": "e7b67d7c5778778353647f8051dc5265a5dd2fd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d57b0cef_7ebc6924",
        "filename": "src/heap/cppgc/gc-info-table.cc",
        "patchSetId": 12
      },
      "lineNbr": 35,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-03-23T09:25:49Z",
      "side": 1,
      "message": "Isn\u0027t this a data race? I was expecting  LazyInstance or CallOnce",
      "range": {
        "startLine": 35,
        "startChar": 4,
        "endLine": 35,
        "endChar": 32
      },
      "revId": "e7b67d7c5778778353647f8051dc5265a5dd2fd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "094158ad_3c66762c",
        "filename": "src/heap/cppgc/gc-info-table.cc",
        "patchSetId": 12
      },
      "lineNbr": 35,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-23T11:53:34Z",
      "side": 1,
      "message": "As discussed offline: This is not just a LazyInstance as we need the allocator parameter as well. Let\u0027s leave the race for now and hook it up with whatever global initialization we will have. (Example: Setting the platform before any heap gets created.)",
      "parentUuid": "d57b0cef_7ebc6924",
      "range": {
        "startLine": 35,
        "startChar": 4,
        "endLine": 35,
        "endChar": 32
      },
      "revId": "e7b67d7c5778778353647f8051dc5265a5dd2fd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45ee4bd3_279758a2",
        "filename": "src/heap/cppgc/gc-info-table.cc",
        "patchSetId": 12
      },
      "lineNbr": 66,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-03-23T09:41:52Z",
      "side": 1,
      "message": "This seems odd. 2 lines above you multiply kInitialWantedLimit by kEntrySize and here you divide by it. This would be like comparing apples and oranges as one is in bytes and one in #entries.\nGiven the std::max below, I\u0027m assuming this was supposed to be #entries, so the multiplication above should probably go.",
      "range": {
        "startLine": 66,
        "startChar": 68,
        "endLine": 66,
        "endChar": 78
      },
      "revId": "e7b67d7c5778778353647f8051dc5265a5dd2fd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a11e1fb2_826ebe1d",
        "filename": "src/heap/cppgc/gc-info-table.cc",
        "patchSetId": 12
      },
      "lineNbr": 66,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-23T10:06:03Z",
      "side": 1,
      "message": "The method returns #entries but our allocator constraints work on memory. We cannot round to memory based on entries.",
      "parentUuid": "45ee4bd3_279758a2",
      "range": {
        "startLine": 66,
        "startChar": 68,
        "endLine": 66,
        "endChar": 78
      },
      "revId": "e7b67d7c5778778353647f8051dc5265a5dd2fd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6eb11bbd_9c1d3abd",
        "filename": "src/heap/cppgc/gc-info-table.cc",
        "patchSetId": 12
      },
      "lineNbr": 66,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-03-23T12:33:27Z",
      "side": 1,
      "message": "I misread the parenthesis.",
      "parentUuid": "a11e1fb2_826ebe1d",
      "range": {
        "startLine": 66,
        "startChar": 68,
        "endLine": 66,
        "endChar": 78
      },
      "revId": "e7b67d7c5778778353647f8051dc5265a5dd2fd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "04d4444f_f6ee68f7",
        "filename": "src/heap/cppgc/gc-info-table.cc",
        "patchSetId": 12
      },
      "lineNbr": 68,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-03-23T09:41:52Z",
      "side": 1,
      "message": "This should always return kMaxIndex since the limit should always be below that. If initial_limit is higher than kMaxIndex we have a problem. Did you mean std::min?\n\nAlso, I think this should be a DCHECK to make sure we are always below kMaxIndex and then return initial_limit.",
      "range": {
        "startLine": 68,
        "startChar": 9,
        "endLine": 68,
        "endChar": 17
      },
      "revId": "e7b67d7c5778778353647f8051dc5265a5dd2fd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab44b7c4_30db7696",
        "filename": "src/heap/cppgc/gc-info-table.cc",
        "patchSetId": 12
      },
      "lineNbr": 68,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-23T10:06:03Z",
      "side": 1,
      "message": "It should\u0027ve been std::min based on size_t types.\n\nWe are not always below kMaxIndex for the initial limit: On Windows 32bit we commit in 64KB blocks which means that we will use the max index right away.",
      "parentUuid": "04d4444f_f6ee68f7",
      "range": {
        "startLine": 68,
        "startChar": 9,
        "endLine": 68,
        "endChar": 17
      },
      "revId": "e7b67d7c5778778353647f8051dc5265a5dd2fd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce75d354_e61cb7c7",
        "filename": "src/heap/cppgc/gc-info-table.cc",
        "patchSetId": 12
      },
      "lineNbr": 68,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-03-23T12:33:27Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ab44b7c4_30db7696",
      "range": {
        "startLine": 68,
        "startChar": 9,
        "endLine": 68,
        "endChar": 17
      },
      "revId": "e7b67d7c5778778353647f8051dc5265a5dd2fd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e7eb5a7_f6dc8dca",
        "filename": "src/heap/cppgc/gc-info-table.cc",
        "patchSetId": 12
      },
      "lineNbr": 89,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-03-23T09:25:49Z",
      "side": 1,
      "message": "Instead of undoing the growing heuristic in line 72, how about tracking the read_only_table_end_ separately?",
      "range": {
        "startLine": 89,
        "startChar": 8,
        "endLine": 89,
        "endChar": 74
      },
      "revId": "e7b67d7c5778778353647f8051dc5265a5dd2fd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "113444ce_0c06adff",
        "filename": "src/heap/cppgc/gc-info-table.cc",
        "patchSetId": 12
      },
      "lineNbr": 89,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-23T10:06:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8e7eb5a7_f6dc8dca",
      "range": {
        "startLine": 89,
        "startChar": 8,
        "endLine": 89,
        "endChar": 74
      },
      "revId": "e7b67d7c5778778353647f8051dc5265a5dd2fd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ce1ed0f_c2ff4c78",
        "filename": "src/heap/cppgc/gc-info-table.h",
        "patchSetId": 12
      },
      "lineNbr": 52,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-03-23T09:41:52Z",
      "side": 1,
      "message": "Can we make the *ForTesting methods private with GCInfoTableTest as a friend class?",
      "range": {
        "startLine": 52,
        "startChar": 29,
        "endLine": 52,
        "endChar": 39
      },
      "revId": "e7b67d7c5778778353647f8051dc5265a5dd2fd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb4bba38_d40c2596",
        "filename": "src/heap/cppgc/gc-info-table.h",
        "patchSetId": 12
      },
      "lineNbr": 52,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-23T10:06:03Z",
      "side": 1,
      "message": "We should either use (1) *ForTesting or use (2) gtest\u0027s FRIEND_TEST macro here.\n\nI think this is clearer with *ForTesting() calls which is Chrome\u0027s best practice here. (They are stripped from release builds and we have presubmit checks). If we would need more internals the FRIEND_TEST macro is likely better.",
      "parentUuid": "5ce1ed0f_c2ff4c78",
      "range": {
        "startLine": 52,
        "startChar": 29,
        "endLine": 52,
        "endChar": 39
      },
      "revId": "e7b67d7c5778778353647f8051dc5265a5dd2fd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f90dc9c8_0262f77e",
        "filename": "src/heap/cppgc/gc-info-table.h",
        "patchSetId": 12
      },
      "lineNbr": 52,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-03-23T12:33:27Z",
      "side": 1,
      "message": "Ack\n(Was not aware that *ForTesting are stripped in release builds)",
      "parentUuid": "bb4bba38_d40c2596",
      "range": {
        "startLine": 52,
        "startChar": 29,
        "endLine": 52,
        "endChar": 39
      },
      "revId": "e7b67d7c5778778353647f8051dc5265a5dd2fd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cc7a4c79_74d43881",
        "filename": "src/heap/cppgc/gc-info-table.h",
        "patchSetId": 12
      },
      "lineNbr": 52,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-23T13:28:03Z",
      "side": 1,
      "message": "for reference: https://chromium.googlesource.com/chromium/src/+/refs/tags/74.0.3698.0/styleguide/c++/c++.md#test_only-code",
      "parentUuid": "f90dc9c8_0262f77e",
      "range": {
        "startLine": 52,
        "startChar": 29,
        "endLine": 52,
        "endChar": 39
      },
      "revId": "e7b67d7c5778778353647f8051dc5265a5dd2fd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "73e59402_74b58a24",
        "filename": "test/unittests/heap/cppgc/gc-info_unittest.cc",
        "patchSetId": 12
      },
      "lineNbr": 15,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-03-23T09:25:49Z",
      "side": 1,
      "message": "Could you please add a multithreaded test?",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 15,
        "endChar": 37
      },
      "revId": "e7b67d7c5778778353647f8051dc5265a5dd2fd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "255b4021_a52ac5d6",
        "filename": "test/unittests/heap/cppgc/gc-info_unittest.cc",
        "patchSetId": 12
      },
      "lineNbr": 15,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-23T11:25:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "73e59402_74b58a24",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 15,
        "endChar": 37
      },
      "revId": "e7b67d7c5778778353647f8051dc5265a5dd2fd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4c97bb7c_ff2cdce3",
        "filename": "test/unittests/heap/cppgc/gc-info_unittest.cc",
        "patchSetId": 12
      },
      "lineNbr": 61,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-03-23T09:41:52Z",
      "side": 1,
      "message": "I suspect the current implementation always returns here (because of the std::max in the implementation)",
      "range": {
        "startLine": 61,
        "startChar": 4,
        "endLine": 61,
        "endChar": 10
      },
      "revId": "e7b67d7c5778778353647f8051dc5265a5dd2fd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87a82e3a_2aeada34",
        "filename": "test/unittests/heap/cppgc/gc-info_unittest.cc",
        "patchSetId": 12
      },
      "lineNbr": 61,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-23T10:06:03Z",
      "side": 1,
      "message": "Yes, it should return only on Window 32 bit.",
      "parentUuid": "4c97bb7c_ff2cdce3",
      "range": {
        "startLine": 61,
        "startChar": 4,
        "endLine": 61,
        "endChar": 10
      },
      "revId": "e7b67d7c5778778353647f8051dc5265a5dd2fd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}