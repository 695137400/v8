{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "50949719_39747557",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2021-05-27T10:40:27Z",
      "side": 1,
      "message": "PTAL\nahaas@ PTAL again liftoff changes (this is a new preparatory CL for https://crrev.com/c/2910313)",
      "revId": "94b4b14904320f6d2eea54e8f651139b5c21d1d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8f7ed30b_41b3e4d0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2021-05-27T11:20:00Z",
      "side": 1,
      "message": "liftoff LGTM",
      "revId": "94b4b14904320f6d2eea54e8f651139b5c21d1d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51e95c7c_3376598e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2021-05-27T12:58:26Z",
      "side": 1,
      "message": "I\u0027m understanding this CL more than the other one. Let me see if I got this right: This CL decouples `CallRecordWriteStub` into `CallRecordWriteStubSaveRegisters` and `CallRecordWriteStub`. Nothing (yet) calls directly `CallRecordWriteStub` and instead they call `CallRecordWriteStubSaveRegisters` which preserves the functionality as it was before this CL. `CallRecordWriteStub` assumes that the registers are saved and restored outside of its scope.",
      "revId": "94b4b14904320f6d2eea54e8f651139b5c21d1d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "192fca7a_4699b139",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2021-05-27T13:08:03Z",
      "side": 1,
      "message": "Exactly. While not strictly necessary yet, this decouples the two versions for future work.",
      "parentUuid": "51e95c7c_3376598e",
      "revId": "94b4b14904320f6d2eea54e8f651139b5c21d1d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40af62f8_c6f8c828",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2021-05-27T13:12:40Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "192fca7a_4699b139",
      "revId": "94b4b14904320f6d2eea54e8f651139b5c21d1d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73f5a001_67f7c702",
        "filename": "src/codegen/interface-descriptors.h",
        "patchSetId": 7
      },
      "lineNbr": 1020,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2021-05-27T12:58:26Z",
      "side": 1,
      "message": "This is related to the linkage.cc comment. If this was `false` what would change?",
      "range": {
        "startLine": 1020,
        "startChar": 47,
        "endLine": 1020,
        "endChar": 51
      },
      "revId": "94b4b14904320f6d2eea54e8f651139b5c21d1d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae89ae25_e45f6474",
        "filename": "src/codegen/interface-descriptors.h",
        "patchSetId": 7
      },
      "lineNbr": 1020,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2021-05-27T13:08:03Z",
      "side": 1,
      "message": "We would not do the register pushes inside the builtin (aka the old behavior).",
      "parentUuid": "73f5a001_67f7c702",
      "range": {
        "startLine": 1020,
        "startChar": 47,
        "endLine": 1020,
        "endChar": 51
      },
      "revId": "94b4b14904320f6d2eea54e8f651139b5c21d1d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7937c8cc_c5222eb8",
        "filename": "src/codegen/interface-descriptors.h",
        "patchSetId": 7
      },
      "lineNbr": 1020,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2021-05-27T13:12:40Z",
      "side": 1,
      "message": "Resolving this and continuing in the linkage.cc comment to have only one thread open.",
      "parentUuid": "ae89ae25_e45f6474",
      "range": {
        "startLine": 1020,
        "startChar": 47,
        "endLine": 1020,
        "endChar": 51
      },
      "revId": "94b4b14904320f6d2eea54e8f651139b5c21d1d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fe0626e_a0e512d4",
        "filename": "src/codegen/x64/macro-assembler-x64.cc",
        "patchSetId": 7
      },
      "lineNbr": 457,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2021-05-27T12:58:26Z",
      "side": 1,
      "message": "nit: maybe add a comment at the beginning of this method stating that we are purposefully not saving and restoring registers. If the caller wants to preserve them it save and restore them itself, or can call `CallRecordWriteStubSaveRegisters`.",
      "range": {
        "startLine": 457,
        "startChar": 0,
        "endLine": 457,
        "endChar": 1
      },
      "revId": "94b4b14904320f6d2eea54e8f651139b5c21d1d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "891ea43a_8a4fd707",
        "filename": "src/codegen/x64/macro-assembler-x64.cc",
        "patchSetId": 7
      },
      "lineNbr": 457,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2021-05-27T13:29:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2fe0626e_a0e512d4",
      "range": {
        "startLine": 457,
        "startChar": 0,
        "endLine": 457,
        "endChar": 1
      },
      "revId": "94b4b14904320f6d2eea54e8f651139b5c21d1d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62c2117f_e8c93496",
        "filename": "src/compiler/backend/x64/code-generator-x64.cc",
        "patchSetId": 7
      },
      "lineNbr": 4673,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2021-05-27T12:58:26Z",
      "side": 1,
      "message": "Nit: We seem to be checking r10 below in each case before using it, so the DCHECK in line 4674 seems to be redundant. If the DCHECK remains, please move the rcx comment to line 4712 and keep this comment only for r10.",
      "range": {
        "startLine": 4673,
        "startChar": 19,
        "endLine": 4673,
        "endChar": 26
      },
      "revId": "94b4b14904320f6d2eea54e8f651139b5c21d1d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a094a3ff_dd4a8de0",
        "filename": "src/compiler/backend/x64/code-generator-x64.cc",
        "patchSetId": 7
      },
      "lineNbr": 4673,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2021-05-27T13:29:50Z",
      "side": 1,
      "message": "I removed this here.",
      "parentUuid": "62c2117f_e8c93496",
      "range": {
        "startLine": 4673,
        "startChar": 19,
        "endLine": 4673,
        "endChar": 26
      },
      "revId": "94b4b14904320f6d2eea54e8f651139b5c21d1d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e134d8e_85bddee4",
        "filename": "src/compiler/linkage.cc",
        "patchSetId": 7
      },
      "lineNbr": 492,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2021-05-27T12:58:26Z",
      "side": 1,
      "message": "The only thing I am missing is what the changes to linkage.cc affect. If the changes to this file weren\u0027t in this CL, what would change?",
      "revId": "94b4b14904320f6d2eea54e8f651139b5c21d1d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f737668c_c7d9cafc",
        "filename": "src/compiler/linkage.cc",
        "patchSetId": 7
      },
      "lineNbr": 492,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2021-05-27T13:08:03Z",
      "side": 1,
      "message": "That\u0027s the core piece of the CL, it actively tells TF to do the register restoring inside the builtin. (is that what you\u0027ve asked?)",
      "parentUuid": "5e134d8e_85bddee4",
      "revId": "94b4b14904320f6d2eea54e8f651139b5c21d1d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a5e1ffd_d0e48a8e",
        "filename": "src/compiler/linkage.cc",
        "patchSetId": 7
      },
      "lineNbr": 492,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2021-05-27T13:12:40Z",
      "side": 1,
      "message": "Yes. Since we are still saving and restoring registers in `CallRecordWriteStubSaveRegisters` I was wondering why it was needed.",
      "parentUuid": "f737668c_c7d9cafc",
      "revId": "94b4b14904320f6d2eea54e8f651139b5c21d1d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4ec4c19_48abe69e",
        "filename": "src/compiler/linkage.cc",
        "patchSetId": 7
      },
      "lineNbr": 492,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2021-05-27T13:17:34Z",
      "side": 1,
      "message": "Ideally I would like to get rid of CallRecordWriteStubSaveRegisters alltogether, but that would required more changes again.\n\nThis is the accidental overlap of having to save registers for the builtins and for the call-sites.",
      "parentUuid": "3a5e1ffd_d0e48a8e",
      "revId": "94b4b14904320f6d2eea54e8f651139b5c21d1d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97d8f7c2_6c184ba3",
        "filename": "src/compiler/linkage.cc",
        "patchSetId": 7
      },
      "lineNbr": 492,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2021-05-27T13:46:13Z",
      "side": 1,
      "message": "So this CL might regress since we are saving at both the callsite and the builtins, but the idea is that the callsite saving of registers would go away (as it would be a transitional regression) and eventually we would see improvments.",
      "parentUuid": "e4ec4c19_48abe69e",
      "revId": "94b4b14904320f6d2eea54e8f651139b5c21d1d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}