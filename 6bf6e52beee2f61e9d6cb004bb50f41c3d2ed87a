{
  "comments": [
    {
      "key": {
        "uuid": "21fb8dc4_042773c4",
        "filename": "BUILD.gn",
        "patchSetId": 5
      },
      "lineNbr": 991,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-01-07T13:26:49Z",
      "side": 1,
      "message": "q: why promise-promise-...?",
      "revId": "6bf6e52beee2f61e9d6cb004bb50f41c3d2ed87a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51fdbd1a_3e351913",
        "filename": "BUILD.gn",
        "patchSetId": 5
      },
      "lineNbr": 991,
      "author": {
        "id": 1358537
      },
      "writtenOn": "2020-01-07T19:30:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "21fb8dc4_042773c4",
      "revId": "6bf6e52beee2f61e9d6cb004bb50f41c3d2ed87a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb1287ac_6c23e4c1",
        "filename": "src/builtins/promise-promise-all-element-closure.tq",
        "patchSetId": 5
      },
      "lineNbr": 17,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2020-01-07T15:57:37Z",
      "side": 1,
      "message": "How about giving this a name that\u0027s a bit more intuitive, something like \nWrapResultAsFulfilledFunctor?",
      "range": {
        "startLine": 17,
        "startChar": 9,
        "endLine": 17,
        "endChar": 54
      },
      "revId": "6bf6e52beee2f61e9d6cb004bb50f41c3d2ed87a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "657fe80b_ac687a8e",
        "filename": "src/builtins/promise-promise-all-element-closure.tq",
        "patchSetId": 5
      },
      "lineNbr": 17,
      "author": {
        "id": 1358537
      },
      "writtenOn": "2020-01-07T19:30:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eb1287ac_6c23e4c1",
      "range": {
        "startLine": 17,
        "startChar": 9,
        "endLine": 17,
        "endChar": 54
      },
      "revId": "6bf6e52beee2f61e9d6cb004bb50f41c3d2ed87a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "021143ca_de2f5a75",
        "filename": "src/builtins/promise-promise-all-element-closure.tq",
        "patchSetId": 5
      },
      "lineNbr": 68,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-01-07T13:26:49Z",
      "side": 1,
      "message": "Nico recently added nicer syntax for defining enums in torque, see e.g. contexts.tq.",
      "revId": "6bf6e52beee2f61e9d6cb004bb50f41c3d2ed87a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "477eeb57_111b80ec",
        "filename": "src/builtins/promise-promise-all-element-closure.tq",
        "patchSetId": 5
      },
      "lineNbr": 68,
      "author": {
        "id": 1358537
      },
      "writtenOn": "2020-01-07T19:30:17Z",
      "side": 1,
      "message": "These ContextSlots are really strange as they only apply to PromiseContexts. Tobias and I have talked about it, and it seems better to either create a subclass of Context, or find some other way to pass the required information around. However, I think it is probably dangerous to add these to the ContextSlot enum.\n\nAre you okay with just a TODO and explainer for now? Other thoughts?",
      "parentUuid": "021143ca_de2f5a75",
      "revId": "6bf6e52beee2f61e9d6cb004bb50f41c3d2ed87a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71a93f9f_24b4945b",
        "filename": "src/builtins/promise-promise-all-element-closure.tq",
        "patchSetId": 5
      },
      "lineNbr": 68,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2020-01-07T20:17:49Z",
      "side": 1,
      "message": "Yes, I also think these shouldn\u0027t be added to the ContextSlot enum.",
      "parentUuid": "477eeb57_111b80ec",
      "revId": "6bf6e52beee2f61e9d6cb004bb50f41c3d2ed87a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9bcfb9dc_b3d3b9fd",
        "filename": "src/builtins/promise-promise-all-element-closure.tq",
        "patchSetId": 5
      },
      "lineNbr": 68,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-01-08T06:46:45Z",
      "side": 1,
      "message": "I didn\u0027t mean you should add them to ContextSlotEnum (I only used contexts.tq as an example of the new enum syntax). But you could create a new PromiseAllResolveElementContextSlots enum here, right?",
      "parentUuid": "71a93f9f_24b4945b",
      "revId": "6bf6e52beee2f61e9d6cb004bb50f41c3d2ed87a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32d06bdc_136c4e0b",
        "filename": "src/builtins/promise-promise-all-element-closure.tq",
        "patchSetId": 5
      },
      "lineNbr": 68,
      "author": {
        "id": 1358537
      },
      "writtenOn": "2020-01-08T18:58:58Z",
      "side": 1,
      "message": "Okay, enum added. Unfortunately I had to add some operator overloads. The other issue is that I had to pull the enum\u0027s header into code-stub-assembler.h. Suggestions?",
      "parentUuid": "9bcfb9dc_b3d3b9fd",
      "revId": "6bf6e52beee2f61e9d6cb004bb50f41c3d2ed87a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ffd98fb_de2d1f23",
        "filename": "src/builtins/promise-promise-all-element-closure.tq",
        "patchSetId": 5
      },
      "lineNbr": 68,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2020-01-09T17:22:11Z",
      "side": 1,
      "message": "You could add it to the list in src/torque/implementation-visitor.cc:81, which will add it to all Torque-generated CSA headers. It\u0027s not much better than code-stub-assembler.h regarding include load, but it would document it better as a future-work cleanup opportunity.",
      "parentUuid": "32d06bdc_136c4e0b",
      "revId": "6bf6e52beee2f61e9d6cb004bb50f41c3d2ed87a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52faca43_9f66f274",
        "filename": "src/builtins/promise-promise-all-element-closure.tq",
        "patchSetId": 5
      },
      "lineNbr": 88,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2020-01-07T15:57:37Z",
      "side": 1,
      "message": "Instead of calling it functor, I think a name that indicates the meaning of this argument would be better. Something like wrapResultFunctor.",
      "range": {
        "startLine": 88,
        "startChar": 55,
        "endLine": 88,
        "endChar": 62
      },
      "revId": "6bf6e52beee2f61e9d6cb004bb50f41c3d2ed87a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10279b9a_ca4a7bad",
        "filename": "src/builtins/promise-promise-all-element-closure.tq",
        "patchSetId": 5
      },
      "lineNbr": 88,
      "author": {
        "id": 1358537
      },
      "writtenOn": "2020-01-07T19:30:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "52faca43_9f66f274",
      "range": {
        "startLine": 88,
        "startChar": 55,
        "endLine": 88,
        "endChar": 62
      },
      "revId": "6bf6e52beee2f61e9d6cb004bb50f41c3d2ed87a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e708ca6f_5503b16b",
        "filename": "src/builtins/promise-promise-all-element-closure.tq",
        "patchSetId": 5
      },
      "lineNbr": 114,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2020-01-07T15:57:37Z",
      "side": 1,
      "message": "This should be a FastJSArray, no?",
      "range": {
        "startLine": 114,
        "startChar": 35,
        "endLine": 114,
        "endChar": 42
      },
      "revId": "6bf6e52beee2f61e9d6cb004bb50f41c3d2ed87a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6dc07084_032fe236",
        "filename": "src/builtins/promise-promise-all-element-closure.tq",
        "patchSetId": 5
      },
      "lineNbr": 114,
      "author": {
        "id": 1358537
      },
      "writtenOn": "2020-01-07T19:30:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e708ca6f_5503b16b",
      "range": {
        "startLine": 114,
        "startChar": 35,
        "endLine": 114,
        "endChar": 42
      },
      "revId": "6bf6e52beee2f61e9d6cb004bb50f41c3d2ed87a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0863f63d_d9eff68d",
        "filename": "src/builtins/promise-promise-all-element-closure.tq",
        "patchSetId": 5
      },
      "lineNbr": 114,
      "author": {
        "id": 1358537
      },
      "writtenOn": "2020-01-07T19:58:29Z",
      "side": 1,
      "message": "whoops, meant to respond that UnsafeCast\u003cFastJSArray\u003e failed here. Unless the reason jumps out at you, maybe we can revisit why this is just a regular JSArray after completing the port?",
      "parentUuid": "6dc07084_032fe236",
      "range": {
        "startLine": 114,
        "startChar": 35,
        "endLine": 114,
        "endChar": 42
      },
      "revId": "6bf6e52beee2f61e9d6cb004bb50f41c3d2ed87a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "489d5ef9_5f59150b",
        "filename": "src/builtins/promise-promise-all-element-closure.tq",
        "patchSetId": 5
      },
      "lineNbr": 114,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2020-01-07T20:17:49Z",
      "side": 1,
      "message": "This is weird, we certainly do access it as if it was a FastJSArray...\nYes, let\u0027s investigate this after porting. In any case, I\u0027m not a huge fan of creating a non-exposed JSArray here and mutating it under the assumption it didn\u0027t leak yet. Turning this into an internal data structure like a FixedArray sounds like the safer approach...",
      "parentUuid": "0863f63d_d9eff68d",
      "range": {
        "startLine": 114,
        "startChar": 35,
        "endLine": 114,
        "endChar": 42
      },
      "revId": "6bf6e52beee2f61e9d6cb004bb50f41c3d2ed87a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d24428bc_310951fa",
        "filename": "src/builtins/promise-promise-all-element-closure.tq",
        "patchSetId": 5
      },
      "lineNbr": 117,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-01-07T13:26:49Z",
      "side": 1,
      "message": "Does Convert\u003cintptr\u003e work?",
      "revId": "6bf6e52beee2f61e9d6cb004bb50f41c3d2ed87a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45f88f8c_7b783c8c",
        "filename": "src/builtins/promise-promise-all-element-closure.tq",
        "patchSetId": 5
      },
      "lineNbr": 117,
      "author": {
        "id": 1358537
      },
      "writtenOn": "2020-01-07T19:30:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d24428bc_310951fa",
      "revId": "6bf6e52beee2f61e9d6cb004bb50f41c3d2ed87a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19bae639_223826ea",
        "filename": "src/builtins/promise-promise-all-element-closure.tq",
        "patchSetId": 5
      },
      "lineNbr": 129,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-01-07T13:26:49Z",
      "side": 1,
      "message": "Same q here and below, Convert\u003cNumber\u003e?",
      "revId": "6bf6e52beee2f61e9d6cb004bb50f41c3d2ed87a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0e994d4_bf22fecd",
        "filename": "src/builtins/promise-promise-all-element-closure.tq",
        "patchSetId": 5
      },
      "lineNbr": 129,
      "author": {
        "id": 1358537
      },
      "writtenOn": "2020-01-07T19:30:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "19bae639_223826ea",
      "revId": "6bf6e52beee2f61e9d6cb004bb50f41c3d2ed87a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76e7e093_28fafb9a",
        "filename": "src/builtins/promise-promise-all-element-closure.tq",
        "patchSetId": 5
      },
      "lineNbr": 139,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-01-07T13:26:49Z",
      "side": 1,
      "message": "Could you replace this by ExtractFixedArray? We usually try to avoid exposing unsafe functionality like AllocateFixedArray (which returns an uninitialized fixed array) in torque. ExtractFixedArray will give you an initialized array + copy over a range from the source array.\n\nIf so, please remove the added declaration in fixed-array.tq.",
      "revId": "6bf6e52beee2f61e9d6cb004bb50f41c3d2ed87a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee9b99b2_5fd44a37",
        "filename": "src/builtins/promise-promise-all-element-closure.tq",
        "patchSetId": 5
      },
      "lineNbr": 139,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2020-01-07T15:57:37Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "76e7e093_28fafb9a",
      "revId": "6bf6e52beee2f61e9d6cb004bb50f41c3d2ed87a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f7149cc_d58dc400",
        "filename": "src/builtins/promise-promise-all-element-closure.tq",
        "patchSetId": 5
      },
      "lineNbr": 139,
      "author": {
        "id": 1358537
      },
      "writtenOn": "2020-01-07T19:30:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ee9b99b2_5fd44a37",
      "revId": "6bf6e52beee2f61e9d6cb004bb50f41c3d2ed87a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4befc80_6684d94a",
        "filename": "src/builtins/promise-promise-all-element-closure.tq",
        "patchSetId": 5
      },
      "lineNbr": 161,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-01-07T13:26:49Z",
      "side": 1,
      "message": "Note the Callable cast wont be necessary here once https://crrev.com/c/1988542/3/src/builtins/promise-race.tq#107 has been addressed.",
      "revId": "6bf6e52beee2f61e9d6cb004bb50f41c3d2ed87a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "071ef9fc_1e69dd62",
        "filename": "src/builtins/promise-promise-all-element-closure.tq",
        "patchSetId": 5
      },
      "lineNbr": 161,
      "author": {
        "id": 1358537
      },
      "writtenOn": "2020-01-07T19:30:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b4befc80_6684d94a",
      "revId": "6bf6e52beee2f61e9d6cb004bb50f41c3d2ed87a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}