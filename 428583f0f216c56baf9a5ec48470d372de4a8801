{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ed707a6e_680232c7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2022-06-28T09:47:48Z",
      "side": 1,
      "message": "Adding Manos, thanks for volunteering to take a look while I\u0027m on leave!\n\nSo the question Gus has raised was whether we want FastApiCallbackOptions to contain the extra Wasm-specific fields this CL is adding. I got confused that the other `fallback` and `data` fields are used only for JS, but they\u0027re already supported by Wasm too. So we could think of some other way to compose/derive the \"options\" struct. E.g. if the C++ callbacks that receive it are not reused between JS and Wasm, my proposal would be to allocate separate structs for the shared and Wasm-specific parts.\n\nAnother security note, a potentially malicious callback might use the Wasm memory pointer to do arbitrary memory accesses and we should find a proper way to guard against this. For Chromium it should not be an issue, as all callbacks are specified statically by Blink, but not sure that\u0027s the case with Node.js and native modules. @Gus do you know how much the fast API is used in Node.js and if this could be an issue?",
      "revId": "428583f0f216c56baf9a5ec48470d372de4a8801",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e87e83db_d387a02a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1411293
      },
      "writtenOn": "2022-06-28T14:47:06Z",
      "side": 1,
      "message": "Nice, thanks. I have a few comments.",
      "revId": "428583f0f216c56baf9a5ec48470d372de4a8801",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c1735d25_32813e4a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1411293
      },
      "writtenOn": "2022-06-28T14:47:06Z",
      "side": 1,
      "message": "Maya, good point, exposing a raw pointer could be a security issue.",
      "parentUuid": "ed707a6e_680232c7",
      "revId": "428583f0f216c56baf9a5ec48470d372de4a8801",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16ba5586_4e0492c7",
        "filename": "include/v8-fast-api-calls.h",
        "patchSetId": 6
      },
      "lineNbr": 578,
      "author": {
        "id": 1411293
      },
      "writtenOn": "2022-06-28T14:47:06Z",
      "side": 1,
      "message": "Should probably be size_t.",
      "range": {
        "startLine": 578,
        "startChar": 2,
        "endLine": 578,
        "endChar": 10
      },
      "revId": "428583f0f216c56baf9a5ec48470d372de4a8801",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41db1223_9f7f4129",
        "filename": "src/compiler/effect-control-linearizer.cc",
        "patchSetId": 6
      },
      "lineNbr": 5191,
      "author": {
        "id": 1411293
      },
      "writtenOn": "2022-06-28T14:47:06Z",
      "side": 1,
      "message": "Is it established to store like this to C++ objects? Wouldn\u0027t it be best to define a V8 object, and keep a handle to it in C++ world?",
      "range": {
        "startLine": 5190,
        "startChar": 17,
        "endLine": 5191,
        "endChar": 76
      },
      "revId": "428583f0f216c56baf9a5ec48470d372de4a8801",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ae37420_7f9d2341",
        "filename": "src/compiler/wasm-compiler.cc",
        "patchSetId": 6
      },
      "lineNbr": 7267,
      "author": {
        "id": 1411293
      },
      "writtenOn": "2022-06-28T14:47:06Z",
      "side": 1,
      "message": "Could treating mem_size first as a UintPtr and then as an Int64 create problems?",
      "range": {
        "startLine": 7267,
        "startChar": 66,
        "endLine": 7267,
        "endChar": 73
      },
      "revId": "428583f0f216c56baf9a5ec48470d372de4a8801",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55b1db93_05d7fa68",
        "filename": "src/wasm/wasm-objects.tq",
        "patchSetId": 6
      },
      "lineNbr": 25,
      "author": {
        "id": 1411293
      },
      "writtenOn": "2022-06-28T14:47:06Z",
      "side": 1,
      "message": "Please document when this field is defined, and when it needs to be.",
      "revId": "428583f0f216c56baf9a5ec48470d372de4a8801",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}