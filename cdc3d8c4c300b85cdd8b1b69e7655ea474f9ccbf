{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4aca881f_9bb5dd8a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1344750
      },
      "writtenOn": "2022-08-19T18:28:21Z",
      "side": 1,
      "message": "Now after a thought, I don\u0027t think swap through move is a good idea for a concurrent data structure (see comments below).\n\nIt\u0027d also be great to fix the possibility of a deadlock in existing Swap().",
      "revId": "cdc3d8c4c300b85cdd8b1b69e7655ea474f9ccbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e56ad573_e842eaf3",
        "filename": "src/heap/base/worklist.h",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 1344750
      },
      "writtenOn": "2022-08-19T18:28:21Z",
      "side": 1,
      "message": "I don\u0027t think that non-atomic swap is good, since other threads may observe the inconsistent (cleared) state.\n\nAs another example, consider T1 calling `swap(a, b)` and T2 calling `swap(b, a)`. The caller could reasonably assume that in the end both variables must differ, independent of the order of execution. However, with non-atomic swap it\u0027s possible that one of them is empty.",
      "range": {
        "startLine": 93,
        "startChar": 0,
        "endLine": 95,
        "endChar": 23
      },
      "revId": "cdc3d8c4c300b85cdd8b1b69e7655ea474f9ccbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0157028_1b97056e",
        "filename": "src/heap/base/worklist.h",
        "patchSetId": 2
      },
      "lineNbr": 116,
      "author": {
        "id": 1344750
      },
      "writtenOn": "2022-08-19T18:28:21Z",
      "side": 1,
      "message": "nit: other_top \u003d std::exchange(other.top_, nullptr);",
      "range": {
        "startLine": 115,
        "startChar": 3,
        "endLine": 116,
        "endChar": 25
      },
      "revId": "cdc3d8c4c300b85cdd8b1b69e7655ea474f9ccbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea37e555_f6397fc0",
        "filename": "src/heap/base/worklist.h",
        "patchSetId": 2
      },
      "lineNbr": 128,
      "author": {
        "id": 1344750
      },
      "writtenOn": "2022-08-19T18:28:21Z",
      "side": 1,
      "message": "I don\u0027t think that non-atomic clearing + setting is good, since this allows other threads to see the inconsistent (cleared) state.",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 128,
        "endChar": 3
      },
      "revId": "cdc3d8c4c300b85cdd8b1b69e7655ea474f9ccbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb855782_a69e6b3e",
        "filename": "src/heap/base/worklist.h",
        "patchSetId": 2
      },
      "lineNbr": 128,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2022-08-22T08:57:58Z",
      "side": 1,
      "message": "(Not sure it\u0027s a problem with our use case; not addressing because the API change is likely not a good fit, see below.)",
      "parentUuid": "ea37e555_f6397fc0",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 128,
        "endChar": 3
      },
      "revId": "cdc3d8c4c300b85cdd8b1b69e7655ea474f9ccbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "cdc3d8c4c300b85cdd8b1b69e7655ea474f9ccbf",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "cdc3d8c4c300b85cdd8b1b69e7655ea474f9ccbf",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "cdc3d8c4c300b85cdd8b1b69e7655ea474f9ccbf",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "cdc3d8c4c300b85cdd8b1b69e7655ea474f9ccbf",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}