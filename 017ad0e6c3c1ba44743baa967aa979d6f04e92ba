{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ed642487_a7b178d3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1411293
      },
      "writtenOn": "2021-02-15T17:02:57Z",
      "side": 1,
      "message": "PTAL.",
      "revId": "017ad0e6c3c1ba44743baa967aa979d6f04e92ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "04e82073_ec3af3e1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2021-02-16T10:48:32Z",
      "side": 1,
      "message": "Looking good generally, left some comments to address.",
      "revId": "017ad0e6c3c1ba44743baa967aa979d6f04e92ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4599c35e_b8533afe",
        "filename": "src/compiler/wasm-compiler.cc",
        "patchSetId": 3
      },
      "lineNbr": 5753,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2021-02-16T10:48:32Z",
      "side": 1,
      "message": "nit: Use DCHECK_EQ to get better error messages on failure.",
      "revId": "017ad0e6c3c1ba44743baa967aa979d6f04e92ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a3fef95_72ac42d3",
        "filename": "src/wasm/graph-builder-interface.cc",
        "patchSetId": 3
      },
      "lineNbr": 1063,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2021-02-16T10:48:32Z",
      "side": 1,
      "message": "I am a bit confused about the name of this helper. It\u0027s the control depth *of* the current catch, not the depth *for* the current catch, right?\nCan we rename this accordingly?",
      "revId": "017ad0e6c3c1ba44743baa967aa979d6f04e92ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "493adb6b_35825912",
        "filename": "test/mjsunit/wasm/loop-unrolling.js",
        "patchSetId": 3
      },
      "lineNbr": 1,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2021-02-16T10:48:32Z",
      "side": 1,
      "message": "We don\u0027t update the copyright year on edits. It\u0027s just always the year when the file was added.",
      "revId": "017ad0e6c3c1ba44743baa967aa979d6f04e92ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5226065_ca5f8724",
        "filename": "test/mjsunit/wasm/loop-unrolling.js",
        "patchSetId": 3
      },
      "lineNbr": 7,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2021-02-16T10:48:32Z",
      "side": 1,
      "message": "Please add comments to explain why those flags are needed.\n\"--no-liftoff\" because you explicitly want to test TurboFan? I would suggest to drop that, there is already the \"stress\" variant which executes that configuration, so as long as the test also works with Liftoff enabled we should let the variants do their job. This gives us more coverage than hard-coding flags in the tests.\n\nOther flags I am unsure about:\n--single-threaded\n--no-wasm-stack-checks\n--allow-natives-syntax",
      "range": {
        "startLine": 5,
        "startChar": 0,
        "endLine": 7,
        "endChar": 32
      },
      "revId": "017ad0e6c3c1ba44743baa967aa979d6f04e92ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}