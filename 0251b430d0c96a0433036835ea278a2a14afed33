{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "79c8a80e_d634ac9d",
        "filename": "src/common/code-memory-access-inl.h",
        "patchSetId": 41
      },
      "lineNbr": 67,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2022-07-22T08:52:16Z",
      "side": 1,
      "message": "\u003e\u003d\nAnd please add\n  static_assert(base::MemoryProtectionKey::kNoMemoryProtectionKey \u003d\u003d -1);",
      "range": {
        "startLine": 67,
        "startChar": 32,
        "endLine": 67,
        "endChar": 33
      },
      "revId": "0251b430d0c96a0433036835ea278a2a14afed33",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7318fc54_c82a4154",
        "filename": "src/common/code-memory-access-inl.h",
        "patchSetId": 41
      },
      "lineNbr": 67,
      "author": {
        "id": 1531727
      },
      "writtenOn": "2022-07-22T15:40:57Z",
      "side": 1,
      "message": "I add the static_assert, but I found in the manual from Linux it was said `On  success,  pkey_alloc()  returns  a  positive  protection  key  value.` I\u0027m not very clear about whether it will return 0 in some case.",
      "parentUuid": "79c8a80e_d634ac9d",
      "range": {
        "startLine": 67,
        "startChar": 32,
        "endLine": 67,
        "endChar": 33
      },
      "revId": "0251b430d0c96a0433036835ea278a2a14afed33",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77d7699e_6f09ae99",
        "filename": "src/common/code-memory-access-inl.h",
        "patchSetId": 41
      },
      "lineNbr": 67,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-07-22T18:13:07Z",
      "side": 1,
      "message": "I can confirm that the first key that the operating system will hand out is `1`. It probably uses `0` for \"no key\" (the default key assigned to all mappings). As that\u0027s not documented though, we should not rely on this, and also allow `0`.",
      "parentUuid": "7318fc54_c82a4154",
      "range": {
        "startLine": 67,
        "startChar": 32,
        "endLine": 67,
        "endChar": 33
      },
      "revId": "0251b430d0c96a0433036835ea278a2a14afed33",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50a7584e_a2dbd810",
        "filename": "src/common/code-memory-access-inl.h",
        "patchSetId": 41
      },
      "lineNbr": 67,
      "author": {
        "id": 1531727
      },
      "writtenOn": "2022-07-25T08:53:52Z",
      "side": 1,
      "message": "Hi Clemens, I\u0027m not very clear about your last sentence means, does it means your suggestion is that I should use `\u003e\u003d` here?",
      "parentUuid": "77d7699e_6f09ae99",
      "range": {
        "startLine": 67,
        "startChar": 32,
        "endLine": 67,
        "endChar": 33
      },
      "revId": "0251b430d0c96a0433036835ea278a2a14afed33",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ea83134_afeee459",
        "filename": "src/common/code-memory-access-inl.h",
        "patchSetId": 41
      },
      "lineNbr": 67,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-07-25T10:36:06Z",
      "side": 1,
      "message": "Yes, please use `\u003e\u003d`.",
      "parentUuid": "50a7584e_a2dbd810",
      "range": {
        "startLine": 67,
        "startChar": 32,
        "endLine": 67,
        "endChar": 33
      },
      "revId": "0251b430d0c96a0433036835ea278a2a14afed33",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}