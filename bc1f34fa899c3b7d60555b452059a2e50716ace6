{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e2f29058_e98b15b0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2022-12-01T13:16:20Z",
      "side": 1,
      "message": "This fixes the two tests failing on the new CSS bot.\nPTAL.",
      "revId": "bc1f34fa899c3b7d60555b452059a2e50716ace6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8dd69ceb_7547291a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2022-12-01T14:37:27Z",
      "side": 1,
      "message": "lgtm",
      "revId": "bc1f34fa899c3b7d60555b452059a2e50716ace6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5bf5c059_7d910e7d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1357035
      },
      "writtenOn": "2022-12-07T14:22:30Z",
      "side": 1,
      "message": "I would still prefer if we would just update the tests to not allocate fillers. But this LGTM as well.",
      "revId": "bc1f34fa899c3b7d60555b452059a2e50716ace6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "457cf371_11a8f4ac",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2022-12-07T14:49:20Z",
      "side": 1,
      "message": "I\u0027m adding this to my TODO list. Thanks!",
      "parentUuid": "5bf5c059_7d910e7d",
      "revId": "bc1f34fa899c3b7d60555b452059a2e50716ace6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d2155a7_6871642d",
        "filename": "src/heap/heap-verifier.cc",
        "patchSetId": 1
      },
      "lineNbr": 412,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2022-12-01T14:37:27Z",
      "side": 1,
      "message": "I agree that there \"should\" not be a filler but I can optimizations that may leave behind fillers, so I am not convinced this is a hard invariant.\n\nIf there\u0027s no way forward to getting this invariant, I think a comment is enough. No need to introduce a TODO that will never be addressed.",
      "range": {
        "startLine": 412,
        "startChar": 11,
        "endLine": 412,
        "endChar": 17
      },
      "revId": "bc1f34fa899c3b7d60555b452059a2e50716ace6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98ccd559_791afbc2",
        "filename": "src/heap/heap-verifier.cc",
        "patchSetId": 1
      },
      "lineNbr": 412,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2022-12-01T14:58:20Z",
      "side": 1,
      "message": "This came up as a hard invariant in our offline discussion with Dominik. ATM, it\u0027s just six cctests that violate it:\n\n- cctest test-alloc/StressHandles\n- cctest test-alloc/StressJS\n- cctest test-heap/CodeLargeObjectSpace\n- cctest test-heap/CodeLargeObjectSpace64k\n- cctest test-spaces/AllocationObserver\n- cctest test-spaces/OldLargeObjectSpace\n\nIf we don\u0027t want to enforce it, I\u0027ll just leave a comment (no TODO) in the implementation of IPR. I\u0027ll go with whatever you two decide on this.",
      "parentUuid": "6d2155a7_6871642d",
      "range": {
        "startLine": 412,
        "startChar": 11,
        "endLine": 412,
        "endChar": 17
      },
      "revId": "bc1f34fa899c3b7d60555b452059a2e50716ace6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05659996_9949ff26",
        "filename": "src/heap/heap-verifier.cc",
        "patchSetId": 1
      },
      "lineNbr": 412,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2022-12-01T15:13:13Z",
      "side": 1,
      "message": "If there\u0027s a good chance that we can fix it, please leave a TODO. (I am thinking whether  If there\u0027s no chance though, I think we can leave it with a regular comment.\n\nThe reason I am skeptical is `NewFillerObject()` [1]. Which also allows allocating LO objects with fillers in them. If there\u0027s code that can end up in verification while the object is not fully initialized, the invariant would be broken. I guess it\u0027s reasonable to assume that the object doesn\u0027t escape until the basic setup (map) is done.\n\n[1] https://source.chromium.org/chromium/chromium/src/+/main:v8/src/heap/factory.cc;drc\u003d2df668b7cbf6c1d0766b6ee0ae8147adc8830f2e;bpv\u003d1;bpt\u003d1;l\u003d395",
      "parentUuid": "98ccd559_791afbc2",
      "range": {
        "startLine": 412,
        "startChar": 11,
        "endLine": 412,
        "endChar": 17
      },
      "revId": "bc1f34fa899c3b7d60555b452059a2e50716ace6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6c040d5_da59f352",
        "filename": "src/heap/heap-verifier.cc",
        "patchSetId": 1
      },
      "lineNbr": 412,
      "author": {
        "id": 1357035
      },
      "writtenOn": "2022-12-01T15:46:05Z",
      "side": 1,
      "message": "Ah true, haven\u0027t seen that yet. I think this invariant should hold even with that in mind. Even if that object escapes that should be handled by black allocation for the marker (the initial symptom here was a grey object after marking). And it will definitely be properly initialized at the next GC.",
      "parentUuid": "05659996_9949ff26",
      "range": {
        "startLine": 412,
        "startChar": 11,
        "endLine": 412,
        "endChar": 17
      },
      "revId": "bc1f34fa899c3b7d60555b452059a2e50716ace6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60ba00ee_63c5023c",
        "filename": "src/heap/heap-verifier.cc",
        "patchSetId": 1
      },
      "lineNbr": 412,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2022-12-01T16:21:49Z",
      "side": 1,
      "message": "I was more thinking about \"random\" callsites for the verifier that may pick up such objects when they shouldn\u0027t. I think right now we are good.\n\n(I also agree that black allocation prevents the marker from looking at them.)",
      "parentUuid": "f6c040d5_da59f352",
      "range": {
        "startLine": 412,
        "startChar": 11,
        "endLine": 412,
        "endChar": 17
      },
      "revId": "bc1f34fa899c3b7d60555b452059a2e50716ace6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94f1d0a0_debc99e6",
        "filename": "src/heap/heap-verifier.cc",
        "patchSetId": 1
      },
      "lineNbr": 412,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2022-12-01T16:59:04Z",
      "side": 1,
      "message": "The implementation of IPR tried to make sure that it would never return a filler/free space object. For normal pages, this is true [2], but not for large pages without this fix, unless such objects cannot exist there.\n\nAlso, related to this and to black allocation, notice that normal objects are not returned by IPR if they are already marked [3], whereas for objects on large pages we do not have such a bailout.\n\nIIUC, this invariant is not guaranteed to hold at the moment and I suggest that we do not try to enforce it (at least not on this CL).\n\n[2] https://source.chromium.org/chromium/chromium/src/+/main:v8/src/heap/mark-compact.cc;drc\u003d4f2d5b3b77c402f5fe5aadecd156d87d434e026a;l\u003d2188\n[3] https://source.chromium.org/chromium/chromium/src/+/main:v8/src/heap/mark-compact.cc;drc\u003d4f2d5b3b77c402f5fe5aadecd156d87d434e026a;l\u003d2178",
      "parentUuid": "60ba00ee_63c5023c",
      "range": {
        "startLine": 412,
        "startChar": 11,
        "endLine": 412,
        "endChar": 17
      },
      "revId": "bc1f34fa899c3b7d60555b452059a2e50716ace6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a3179d0_2d963b7d",
        "filename": "src/heap/heap-verifier.cc",
        "patchSetId": 1
      },
      "lineNbr": 412,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2022-12-07T14:49:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "94f1d0a0_debc99e6",
      "range": {
        "startLine": 412,
        "startChar": 11,
        "endLine": 412,
        "endChar": 17
      },
      "revId": "bc1f34fa899c3b7d60555b452059a2e50716ace6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f087c225_ea3d6de9",
        "filename": "src/heap/mark-compact.cc",
        "patchSetId": 1
      },
      "lineNbr": 2173,
      "author": {
        "id": 1357035
      },
      "writtenOn": "2022-12-01T15:03:33Z",
      "side": 1,
      "message": "Not sure I am happy that we change production code here for misbehaving tests. Wdyt?",
      "revId": "bc1f34fa899c3b7d60555b452059a2e50716ace6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "150d0446_64fd31b3",
        "filename": "src/heap/mark-compact.cc",
        "patchSetId": 1
      },
      "lineNbr": 2173,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2022-12-01T16:15:22Z",
      "side": 1,
      "message": "This code was wrong, unless we want to enforce the invariant we\u0027ve mentioned above. Let\u0027s discuss it in one place.",
      "parentUuid": "f087c225_ea3d6de9",
      "revId": "bc1f34fa899c3b7d60555b452059a2e50716ace6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}