{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9c790fc5_a727fd7d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2024-06-25T19:12:45Z",
      "side": 1,
      "message": "PTAL, especially [this comment](https://chromium-review.googlesource.com/c/v8/v8/+/5648710/comment/82e1e075_b7423d01/).",
      "revId": "db31cce4d47cc7e4b21730f417ee75b3b1e725bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "76eedc56_d3e351b7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2024-06-26T07:15:51Z",
      "side": 1,
      "message": "Awesome!",
      "revId": "db31cce4d47cc7e4b21730f417ee75b3b1e725bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9eddc8a9_3c0a78e9",
        "filename": "src/heap/mark-compact.cc",
        "patchSetId": 3
      },
      "lineNbr": 2864,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2024-06-25T19:12:45Z",
      "side": 1,
      "message": "These changes are trivial, just hiding irrelevant variables in the nested scope.",
      "revId": "db31cce4d47cc7e4b21730f417ee75b3b1e725bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "47479e3f_992ea326",
        "filename": "src/heap/mark-compact.cc",
        "patchSetId": 3
      },
      "lineNbr": 2864,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2024-06-26T07:15:51Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "9eddc8a9_3c0a78e9",
      "revId": "db31cce4d47cc7e4b21730f417ee75b3b1e725bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75f09d4f_7f995f00",
        "filename": "src/heap/mark-compact.cc",
        "patchSetId": 3
      },
      "lineNbr": 2912,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2024-06-25T19:12:45Z",
      "side": 1,
      "message": "In patchset 1, I tried to add this job item to the clearing job that already existed (line 2845). Unfortunately, this job item cannot start earlier than here, because `ProcessOldCodeCandidates` in line 2897 may mark objects, so a data race occurs.",
      "revId": "db31cce4d47cc7e4b21730f417ee75b3b1e725bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "055a2266_b0f98a5e",
        "filename": "src/heap/mark-compact.cc",
        "patchSetId": 3
      },
      "lineNbr": 2912,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2024-06-26T07:15:51Z",
      "side": 1,
      "message": "Please add this as a comment above the block here. Custom weakness clearing is always tricky to order and people (including myself) are not always aware of why we maintain a certain order.\n\nWhat\u0027s the offending line that marks? Couldn\u0027t find it on a first skim.",
      "parentUuid": "75f09d4f_7f995f00",
      "revId": "db31cce4d47cc7e4b21730f417ee75b3b1e725bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "28348610_bc2f672a",
        "filename": "src/heap/mark-compact.cc",
        "patchSetId": 3
      },
      "lineNbr": 2912,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2024-06-26T11:24:39Z",
      "side": 1,
      "message": "It\u0027s [here](https://source.chromium.org/chromium/chromium/src/+/main:v8/src/heap/mark-compact.cc;drc\u003dae983e94583c5e2d400fa7641439d2e8ca13fd93;l\u003d3106). The stack trace is:\n```\n    #7 TryMark src/heap/marking-state-inl.h:30:38\n    #8 TryMarkAndAccountLiveBytes src/heap/marking-state-inl.h:36:7\n    #9 v8::internal::MarkCompactCollector::FlushBytecodeFromSFI(v8::internal::Tagged\u003cv8::internal::SharedFunctionInfo\u003e) src/heap/mark-compact.cc:3150:19\n    #10 FlushSFI src/heap/mark-compact.cc:3274:5\n    #11 v8::internal::MarkCompactCollector::ProcessOldBytecodeSFI(v8::internal::Tagged\u003cv8::internal::SharedFunctionInfo\u003e) src/heap/mark-compact.cc:3205:5\n    #12 v8::internal::MarkCompactCollector::ProcessOldCodeCandidates() src/heap/mark-compact.cc:3167:26\n    #13 v8::internal::MarkCompactCollector::ClearNonLiveReferences() src/heap/mark-compact.cc:2906:5\n```\n\nI\u0027m adding the comment.",
      "parentUuid": "055a2266_b0f98a5e",
      "revId": "db31cce4d47cc7e4b21730f417ee75b3b1e725bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66d4484f_0f09b010",
        "filename": "src/heap/mark-compact.cc",
        "patchSetId": 3
      },
      "lineNbr": 3638,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2024-06-26T07:15:51Z",
      "side": 1,
      "message": "This is a non-atomic store which is fine as long as we only have a single job task clears. Let\u0027s add a comment.\n\n(The worklist would allow for `Pop()` to happen on many tasks but I think we limit the clearing to a single task.)",
      "range": {
        "startLine": 3638,
        "startChar": 17,
        "endLine": 3638,
        "endChar": 22
      },
      "revId": "db31cce4d47cc7e4b21730f417ee75b3b1e725bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "862f85d3_eb938fb7",
        "filename": "src/heap/mark-compact.cc",
        "patchSetId": 3
      },
      "lineNbr": 3638,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2024-06-26T11:24:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "66d4484f_0f09b010",
      "range": {
        "startLine": 3638,
        "startChar": 17,
        "endLine": 3638,
        "endChar": 22
      },
      "revId": "db31cce4d47cc7e4b21730f417ee75b3b1e725bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ddabf7e_be06052d",
        "filename": "src/heap/mark-compact.h",
        "patchSetId": 3
      },
      "lineNbr": 203,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2024-06-25T19:12:45Z",
      "side": 1,
      "message": "If we insist on this method not being public, then class `ClearTrivialWeakRefJobItem` in line 2582 of `mark-compact.cc` must be moved out of the anonymous namespace and made a friend of `MarkCompactCollector`.",
      "revId": "db31cce4d47cc7e4b21730f417ee75b3b1e725bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fcebfdc_cb9b8c61",
        "filename": "src/heap/mark-compact.h",
        "patchSetId": 3
      },
      "lineNbr": 203,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2024-06-26T07:15:51Z",
      "side": 1,
      "message": "We usually solve this by declaring a nested class that is then defined in the `.cc` file. This nested class can then access internals.",
      "parentUuid": "3ddabf7e_be06052d",
      "revId": "db31cce4d47cc7e4b21730f417ee75b3b1e725bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "922faba0_0575743b",
        "filename": "src/heap/mark-compact.h",
        "patchSetId": 3
      },
      "lineNbr": 203,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2024-06-26T11:24:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8fcebfdc_cb9b8c61",
      "revId": "db31cce4d47cc7e4b21730f417ee75b3b1e725bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6bbd168a_0fdcd63a",
        "filename": "src/heap/marking-visitor-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 83,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2024-06-26T07:15:51Z",
      "side": 1,
      "message": "I\u0027d use `IsTrivialWeakReferenceValue()`",
      "range": {
        "startLine": 83,
        "startChar": 52,
        "endLine": 83,
        "endChar": 75
      },
      "revId": "db31cce4d47cc7e4b21730f417ee75b3b1e725bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e498a29_73bf0658",
        "filename": "src/heap/marking-visitor-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 83,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2024-06-26T11:24:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6bbd168a_0fdcd63a",
      "range": {
        "startLine": 83,
        "startChar": 52,
        "endLine": 83,
        "endChar": 75
      },
      "revId": "db31cce4d47cc7e4b21730f417ee75b3b1e725bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d3d2b59_500eb9d3",
        "filename": "src/heap/marking-visitor-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2024-06-26T07:15:51Z",
      "side": 1,
      "message": "You should not need the RO space check here because `MarkingHelper::ShouldMarkObject()` below will filter RO objects.",
      "range": {
        "startLine": 85,
        "startChar": 9,
        "endLine": 85,
        "endChar": 24
      },
      "revId": "db31cce4d47cc7e4b21730f417ee75b3b1e725bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "772d3faa_b070f5b4",
        "filename": "src/heap/marking-visitor-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2024-06-26T11:24:39Z",
      "side": 1,
      "message": "That\u0027s right. Then, the existing check for RO space in `MarkCompactCollector::ClearTrivialWeakReferences` was already redundant.",
      "parentUuid": "2d3d2b59_500eb9d3",
      "range": {
        "startLine": 85,
        "startChar": 9,
        "endLine": 85,
        "endChar": 24
      },
      "revId": "db31cce4d47cc7e4b21730f417ee75b3b1e725bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82e1e075_b7423d01",
        "filename": "src/heap/marking-visitor-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 86,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2024-06-25T19:12:45Z",
      "side": 1,
      "message": "My first version, in patchset 1, examined also the host object and considered fewer objects to be trivial. I was not very confident about that and it was incompatible with [Olivier\u0027s CL](https://crrev.com/c/5621236) that landed soon after.\n\nLet\u0027s discuss this further, if you think this condition can be strengthened.",
      "revId": "db31cce4d47cc7e4b21730f417ee75b3b1e725bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "638d1c1f_2309a02d",
        "filename": "src/heap/marking-visitor-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 86,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2024-06-26T07:15:51Z",
      "side": 1,
      "message": "The idea was that weak refs to Maps that are interesting can only happen in `Map`, `TransitionArray`, `DescriptorArray` and so we could filter weak refs in those host objects. \n\nYou are filtering _all_ `Map` weak refs.\n\nI think we can go with your version here to start with.\n\nYour check is solely value and may be more local than checking the page flags on host objects (which are usually not used). It does cover more weak refs than we actually need, as a weakref to a `Map` outside of the special host objects can just be cleared like other trivial weakrefs.",
      "parentUuid": "82e1e075_b7423d01",
      "revId": "db31cce4d47cc7e4b21730f417ee75b3b1e725bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93e12495_4e4ac751",
        "filename": "src/heap/marking-visitor-inl.h",
        "patchSetId": 3
      },
      "lineNbr": 86,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2024-06-26T11:27:45Z",
      "side": 1,
      "message": "I\u0027m implementing this again in patchset 5.  \nI think it\u0027s OK but it arguably breaks the abstraction that Olivier introduced.  \nLet\u0027s see if we want to keep this.",
      "parentUuid": "638d1c1f_2309a02d",
      "revId": "db31cce4d47cc7e4b21730f417ee75b3b1e725bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}