{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9ef32c4d_02100125",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2024-10-24T12:09:10Z",
      "side": 1,
      "message": "lgtm",
      "revId": "62d7741ecbdd7d89dfbafd34cb671c048bf1f0c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9e36857_b5c124e6",
        "filename": "src/codegen/code-stub-assembler.h",
        "patchSetId": 1
      },
      "lineNbr": 4771,
      "author": {
        "id": 1519522
      },
      "writtenOn": "2024-10-23T16:46:11Z",
      "side": 1,
      "message": "I\u0027m wondering if it would be better to track this in the `CodeAssemblerState` associated with `assembler_` instead. Then things like this would still work:\n```\nCodeStubArguments(...).SetMayHavePaddingArguments();\n...\nCodeStubArguments(...).PopAndReturn();\n```\nThis would then probably also simplify the implementation for torque builtins, as they would probably end up emitting such a code pattern. WDYT?",
      "range": {
        "startLine": 4768,
        "startChar": 0,
        "endLine": 4771,
        "endChar": 64
      },
      "revId": "62d7741ecbdd7d89dfbafd34cb671c048bf1f0c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "299aa7ec_6ba53fd4",
        "filename": "src/codegen/code-stub-assembler.h",
        "patchSetId": 1
      },
      "lineNbr": 4771,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2024-10-24T12:09:10Z",
      "side": 1,
      "message": "Yes, it would be nice to add some automation here in a follow-up CL.\nIt seems that `RawMachineAssembler::PopAndReturn()` is a better place for implementing this. We could make respective CallDescriptors aware about whether `JSDispatchHandle` parameter is available for current builtin (for example via flags).",
      "parentUuid": "f9e36857_b5c124e6",
      "range": {
        "startLine": 4768,
        "startChar": 0,
        "endLine": 4771,
        "endChar": 64
      },
      "revId": "62d7741ecbdd7d89dfbafd34cb671c048bf1f0c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4d49207_75434218",
        "filename": "src/codegen/code-stub-assembler.h",
        "patchSetId": 1
      },
      "lineNbr": 4771,
      "author": {
        "id": 1519522
      },
      "writtenOn": "2024-10-25T09:15:47Z",
      "side": 1,
      "message": "I gave this a shot now. The feature is still exposed via the `CodeStubArguments`, but I think this is ok for now as all the builtins that need this feature are using `CodeStubArguments`. But now the \"dynamic\" parameter count is in the lower-level assemblers, and I think that\u0027s the more appropriate place for it to be as it\u0027s effectively a property of the code\u0027s calling convention. WDYT?",
      "parentUuid": "299aa7ec_6ba53fd4",
      "range": {
        "startLine": 4768,
        "startChar": 0,
        "endLine": 4771,
        "endChar": 64
      },
      "revId": "62d7741ecbdd7d89dfbafd34cb671c048bf1f0c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "49633d8c_1e5d5632",
        "filename": "src/codegen/code-stub-assembler.h",
        "patchSetId": 1
      },
      "lineNbr": 4771,
      "author": {
        "id": 1519522
      },
      "writtenOn": "2024-10-25T14:31:56Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "f4d49207_75434218",
      "range": {
        "startLine": 4768,
        "startChar": 0,
        "endLine": 4771,
        "endChar": 64
      },
      "revId": "62d7741ecbdd7d89dfbafd34cb671c048bf1f0c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}