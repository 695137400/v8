{
  "comments": [
    {
      "key": {
        "uuid": "650bc650_9a540740",
        "filename": "src/wasm/wasm-linkage.h",
        "patchSetId": 4
      },
      "lineNbr": 173,
      "author": {
        "id": 1119499
      },
      "writtenOn": "2018-04-27T10:35:26Z",
      "side": 1,
      "message": "This seems somewhat dangerous, since the LinkageAllocator has mutable state and one could end up accidentally sharing one of these instances across threads, leading to race conditions.\n\nLooking at the bigger picture, I think it\u0027s simply enough to have wasm-linkage.h define constant arrays of parameter and return registers and keep the statefulness in the use (in wasm-compiler.cc). That way everything defined here is immutable.",
      "revId": "39a13758fc6812abe18c0d5a551c033b423db7c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2fe52c6e_0e9521f9",
        "filename": "src/wasm/wasm-linkage.h",
        "patchSetId": 4
      },
      "lineNbr": 173,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2018-04-27T10:54:20Z",
      "side": 1,
      "message": "These are (constexpr) constants, so you need to copy them anyway before doing anything useful with them. It just allows to create the copies easier, without having to refer to the array of registers.\n\nWe had the same design before in wasm-linkage.cc ({return_registers} and {parameter_registers}).",
      "parentUuid": "650bc650_9a540740",
      "revId": "39a13758fc6812abe18c0d5a551c033b423db7c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d533d6bc_49cba18f",
        "filename": "src/wasm/wasm-linkage.h",
        "patchSetId": 4
      },
      "lineNbr": 173,
      "author": {
        "id": 1119499
      },
      "writtenOn": "2018-04-27T11:28:43Z",
      "side": 1,
      "message": "I agree with the CL\u0027s architecture overall, but I think the contract will be clearer/cleaner if this header includes only immutable definitions. Ultimately the LinkageAllocator is an iterator over two different immutable vectors, and as such it could as well be inlined into its (one) use.",
      "parentUuid": "2fe52c6e_0e9521f9",
      "revId": "39a13758fc6812abe18c0d5a551c033b423db7c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}