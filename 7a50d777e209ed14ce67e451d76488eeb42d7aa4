{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a8b0b38a_7a302149",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2024-10-07T13:45:32Z",
      "side": 1,
      "message": "PTAL, thanks",
      "revId": "7a50d777e209ed14ce67e451d76488eeb42d7aa4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a418dd45_83466456",
        "filename": "src/parsing/parser.cc",
        "patchSetId": 1
      },
      "lineNbr": 639,
      "author": {
        "id": 1118844
      },
      "writtenOn": "2024-10-09T10:48:38Z",
      "side": 1,
      "message": "If we always allocate it we should be able to cover this with `HasReceiverToDeserializer()` instead?",
      "revId": "7a50d777e209ed14ce67e451d76488eeb42d7aa4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8aab508f_ed0cd753",
        "filename": "src/parsing/parser.cc",
        "patchSetId": 1
      },
      "lineNbr": 639,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2024-10-15T20:26:01Z",
      "side": 1,
      "message": "The HasReceiverToDeserializer() here is checked on the nearest receiver scope (after deserialization) and the receiver is re-allocated there, and in the cases where this reproduces, it wouldn\u0027t be the static initializer function, given the issue happens when there are instance members requiring the receiver placed between static initializers, the nearest receiver scope can probably be any function scope that happen to be closest one after deserialization.",
      "parentUuid": "a418dd45_83466456",
      "revId": "7a50d777e209ed14ce67e451d76488eeb42d7aa4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85e8c62d_112ffe94",
        "filename": "src/parsing/parser.cc",
        "patchSetId": 1
      },
      "lineNbr": 639,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2024-10-18T09:50:47Z",
      "side": 1,
      "message": "I created an alternative fix: https://chromium-review.googlesource.com/c/v8/v8/+/5937959\n\nCreating a receiver variable that didn\u0027t exist seems a little weird to me...",
      "parentUuid": "8aab508f_ed0cd753",
      "revId": "7a50d777e209ed14ce67e451d76488eeb42d7aa4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3aa7a323_4aeb6fc4",
        "filename": "test/mjsunit/regress/regress-crbug-371237564.js",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1118844
      },
      "writtenOn": "2024-10-09T10:48:38Z",
      "side": 1,
      "message": "Would preparsing this irrelevant code instead of parsing it avoid the issue? Perhaps that\u0027s the even better solution?",
      "revId": "7a50d777e209ed14ce67e451d76488eeb42d7aa4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56e0773d_dd45bc4e",
        "filename": "test/mjsunit/regress/regress-crbug-371237564.js",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2024-10-15T11:00:29Z",
      "side": 1,
      "message": "I guess not; `static [this]...` would hit the same issue I guess.",
      "parentUuid": "3aa7a323_4aeb6fc4",
      "revId": "7a50d777e209ed14ce67e451d76488eeb42d7aa4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}