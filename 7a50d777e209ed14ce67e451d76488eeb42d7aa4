{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a8b0b38a_7a302149",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2024-10-07T13:45:32Z",
      "side": 1,
      "message": "PTAL, thanks",
      "revId": "7a50d777e209ed14ce67e451d76488eeb42d7aa4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a418dd45_83466456",
        "filename": "src/parsing/parser.cc",
        "patchSetId": 1
      },
      "lineNbr": 639,
      "author": {
        "id": 1118844
      },
      "writtenOn": "2024-10-09T10:48:38Z",
      "side": 1,
      "message": "If we always allocate it we should be able to cover this with `HasReceiverToDeserializer()` instead?",
      "revId": "7a50d777e209ed14ce67e451d76488eeb42d7aa4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8aab508f_ed0cd753",
        "filename": "src/parsing/parser.cc",
        "patchSetId": 1
      },
      "lineNbr": 639,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2024-10-15T20:26:01Z",
      "side": 1,
      "message": "The HasReceiverToDeserializer() here is checked on the nearest receiver scope (after deserialization) and the receiver is re-allocated there, and in the cases where this reproduces, it wouldn\u0027t be the static initializer function, given the issue happens when there are instance members requiring the receiver placed between static initializers, the nearest receiver scope can probably be any function scope that happen to be closest one after deserialization.",
      "parentUuid": "a418dd45_83466456",
      "revId": "7a50d777e209ed14ce67e451d76488eeb42d7aa4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85e8c62d_112ffe94",
        "filename": "src/parsing/parser.cc",
        "patchSetId": 1
      },
      "lineNbr": 639,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2024-10-18T09:50:47Z",
      "side": 1,
      "message": "I created an alternative fix: https://chromium-review.googlesource.com/c/v8/v8/+/5937959\n\nCreating a receiver variable that didn\u0027t exist seems a little weird to me...",
      "parentUuid": "8aab508f_ed0cd753",
      "revId": "7a50d777e209ed14ce67e451d76488eeb42d7aa4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3aa7a323_4aeb6fc4",
        "filename": "test/mjsunit/regress/regress-crbug-371237564.js",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1118844
      },
      "writtenOn": "2024-10-09T10:48:38Z",
      "side": 1,
      "message": "Would preparsing this irrelevant code instead of parsing it avoid the issue? Perhaps that\u0027s the even better solution?",
      "revId": "7a50d777e209ed14ce67e451d76488eeb42d7aa4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56e0773d_dd45bc4e",
        "filename": "test/mjsunit/regress/regress-crbug-371237564.js",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2024-10-15T11:00:29Z",
      "side": 1,
      "message": "I guess not; `static [this]...` would hit the same issue I guess.",
      "parentUuid": "3aa7a323_4aeb6fc4",
      "revId": "7a50d777e209ed14ce67e451d76488eeb42d7aa4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "If the author is a V8 committer, code review is required from one other committer (see https://v8.dev/docs/become-committer). Otherwise, code review is required from two committers."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "((uploaderin:cria/project-v8-committers AND label:Code-Review\u003dMAX,user\u003dnon_uploader) OR label:Code-Review\u003dMAX,count\u003e\u003d2) AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"((uploaderin:cria/project-v8-committers AND label:Code-Review=MAX,user=non_uploader) OR label:Code-Review=MAX,count>=2) AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["uploaderin:cria/project-v8-committers"],"failingAtoms":["label:Code-Review=MIN","label:Code-Review=MAX,user=non_uploader","label:Code-Review=MAX,count>=2"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "7a50d777e209ed14ce67e451d76488eeb42d7aa4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overridden with Unresolved-Comment-Reason: \u003creason\u003e line in change message."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "message:\"^.*Unresolved-Comment-Reason:.*\""
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:unresolved"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["has:unresolved"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*Unresolved-Comment-Reason:.*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*Unresolved-Comment-Reason:.*\""]}
      },
      "patchSetCommitId": "7a50d777e209ed14ce67e451d76488eeb42d7aa4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval. Using a trusted device is required, see go/gerrit-onboarding#review-enforcement."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "7a50d777e209ed14ce67e451d76488eeb42d7aa4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "7a50d777e209ed14ce67e451d76488eeb42d7aa4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}