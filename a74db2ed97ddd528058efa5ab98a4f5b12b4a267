{
  "comments": [
    {
      "key": {
        "uuid": "b31cd4c2_fd9e8a44",
        "filename": "src/globals.h",
        "patchSetId": 12
      },
      "lineNbr": 772,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-01-22T15:04:05Z",
      "side": 1,
      "message": "nit: s/at the //",
      "revId": "a74db2ed97ddd528058efa5ab98a4f5b12b4a267",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4d59584_0e40d34c",
        "filename": "src/globals.h",
        "patchSetId": 12
      },
      "lineNbr": 772,
      "author": {
        "id": 1155482
      },
      "writtenOn": "2019-01-22T16:42:12Z",
      "side": 1,
      "message": "not sure I understand this one.",
      "parentUuid": "b31cd4c2_fd9e8a44",
      "revId": "a74db2ed97ddd528058efa5ab98a4f5b12b4a267",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a87296b0_df72fbea",
        "filename": "src/globals.h",
        "patchSetId": 12
      },
      "lineNbr": 772,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-01-22T16:51:33Z",
      "side": 1,
      "message": "There\u0027s an extra \u0027at the \u0027, the sentence should read: \u0027may exist in this order at the end\u0027",
      "parentUuid": "b4d59584_0e40d34c",
      "revId": "a74db2ed97ddd528058efa5ab98a4f5b12b4a267",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3bd1f31c_057f3186",
        "filename": "src/globals.h",
        "patchSetId": 12
      },
      "lineNbr": 772,
      "author": {
        "id": 1155482
      },
      "writtenOn": "2019-01-22T19:46:09Z",
      "side": 1,
      "message": "Ack. Thanks.",
      "parentUuid": "a87296b0_df72fbea",
      "revId": "a74db2ed97ddd528058efa5ab98a4f5b12b4a267",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ae75ec5c_3ece549c",
        "filename": "src/globals.h",
        "patchSetId": 12
      },
      "lineNbr": 791,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-01-22T15:04:05Z",
      "side": 1,
      "message": "Not sure I understand; why are we back at this solution where an offset of 0 implies \u0027does not exist\u0027? I like our current logic, where offset and size are always non-magic values, and offset points to where the pool/table/code comments start, even if empty.",
      "revId": "a74db2ed97ddd528058efa5ab98a4f5b12b4a267",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff543a29_81cfb614",
        "filename": "src/globals.h",
        "patchSetId": 12
      },
      "lineNbr": 791,
      "author": {
        "id": 1155482
      },
      "writtenOn": "2019-01-22T16:42:12Z",
      "side": 1,
      "message": "Because not all platform supports constant pool, if we don\u0027t use magic value 0 to imply \u0027does not exist\u0027, then we will need to set this offset on all platform. Do you think this is ok?\n\nIf we use constant_pool_size here, we won\u0027t be able to compute offset without given the safepoint offset and handler offset.\n\nI tried setting constant_pool_offset on all platform. It seems to be a bit complicate to set it before safepoint on not supported platforms. Could you enlighten me a bit?\n\nThanks.",
      "parentUuid": "ae75ec5c_3ece549c",
      "revId": "a74db2ed97ddd528058efa5ab98a4f5b12b4a267",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ffb77f85_e4dd8cf8",
        "filename": "src/globals.h",
        "patchSetId": 12
      },
      "lineNbr": 791,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-01-22T16:51:33Z",
      "side": 1,
      "message": "\u003e Because not all platform supports constant pool, if we don\u0027t use magic value 0 to imply \u0027does not exist\u0027, then we will need to set this offset on all platform. Do you think this is ok?\n\nYeah I think so, that sounds nicely consistent across architectures. It\u0027s what I thought we were doing currently.\n\n\u003e \n\u003e If we use constant_pool_size here, we won\u0027t be able to compute offset without given the safepoint offset and handler offset.\n\u003e \n\u003e I tried setting constant_pool_offset on all platform. It seems to be a bit complicate to set it before safepoint on not supported platforms. Could you enlighten me a bit?\n\nWhat about exactly?",
      "parentUuid": "ff543a29_81cfb614",
      "revId": "a74db2ed97ddd528058efa5ab98a4f5b12b4a267",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b49754e0_d3553ac0",
        "filename": "src/globals.h",
        "patchSetId": 12
      },
      "lineNbr": 791,
      "author": {
        "id": 1155482
      },
      "writtenOn": "2019-01-22T19:46:09Z",
      "side": 1,
      "message": "If consant_pool_size \u003d safepoint_offset - constant_pool_offset on all platforms, we need both constant_pool_offset and safepoint_offset to be \u0027correct\u0027. There are 2 places that could emit constant pool, which are in FinishCode() and in GetCode(). safepoints are emitted after FinishCode(). On arm/ppc, we use ConstantPoolBuilder to remember the offset to the constant pool, so that GetCode can use this offset to initialize the CodeDesc object. But on all other architectures, we don\u0027t have the correct constant pool offset (equal to safepoint_offset in these case) to use within GetCode. In the latest patch, I try to patch the constant_pool_offset to safepoint_offset if constant_pool_offset is 0. But that doesn\u0027t sound like a good approach, does it? Also, I am not sure if there is any other place that I need to patch constant_pool_offset or safepoint_offset.\n\nBefore this CL, constant_pool_offset was computed by code_comments_offset() - constant_pool_size, which is not correct. And it\u0027s not possible to compute the correct constant pool offset because we don\u0027t know the jump table size.\n\nOne more thing, to be able to compute constant_pool_size, we need safepoint_offset to be correct. Can I assume that to be true even if safepoint doesn\u0027t exist in a code obj?",
      "parentUuid": "ffb77f85_e4dd8cf8",
      "revId": "a74db2ed97ddd528058efa5ab98a4f5b12b4a267",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bbe7ecef_5cbe2c3b",
        "filename": "src/objects.cc",
        "patchSetId": 12
      },
      "lineNbr": 15257,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-01-22T15:04:05Z",
      "side": 1,
      "message": "nit: this doesn\u0027t look necessary; If so, let\u0027s just revert these changes to simplify the CL?",
      "revId": "a74db2ed97ddd528058efa5ab98a4f5b12b4a267",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "efd6d681_71203cc9",
        "filename": "src/objects.cc",
        "patchSetId": 12
      },
      "lineNbr": 15257,
      "author": {
        "id": 1155482
      },
      "writtenOn": "2019-01-22T16:42:12Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "bbe7ecef_5cbe2c3b",
      "revId": "a74db2ed97ddd528058efa5ab98a4f5b12b4a267",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07890645_a99de209",
        "filename": "src/objects/code-inl.h",
        "patchSetId": 12
      },
      "lineNbr": 552,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-01-22T15:04:05Z",
      "side": 1,
      "message": "Could we avoid all of this complexity by setting the constant_pool_offset correctly in the first place?",
      "revId": "a74db2ed97ddd528058efa5ab98a4f5b12b4a267",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "019c2ab1_8cf4df6f",
        "filename": "src/objects/code-inl.h",
        "patchSetId": 12
      },
      "lineNbr": 552,
      "author": {
        "id": 1155482
      },
      "writtenOn": "2019-01-22T16:42:12Z",
      "side": 1,
      "message": "Hello Jakob, given that constant_pool_offset is set correctly, to calculate constant_pool_size, we still need to compute std::min({handler_offset, safepoint_offset, comments_offset}), unless safepoint_table_offset, handler_table_offset and code_comments_offset are also set \u0027correctly\u0027, so that constant_pool_size \u003d safepoint_offset - const_pool_offset is always correct.",
      "parentUuid": "07890645_a99de209",
      "revId": "a74db2ed97ddd528058efa5ab98a4f5b12b4a267",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d065d717_180d16d1",
        "filename": "src/objects/code-inl.h",
        "patchSetId": 12
      },
      "lineNbr": 552,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-01-22T16:51:33Z",
      "side": 1,
      "message": "Imo it\u0027d be nice to have all of these offsets set correctly s.t. for all these fields we can rely on\n\n current_field_size \u003d current_field_offset - previous_field_offset",
      "parentUuid": "019c2ab1_8cf4df6f",
      "revId": "a74db2ed97ddd528058efa5ab98a4f5b12b4a267",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}