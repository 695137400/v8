{
  "comments": [
    {
      "key": {
        "uuid": "b07e9261_9079b94f",
        "filename": "src/builtins/builtins-internal-gen.cc",
        "patchSetId": 7
      },
      "lineNbr": 211,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-03-08T15:14:37Z",
      "side": 1,
      "message": "FYI I discussed removing tailcall-from-js-linkage-callers support with Michi a while back and it\u0027s still on my TODO list. I think this new usage is the only place where we can\u0027t just replace it by a standard call :(",
      "revId": "31f2a821c9c5c278ce44dd6fe190a3618a0548be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90dfb01c_391dd608",
        "filename": "src/builtins/builtins-internal-gen.cc",
        "patchSetId": 7
      },
      "lineNbr": 211,
      "author": {
        "id": 1118373
      },
      "writtenOn": "2018-03-08T16:42:48Z",
      "side": 1,
      "message": "The alternative would be to implement this as handwritten assembly. But that sounded less elegant than this :[",
      "parentUuid": "b07e9261_9079b94f",
      "revId": "31f2a821c9c5c278ce44dd6fe190a3618a0548be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58990cc4_7e25b496",
        "filename": "src/builtins/builtins-internal-gen.cc",
        "patchSetId": 7
      },
      "lineNbr": 211,
      "author": {
        "id": 1183894
      },
      "writtenOn": "2018-10-25T11:06:02Z",
      "side": 1,
      "message": "This tail call doesn\u0027t mess with the stack, so it should be fairly straight-forward, and we can still remove the complex case.",
      "parentUuid": "90dfb01c_391dd608",
      "revId": "31f2a821c9c5c278ce44dd6fe190a3618a0548be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e648851_3e6ca065",
        "filename": "src/snapshot/snapshot-common.cc",
        "patchSetId": 7
      },
      "lineNbr": 155,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-03-09T14:39:13Z",
      "side": 1,
      "message": "Looked at this again due to the failing FYI test (https://logs.chromium.org/v/?s\u003dchromium%2Fbb%2Fclient.v8%2FV8_Linux64_-_debug_-_fyi%2F1457%2F%2B%2Frecipes%2Fsteps%2FCheck_-_stress_off_heap_code%2F0%2Flogs%2FBreakPointBuiltin%2F0).\n\nThe DCHECK (and comment above) used to hold when this code was in Runtime_DeserializeLazy.\n\nIt doesn\u0027t hold anymore in this new use. We need to check if the builtins table contains a deserialized version, and if so just copy it over to the SFI.\n\nAnd another nit: going by the \u0027Ensure...\u0027 function name, I\u0027d expect it to be a nop if either FLAG_lazy_deserialization is set or the passed SFI doesn\u0027t have DeserializeLazy as the code object.",
      "revId": "31f2a821c9c5c278ce44dd6fe190a3618a0548be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}