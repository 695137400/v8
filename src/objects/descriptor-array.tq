// Copyright 2019 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

extern class EnumCache extends Struct {
  keys: FixedArray;
  indices: FixedArray;
  @if(V8_COMPRESS_POINTERS_8GB) optional_padding: Smi;
  @ifnot(V8_COMPRESS_POINTERS_8GB) optional_padding: void;
}

@export
struct DescriptorEntry {
  key: Name|Undefined;
  details: Smi|Undefined;
  value: JSAny|Weak<Map>|AccessorInfo|AccessorPair|ClassPositions;
}

@generateBodyDescriptor
@generateUniqueMap
extern class DescriptorArray extends HeapObject {
  const number_of_all_descriptors: uint16;
  number_of_descriptors: uint16;
  raw_number_of_marked_descriptors: uint16;
  filler16_bits: uint16;
  enum_cache: EnumCache;
  // TODO(teodutu): Move padding before enum_cache, as a uint32.
  @ if(V8_COMPRESS_POINTERS_8GB) optional_padding: Object;
  @ifnot(V8_COMPRESS_POINTERS_8GB) optional_padding: void;
  // TOOD(teodutu): Workaround: make sure number_of_all_descriptors is always
  // odd for alignment.
  descriptors[number_of_all_descriptors]: DescriptorEntry;
}

// A descriptor array where all values are held strongly.
class StrongDescriptorArray extends DescriptorArray {}
