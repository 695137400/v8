// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module array {
  macro ArrayFilterTorqueContinuation(
      context: Context, o: JSReceiver, len: Number, callbackfn: Callable,
      thisArg: Object, initialK: Number, array: JSReceiver,
      to: Number): Object {
    let localTo: Number = to;
    // 5. Let k be 0.
    // 6. Repeat, while k < len
    for (let k: Number = initialK; k < len; k = k + 1) {
      // 6a. Let Pk be ! ToString(k).
      // k is guaranteed to be a positive integer, hence ToString is
      // side-effect free and HasProperty/GetProperty do the conversion inline.

      // 6b. Let kPresent be ? HasProperty(O, Pk).
      const kPresent: Boolean = HasProperty_Inline(context, o, k);

      // 6c. If kPresent is true, then
      if (kPresent == True) {
        // 6c. i. Let kValue be ? Get(O, Pk).
        const kValue: Object = GetProperty(context, o, k);

        // 6c. ii. Perform ? Call(callbackfn, T, <kValue, k, O>).
        const result: Object = Call(context, callbackfn, thisArg, kValue, k, o);

        // iii. If selected is true, then...
        if (ToBoolean(result)) {
          // 1. Perform ? CreateDataPropertyOrThrow(A, ToString(to), kValue).
          CreateDataProperty(context, array, localTo, kValue);
          // 2. Increase to by 1.
          localTo = localTo + 1;
        }
      }

      // 6d. Increase k by 1. (done by the loop).
    }
    return array;
  }

  javascript builtin ArrayFilterLoopEagerDeoptContinuation(
      context: Context, receiver: Object, callback: Object, thisArg: Object,
      array: Object, initialK: Object, length: Object, to: Object): Object {
    // The unsafe Cast is safe because all continuation points in filter are
    // after the ToObject(O) call that ensures we are dealing with a
    // JSReceiver.
    const jsreceiver: JSReceiver = UnsafeCast<JSReceiver>(receiver);
    const localArray: JSReceiver = UnsafeCast<JSReceiver>(array);

    return ArrayFilterLoopContinuation(
        context, jsreceiver, callback, thisArg, localArray, jsreceiver,
        initialK, length, to);
  }

  javascript builtin ArrayFilterLoopLazyDeoptContinuation(
      context: Context, receiver: Object, callback: Object, thisArg: Object,
      array: Object, initialK: Object, length: Object, valueK: Object,
      to: Object, result: Object): Object {
    // The unsafe Cast is safe because all continuation points in forEach are
    // after the ToObject(O) call that ensures we are dealing with a
    // JSReceiver.
    const jsreceiver: JSReceiver = UnsafeCast<JSReceiver>(receiver);
    const localArray: JSReceiver = UnsafeCast<JSReceiver>(array);
    let k: Number = UnsafeCast<Number>(initialK);
    let localTo: Number = UnsafeCast<Number>(to);

    // This custom lazy deopt point is right after the callback. filter() needs
    // to pick up at the next step, which is setting the callback result in
    // the output array. After incrementing k and to, we can glide into the loop
    // continuation builtin.
    if (ToBoolean(result)) {
      CreateDataProperty(context, localArray, localTo, valueK);
      localTo = localTo + 1;
    }

    k = k + 1;

    return ArrayFilterLoopContinuation(
        context, jsreceiver, callback, thisArg, localArray, jsreceiver, k,
        length, localTo);
  }

  builtin ArrayFilterLoopContinuation(
      context: Context, receiver: JSReceiver, callback: Object, thisArg: Object,
      array: JSReceiver, object: Object, initialK: Object, length: Object,
      to: Object): Object {
    try {
      const callbackfn: Callable =
          Cast<Callable>(callback) otherwise Unexpected;
      const k: Number = Cast<Number>(initialK) otherwise Unexpected;
      const localTo: Number = Cast<Number>(to) otherwise Unexpected;
      const numberLength: Number = Cast<Number>(length) otherwise Unexpected;

      return ArrayFilterTorqueContinuation(
          context, receiver, numberLength, callbackfn, thisArg, k, array,
          localTo);
    }
    label Unexpected deferred {
      unreachable;
    }
  }

  macro FilterVisitAllElements<FixedArrayType: type>(
      context: Context, o: JSArray, len: Smi, callbackfn: Callable,
      thisArg: Object, a: JSArray): void
      labels Bailout(Smi, Smi) {
    let k: Smi = 0;
    let to: Smi = 0;
    const map: Map = o.map;

    try {
      // Build a fast loop over the smi array.
      for (; k < len; k = k + 1) {
        // Ensure that the map didn't change.
        if (map != o.map) goto Slow;
        // Ensure that we haven't walked beyond a possibly updated length.
        if (k >= o.length) goto Slow;

        try {
          const value: Object =
              LoadElementNoHole<FixedArrayType>(o, k) otherwise FoundHole;
          const result: Object =
              Call(context, callbackfn, thisArg, value, k, o);
          if (ToBoolean(result)) {
            CopyArrayElement(
                UnsafeCast<FixedArrayType>(o.elements),
                UnsafeCast<FixedArrayType>(a.elements), k, to);
            to = to + 1;
            a.length = to;
          }
        }
        label FoundHole {
          // If we found the hole, we need to bail out if the initial
          // array prototype has had elements inserted. This is preferable
          // to walking the prototype chain looking for elements.

          if (IsNoElementsProtectorCellInvalid()) goto Bailout(k, to);
        }
      }
    }
    label Slow deferred {
      goto Bailout(k, to);
    }
  }

  macro FastArrayFilterFunny(
      context: Context, o: JSReceiver, len: Number, callbackfn: Callable,
      thisArg: Object, array: JSReceiver): Object
      labels Bailout(Smi, Smi) {
    let k: Smi = 0;
    let to: Smi = 0;
    let a: JSArray;
    if (len > 0) {
      goto Bailout(k, to);
    }
    return array;
  }

  macro FastArrayFilter(
      context: Context, o: JSReceiver, len: Number, callbackfn: Callable,
      thisArg: Object, array: JSReceiver): Object
      labels Bailout(Smi, Smi) {
    let k: Smi = 0;
    let to: Smi = 0;
    let a: JSArray;
    try {
      const smiLen: Smi = Cast<Smi>(len) otherwise Slow;
      a = Cast<JSArray>(o) otherwise Slow;
      const localArray: JSArray = Cast<JSArray>(a) otherwise Slow;
      const map: Map = a.map;

      if (!IsPrototypeInitialArrayPrototype(context, map)) goto Slow;
      const elementsKind: ElementsKind = map.elements_kind;
      if (!IsFastElementsKind(elementsKind)) goto Slow;

      if (IsElementsKindGreaterThan(elementsKind, HOLEY_ELEMENTS)) {
        FilterVisitAllElements<FixedDoubleArray>(
            context, a, smiLen, callbackfn, thisArg, localArray)
            otherwise Bailout;
      } else {
        FilterVisitAllElements<FixedArray>(
            context, a, smiLen, callbackfn, thisArg, localArray)
            otherwise Bailout;
      }
    }
    label Slow deferred {
      goto Bailout(k, to);
    }
    return a;
  }

  // https://tc39.github.io/ecma262/#sec-array.prototype.filter
  javascript builtin ArrayFilter(
      context: Context, receiver: Object, ...arguments): Object {
    try {
      if (IsNullOrUndefined(receiver)) {
        goto NullOrUndefinedError;
      }

      // 1. Let O be ? ToObject(this value).
      const o: JSReceiver = ToObject_Inline(context, receiver);

      // 2. Let len be ? ToLength(? Get(O, "length")).
      const len: Number = GetLengthProperty(context, o);

      // 3. If IsCallable(callbackfn) is false, throw a TypeError exception.
      if (arguments.length == 0) {
        goto TypeError;
      }
      const callbackfn: Callable =
          Cast<Callable>(arguments[0]) otherwise TypeError;

      // 4. If thisArg is present, let T be thisArg; else let T be undefined.
      const thisArg: Object = arguments.length > 1 ? arguments[1] : Undefined;
      const array: JSReceiver = ArraySpeciesCreate(context, o, 0);

      // Special cases.
      let k: Number = 0;
      let to: Number = 0;
      try {
        return FastArrayFilterFunny(context, o, len, callbackfn, thisArg, array)
            otherwise Bailout;
      }
      label Bailout(kValue: Smi, toValue: Smi) deferred {
        k = kValue;
        to = toValue;
      }

      return ArrayFilterTorqueContinuation(
          context, o, len, callbackfn, thisArg, k, array, to);
    }
    label TypeError deferred {
      ThrowTypeError(context, kCalledNonCallable, arguments[0]);
    }
    label NullOrUndefinedError deferred {
      ThrowTypeError(
          context, kCalledOnNullOrUndefined, 'Array.prototype.filter');
    }
  }
}
