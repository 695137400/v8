// Copyright 2023 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// ES #sec-asynccontext-variable-constructor
// https://tc39.es/proposal-async-context/#sec-asynccontext-variable-constructor
transitioning javascript builtin AsyncContextVariableConstructor(
    js-implicit context: Context, receiver: JSAny, newTarget: JSAny,
    target: JSFunction)(options: JSAny): JSAsyncContextVariable {
  // 1. If NewTarget is undefined, throw a TypeError exception.
  if (newTarget == Undefined) {
    ThrowTypeError(
        MessageTemplate::kConstructorNotFunction, 'AsyncContext.Variable');
  }

  // 2. Let nameStr be the empty String.
  let nameStr: String = kEmptyString;
  // 3. Let defaultValue be undefined.
  let defaultValue: JSAny = Undefined;

  // 4. If options is an Object, then
  if (Is<JSReceiver>(options)) {
    // a. Let namePresent be ? HasProperty(options, "name").
    const namePresent = HasProperty(UnsafeCast<JSReceiver>(options), 'name');
    // b. If namePresent is true, then
    if (namePresent == True) {
      // i. Let name be ? Get(options, "name").
      const name = GetProperty(options, 'name');
      // ii. Let nameStr be ? ToString(name).
      nameStr = ToString_Inline(name);
    }
    // c. Set defaultValue to ? Get(options, "defaultValue").
    defaultValue = GetProperty(options, 'defaultValue');
  }

  // 5. Let asyncVariable be ? OrdinaryCreateFromConstructor(NewTarget,
  // "%AsyncContext.Variable.prototype%", « [[AsyncVariableName]],
  // [[AsyncVariableDefaultValue]] »).
  const map = GetDerivedMap(target, UnsafeCast<JSReceiver>(newTarget));
  const asyncVariable = UnsafeCast<JSAsyncContextVariable>(
      AllocateFastOrSlowJSObjectFromMap(map));
  // 6. Set asyncVariable.[[AsyncVariableName]] to nameStr.
  asyncVariable.name = nameStr;
  // 7. Set asyncVariable.[[AsyncVariableDefaultValue]] to defaultValue.
  asyncVariable.defaultValue = defaultValue;
  // 8. Return asyncVariable.
  return asyncVariable;
}

transitioning javascript builtin AsyncContextVariablePrototypeNameGetter(
    js-implicit context: NativeContext, receiver: JSAny)(): String {
  // 1. Let asyncVariable be the this value.
  // 2. Perform ? RequireInternalSlot(asyncVariable, [[AsyncVariableName]]).
  typeswitch (receiver) {
    case (asyncVariable: JSAsyncContextVariable): {
      // 3. Return asyncVariable.[[AsyncVariableName]].
      return asyncVariable.name;
    }
    case (JSAny): {
      ThrowTypeError(
          MessageTemplate::kIncompatibleMethodReceiver, 'name',
          'AsyncContext.Variable');
    }
  }
}
