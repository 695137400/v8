// Copyright 2019 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include 'src/builtins/builtins-constructor-gen.h'
#include 'src/builtins/builtins-promise-gen.h'

namespace runtime {
  extern transitioning runtime
  DebugPushPromise(implicit context: Context)(JSAny): JSAny;

  extern transitioning runtime
  DebugPopPromise(implicit context: Context)(): JSAny;

  extern transitioning runtime
  PromiseHookInit(implicit context: Context)(Object, Object): JSAny;
}

// https://tc39.es/ecma262/#sec-promise-constructor
namespace promise {

  extern runtime IncrementUseCounter(Context, Smi): void;
  type UseCounterFeature extends int31
  constexpr 'v8::Isolate::UseCounterFeature';
  const kNotAPromise: constexpr MessageTemplate
  generates 'MessageTemplate::kNotAPromise';
  const kResolverNotAFunction: constexpr MessageTemplate
  generates 'MessageTemplate::kResolverNotAFunction';
  const kPromiseConstructorReturnedUndefined: constexpr UseCounterFeature
  generates 'v8::Isolate::kPromiseConstructorReturnedUndefined';

  extern transitioning macro
  PromiseBuiltinsAssembler::BranchIfAccessCheckFailed(
      Context, Context, Object, Object): void labels NoAccess;

  extern transitioning macro
  IsDebugActive(): bool;

  transitioning macro
  AccessCheckFailed(
      context: Context, nativeContext: Context, promiseFun: Object,
      executor: Object): bool {
    BranchIfAccessCheckFailed(context, nativeContext, promiseFun, executor)
        otherwise return true;
    return false;
  }

  extern transitioning macro ConstructorBuiltinsAssembler::EmitFastNewObject(
      Context, JSFunction, JSReceiver): JSObject;

  extern transitioning macro PromiseBuiltinsAssembler::PromiseInit(Object):
      void;

  extern macro
  PromiseBuiltinsAssembler::IsPromiseHookEnabledOrHasAsyncEventDelegate(): bool;

  // https://tc39.es/ecma262/#sec-promise-executor
  transitioning javascript builtin
  PromiseConstructor(
      js-implicit context: Context, receiver: JSAny,
      newTarget: JSAny)(executor: JSAny): JSAny {
    // 1. If NewTarget is undefined, throw a TypeError exception.
    if (newTarget == Undefined) {
      ThrowTypeError(kNotAPromise, newTarget);
    }

    // 2. If IsCallable(executor) is false, throw a TypeError exception.
    if (!TaggedIsCallable(executor)) {
      ThrowTypeError(kResolverNotAFunction, executor);
    }

    const nativeContext = LoadNativeContext(context);
    const promiseFun = nativeContext[PROMISE_FUNCTION_INDEX];

    // Silently fail if the stack looks fishy.
    if (AccessCheckFailed(context, nativeContext, promiseFun, executor)) {
      IncrementUseCounter(
          context, SmiConstant(kPromiseConstructorReturnedUndefined));
      return Undefined;
    }

    let result: JSPromise;
    if (TaggedEqual(promiseFun, newTarget)) {
      result = AllocateAndInitJSPromise(context);
    } else {
      const resultObject = EmitFastNewObject(
          context, UnsafeCast<JSFunction>(promiseFun),
          UnsafeCast<JSReceiver>(newTarget));
      PromiseInit(resultObject);
      result = UnsafeCast<JSPromise>(resultObject);
      if (IsPromiseHookEnabledOrHasAsyncEventDelegate()) {
        runtime::PromiseHookInit(result, Undefined);
      }
    }

    const isDebugActive = IsDebugActive();
    if (isDebugActive) {
      runtime::DebugPushPromise(result);
    }

    const funcs = CreatePromiseResolvingFunctions(result, True, nativeContext);
    const resolve = funcs.resolve;
    const reject = funcs.reject;
    try {
      Call(context, UnsafeCast<Callable>(executor), Undefined, resolve, reject);
    } catch (e) {
      Call(context, reject, Undefined, e);
    }

    if (isDebugActive) {
      runtime::DebugPopPromise();
    }
    return result;
  }
}
