// Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef V8_CODEGEN_ALIGNED_SLOT_ALLOCATOR_H_
#define V8_CODEGEN_ALIGNED_SLOT_ALLOCATOR_H_

#include "src/base/macros.h"
#include "src/base/platform/platform.h"
#include "src/common/globals.h"

namespace v8 {
namespace internal {

// An aligned slot allocator, used to allocate slots in groups of 1, 2, or 4,
// such that each group is aligned to its size. Aligns single, double, and
// quad-sized slots to their size. On 32 bit systems, aligns 4, 8, and 16 byte
// slots. On 64 bit systems, aligns 8, 16, or 32 byte slots. The allocator tries
// to use any unused space generated by the alignment process.
class V8_EXPORT_PRIVATE AlignedSlotAllocator {
 public:
  // Slots are always pointer-sized.
  static constexpr int kSlotSize = kSystemPointerSize;

  static int NumSlots(int width) { return (width + kSlotSize - 1) / kSlotSize; }

  AlignedSlotAllocator() = default;

  // Gets the next slot index for the given size, in slot units.
  int NextSlot(int size) const;

  // Gets the current end of the slot area. The slot area may contain fragments
  // below this end.
  int End() const { return end_; }

  // Allocates at the next slot index for the given size, in slot units.
  int Allocate(int size);

  // Reserves the given number of slots at the current end of the slot area.
  int Reserve(int size);

  // Aligns the frame so that allocation begins aligned.
  int Align(int size);

 private:
  static constexpr int kInvalidSlot = -1;

  static bool isValid(int slot) { return slot > kInvalidSlot; }

  int next1_ = kInvalidSlot;
  int next2_ = kInvalidSlot;
  int next4_ = 0;
  int end_ = 0;

  DISALLOW_NEW_AND_DELETE()
};

}  // namespace internal
}  // namespace v8

#endif  // V8_CODEGEN_ALIGNED_SLOT_ALLOCATOR_H_
