// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef V8_BASELINE_COMPILATION_INFO_H_
#define V8_BASELINE_COMPILATION_INFO_H_

#include "src/globals.h"
#include "src/handles.h"
#include "src/utils.h"

namespace v8 {
namespace internal {

class Code;
class BytecodeArray;
class FeedbackVector;
class Isolate;
class SharedFunctionInfo;
class Zone;

// UnoptimizedCompilationInfo encapsulates the information needed to compile
// unoptimized code for a given function, and the results of the compilation.
class V8_EXPORT_PRIVATE BaselineCompilationInfo final {
 public:
  BaselineCompilationInfo(Zone* zone, Handle<SharedFunctionInfo> shared_info,
                          Handle<FeedbackVector> feedback_vector);

  Zone* zone() { return zone_; }

  // Accessors for the input data of the function being compiled.

  Handle<SharedFunctionInfo> shared_info() const { return shared_info_; }
  Handle<FeedbackVector> feedback_vector() const { return feedback_vector_; }
  BytecodeArray* bytecode_array() const;

  std::unique_ptr<char[]> GetDebugName() const;

  bool has_untrusted_code_mitigations() const {
    return GetFlag(kUntrustedCodeMitigations);
  }

  int num_parameters_including_this() const;

  // Accessors for the output of compilation.

  Handle<Code> code() const { return code_; }
  void SetCode(Handle<Code> code) { code_ = code; }

 private:
  // Various configuration flags for a compilation, as well as some properties
  // of the compiled code produced by a compilation.
  enum Flag {
    kUntrustedCodeMitigations = 1 << 0,
  };

  void SetFlag(Flag flag) { flags_ |= flag; }
  bool GetFlag(Flag flag) const { return (flags_ & flag) != 0; }

  // Compilation flags.
  unsigned flags_;

  // The zone from which the compilation pipeline working on this
  // BaselineCompilationInfo allocates.
  Zone* zone_;

  // The shared function info for the function being compiled.
  Handle<SharedFunctionInfo> shared_info_;

  // The feedback vector function of the function being compiled.
  Handle<FeedbackVector> feedback_vector_;

  // Holds the code generated by the baseline compiler.
  Handle<Code> code_;
};

}  // namespace internal
}  // namespace v8

#endif  // V8_BASELINE_COMPILATION_INFO_H_
