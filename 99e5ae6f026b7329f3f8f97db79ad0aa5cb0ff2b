{
  "comments": [
    {
      "key": {
        "uuid": "0d233775_737b0445",
        "filename": "src/builtins/math.tq",
        "patchSetId": 12
      },
      "lineNbr": 249,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-05T07:19:20Z",
      "side": 1,
      "message": "nit: if types are obvious you can omit declaring it, e.g. here and oneArgIsNan.",
      "revId": "99e5ae6f026b7329f3f8f97db79ad0aa5cb0ff2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be269e7d_87d423b7",
        "filename": "src/builtins/math.tq",
        "patchSetId": 12
      },
      "lineNbr": 249,
      "author": {
        "id": 1358537
      },
      "writtenOn": "2019-08-05T09:36:27Z",
      "side": 1,
      "message": "type omitted here, but unfortunately if I omit the type on oneArgIsNan the compiler thinks it should be const.",
      "parentUuid": "0d233775_737b0445",
      "revId": "99e5ae6f026b7329f3f8f97db79ad0aa5cb0ff2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d96daefd_0b8d512b",
        "filename": "src/builtins/math.tq",
        "patchSetId": 12
      },
      "lineNbr": 249,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-05T09:50:46Z",
      "side": 1,
      "message": "tebbi@ fyi: a torque compiler bug?",
      "parentUuid": "be269e7d_87d423b7",
      "revId": "99e5ae6f026b7329f3f8f97db79ad0aa5cb0ff2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00d31a83_6ffce4b3",
        "filename": "src/builtins/math.tq",
        "patchSetId": 12
      },
      "lineNbr": 254,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-05T07:19:20Z",
      "side": 1,
      "message": "Not sure how important perf is here but this seems a bit inefficient. In the standard case (!\u003d NaN) we Convert\u003cfloat64\u003e twice. I\u0027d suggest refactoring to first Convert\u003cfloat64\u003e, then create a helper Float64IsNaN based on BranchIfFloat64IsNaN and use that.\n\nAlso, why not use the same trick as in the old builtin to handle nans?",
      "revId": "99e5ae6f026b7329f3f8f97db79ad0aa5cb0ff2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4dcd1134_c7ece051",
        "filename": "src/builtins/math.tq",
        "patchSetId": 12
      },
      "lineNbr": 254,
      "author": {
        "id": 1358537
      },
      "writtenOn": "2019-08-05T09:36:27Z",
      "side": 1,
      "message": "I will create the conversion.\n\nRE: using the builtins tricks, this torque code is based off V8\u0027s original builtin for handling Math.hypot. The \u0027simplified\u0027 builtin in our codebase today is incorrect for handling corner cases, hence v8:9546. The purpose of this CL is to undo those simplifications, and also to convert the builtin to torque.",
      "parentUuid": "00d31a83_6ffce4b3",
      "revId": "99e5ae6f026b7329f3f8f97db79ad0aa5cb0ff2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "003e147f_6619f098",
        "filename": "src/builtins/math.tq",
        "patchSetId": 12
      },
      "lineNbr": 254,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-05T09:50:46Z",
      "side": 1,
      "message": "I meant this trick: https://crrev.com/c/1725200/14/src/builtins/builtins-math.cc#b33\n\n if (!(abs_value \u003c\u003d max)) {  // Avoids the explicit NaN check.\n\nOr was this builtin incorrect?",
      "parentUuid": "4dcd1134_c7ece051",
      "revId": "99e5ae6f026b7329f3f8f97db79ad0aa5cb0ff2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2df4c631_b436615a",
        "filename": "src/builtins/math.tq",
        "patchSetId": 12
      },
      "lineNbr": 254,
      "author": {
        "id": 1358537
      },
      "writtenOn": "2019-08-05T10:00:09Z",
      "side": 1,
      "message": "Yes, I was also referring to that trick. There is a bit more context in v8:9546, but the problem is order matters. I cannot think of anyway to fix it other than to explicitly test for NaN.",
      "parentUuid": "003e147f_6619f098",
      "revId": "99e5ae6f026b7329f3f8f97db79ad0aa5cb0ff2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be6c2a78_54dfa5bb",
        "filename": "src/builtins/math.tq",
        "patchSetId": 12
      },
      "lineNbr": 254,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-05T10:04:26Z",
      "side": 1,
      "message": "Ah I see. Microoptimization: I wonder if removing the if/else and just unconditionally updating `oneArgIsNan |\u003d NumberIsNaN(value)` behaves better. Anyways, explicit checks sgtm.",
      "parentUuid": "2df4c631_b436615a",
      "revId": "99e5ae6f026b7329f3f8f97db79ad0aa5cb0ff2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "85123ad5_6835ffa8",
        "filename": "src/builtins/math.tq",
        "patchSetId": 12
      },
      "lineNbr": 267,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-05T07:19:20Z",
      "side": 1,
      "message": "nit: else if, also below.",
      "revId": "99e5ae6f026b7329f3f8f97db79ad0aa5cb0ff2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c18790b4_db63eb3c",
        "filename": "src/builtins/math.tq",
        "patchSetId": 12
      },
      "lineNbr": 267,
      "author": {
        "id": 1358537
      },
      "writtenOn": "2019-08-05T09:36:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "85123ad5_6835ffa8",
      "revId": "99e5ae6f026b7329f3f8f97db79ad0aa5cb0ff2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9d6457f_0d2e8381",
        "filename": "src/codegen/code-stub-assembler.h",
        "patchSetId": 12
      },
      "lineNbr": 1198,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-05T07:19:20Z",
      "side": 1,
      "message": "This equals the above, except for the TNode-style return type, right? Let\u0027s please just change the return type above.",
      "revId": "99e5ae6f026b7329f3f8f97db79ad0aa5cb0ff2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e922f2e_c20aa21c",
        "filename": "src/codegen/code-stub-assembler.h",
        "patchSetId": 12
      },
      "lineNbr": 1198,
      "author": {
        "id": 1358537
      },
      "writtenOn": "2019-08-05T09:36:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d9d6457f_0d2e8381",
      "revId": "99e5ae6f026b7329f3f8f97db79ad0aa5cb0ff2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}