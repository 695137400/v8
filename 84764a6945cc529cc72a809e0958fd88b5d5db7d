{
  "comments": [
    {
      "key": {
        "uuid": "2ae99f20_efa6a095",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1322305
      },
      "writtenOn": "2020-08-24T18:36:48Z",
      "side": 1,
      "message": "PTAL, thanks ðŸ˜Š",
      "revId": "84764a6945cc529cc72a809e0958fd88b5d5db7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63e0e24e_227d3990",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-09-01T05:41:40Z",
      "side": 1,
      "message": "tebbi@ do you know if we there\u0027s a more general place where this should happen / if there\u0027s a good way to write this optimization in a more general way (not just addition, ...).",
      "revId": "84764a6945cc529cc72a809e0958fd88b5d5db7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ceff25c7_ca78afc2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2020-09-01T10:37:44Z",
      "side": 1,
      "message": "I think this optimization is kind of unsound when A and B have different sign:\n\nSuppose we lowered Java",
      "revId": "84764a6945cc529cc72a809e0958fd88b5d5db7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77f728cf_2e0eef45",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2020-09-01T10:37:44Z",
      "side": 1,
      "message": "I actually think it\u0027s not clear this optimization is sound, since it can change if the node triggers an overflow or not, for example in a computation like MAX_INT + 1 - 1, which would turn into MAX_INT + 0 and no longer overflow. Now depending on how the overflow signal of the original operation was used, this could be a problem. A straightforward way how to avoid this issue would be to require that A and B have the same sign.",
      "parentUuid": "63e0e24e_227d3990",
      "revId": "84764a6945cc529cc72a809e0958fd88b5d5db7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "132ab9c4_56c6e1df",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2020-09-01T10:38:27Z",
      "side": 1,
      "message": "Sorry, ignore this, didn\u0027t want to send it.",
      "parentUuid": "ceff25c7_ca78afc2",
      "revId": "84764a6945cc529cc72a809e0958fd88b5d5db7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "621a53b6_f08ee4cf",
        "filename": "src/compiler/machine-operator-reducer.cc",
        "patchSetId": 9
      },
      "lineNbr": 1247,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2020-09-01T10:37:44Z",
      "side": 1,
      "message": "This seems wrong.",
      "range": {
        "startLine": 1247,
        "startChar": 14,
        "endLine": 1247,
        "endChar": 32
      },
      "revId": "84764a6945cc529cc72a809e0958fd88b5d5db7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}