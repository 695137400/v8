{
  "comments": [
    {
      "key": {
        "uuid": "2ed97b93_01d06f44",
        "filename": "src/ast/ast.h",
        "patchSetId": 4
      },
      "lineNbr": 2503,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-02-28T09:38:40Z",
      "side": 1,
      "message": "Style nit:\n\nA more common way to write this would be:\n\nenum YieldType {\n  kNormal \u003d 0,\n  kAwait \u003d 1 \u003c\u003c 0,\n  kDelegate \u003d 1 \u003c\u003c 1,\n  kAsyncGenerator \u003d 1 \u003c\u003c 2,\n  kAsyncGeneratorAwait \u003d kAsyncGenerator |  kAwait,\n  ...\n};\n\n\n(Check e.g., the enums in include/v8.h)\n\nWhy do you add kAsyncGeneratorNormal which is the same as kAsyncGenerator?",
      "range": {
        "startLine": 2503,
        "startChar": 4,
        "endLine": 2503,
        "endChar": 19
      },
      "revId": "9eafb6366c53d7928860da0964ccddf2636f9c61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1040ae7_fb3c1565",
        "filename": "src/ast/ast.h",
        "patchSetId": 4
      },
      "lineNbr": 2503,
      "author": {
        "id": 1162379
      },
      "writtenOn": "2017-02-28T14:26:51Z",
      "side": 1,
      "message": "It\u0027s more convenient to write (if needed) a single qualified name rather than `Qualified::Bit1 | Qualified::Bit2`, and the fact that there is a single qualified name for that set of bits implies that it\u0027s an expected and correct set of bits.\n\nDone.",
      "parentUuid": "2ed97b93_01d06f44",
      "range": {
        "startLine": 2503,
        "startChar": 4,
        "endLine": 2503,
        "endChar": 19
      },
      "revId": "9eafb6366c53d7928860da0964ccddf2636f9c61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c62a4bf_ea615311",
        "filename": "src/contexts.h",
        "patchSetId": 4
      },
      "lineNbr": 82,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2017-02-28T09:30:21Z",
      "side": 1,
      "message": "_INDEX",
      "range": {
        "startLine": 82,
        "startChar": 4,
        "endLine": 82,
        "endChar": 32
      },
      "revId": "9eafb6366c53d7928860da0964ccddf2636f9c61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1543fe02_32a81aad",
        "filename": "src/contexts.h",
        "patchSetId": 4
      },
      "lineNbr": 82,
      "author": {
        "id": 1162379
      },
      "writtenOn": "2017-02-28T14:26:51Z",
      "side": 1,
      "message": "I\u0027d strongly prefer not to add `_INDEX` --- these are very long identifiers, and `_INDEX` doesn\u0027t communicate anything useful here. There are also other cases in contexts.h that don\u0027t have it.\n\nMy vote is to start moving towards getting rid of the _INDEX suffix, at least for intrinsics. (look above: OBJECT_CREATE, IS_ARRAYLIKE, GENERATOR_NEXT_INTERNAL, OBJECT_FREEZE, etc etc)",
      "parentUuid": "0c62a4bf_ea615311",
      "range": {
        "startLine": 82,
        "startChar": 4,
        "endLine": 82,
        "endChar": 32
      },
      "revId": "9eafb6366c53d7928860da0964ccddf2636f9c61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f69b0422_f0ca3e9c",
        "filename": "src/parsing/parser-base.h",
        "patchSetId": 4
      },
      "lineNbr": 399,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-02-28T09:38:40Z",
      "side": 1,
      "message": "This indirection shouldn\u0027t be needed, why not just scope()-\u003easync_generator_await_variable() in the parser?",
      "range": {
        "startLine": 399,
        "startChar": 30,
        "endLine": 399,
        "endChar": 60
      },
      "revId": "9eafb6366c53d7928860da0964ccddf2636f9c61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa710936_bde52a97",
        "filename": "src/parsing/parser-base.h",
        "patchSetId": 4
      },
      "lineNbr": 399,
      "author": {
        "id": 1162379
      },
      "writtenOn": "2017-02-28T14:26:51Z",
      "side": 1,
      "message": "same could be said about all of these methods  ¯\\_(ツ)_/¯\n\nDone, I guess",
      "parentUuid": "f69b0422_f0ca3e9c",
      "range": {
        "startLine": 399,
        "startChar": 30,
        "endLine": 399,
        "endChar": 60
      },
      "revId": "9eafb6366c53d7928860da0964ccddf2636f9c61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1bffa540_dc5e9f21",
        "filename": "src/parsing/parser.cc",
        "patchSetId": 4
      },
      "lineNbr": 1764,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2017-02-28T09:30:21Z",
      "side": 1,
      "message": "Comment needs to be updated.",
      "revId": "9eafb6366c53d7928860da0964ccddf2636f9c61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e71a9fcb_c3da39dd",
        "filename": "src/parsing/parser.cc",
        "patchSetId": 4
      },
      "lineNbr": 1764,
      "author": {
        "id": 1162379
      },
      "writtenOn": "2017-02-28T14:26:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1bffa540_dc5e9f21",
      "revId": "9eafb6366c53d7928860da0964ccddf2636f9c61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e0210f8e_4a86569f",
        "filename": "src/parsing/parser.cc",
        "patchSetId": 4
      },
      "lineNbr": 3866,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2017-02-28T09:30:21Z",
      "side": 1,
      "message": "Comment would need to be updated.",
      "revId": "9eafb6366c53d7928860da0964ccddf2636f9c61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75df1fa0_c5696cbf",
        "filename": "src/parsing/parser.cc",
        "patchSetId": 4
      },
      "lineNbr": 3866,
      "author": {
        "id": 1162379
      },
      "writtenOn": "2017-02-28T14:26:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e0210f8e_4a86569f",
      "revId": "9eafb6366c53d7928860da0964ccddf2636f9c61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad933e0f_2ae8622e",
        "filename": "src/parsing/parser.cc",
        "patchSetId": 4
      },
      "lineNbr": 3911,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2017-02-28T09:30:21Z",
      "side": 1,
      "message": "These if/else blocks make this function hard to read IMO. Maybe pulling the NewCallRuntime in and merging the if/else blocks would help.",
      "revId": "9eafb6366c53d7928860da0964ccddf2636f9c61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df4f6267_11ed6c20",
        "filename": "src/parsing/parser.cc",
        "patchSetId": 4
      },
      "lineNbr": 3911,
      "author": {
        "id": 1162379
      },
      "writtenOn": "2017-02-28T14:26:51Z",
      "side": 1,
      "message": "I\u0027m not sure what you\u0027re asking for.\n\n- Split out common parts (adding generator_object and temp_var to ZoneList)?\n- Do the full ZoneList allocation/initialization and CallRuntime in each branch?\n- Get rid of the `else` and just specialize for `is_async_generator()` (which would require removal of some DCHECKs)?\n- Something else?",
      "parentUuid": "ad933e0f_2ae8622e",
      "revId": "9eafb6366c53d7928860da0964ccddf2636f9c61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b89cf6c5_b5397db4",
        "filename": "src/parsing/parser.cc",
        "patchSetId": 4
      },
      "lineNbr": 3911,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2017-02-28T14:40:43Z",
      "side": 1,
      "message": "I meant changing the structure from:\n\nif (is_async_gen) {\n  // block 1\n} else {\n  // block 2\n}\n\nNewCallRuntime\n\nif (is_async_gen) {\n  block 3\n} else {\n  block 4\n}\n\nto:\n\nif (is_async_gen) {\n  block 1\n  NewCallRuntime\n  block3\n} else {\n  block 2\n  NewCallRuntime\n  block 4\n}\n\nI\u0027m a bit worried in general that all the \u0027if (async_gen) else ...\u0027 conditionals popping up everywhere hurt readability.",
      "parentUuid": "df4f6267_11ed6c20",
      "revId": "9eafb6366c53d7928860da0964ccddf2636f9c61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "153dae36_aec9c0e5",
        "filename": "src/parsing/parser.cc",
        "patchSetId": 4
      },
      "lineNbr": 3911,
      "author": {
        "id": 1162379
      },
      "writtenOn": "2017-02-28T15:23:50Z",
      "side": 1,
      "message": "It\u0027s changed to\n\n```\nif (is_async_generator()) {\n  allocate and initialize arguments\n  NewCallRuntime\n  NewDoExpr\n  return BuildYield\n}\n\n// the non-generator version...\n```\n\nI didn\u0027t notice you still wanted the else-block to be an \"else block\" (this goes against webkit standards, where you don\u0027t use else blocks following an if block that ends with an unconditional return, which seems like a sensible rule to me). If you still prefer it, I\u0027ll add it before landing (whenever this is ready to land)",
      "parentUuid": "b89cf6c5_b5397db4",
      "revId": "9eafb6366c53d7928860da0964ccddf2636f9c61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4fe8d775_01b27df6",
        "filename": "src/runtime/runtime-generator.cc",
        "patchSetId": 4
      },
      "lineNbr": 84,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2017-02-28T09:30:21Z",
      "side": 1,
      "message": "I wonder if C++ runtime calls won\u0027t be a performance problem.",
      "revId": "9eafb6366c53d7928860da0964ccddf2636f9c61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ffc0e523_0606541a",
        "filename": "src/runtime/runtime-generator.cc",
        "patchSetId": 4
      },
      "lineNbr": 84,
      "author": {
        "id": 1162379
      },
      "writtenOn": "2017-02-28T14:26:51Z",
      "side": 1,
      "message": "worth a try, I guess. Still think optimized code should avoid calling into C++ for field accesses",
      "parentUuid": "4fe8d775_01b27df6",
      "revId": "9eafb6366c53d7928860da0964ccddf2636f9c61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}