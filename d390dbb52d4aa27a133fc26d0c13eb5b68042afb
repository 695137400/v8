{
  "comments": [
    {
      "key": {
        "uuid": "aebdeec8_6023aa48",
        "filename": "src/builtins/builtins-bigint-gen.cc",
        "patchSetId": 9
      },
      "lineNbr": 23,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2018-11-29T01:25:23Z",
      "side": 1,
      "message": "nit: useless comment",
      "range": {
        "startLine": 23,
        "startChar": 2,
        "endLine": 23,
        "endChar": 10
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d6e7e7f_bdde3a06",
        "filename": "src/builtins/builtins-bigint-gen.cc",
        "patchSetId": 9
      },
      "lineNbr": 23,
      "author": {
        "id": 1229060
      },
      "writtenOn": "2018-11-29T13:23:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aebdeec8_6023aa48",
      "range": {
        "startLine": 23,
        "startChar": 2,
        "endLine": 23,
        "endChar": 10
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b3d514f4_ec030820",
        "filename": "src/builtins/builtins-bigint-gen.cc",
        "patchSetId": 9
      },
      "lineNbr": 24,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2018-11-29T01:25:23Z",
      "side": 1,
      "message": "Please pull up the CASTs:\n\nTNode\u003cObject\u003e value \u003d CAST(Parameter(Descriptor::kArgument));\nTNode\u003cContext\u003e context \u003d CAST(Parameter(Descriptor::kContext));",
      "range": {
        "startLine": 24,
        "startChar": 2,
        "endLine": 24,
        "endChar": 49
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba9346a6_dc4037c7",
        "filename": "src/builtins/builtins-bigint-gen.cc",
        "patchSetId": 9
      },
      "lineNbr": 24,
      "author": {
        "id": 1229060
      },
      "writtenOn": "2018-11-29T13:23:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b3d514f4_ec030820",
      "range": {
        "startLine": 24,
        "startChar": 2,
        "endLine": 24,
        "endChar": 49
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ab28505_573102c0",
        "filename": "src/builtins/builtins-bigint-gen.cc",
        "patchSetId": 9
      },
      "lineNbr": 33,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2018-11-29T01:25:23Z",
      "side": 1,
      "message": "nit: stray comment?",
      "range": {
        "startLine": 33,
        "startChar": 2,
        "endLine": 33,
        "endChar": 30
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20c05dca_9a9f7918",
        "filename": "src/builtins/builtins-bigint-gen.cc",
        "patchSetId": 9
      },
      "lineNbr": 33,
      "author": {
        "id": 1229060
      },
      "writtenOn": "2018-11-29T13:23:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1ab28505_573102c0",
      "range": {
        "startLine": 33,
        "startChar": 2,
        "endLine": 33,
        "endChar": 30
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a17c90d_53927487",
        "filename": "src/builtins/builtins-bigint-gen.cc",
        "patchSetId": 9
      },
      "lineNbr": 44,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2018-11-29T01:25:23Z",
      "side": 1,
      "message": "Nope, maps are regular pointers, that\u0027s why this is crashing. I agree that it would be best to have two return values as Andreas suggests. Should that not be possible for any reason, then use CodeStubAssembler::AllocateHeapNumber() instead of custom size computations.",
      "range": {
        "startLine": 44,
        "startChar": 9,
        "endLine": 44,
        "endChar": 15
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be063696_26a56bcf",
        "filename": "src/builtins/builtins-bigint-gen.cc",
        "patchSetId": 9
      },
      "lineNbr": 44,
      "author": {
        "id": 1229060
      },
      "writtenOn": "2018-11-29T13:23:06Z",
      "side": 1,
      "message": "To be honest, returning a pointer doesn\u0027t make sense I think. The goal of the builtin is to unbox a HeapObject to its native equivalent. I would like to avoid to load a ptr or create another HeapObject to unbox later.",
      "parentUuid": "2a17c90d_53927487",
      "range": {
        "startLine": 44,
        "startChar": 9,
        "endLine": 44,
        "endChar": 15
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2c554ba_0b498679",
        "filename": "src/builtins/builtins-bigint-gen.cc",
        "patchSetId": 9
      },
      "lineNbr": 51,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2018-11-29T01:25:23Z",
      "side": 1,
      "message": "For the record, the correct thing to do here would be \"AllocateInNewSpace(HeapNumber::kSize)\", but the AllocateHeapNumber helper does that for you, so you don\u0027t even have to worry about it.",
      "range": {
        "startLine": 51,
        "startChar": 8,
        "endLine": 51,
        "endChar": 69
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bca61a9b_0ef00260",
        "filename": "src/builtins/builtins-bigint-gen.cc",
        "patchSetId": 9
      },
      "lineNbr": 51,
      "author": {
        "id": 1229060
      },
      "writtenOn": "2018-11-29T13:23:06Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a2c554ba_0b498679",
      "range": {
        "startLine": 51,
        "startChar": 8,
        "endLine": 51,
        "endChar": 69
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e5398472_128f998a",
        "filename": "src/builtins/builtins-bigint-gen.cc",
        "patchSetId": 9
      },
      "lineNbr": 56,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2018-11-29T01:25:23Z",
      "side": 1,
      "message": "heapObjectTag is never a valid offset. You want HeapNumber::kValueOffset.",
      "range": {
        "startLine": 56,
        "startChar": 24,
        "endLine": 56,
        "endChar": 37
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6bbae3c_2dcba0ce",
        "filename": "src/builtins/builtins-bigint-gen.cc",
        "patchSetId": 9
      },
      "lineNbr": 56,
      "author": {
        "id": 1229060
      },
      "writtenOn": "2018-11-29T13:23:06Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e5398472_128f998a",
      "range": {
        "startLine": 56,
        "startChar": 24,
        "endLine": 56,
        "endChar": 37
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3797a98_de390a87",
        "filename": "src/builtins/builtins-bigint-gen.cc",
        "patchSetId": 9
      },
      "lineNbr": 63,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2018-11-28T17:45:37Z",
      "side": 1,
      "message": "I think it would be nicer to let the builtin return 2 values here instead of returning the result over the heap. See https://cs.chromium.org/chromium/src/v8/src/interface-descriptors.h?l\u003d1062 on how to make such a CallInterfaceDescriptor. \n\nReturning 2 values seems to be supported, see https://cs.chromium.org/chromium/src/v8/src/compiler/code-assembler.cc?l\u003d418. To access the returned values you have to use Projection nodes (https://cs.chromium.org/chromium/src/v8/src/compiler/int64-lowering.cc?l\u003d1051).",
      "range": {
        "startLine": 63,
        "startChar": 4,
        "endLine": 63,
        "endChar": 19
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad481bd3_ae59451b",
        "filename": "src/builtins/builtins-bigint-gen.cc",
        "patchSetId": 9
      },
      "lineNbr": 63,
      "author": {
        "id": 1229060
      },
      "writtenOn": "2018-11-29T13:23:06Z",
      "side": 1,
      "message": "I agree, which would remove the entire ptr issue described in the above comments. I actually already this and ran into an invalid assertion (I think it was about projection requiring one node with two ouputs, where I have two nodes with each one output), but now I have the confirmation that it should be feasable. I\u0027ll dig into it again.",
      "parentUuid": "d3797a98_de390a87",
      "range": {
        "startLine": 63,
        "startChar": 4,
        "endLine": 63,
        "endChar": 19
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "172a9c8e_8cd5018d",
        "filename": "src/builtins/builtins-bigint-gen.cc",
        "patchSetId": 9
      },
      "lineNbr": 70,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2018-11-29T01:25:23Z",
      "side": 1,
      "message": "I don\u0027t think this variable is needed. Just drop it, and make the last line:\n\nReturn(BigIntFromInt64(argument));",
      "range": {
        "startLine": 70,
        "startChar": 4,
        "endLine": 70,
        "endChar": 36
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25f063ad_eafe5c36",
        "filename": "src/builtins/builtins-bigint-gen.cc",
        "patchSetId": 9
      },
      "lineNbr": 70,
      "author": {
        "id": 1229060
      },
      "writtenOn": "2018-11-29T13:23:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "172a9c8e_8cd5018d",
      "range": {
        "startLine": 70,
        "startChar": 4,
        "endLine": 70,
        "endChar": 36
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "00534476_0f6c77f0",
        "filename": "src/builtins/builtins-bigint-gen.cc",
        "patchSetId": 9
      },
      "lineNbr": 72,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2018-11-28T17:45:37Z",
      "side": 1,
      "message": "Would it not be better to use TNode\u003cInt64T\u003e here? https://cs.chromium.org/chromium/src/v8/src/compiler/code-assembler.h?l\u003d774",
      "range": {
        "startLine": 72,
        "startChar": 4,
        "endLine": 72,
        "endChar": 18
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "022c5da4_d745c3df",
        "filename": "src/builtins/builtins-bigint-gen.cc",
        "patchSetId": 9
      },
      "lineNbr": 72,
      "author": {
        "id": 1229060
      },
      "writtenOn": "2018-11-28T18:28:22Z",
      "side": 1,
      "message": "The argument of BigIntFromInt64 (https://cs.chromium.org/chromium/src/v8/src/code-stub-assembler.cc?type\u003dcs\u0026q\u003dBigIntFromInt64\u0026g\u003d0\u0026l\u003d2090) is a TNode\u003cIntPtrT\u003e. I think we can avoid the unnecessary casting and given the condition above, it\u0027s easily understandable.",
      "parentUuid": "00534476_0f6c77f0",
      "range": {
        "startLine": 72,
        "startChar": 4,
        "endLine": 72,
        "endChar": 18
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e111729_5d632a73",
        "filename": "src/builtins/builtins-bigint-gen.cc",
        "patchSetId": 9
      },
      "lineNbr": 77,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2018-11-29T01:25:23Z",
      "side": 1,
      "message": "You mean CSA_ASSERT, but the entire check is unnecessary. BigIntFromInt64 returns a TNode\u003cBigInt\u003e, it\u0027s fine to trust that.",
      "range": {
        "startLine": 76,
        "startChar": 4,
        "endLine": 77,
        "endChar": 0
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7eb76dc6_661ee7c5",
        "filename": "src/builtins/builtins-bigint-gen.cc",
        "patchSetId": 9
      },
      "lineNbr": 77,
      "author": {
        "id": 1229060
      },
      "writtenOn": "2018-11-29T13:23:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4e111729_5d632a73",
      "range": {
        "startLine": 76,
        "startChar": 4,
        "endLine": 77,
        "endChar": 0
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa6d00d3_2bcda11f",
        "filename": "src/builtins/builtins-bigint-gen.cc",
        "patchSetId": 9
      },
      "lineNbr": 87,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2018-11-29T01:25:23Z",
      "side": 1,
      "message": "same here, just drop it",
      "range": {
        "startLine": 87,
        "startChar": 4,
        "endLine": 87,
        "endChar": 36
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b7ee9fa_79871df5",
        "filename": "src/builtins/builtins-bigint-gen.cc",
        "patchSetId": 9
      },
      "lineNbr": 87,
      "author": {
        "id": 1229060
      },
      "writtenOn": "2018-11-29T13:23:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aa6d00d3_2bcda11f",
      "range": {
        "startLine": 87,
        "startChar": 4,
        "endLine": 87,
        "endChar": 36
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f014e4a0_850d9705",
        "filename": "src/builtins/builtins-bigint-gen.cc",
        "patchSetId": 9
      },
      "lineNbr": 89,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2018-11-28T17:45:37Z",
      "side": 1,
      "message": "Same here, I think it would be better to use TNode\u003cInt64T\u003e here I guess.",
      "range": {
        "startLine": 89,
        "startChar": 4,
        "endLine": 89,
        "endChar": 18
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75cf8f6f_e1bdd76f",
        "filename": "src/builtins/builtins-bigint-gen.cc",
        "patchSetId": 9
      },
      "lineNbr": 89,
      "author": {
        "id": 1229060
      },
      "writtenOn": "2018-11-28T18:28:22Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f014e4a0_850d9705",
      "range": {
        "startLine": 89,
        "startChar": 4,
        "endLine": 89,
        "endChar": 18
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dad754cc_5835295b",
        "filename": "src/builtins/builtins-bigint-gen.cc",
        "patchSetId": 9
      },
      "lineNbr": 93,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2018-11-29T01:25:23Z",
      "side": 1,
      "message": "same here, just drop it",
      "range": {
        "startLine": 93,
        "startChar": 4,
        "endLine": 93,
        "endChar": 43
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b3e3666_f5ec2ad3",
        "filename": "src/builtins/builtins-bigint-gen.cc",
        "patchSetId": 9
      },
      "lineNbr": 93,
      "author": {
        "id": 1229060
      },
      "writtenOn": "2018-11-29T13:23:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dad754cc_5835295b",
      "range": {
        "startLine": 93,
        "startChar": 4,
        "endLine": 93,
        "endChar": 43
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54b323e5_9c6b4cce",
        "filename": "src/builtins/builtins-wasm-gen.cc",
        "patchSetId": 9
      },
      "lineNbr": 185,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2018-11-29T01:25:23Z",
      "side": 1,
      "message": "NoContextConstant();\n\nOr just inline it into its only usage site.",
      "range": {
        "startLine": 185,
        "startChar": 20,
        "endLine": 185,
        "endChar": 55
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ec4bf2e_ac630069",
        "filename": "src/builtins/builtins-wasm-gen.cc",
        "patchSetId": 9
      },
      "lineNbr": 185,
      "author": {
        "id": 1229060
      },
      "writtenOn": "2018-11-29T13:23:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "54b323e5_9c6b4cce",
      "range": {
        "startLine": 185,
        "startChar": 20,
        "endLine": 185,
        "endChar": 55
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "88f41e12_a490db87",
        "filename": "src/builtins/builtins-wasm-gen.cc",
        "patchSetId": 9
      },
      "lineNbr": 189,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2018-11-29T01:25:23Z",
      "side": 1,
      "message": "Can you elaborate on why the two-builtin design with a tail call is needed? I see in your design doc that the Wasm builtins need to be PIC; but why don\u0027t you inline the other builtin here? AFAICS this is its only call. Am I missing something?",
      "range": {
        "startLine": 189,
        "startChar": 4,
        "endLine": 189,
        "endChar": 16
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "801729f2_7fa26b50",
        "filename": "src/builtins/builtins-wasm-gen.cc",
        "patchSetId": 9
      },
      "lineNbr": 189,
      "author": {
        "id": 1229060
      },
      "writtenOn": "2018-11-29T13:23:06Z",
      "side": 1,
      "message": "I heard that some validations around the PICness of builtin changed. I think that it doesn\u0027t apply to Wasm calls tho. I did many experimentation at the beginning but as far as I remember it didn\u0027t worked, and it\u0027s consistent with the other calls above.\n\nI\u0027ll dig into it.",
      "parentUuid": "88f41e12_a490db87",
      "range": {
        "startLine": 189,
        "startChar": 4,
        "endLine": 189,
        "endChar": 16
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cde4e942_d1243d25",
        "filename": "src/builtins/builtins-wasm-gen.cc",
        "patchSetId": 9
      },
      "lineNbr": 200,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2018-11-29T01:25:23Z",
      "side": 1,
      "message": "same",
      "range": {
        "startLine": 199,
        "startChar": 20,
        "endLine": 200,
        "endChar": 0
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e67fb4f7_4b65127b",
        "filename": "src/builtins/builtins-wasm-gen.cc",
        "patchSetId": 9
      },
      "lineNbr": 200,
      "author": {
        "id": 1229060
      },
      "writtenOn": "2018-11-29T13:23:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cde4e942_d1243d25",
      "range": {
        "startLine": 199,
        "startChar": 20,
        "endLine": 200,
        "endChar": 0
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "716a06ff_6b0e079f",
        "filename": "src/compiler/int64-lowering.cc",
        "patchSetId": 9
      },
      "lineNbr": 356,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2018-11-28T17:45:37Z",
      "side": 1,
      "message": "I am not convinced of this detection of Int64ToBigInt and BigIntToInt64 calls. I think a nice solution would actually be to create just a placeholder node in wasm-compiler.cc which is easy to detect. However, I discussed this with colleagues, and we were not able to figure out how such a placeholder could fit nicely into the existing system.\n\nThe best approach for now seems to be cache the targets of the Int64ToBigInt and BigIntToInt64 call nodes so that there exist exactly one node each. Then you pass pointers to these nodes to the int64lowering. When you lower a Call node, you can compare the target of the Call with these pointers to check if special lowering is necessary. Please also add a TODO that we should clean this up eventually, you can also mention that we could use a special placeholder instead of a Call node with a special target.",
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5deb645_cbcdec10",
        "filename": "src/compiler/int64-lowering.cc",
        "patchSetId": 9
      },
      "lineNbr": 356,
      "author": {
        "id": 1229060
      },
      "writtenOn": "2018-11-29T13:23:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "716a06ff_6b0e079f",
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0523189b_bfce634c",
        "filename": "src/compiler/wasm-compiler.cc",
        "patchSetId": 9
      },
      "lineNbr": 4474,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2018-11-28T17:45:37Z",
      "side": 1,
      "message": "Is it necessary to do this distinction between 32-bit and 64-bit platform here? I think it would be nicer to just change the target in the int64-lowering.",
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd6d404b_a8fedbe6",
        "filename": "src/compiler/wasm-compiler.cc",
        "patchSetId": 9
      },
      "lineNbr": 4474,
      "author": {
        "id": 1229060
      },
      "writtenOn": "2018-11-29T13:23:06Z",
      "side": 1,
      "message": "The int64-lowering is currently not Wasm specific, it\u0027s part of the compiler. I doubt JavaScript will use it tho.\n\nI think we either leave this Wasm specific lowering code here or make the lowering pass Wasm specific. What do you thing?",
      "parentUuid": "0523189b_bfce634c",
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c94efc9c_c3869407",
        "filename": "src/compiler/wasm-compiler.cc",
        "patchSetId": 9
      },
      "lineNbr": 4481,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2018-11-28T17:45:37Z",
      "side": 1,
      "message": "You could cache the target and use the same node for all Int64ToBigInt conversions. You can then use this node to identify kWasmNewBigInt-builtin calls in the int64-lowering. I added a more detailed comment there.",
      "range": {
        "startLine": 4481,
        "startChar": 6,
        "endLine": 4481,
        "endChar": 12
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58fb81cf_faedda2a",
        "filename": "src/compiler/wasm-compiler.cc",
        "patchSetId": 9
      },
      "lineNbr": 4481,
      "author": {
        "id": 1229060
      },
      "writtenOn": "2018-11-29T13:23:06Z",
      "side": 1,
      "message": "Currently only caches the CallDescriptor because it\u0027s the minimum not specific needed, see my previous comment.",
      "parentUuid": "c94efc9c_c3869407",
      "range": {
        "startLine": 4481,
        "startChar": 6,
        "endLine": 4481,
        "endChar": 12
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4dd3f447_38c9383e",
        "filename": "src/compiler/wasm-compiler.cc",
        "patchSetId": 9
      },
      "lineNbr": 5623,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2018-11-28T17:45:37Z",
      "side": 1,
      "message": "Would it be possible to have this function in int64-lowering.cc?",
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2ca5cc2_13d2b9ad",
        "filename": "src/compiler/wasm-compiler.cc",
        "patchSetId": 9
      },
      "lineNbr": 5623,
      "author": {
        "id": 1229060
      },
      "writtenOn": "2018-11-28T18:28:22Z",
      "side": 1,
      "message": "Sure, I moved it here because we already use GetI32WasmCallDescriptor or GetI32WasmCallDescriptorForSimd from int64-lowering.cc, it seems more consistent. Should I still move it?",
      "parentUuid": "4dd3f447_38c9383e",
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "353fcc01_6ac8f95e",
        "filename": "src/compiler/wasm-compiler.cc",
        "patchSetId": 9
      },
      "lineNbr": 5623,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2018-11-29T01:25:23Z",
      "side": 1,
      "message": "Do you even need this? Why can\u0027t you use the existing GetI32WasmCallDescriptor mechanism? It sounds like replacing one int64 parameter/result with two int32 values is exactly what you want.",
      "parentUuid": "e2ca5cc2_13d2b9ad",
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f76197c0_b8ca7f8b",
        "filename": "src/compiler/wasm-compiler.cc",
        "patchSetId": 9
      },
      "lineNbr": 5623,
      "author": {
        "id": 1229060
      },
      "writtenOn": "2018-11-29T14:03:59Z",
      "side": 1,
      "message": "That\u0027s right, I\u0027ll refactor this, thanks.",
      "parentUuid": "353fcc01_6ac8f95e",
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b4389a1_503557ba",
        "filename": "src/compiler/wasm-compiler.h",
        "patchSetId": 9
      },
      "lineNbr": 85,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2018-11-29T01:25:23Z",
      "side": 1,
      "message": "naming nit: snake_case for variable names please: has_bigint_feature.",
      "range": {
        "startLine": 85,
        "startChar": 46,
        "endLine": 85,
        "endChar": 62
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f443cd1_3c42c582",
        "filename": "src/compiler/wasm-compiler.h",
        "patchSetId": 9
      },
      "lineNbr": 85,
      "author": {
        "id": 1229060
      },
      "writtenOn": "2018-11-29T13:23:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9b4389a1_503557ba",
      "range": {
        "startLine": 85,
        "startChar": 46,
        "endLine": 85,
        "endChar": 62
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d8983a2_688fdb1d",
        "filename": "src/interface-descriptors.h",
        "patchSetId": 9
      },
      "lineNbr": 1112,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2018-11-29T01:25:23Z",
      "side": 1,
      "message": "These descriptor names sound very generic, but they\u0027re used for quite specific things, so how about reflecting that in the name? Suggestion: WasmI64ToBigIntDescriptor and WasmBigIntToI64Descriptor. Or are you foreseeing usage for other purposes in the future?",
      "range": {
        "startLine": 1112,
        "startChar": 6,
        "endLine": 1112,
        "endChar": 46
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4faa0b2_dc67ec8a",
        "filename": "src/interface-descriptors.h",
        "patchSetId": 9
      },
      "lineNbr": 1112,
      "author": {
        "id": 1229060
      },
      "writtenOn": "2018-11-29T14:03:59Z",
      "side": 1,
      "message": "There might be future usages with the BigInt64Array TypedArray, currently it\u0027s using the C++ BigInt runtime. I think it\u0027s a good idea to rename it now to something more meaningfull and renaming it later if needed.",
      "parentUuid": "4d8983a2_688fdb1d",
      "range": {
        "startLine": 1112,
        "startChar": 6,
        "endLine": 1112,
        "endChar": 46
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4ab3a34_a606b277",
        "filename": "src/interface-descriptors.h",
        "patchSetId": 9
      },
      "lineNbr": 1122,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2018-11-29T01:25:23Z",
      "side": 1,
      "message": "How about having a single descriptor, and an \"#ifdef V8_HOST_ARCH_32_BIT\" inside? Then you can also have a single stub, where the \"Is64()\" branch serves the same goal. (You can then even drop the introduction of \"Is32()\".)",
      "range": {
        "startLine": 1122,
        "startChar": 6,
        "endLine": 1122,
        "endChar": 48
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8434621_12d1caae",
        "filename": "src/interface-descriptors.h",
        "patchSetId": 9
      },
      "lineNbr": 1122,
      "author": {
        "id": 1229060
      },
      "writtenOn": "2018-11-29T14:03:59Z",
      "side": 1,
      "message": "Sorry I don\u0027t understand what you mean. V8_HOST_ARCH_32_BIT is at V8\u0027s compile time. We need to include both CallDescriptors and use the correct one at \"runtime\".",
      "parentUuid": "e4ab3a34_a606b277",
      "range": {
        "startLine": 1122,
        "startChar": 6,
        "endLine": 1122,
        "endChar": 48
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d579614_79ab8f0f",
        "filename": "src/wasm/wasm-js.cc",
        "patchSetId": 9
      },
      "lineNbr": 1107,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2018-11-29T01:25:23Z",
      "side": 1,
      "message": "What if someone passes a non-BigInt?\nIf that\u0027s guaranteed not to happen, then please change \"!value-\u003eIsUndefined\" to \"value-\u003eIsBigInt\".\nIf it can happen, then you need to call i::BigInt::FromObject() (which isn\u0027t exposed on the external v8::BigInt yet). And please add a test that this case is handled correctly.",
      "range": {
        "startLine": 1107,
        "startChar": 25,
        "endLine": 1107,
        "endChar": 37
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "271340f8_61fb2950",
        "filename": "src/wasm/wasm-js.cc",
        "patchSetId": 9
      },
      "lineNbr": 1107,
      "author": {
        "id": 1229060
      },
      "writtenOn": "2018-11-29T14:03:59Z",
      "side": 1,
      "message": "Good catch, this is indeed possible and untested currently.",
      "parentUuid": "4d579614_79ab8f0f",
      "range": {
        "startLine": 1107,
        "startChar": 25,
        "endLine": 1107,
        "endChar": 37
      },
      "revId": "d390dbb52d4aa27a133fc26d0c13eb5b68042afb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}