{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5cd9830e_9f4ff7f7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2021-06-14T15:06:27Z",
      "side": 1,
      "message": "PTAL, this is how the change would look like if we block on Liftoff compilation.\n\nI think we should go for the synchronous way for now. Maybe we should add a counter to measure how long deserialization takes, and make it synchronously when it gets too long.",
      "revId": "d522c0b31353f40f3593f97964d411935d06c4be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5c46b2a5_5d195a5c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2021-06-16T14:39:21Z",
      "side": 1,
      "message": "Sorry for the delay. Left a number of comments, most importantly I wonder why we would never tier up to TurboFan after deserializing a partial module.",
      "revId": "d522c0b31353f40f3593f97964d411935d06c4be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d62eaca_c3cbcb2f",
        "filename": "src/wasm/compilation-environment.h",
        "patchSetId": 3
      },
      "lineNbr": 130,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2021-06-16T14:39:21Z",
      "side": 1,
      "message": "Please make this a {Vector\u003cint\u003e} (passed by value), as the most general thing we want to accept.",
      "revId": "d522c0b31353f40f3593f97964d411935d06c4be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d2b3b12_04d482fd",
        "filename": "src/wasm/compilation-environment.h",
        "patchSetId": 3
      },
      "lineNbr": 130,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2021-06-18T09:13:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6d62eaca_c3cbcb2f",
      "revId": "d522c0b31353f40f3593f97964d411935d06c4be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9abe967_86e2924e",
        "filename": "src/wasm/module-compiler.cc",
        "patchSetId": 3
      },
      "lineNbr": 557,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2021-06-16T14:39:21Z",
      "side": 1,
      "message": "Same here.",
      "revId": "d522c0b31353f40f3593f97964d411935d06c4be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b1b83cb5_9665753d",
        "filename": "src/wasm/module-compiler.cc",
        "patchSetId": 3
      },
      "lineNbr": 557,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2021-06-18T09:13:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a9abe967_86e2924e",
      "revId": "d522c0b31353f40f3593f97964d411935d06c4be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1a7476ef_3261ffc3",
        "filename": "src/wasm/module-compiler.cc",
        "patchSetId": 3
      },
      "lineNbr": 557,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2021-06-18T09:13:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a9abe967_86e2924e",
      "revId": "d522c0b31353f40f3593f97964d411935d06c4be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3244efb8_126885d5",
        "filename": "src/wasm/module-compiler.cc",
        "patchSetId": 3
      },
      "lineNbr": 1442,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2021-06-16T14:39:21Z",
      "side": 1,
      "message": "I was wondering at first why we always add debugging units here, until I realized that \"prefer_liftoff\" actually means \"is_tiered_down\". Can we rename that variable?",
      "revId": "d522c0b31353f40f3593f97964d411935d06c4be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c6c8bd8_2865aeb8",
        "filename": "src/wasm/module-compiler.cc",
        "patchSetId": 3
      },
      "lineNbr": 1442,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2021-06-18T09:13:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3244efb8_126885d5",
      "revId": "d522c0b31353f40f3593f97964d411935d06c4be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1a2af37_d9efeaa4",
        "filename": "src/wasm/module-compiler.cc",
        "patchSetId": 3
      },
      "lineNbr": 2916,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2021-06-16T14:39:21Z",
      "side": 1,
      "message": "Can we share more code between the two arms here? {CompilationUnitBuilder::Commit} is cheap if there is nothing to commit, so we could just always have this. I.e.\n\nCompilationUnitBuilder ...\n{\n  base::MutexGuard ...\n  DCHECK ...\n  compilation_progress.assign ...\n  if (missing_functions.empty()) {\n    ...\n    // Maybe even return here?\n  } else {\n    ...\n  }\n}\nbuilder.Commit();",
      "revId": "d522c0b31353f40f3593f97964d411935d06c4be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4ab99cc2_737e7e82",
        "filename": "src/wasm/module-compiler.cc",
        "patchSetId": 3
      },
      "lineNbr": 2916,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2021-06-18T09:13:18Z",
      "side": 1,
      "message": "I guess it\u0027s a tradeoff here between readability, which would benefit from having two independent code blocks, and maintainability, which would benefit from code sharing.\n\nPersonally I would prefer readability, but I don\u0027t care too much about it, so I added the code sharing you suggested.",
      "parentUuid": "c1a2af37_d9efeaa4",
      "revId": "d522c0b31353f40f3593f97964d411935d06c4be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3288d39_045ef463",
        "filename": "src/wasm/module-compiler.cc",
        "patchSetId": 3
      },
      "lineNbr": 2933,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2021-06-16T14:39:21Z",
      "side": 1,
      "message": "In order to be consistent with standard AOT compilation, shouldn\u0027t we schedule both a Liftoff and a TurboFan unit (depending on the flags of course), and set the correct top tier here?\n(Basically what {InitializeCompilationProgress} does, so we should factor out some common code.)",
      "revId": "d522c0b31353f40f3593f97964d411935d06c4be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e5a3f3fc_9fb04842",
        "filename": "src/wasm/module-compiler.cc",
        "patchSetId": 3
      },
      "lineNbr": 2933,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2021-06-18T09:13:18Z",
      "side": 1,
      "message": "But wouldn\u0027t that be weird? The reason why I do this change is to allow serialization of a wasm module that did not get tiered up completely. So if we did not want to tier up the function before serialization, why would we want to tier up the function after deserialization?\n\nI guess there is the scenario if a user leaves a page before tier-up is completed, then we could cache the current state and continue tier-up after deserialization. However, I\u0027m not sure that we should optimize for such a scenario.",
      "parentUuid": "a3288d39_045ef463",
      "revId": "d522c0b31353f40f3593f97964d411935d06c4be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bed51d83_93868766",
        "filename": "src/wasm/module-compiler.cc",
        "patchSetId": 3
      },
      "lineNbr": 2933,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2021-06-18T10:36:37Z",
      "side": 1,
      "message": "I would have tried to keep the two issues (serialization and tier-up) as separate as possible, i.e. not changing our tier-up strategy based on the serialized state. For now, our tier-up strategy is \"always tier up to TF\", and I think we could (and should) keep it like that for now, even if we deserialize a partial module (wherever that might come from). This will change later, of course.\n\nI.e. the overall strategy would be:\n1. Deserialize everything we have.\n2. Depending on flags etc decide which functions need (re-)compilation.\n\nAnd this CL would be about the first point only.",
      "parentUuid": "e5a3f3fc_9fb04842",
      "revId": "d522c0b31353f40f3593f97964d411935d06c4be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "211572d9_045c95f0",
        "filename": "src/wasm/module-compiler.cc",
        "patchSetId": 3
      },
      "lineNbr": 2933,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2021-07-27T12:51:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bed51d83_93868766",
      "revId": "d522c0b31353f40f3593f97964d411935d06c4be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b665b3c4_f746fb1a",
        "filename": "src/wasm/module-compiler.cc",
        "patchSetId": 3
      },
      "lineNbr": 3011,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2021-06-16T14:39:21Z",
      "side": 1,
      "message": "Please compute this once, right after {new_tier} above (to be consistent with {new_tier}).",
      "revId": "d522c0b31353f40f3593f97964d411935d06c4be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9cc0502e_f70f8fbd",
        "filename": "src/wasm/module-compiler.cc",
        "patchSetId": 3
      },
      "lineNbr": 3011,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2021-06-18T09:13:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b665b3c4_f746fb1a",
      "revId": "d522c0b31353f40f3593f97964d411935d06c4be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc9542fa_d0387831",
        "filename": "src/wasm/wasm-serialization.cc",
        "patchSetId": 3
      },
      "lineNbr": 534,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2021-06-16T14:39:21Z",
      "side": 1,
      "message": "This could directly return a Vector\u003cint\u003e, since no caller relies on this being a std::vector.",
      "revId": "d522c0b31353f40f3593f97964d411935d06c4be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ea59d8f9_629cb8c9",
        "filename": "src/wasm/wasm-serialization.cc",
        "patchSetId": 3
      },
      "lineNbr": 534,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2021-06-18T09:13:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bc9542fa_d0387831",
      "revId": "d522c0b31353f40f3593f97964d411935d06c4be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b528d29_fabb85eb",
        "filename": "src/wasm/wasm-serialization.cc",
        "patchSetId": 3
      },
      "lineNbr": 694,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2021-06-16T14:39:21Z",
      "side": 1,
      "message": "Just push_back, for simplicity.",
      "revId": "d522c0b31353f40f3593f97964d411935d06c4be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3881b6c4_996d3e96",
        "filename": "src/wasm/wasm-serialization.cc",
        "patchSetId": 3
      },
      "lineNbr": 694,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2021-06-18T09:13:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2b528d29_fabb85eb",
      "revId": "d522c0b31353f40f3593f97964d411935d06c4be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1126ad7e_4aea073b",
        "filename": "src/wasm/wasm-serialization.cc",
        "patchSetId": 3
      },
      "lineNbr": 874,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2021-06-16T14:39:21Z",
      "side": 1,
      "message": "Should we make this part of {InitializeAfterDeserialization}? Or is there any path where it\u0027s allowed to initialize without waiting for baseline finished afterwards?",
      "revId": "d522c0b31353f40f3593f97964d411935d06c4be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6b6a42d5_c35138cf",
        "filename": "src/wasm/wasm-serialization.cc",
        "patchSetId": 3
      },
      "lineNbr": 874,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2021-06-18T09:13:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1126ad7e_4aea073b",
      "revId": "d522c0b31353f40f3593f97964d411935d06c4be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}