{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "96b90ca6_608e1f45",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1440073
      },
      "writtenOn": "2024-04-19T18:07:55Z",
      "side": 1,
      "message": "Could you please take a look, Jakob?",
      "revId": "2eb63b89534c18272a989a9c1d26bb4b4058c5ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "abb6e865_6300f4a2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2024-04-22T13:28:53Z",
      "side": 1,
      "message": "LGTM with some nits.",
      "revId": "2eb63b89534c18272a989a9c1d26bb4b4058c5ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d839786_14e63315",
        "filename": "src/wasm/fuzzing/random-module-generation.cc",
        "patchSetId": 8
      },
      "lineNbr": 929,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2024-04-22T13:28:53Z",
      "side": 1,
      "message": "nit: useless comment\n\n(Rule of thumb: comments should explain why, not what. When the code says `memory_index \u003d get(...)`, a comment saying \"get the memory index\" doesn\u0027t add any value.)",
      "range": {
        "startLine": 929,
        "startChar": 4,
        "endLine": 929,
        "endChar": 31
      },
      "revId": "2eb63b89534c18272a989a9c1d26bb4b4058c5ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "376e201b_80e21d89",
        "filename": "src/wasm/fuzzing/random-module-generation.cc",
        "patchSetId": 8
      },
      "lineNbr": 929,
      "author": {
        "id": 1440073
      },
      "writtenOn": "2024-04-22T14:56:10Z",
      "side": 1,
      "message": "Done (4 locations removed)",
      "parentUuid": "4d839786_14e63315",
      "range": {
        "startLine": 929,
        "startChar": 4,
        "endLine": 929,
        "endChar": 31
      },
      "revId": "2eb63b89534c18272a989a9c1d26bb4b4058c5ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "956e57a1_39679f27",
        "filename": "src/wasm/fuzzing/random-module-generation.cc",
        "patchSetId": 8
      },
      "lineNbr": 948,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2024-04-22T13:28:53Z",
      "side": 1,
      "message": "AFAICS the `memory_index` is always specified to be a 32-bit ULEB, so this comment seems to be a misunderstanding. Perhaps it was meant to refer to `offset`?",
      "range": {
        "startLine": 947,
        "startChar": 7,
        "endLine": 948,
        "endChar": 52
      },
      "revId": "2eb63b89534c18272a989a9c1d26bb4b4058c5ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "adb64d2f_b0e1544f",
        "filename": "src/wasm/fuzzing/random-module-generation.cc",
        "patchSetId": 8
      },
      "lineNbr": 948,
      "author": {
        "id": 1440073
      },
      "writtenOn": "2024-04-22T14:56:10Z",
      "side": 1,
      "message": "I meant it for the `memory_index`, because in the [function-body-decoder-impl.h](https://source.chromium.org/chromium/chromium/src/+/main:v8/src/wasm/function-body-decoder-impl.h;l\u003d860?q\u003dfunction-body-decoder-impl.h) we always read only a 32-bit value, though the memory64 proposal allows to use 64-bit values for the memory index.",
      "parentUuid": "956e57a1_39679f27",
      "range": {
        "startLine": 947,
        "startChar": 7,
        "endLine": 948,
        "endChar": 52
      },
      "revId": "2eb63b89534c18272a989a9c1d26bb4b4058c5ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f704b73c_378b769c",
        "filename": "src/wasm/fuzzing/random-module-generation.cc",
        "patchSetId": 8
      },
      "lineNbr": 948,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2024-04-22T15:26:21Z",
      "side": 1,
      "message": "The memory64 proposal allows 64-bit indices *into* memory, but this is the index *of* the memory. There can\u0027t be more than `2**32` memories. (In fact, in this fuzzer, there can only be 5.)",
      "parentUuid": "adb64d2f_b0e1544f",
      "range": {
        "startLine": 947,
        "startChar": 7,
        "endLine": 948,
        "endChar": 52
      },
      "revId": "2eb63b89534c18272a989a9c1d26bb4b4058c5ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fefd2f11_4ebf0ea2",
        "filename": "src/wasm/fuzzing/random-module-generation.cc",
        "patchSetId": 8
      },
      "lineNbr": 948,
      "author": {
        "id": 1440073
      },
      "writtenOn": "2024-04-22T16:43:39Z",
      "side": 1,
      "message": "Deleted the comment!",
      "parentUuid": "f704b73c_378b769c",
      "range": {
        "startLine": 947,
        "startChar": 7,
        "endLine": 948,
        "endChar": 52
      },
      "revId": "2eb63b89534c18272a989a9c1d26bb4b4058c5ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "653ba5e1_13606127",
        "filename": "src/wasm/fuzzing/random-module-generation.cc",
        "patchSetId": 8
      },
      "lineNbr": 950,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2024-04-22T13:28:53Z",
      "side": 1,
      "message": "This can remain `EmitU32V`, as `offset` is a `uint32_t`.\n\nThat said, perhaps a `TODO(evih): For memory64, we should sometimes generate offsets outside uint32 range` would be appropriate? Or you could extend the block in line 926 right away: change the type of `offset`, and if it\u0027s a memory64, make the rare very large pseudo-random offset be up to `0x1\u0027ffff\u0027ffff`.",
      "range": {
        "startLine": 950,
        "startChar": 14,
        "endLine": 950,
        "endChar": 22
      },
      "revId": "2eb63b89534c18272a989a9c1d26bb4b4058c5ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48191e5f_362a98cb",
        "filename": "src/wasm/fuzzing/random-module-generation.cc",
        "patchSetId": 8
      },
      "lineNbr": 950,
      "author": {
        "id": 1440073
      },
      "writtenOn": "2024-04-22T14:56:10Z",
      "side": 1,
      "message": "Done. \n(Why exactly this 0x1\u0027ffff\u0027ffff upper limit?)",
      "parentUuid": "653ba5e1_13606127",
      "range": {
        "startLine": 950,
        "startChar": 14,
        "endLine": 950,
        "endChar": 22
      },
      "revId": "2eb63b89534c18272a989a9c1d26bb4b4058c5ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e920150_51f8f9c5",
        "filename": "src/wasm/fuzzing/random-module-generation.cc",
        "patchSetId": 8
      },
      "lineNbr": 950,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2024-04-22T15:26:21Z",
      "side": 1,
      "message": "My thinking was \"a few more bits than 32\", so e.g. 33 or 34 bits. Going too high doesn\u0027t make sense because we can\u0027t allocate truly huge memories anyway.",
      "parentUuid": "48191e5f_362a98cb",
      "range": {
        "startLine": 950,
        "startChar": 14,
        "endLine": 950,
        "endChar": 22
      },
      "revId": "2eb63b89534c18272a989a9c1d26bb4b4058c5ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "60326c89_681b39bd",
        "filename": "src/wasm/fuzzing/random-module-generation.cc",
        "patchSetId": 8
      },
      "lineNbr": 950,
      "author": {
        "id": 1440073
      },
      "writtenOn": "2024-04-22T16:43:39Z",
      "side": 1,
      "message": "Makes sense :) Thanks",
      "parentUuid": "7e920150_51f8f9c5",
      "range": {
        "startLine": 950,
        "startChar": 14,
        "endLine": 950,
        "endChar": 22
      },
      "revId": "2eb63b89534c18272a989a9c1d26bb4b4058c5ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1943702d_ae0a8733",
        "filename": "src/wasm/fuzzing/random-module-generation.cc",
        "patchSetId": 8
      },
      "lineNbr": 954,
      "author": {
        "id": 1440073
      },
      "writtenOn": "2024-04-19T18:07:55Z",
      "side": 1,
      "message": "I forgot to add multi-memory support for `atomic_op()`s previously. It\u0027s similar to `memop()` above.",
      "range": {
        "startLine": 954,
        "startChar": 7,
        "endLine": 954,
        "endChar": 16
      },
      "revId": "2eb63b89534c18272a989a9c1d26bb4b4058c5ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5bd288b8_a113d355",
        "filename": "src/wasm/fuzzing/random-module-generation.cc",
        "patchSetId": 8
      },
      "lineNbr": 962,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2024-04-22T13:28:53Z",
      "side": 1,
      "message": "nit: also useless",
      "range": {
        "startLine": 962,
        "startChar": 4,
        "endLine": 962,
        "endChar": 31
      },
      "revId": "2eb63b89534c18272a989a9c1d26bb4b4058c5ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c467a02c_8a457b7d",
        "filename": "src/wasm/fuzzing/random-module-generation.cc",
        "patchSetId": 8
      },
      "lineNbr": 962,
      "author": {
        "id": 1440073
      },
      "writtenOn": "2024-04-22T14:56:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5bd288b8_a113d355",
      "range": {
        "startLine": 962,
        "startChar": 4,
        "endLine": 962,
        "endChar": 31
      },
      "revId": "2eb63b89534c18272a989a9c1d26bb4b4058c5ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "69b06df6_0acff801",
        "filename": "src/wasm/fuzzing/random-module-generation.cc",
        "patchSetId": 8
      },
      "lineNbr": 1284,
      "author": {
        "id": 1440073
      },
      "writtenOn": "2024-04-19T18:07:55Z",
      "side": 1,
      "message": "This function is among the instructions that return I32s.\n\nWe generate at least 1 and up to 4 memories. We don\u0027t know which or have many are  memory32s or memory64s during compile-time. Therefore, I cannot add the memory_size() to the list of alternatives in the Generate function.\n\nTo make the function simple, I just always convert the returned memory size to an I32, if we operated on memory64 (i.e. 64 bit).\n\nSame for grow_memory()`",
      "range": {
        "startLine": 1284,
        "startChar": 7,
        "endLine": 1284,
        "endChar": 18
      },
      "revId": "2eb63b89534c18272a989a9c1d26bb4b4058c5ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "442b4b63_30a70a37",
        "filename": "src/wasm/fuzzing/random-module-generation.cc",
        "patchSetId": 8
      },
      "lineNbr": 1285,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2024-04-22T13:28:53Z",
      "side": 1,
      "message": "same, and again on line 1298",
      "range": {
        "startLine": 1285,
        "startChar": 4,
        "endLine": 1285,
        "endChar": 31
      },
      "revId": "2eb63b89534c18272a989a9c1d26bb4b4058c5ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2ea258af_451c2674",
        "filename": "src/wasm/fuzzing/random-module-generation.cc",
        "patchSetId": 8
      },
      "lineNbr": 1285,
      "author": {
        "id": 1440073
      },
      "writtenOn": "2024-04-22T14:56:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "442b4b63_30a70a37",
      "range": {
        "startLine": 1285,
        "startChar": 4,
        "endLine": 1285,
        "endChar": 31
      },
      "revId": "2eb63b89534c18272a989a9c1d26bb4b4058c5ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c314678_0e37eca2",
        "filename": "src/wasm/fuzzing/random-module-generation.cc",
        "patchSetId": 8
      },
      "lineNbr": 1290,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2024-04-22T13:28:53Z",
      "side": 1,
      "message": "I think this should be `kExprMemorySize`, and `kExprMemoryGrow` in line 1306.",
      "range": {
        "startLine": 1290,
        "startChar": 51,
        "endLine": 1290,
        "endChar": 66
      },
      "revId": "2eb63b89534c18272a989a9c1d26bb4b4058c5ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e9e895c0_6817aa02",
        "filename": "src/wasm/fuzzing/random-module-generation.cc",
        "patchSetId": 8
      },
      "lineNbr": 1290,
      "author": {
        "id": 1440073
      },
      "writtenOn": "2024-04-22T14:56:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1c314678_0e37eca2",
      "range": {
        "startLine": 1290,
        "startChar": 51,
        "endLine": 1290,
        "endChar": 66
      },
      "revId": "2eb63b89534c18272a989a9c1d26bb4b4058c5ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09fa7893_d9b929a9",
        "filename": "src/wasm/fuzzing/random-module-generation.cc",
        "patchSetId": 8
      },
      "lineNbr": 3452,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2024-04-22T13:28:53Z",
      "side": 1,
      "message": "nit: this could be a `static_assert`.\n\nDue to the `1 +` trick to avoid ending up with zero memories, `kMaxMemories \u003d\u003d 5` could in fact lead to `num_memories \u003d\u003d 6`, in which case the loop below won\u0027t have enough input bits and the last memory will always be a 32-bit memory. That\u0027s probably just fine though?",
      "range": {
        "startLine": 3452,
        "startChar": 28,
        "endLine": 3452,
        "endChar": 29
      },
      "revId": "2eb63b89534c18272a989a9c1d26bb4b4058c5ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "768cbe54_f271c5cf",
        "filename": "src/wasm/fuzzing/random-module-generation.cc",
        "patchSetId": 8
      },
      "lineNbr": 3452,
      "author": {
        "id": 1440073
      },
      "writtenOn": "2024-04-22T14:56:10Z",
      "side": 1,
      "message": "Changed it to static assert.\nIf `kMaxMemories` is 5, the max number is `num_memories \u003d 1 + 4`.",
      "parentUuid": "09fa7893_d9b929a9",
      "range": {
        "startLine": 3452,
        "startChar": 28,
        "endLine": 3452,
        "endChar": 29
      },
      "revId": "2eb63b89534c18272a989a9c1d26bb4b4058c5ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53acf30e_05ac65f7",
        "filename": "src/wasm/wasm-module-builder.cc",
        "patchSetId": 8
      },
      "lineNbr": 759,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2024-04-22T13:28:53Z",
      "side": 1,
      "message": "nit: `it`\n\nThat said, considering that we do go to the trouble of selecting the right `emit` function below, what is this comment trying to explain?",
      "range": {
        "startLine": 759,
        "startChar": 56,
        "endLine": 759,
        "endChar": 58
      },
      "revId": "2eb63b89534c18272a989a9c1d26bb4b4058c5ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43b33f18_3b245539",
        "filename": "src/wasm/wasm-module-builder.cc",
        "patchSetId": 8
      },
      "lineNbr": 759,
      "author": {
        "id": 1440073
      },
      "writtenOn": "2024-04-22T14:56:10Z",
      "side": 1,
      "message": "For me it was confusing that we use the right emit function here, but we actually never set the flags that would enable having 64 bits for max and min, so personally, I would appreciate this comment.\nDo you find it misleading? Would you rather just delete it (from both module builders)?",
      "parentUuid": "53acf30e_05ac65f7",
      "range": {
        "startLine": 759,
        "startChar": 56,
        "endLine": 759,
        "endChar": 58
      },
      "revId": "2eb63b89534c18272a989a9c1d26bb4b4058c5ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50fa3f43_4c02c02c",
        "filename": "src/wasm/wasm-module-builder.cc",
        "patchSetId": 8
      },
      "lineNbr": 759,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2024-04-22T15:26:21Z",
      "side": 1,
      "message": "Yes, I find it misleading. Having that comment would make sense if we always used `write_u64v`: then the comment would explain why that\u0027s okay. So seeing that we actually choose the right emit function is surprising after reading the comment, and means that the comment only says that we wouldn\u0027t really need to do what we are doing.\nWe do set the right bit in the `limits_byte` (the `4` bit).",
      "parentUuid": "43b33f18_3b245539",
      "range": {
        "startLine": 759,
        "startChar": 56,
        "endLine": 759,
        "endChar": 58
      },
      "revId": "2eb63b89534c18272a989a9c1d26bb4b4058c5ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "15448ac9_a7e8351d",
        "filename": "src/wasm/wasm-module-builder.cc",
        "patchSetId": 8
      },
      "lineNbr": 759,
      "author": {
        "id": 1440073
      },
      "writtenOn": "2024-04-22T16:43:39Z",
      "side": 1,
      "message": "Thanks! Now I understand, I remove the comments from both builders.",
      "parentUuid": "50fa3f43_4c02c02c",
      "range": {
        "startLine": 759,
        "startChar": 56,
        "endLine": 759,
        "endChar": 58
      },
      "revId": "2eb63b89534c18272a989a9c1d26bb4b4058c5ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "636ed697_0041db83",
        "filename": "test/mjsunit/wasm/wasm-module-builder.js",
        "patchSetId": 8
      },
      "lineNbr": 1854,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2024-04-22T13:28:53Z",
      "side": 1,
      "message": "nit: `it`\n\nThat said, considering that we do go to the trouble of selecting the right `emit` function below, what is this comment trying to explain?",
      "range": {
        "startLine": 1854,
        "startChar": 60,
        "endLine": 1854,
        "endChar": 62
      },
      "revId": "2eb63b89534c18272a989a9c1d26bb4b4058c5ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "892c8270_63ac2f18",
        "filename": "test/mjsunit/wasm/wasm-module-builder.js",
        "patchSetId": 8
      },
      "lineNbr": 1854,
      "author": {
        "id": 1440073
      },
      "writtenOn": "2024-04-22T14:56:10Z",
      "side": 1,
      "message": "Done + replying in the other comment",
      "parentUuid": "636ed697_0041db83",
      "range": {
        "startLine": 1854,
        "startChar": 60,
        "endLine": 1854,
        "endChar": 62
      },
      "revId": "2eb63b89534c18272a989a9c1d26bb4b4058c5ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}