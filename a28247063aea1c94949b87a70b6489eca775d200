{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c7574b24_e8708445",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1519522
      },
      "writtenOn": "2024-04-16T09:19:19Z",
      "side": 1,
      "message": "PTAL! This CL tries to stop the Wasm trap handler from potentially hiding other bugs that lead to wild read/writes originating in Wasm. See the linked bug for an example.\n\nThere was an attempt at something similar in the past: https://chromium-review.googlesource.com/c/v8/v8/+/2568272 but I think we can go with a simpler approach: instead of tracking the locations of all Wasm Memory objects, simply check if the access is inside the V8 sandbox.",
      "revId": "a28247063aea1c94949b87a70b6489eca775d200",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eaade8b0_f0fab0f8",
        "filename": "src/trap-handler/handler-inside.cc",
        "patchSetId": 4
      },
      "lineNbr": 78,
      "author": {
        "id": 1519522
      },
      "writtenOn": "2024-04-16T09:19:19Z",
      "side": 1,
      "message": "Is this correct? Without it I\u0027m getting test failures, so I assume there is some mechanism that leads to nullptr derefs that are expected to be handled here",
      "revId": "a28247063aea1c94949b87a70b6489eca775d200",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f767e35_9594b8f8",
        "filename": "src/trap-handler/handler-inside.cc",
        "patchSetId": 4
      },
      "lineNbr": 78,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2024-04-16T09:44:28Z",
      "side": 1,
      "message": "We should investigate where this access to `nullptr` is happening. In principle there should not be an access to `nullptr`. Maybe there is an optimization that does that, but in that case we should probably change the optimization.",
      "parentUuid": "eaade8b0_f0fab0f8",
      "revId": "a28247063aea1c94949b87a70b6489eca775d200",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5deacd2_602eb649",
        "filename": "src/trap-handler/handler-inside.cc",
        "patchSetId": 4
      },
      "lineNbr": 78,
      "author": {
        "id": 1519522
      },
      "writtenOn": "2024-04-16T10:01:45Z",
      "side": 1,
      "message": "It seems to be related to Wasm64 (it seems to require `--wasm-memory64-trap-handling`) so maybe Clemens will know more.\n\nWhat I\u0027m observing in gdb:\n```\n\u003e x/i $rip\nmov    %edx,(%rcx,%rax,1)\n\u003e i r rcx rax\nrax            0xf000000000000000  -1152921504606846976\nrcx            0x309300000000      53407918325760\n```\nSo it\u0027s not actually a nullptr deref but a deref of a non-canonical address.",
      "parentUuid": "2f767e35_9594b8f8",
      "revId": "a28247063aea1c94949b87a70b6489eca775d200",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f9ec8dc_da098ae7",
        "filename": "src/trap-handler/handler-inside.cc",
        "patchSetId": 4
      },
      "lineNbr": 78,
      "author": {
        "id": 1519522
      },
      "writtenOn": "2024-04-16T10:31:46Z",
      "side": 1,
      "message": "Ah I think I found it, it\u0027s this here: https://source.chromium.org/chromium/chromium/src/+/main:v8/src/wasm/baseline/liftoff-compiler.cc;l\u003d3346;drc\u003d692f3d526a382b3c2f1d979105e777df16855e84 and https://source.chromium.org/chromium/chromium/src/+/main:v8/src/execution/isolate-data.h;l\u003d364;drc\u003dc3a7009be69ddc4492e8bb4e6dcb12bb0b1d3b71\n\nI\u0027ll update the comment.",
      "parentUuid": "e5deacd2_602eb649",
      "revId": "a28247063aea1c94949b87a70b6489eca775d200",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}