{
  "comments": [
    {
      "key": {
        "uuid": "87c2e6d4_2f39ca68",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-09-08T11:10:26Z",
      "side": 1,
      "message": "lgtm with comment",
      "revId": "5a61705ddb854f83a24e8cdc32ee2583a21b6040",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5bd37d37_9f2a6ef8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2020-09-08T11:26:12Z",
      "side": 1,
      "message": "LGTM",
      "revId": "5a61705ddb854f83a24e8cdc32ee2583a21b6040",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "93eb54bf_4d77bccc",
        "filename": "src/compiler/js-heap-broker.cc",
        "patchSetId": 8
      },
      "lineNbr": 2262,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-09-08T11:10:26Z",
      "side": 1,
      "message": "This should check \u003d\u003d ObjectDataKind::kSerializedHeapObject, because only then we have an instance of FixedDoubleArrayData.\n\nI just saw that the As* casts are not as robust as they should be, I\u0027ll make an improvement of that.",
      "revId": "5a61705ddb854f83a24e8cdc32ee2583a21b6040",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be5382b1_39ca48ad",
        "filename": "src/compiler/js-heap-broker.cc",
        "patchSetId": 8
      },
      "lineNbr": 2262,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2020-09-08T12:33:17Z",
      "side": 1,
      "message": "Ack.\nNow that I see it again, on top of the if we have \"elements_-\u003eshould_access_heap()\" and this is the else case. Then we can change it to\nDCHECK(elements_-\u003ekind() \u003d\u003d ObjectDataKind::kSerializedHeapObject)",
      "parentUuid": "93eb54bf_4d77bccc",
      "revId": "5a61705ddb854f83a24e8cdc32ee2583a21b6040",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c30cb3e5_8fc6e370",
        "filename": "src/compiler/js-heap-broker.cc",
        "patchSetId": 8
      },
      "lineNbr": 2262,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-09-08T12:35:38Z",
      "side": 1,
      "message": "Yes, you\u0027re right.",
      "parentUuid": "be5382b1_39ca48ad",
      "revId": "5a61705ddb854f83a24e8cdc32ee2583a21b6040",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "93d7df69_b7f35138",
        "filename": "src/compiler/js-heap-broker.cc",
        "patchSetId": 8
      },
      "lineNbr": 3239,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2020-09-08T11:26:12Z",
      "side": 1,
      "message": "Is there no ACCESSOR macro that is usually used for this?",
      "range": {
        "startLine": 3229,
        "startChar": 1,
        "endLine": 3239,
        "endChar": 1
      },
      "revId": "5a61705ddb854f83a24e8cdc32ee2583a21b6040",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97109667_8422a33b",
        "filename": "src/compiler/js-heap-broker.cc",
        "patchSetId": 8
      },
      "lineNbr": 3239,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2020-09-08T12:33:17Z",
      "side": 1,
      "message": "There is a macro but we can\u0027t use it here because on the serializing case we have \"Get(i).is_hole_nan()\" which does not match \"is_the_hole\".",
      "parentUuid": "93d7df69_b7f35138",
      "range": {
        "startLine": 3229,
        "startChar": 1,
        "endLine": 3239,
        "endChar": 1
      },
      "revId": "5a61705ddb854f83a24e8cdc32ee2583a21b6040",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}