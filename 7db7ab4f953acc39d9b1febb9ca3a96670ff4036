{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d83e99bb_859386d3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-08-28T17:13:26Z",
      "side": 1,
      "message": "I saw that we always assume a non-null oom_handler and always pass around a reference. Is there are a reason not to embed the oom_handler into HeapBase?",
      "revId": "7db7ab4f953acc39d9b1febb9ca3a96670ff4036",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "25e80031_90f2c993",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2021-08-30T07:30:54Z",
      "side": 1,
      "message": "We used unique_ptr and fwd declarations for non-performance critical pieces (PageBackend, PreFinalizerHandler, StatsCollector...) as hea-base.h is included in a lot of places. Unfortuantely, the src/heap/platform.h include sneaked in due to autocomplete.\n\nI\u0027d just remove the include and use the pattern that we alrady have in place for other parts. Thoughts? (Seems fine either way)",
      "parentUuid": "d83e99bb_859386d3",
      "revId": "7db7ab4f953acc39d9b1febb9ca3a96670ff4036",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "571de780_2a499ce8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-08-30T08:07:02Z",
      "side": 1,
      "message": "If I remember correctly, the choice between unique_ptr or not was mostly random so far.\nWe discussed persisting/not-persisting everything in the past. I looked into that a few months ago. We can\u0027t persist everything because the Marker doesn\u0027t support it. Not-persisting everything is also non-trivial due to calls to Compactor::EnableForNextGCForTesting (although we can get around this one).\n\nCppgc is relatively small. Do you think having these additional includes in heap-base.h would actually be noticeable in build times?\n\nI think it would be good if we can establish a guideline for what we persist and what not. Performance-critical is one option. Alternatively we can decide to persist/not-persist everything that we can (personally I lean towards persisting everything that we can since all these objects live as long as the heap is alive anyway, it simplifies the code, and persisting everything should be better for performance).",
      "parentUuid": "25e80031_90f2c993",
      "revId": "7db7ab4f953acc39d9b1febb9ca3a96670ff4036",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c4237c9b_78370844",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2021-08-30T08:29:19Z",
      "side": 1,
      "message": "\u003e If I remember correctly, the choice between unique_ptr or not was mostly random so far.\n\u003e We discussed persisting/not-persisting everything in the past. I looked into that a few months ago. We can\u0027t persist everything because the Marker doesn\u0027t support it. Not-persisting everything is also non-trivial due to calls to Compactor::EnableForNextGCForTesting (although we can get around this one).\n\u003e \n\u003e Cppgc is relatively small. Do you think having these additional includes in heap-base.h would actually be noticeable in build times?\n\u003e \n\u003e I think it would be good if we can establish a guideline for what we persist and what not. Performance-critical is one option. Alternatively we can decide to persist/not-persist everything that we can (personally I lean towards persisting everything that we can since all these objects live as long as the heap is alive anyway, it simplifies the code, and persisting everything should be better for performance).\n\nI\u0027d have generally agreed if heap-base.h wasn\u0027t often the accessor to many other things and will likely creep into all sorts .cc files across cppgc and even V8\u0027s heap. Style guide also seems to prefer fwd decls [1].\n\nSince we generally try to avoid the Heap dependencies on HeapBase directly but rather DI the actual deps we can try to avoid unique_ptr if possible though.\n\nIn practice the build-time effect is likely small. Same is the readability or performance win for most components.\n\n[1] https://chromium.googlesource.com/chromium/src/+/HEAD/styleguide/c++/c++.md#forward-declarations-vs_includes",
      "parentUuid": "571de780_2a499ce8",
      "revId": "7db7ab4f953acc39d9b1febb9ca3a96670ff4036",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa7af9dd_24877275",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-08-30T11:33:13Z",
      "side": 1,
      "message": "I think we\u0027re discussing member by-value vs by-pointer, not include vs fwd decl, which is not covered by the style guide (\"However, if it would otherwise make sense to use a type as a member by-value, don\u0027t convert it to a pointer just to be able to forward-declare the type.\").\nRegardless, let\u0027s keep it as is for now.",
      "parentUuid": "c4237c9b_78370844",
      "revId": "7db7ab4f953acc39d9b1febb9ca3a96670ff4036",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}