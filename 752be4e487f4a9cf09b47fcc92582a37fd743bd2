{
  "comments": [
    {
      "key": {
        "uuid": "e732155f_1bfead3e",
        "filename": "src/compiler/access-builder.cc",
        "patchSetId": 6
      },
      "lineNbr": 859,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2020-07-06T12:46:40Z",
      "side": 1,
      "message": "We have quite some automatic write barrier elimination in the back-end, so putting kFullWriteBarrier here might be good enough. Also, this would follow what we do here for all the other accessors.",
      "range": {
        "startLine": 859,
        "startChar": 27,
        "endLine": 859,
        "endChar": 80
      },
      "revId": "752be4e487f4a9cf09b47fcc92582a37fd743bd2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70d630d6_4b97884b",
        "filename": "src/compiler/access-builder.cc",
        "patchSetId": 6
      },
      "lineNbr": 917,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2020-07-06T12:46:40Z",
      "side": 1,
      "message": "Can we have kFullWriteBarrier here? For loads, there is no write barrier anyway, so it doesn\u0027t matter. And if we use this for writes, it\u0027s a bug waiting to happen.",
      "revId": "752be4e487f4a9cf09b47fcc92582a37fd743bd2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bad57c92_ff5887bd",
        "filename": "src/compiler/effect-control-linearizer.cc",
        "patchSetId": 6
      },
      "lineNbr": 1916,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2020-07-06T12:46:40Z",
      "side": 1,
      "message": "I don\u0027t think it matters where you create the label, the GraphAssembler doesn\u0027t have these involved heuristics around label creation that CSA does. And it doesn\u0027t need to, because it doesn\u0027t have a notion of variables.",
      "range": {
        "startLine": 1915,
        "startChar": 6,
        "endLine": 1916,
        "endChar": 42
      },
      "revId": "752be4e487f4a9cf09b47fcc92582a37fd743bd2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f140fd27_6f65b7bf",
        "filename": "src/compiler/effect-control-linearizer.cc",
        "patchSetId": 6
      },
      "lineNbr": 1919,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2020-07-06T12:46:40Z",
      "side": 1,
      "message": "TaggedEqual only works if both are strong or both are weak. To reduce code size and the number of executed instructions, you might consider transfroming value_map into a weak pointer pattern at the beginning, then the two BuildIsWeakReferenceTo could be replaced with TaggedEqual.",
      "range": {
        "startLine": 1918,
        "startChar": 6,
        "endLine": 1919,
        "endChar": 15
      },
      "revId": "752be4e487f4a9cf09b47fcc92582a37fd743bd2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d244a2c_c937b17b",
        "filename": "src/compiler/simplified-lowering.cc",
        "patchSetId": 6
      },
      "lineNbr": 3610,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2020-07-06T12:46:40Z",
      "side": 1,
      "message": "This ensures that the input is a HeapObject, in other words, that we\u0027ll insert a check to make sure it\u0027s not a Smi if necessary.",
      "range": {
        "startLine": 3610,
        "startChar": 8,
        "endLine": 3610,
        "endChar": 45
      },
      "revId": "752be4e487f4a9cf09b47fcc92582a37fd743bd2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7c122d1_c500a7dc",
        "filename": "src/compiler/simplified-operator.cc",
        "patchSetId": 6
      },
      "lineNbr": 296,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2020-07-06T12:46:40Z",
      "side": 1,
      "message": "Should be fine. We\u0027re doing this everywhere.",
      "range": {
        "startLine": 295,
        "startChar": 0,
        "endLine": 296,
        "endChar": 11
      },
      "revId": "752be4e487f4a9cf09b47fcc92582a37fd743bd2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}