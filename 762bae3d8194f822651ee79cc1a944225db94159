{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "bc6e7915_16d70201",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2021-12-02T10:38:02Z",
      "side": 1,
      "message": "PTAL, thanks",
      "revId": "762bae3d8194f822651ee79cc1a944225db94159",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33be02af_3d0c9355",
        "filename": "src/bigint/bigint.h",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2021-12-02T15:49:10Z",
      "side": 1,
      "message": "Since this is only used internally, digit-arithmetic.h would be a good home for it. (Let\u0027s keep bigint.h as lean as possible.)",
      "range": {
        "startLine": 54,
        "startChar": 15,
        "endLine": 54,
        "endChar": 26
      },
      "revId": "762bae3d8194f822651ee79cc1a944225db94159",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ef00fb32_531585bb",
        "filename": "src/bigint/bigint.h",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2021-12-06T13:53:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "33be02af_3d0c9355",
      "range": {
        "startLine": 54,
        "startChar": 15,
        "endLine": 54,
        "endChar": 26
      },
      "revId": "762bae3d8194f822651ee79cc1a944225db94159",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13cca50a_e23a9afb",
        "filename": "src/bigint/bigint.h",
        "patchSetId": 3
      },
      "lineNbr": 235,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2021-12-02T15:49:10Z",
      "side": 1,
      "message": "Since this is only used internally, let\u0027s move the declaration to vector-arithmetic.h",
      "range": {
        "startLine": 235,
        "startChar": 5,
        "endLine": 235,
        "endChar": 17
      },
      "revId": "762bae3d8194f822651ee79cc1a944225db94159",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1752cc1e_4bdb6afc",
        "filename": "src/bigint/bigint.h",
        "patchSetId": 3
      },
      "lineNbr": 235,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2021-12-06T13:53:19Z",
      "side": 1,
      "message": "Found that there is an Add with Z \u003d Z + x for a digit_t x already in vector-arithmetic.h, so I used this one and removed the IncrementOne.",
      "parentUuid": "13cca50a_e23a9afb",
      "range": {
        "startLine": 235,
        "startChar": 5,
        "endLine": 235,
        "endChar": 17
      },
      "revId": "762bae3d8194f822651ee79cc1a944225db94159",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d19fe751_64e91bea",
        "filename": "src/bigint/bigint.h",
        "patchSetId": 3
      },
      "lineNbr": 260,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2021-12-02T15:49:10Z",
      "side": 1,
      "message": "naming nit: the \"ByAbsolute\" suffix isn\u0027t really meaningful in the context of this API (digit_t is unsigned, so abs(shift) \u003d\u003d shift). Let\u0027s just drop it everywhere.",
      "range": {
        "startLine": 260,
        "startChar": 5,
        "endLine": 260,
        "endChar": 24
      },
      "revId": "762bae3d8194f822651ee79cc1a944225db94159",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "88ef016d_a6f104e0",
        "filename": "src/bigint/bigint.h",
        "patchSetId": 3
      },
      "lineNbr": 260,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2021-12-06T13:53:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d19fe751_64e91bea",
      "range": {
        "startLine": 260,
        "startChar": 5,
        "endLine": 260,
        "endChar": 24
      },
      "revId": "762bae3d8194f822651ee79cc1a944225db94159",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c63af190_176b2556",
        "filename": "src/bigint/bigint.h",
        "patchSetId": 3
      },
      "lineNbr": 370,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2021-12-02T15:49:10Z",
      "side": 1,
      "message": "nit: you may keep these `const` annotations if you like them, but I also wouldn\u0027t mind dropping them in the interest of conciseness.",
      "range": {
        "startLine": 370,
        "startChar": 2,
        "endLine": 370,
        "endChar": 7
      },
      "revId": "762bae3d8194f822651ee79cc1a944225db94159",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f0f99299_5d7ef9ec",
        "filename": "src/bigint/bigint.h",
        "patchSetId": 3
      },
      "lineNbr": 370,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2021-12-06T13:53:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c63af190_176b2556",
      "range": {
        "startLine": 370,
        "startChar": 2,
        "endLine": 370,
        "endChar": 7
      },
      "revId": "762bae3d8194f822651ee79cc1a944225db94159",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8375c98_3f6447c9",
        "filename": "src/bigint/bigint.h",
        "patchSetId": 3
      },
      "lineNbr": 376,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2021-12-02T15:49:10Z",
      "side": 1,
      "message": "nit: intend. (Or drop the comment entirely, as it basically just reiterates the other comment above.)",
      "range": {
        "startLine": 376,
        "startChar": 10,
        "endLine": 376,
        "endChar": 16
      },
      "revId": "762bae3d8194f822651ee79cc1a944225db94159",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "deefaa68_ded9e239",
        "filename": "src/bigint/bigint.h",
        "patchSetId": 3
      },
      "lineNbr": 376,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2021-12-06T13:53:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b8375c98_3f6447c9",
      "range": {
        "startLine": 376,
        "startChar": 10,
        "endLine": 376,
        "endChar": 16
      },
      "revId": "762bae3d8194f822651ee79cc1a944225db94159",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa8177f8_6bc8d3bb",
        "filename": "src/bigint/bitwise.cc",
        "patchSetId": 3
      },
      "lineNbr": 137,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2021-12-02T15:49:10Z",
      "side": 1,
      "message": "nit: I don\u0027t mind keeping this; that said elsewhere we rely on `.len()` being fast enough, so you may also inline this variable wherever it\u0027s used. (Same for `result_length` below.)",
      "range": {
        "startLine": 137,
        "startChar": 12,
        "endLine": 137,
        "endChar": 18
      },
      "revId": "762bae3d8194f822651ee79cc1a944225db94159",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e3907661_035365f7",
        "filename": "src/bigint/bitwise.cc",
        "patchSetId": 3
      },
      "lineNbr": 137,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2021-12-06T13:53:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aa8177f8_6bc8d3bb",
      "range": {
        "startLine": 137,
        "startChar": 12,
        "endLine": 137,
        "endChar": 18
      },
      "revId": "762bae3d8194f822651ee79cc1a944225db94159",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24aaa850_8ac66cef",
        "filename": "src/bigint/bitwise.cc",
        "patchSetId": 3
      },
      "lineNbr": 143,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2021-12-02T15:49:10Z",
      "side": 1,
      "message": "nit: for consistency (e.g. line 132), just `0`.",
      "range": {
        "startLine": 143,
        "startChar": 38,
        "endLine": 143,
        "endChar": 41
      },
      "revId": "762bae3d8194f822651ee79cc1a944225db94159",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0fef0bca_1604f76d",
        "filename": "src/bigint/bitwise.cc",
        "patchSetId": 3
      },
      "lineNbr": 143,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2021-12-06T13:53:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "24aaa850_8ac66cef",
      "range": {
        "startLine": 143,
        "startChar": 38,
        "endLine": 143,
        "endChar": 41
      },
      "revId": "762bae3d8194f822651ee79cc1a944225db94159",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66403c5b_97f75347",
        "filename": "src/bigint/bitwise.cc",
        "patchSetId": 3
      },
      "lineNbr": 145,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2021-12-02T15:49:10Z",
      "side": 1,
      "message": "I\u0027d like to maintain the rule that the *_ResultLength functions return a lower bound for the required result length, but larger result allocations are fine. In this case, that means: please split up this loop:\n\n  for (; i \u003c length + digit_shift; i++) Z[i] \u003d X[i - digit_shift];\n  for (; i \u003c result_length; i++) Z[i] \u003d 0;",
      "range": {
        "startLine": 145,
        "startChar": 4,
        "endLine": 145,
        "endChar": 34
      },
      "revId": "762bae3d8194f822651ee79cc1a944225db94159",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de8f5ffb_f035c77b",
        "filename": "src/bigint/bitwise.cc",
        "patchSetId": 3
      },
      "lineNbr": 145,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2021-12-06T13:53:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "66403c5b_97f75347",
      "range": {
        "startLine": 145,
        "startChar": 4,
        "endLine": 145,
        "endChar": 34
      },
      "revId": "762bae3d8194f822651ee79cc1a944225db94159",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "952d940a_500a2ac7",
        "filename": "src/bigint/bitwise.cc",
        "patchSetId": 3
      },
      "lineNbr": 153,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2021-12-02T15:49:10Z",
      "side": 1,
      "message": "By the same reasoning, we\u0027ll have to drop this DCHECK (or re-do the `bool grow \u003d ...` computation inside it), and replace the next line with:\n\n  i \u003d length + digit_shift;\n  if (carry !\u003d 0) Z[i++] \u003d carry;\n  for (; i \u003c result_length; i++) Z[i] \u003d 0;",
      "range": {
        "startLine": 153,
        "startChar": 4,
        "endLine": 153,
        "endChar": 68
      },
      "revId": "762bae3d8194f822651ee79cc1a944225db94159",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e253e3d_bb61be8e",
        "filename": "src/bigint/bitwise.cc",
        "patchSetId": 3
      },
      "lineNbr": 153,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2021-12-06T13:53:19Z",
      "side": 1,
      "message": "Slightly rewrote this loop such that we can use \u0027i\u0027 as a cursor through the result in the same way this is done in the other branch. PTAL",
      "parentUuid": "952d940a_500a2ac7",
      "range": {
        "startLine": 153,
        "startChar": 4,
        "endLine": 153,
        "endChar": 68
      },
      "revId": "762bae3d8194f822651ee79cc1a944225db94159",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca08a85b_f5d0aeb7",
        "filename": "src/bigint/bitwise.cc",
        "patchSetId": 3
      },
      "lineNbr": 168,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2021-12-02T15:49:10Z",
      "side": 1,
      "message": "nit: outdated (just drop it)",
      "range": {
        "startLine": 167,
        "startChar": 53,
        "endLine": 168,
        "endChar": 77
      },
      "revId": "762bae3d8194f822651ee79cc1a944225db94159",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9925a8bc_382e0539",
        "filename": "src/bigint/bitwise.cc",
        "patchSetId": 3
      },
      "lineNbr": 168,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2021-12-06T13:53:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ca08a85b_f5d0aeb7",
      "range": {
        "startLine": 167,
        "startChar": 53,
        "endLine": 168,
        "endChar": 77
      },
      "revId": "762bae3d8194f822651ee79cc1a944225db94159",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86f71105_fe94c988",
        "filename": "src/bigint/bitwise.cc",
        "patchSetId": 3
      },
      "lineNbr": 205,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2021-12-02T15:49:10Z",
      "side": 1,
      "message": "This, too, should be a loop:\n\n  for (int i \u003d length - digit_shift; i \u003c Z.len(); i++) Z[i] \u003d 0;\n\nAnd we should do it outside the if/else. You can drop the comment; zeroing out any extra result digits is simply the same as in any other operation.",
      "range": {
        "startLine": 205,
        "startChar": 4,
        "endLine": 205,
        "endChar": 23
      },
      "revId": "762bae3d8194f822651ee79cc1a944225db94159",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8caced7d_c999f50a",
        "filename": "src/bigint/bitwise.cc",
        "patchSetId": 3
      },
      "lineNbr": 205,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2021-12-06T13:53:19Z",
      "side": 1,
      "message": "Rewrote this as well. PTAL",
      "parentUuid": "86f71105_fe94c988",
      "range": {
        "startLine": 205,
        "startChar": 4,
        "endLine": 205,
        "endChar": 23
      },
      "revId": "762bae3d8194f822651ee79cc1a944225db94159",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}