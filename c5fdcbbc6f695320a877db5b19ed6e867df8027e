{
  "comments": [
    {
      "key": {
        "uuid": "c8fed0f4_63644332",
        "filename": "src/frames.cc",
        "patchSetId": 3
      },
      "lineNbr": 1764,
      "author": {
        "id": 1119499
      },
      "writtenOn": "2018-01-17T09:40:15Z",
      "side": 1,
      "message": "Nice simplification here :)",
      "revId": "c5fdcbbc6f695320a877db5b19ed6e867df8027e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2180e284_67e0db9e",
        "filename": "src/runtime/runtime-test.cc",
        "patchSetId": 3
      },
      "lineNbr": 1127,
      "author": {
        "id": 1119499
      },
      "writtenOn": "2018-01-17T09:40:15Z",
      "side": 1,
      "message": "Can you get the function start from the wasm code now?",
      "revId": "c5fdcbbc6f695320a877db5b19ed6e867df8027e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d63618b0_5704c458",
        "filename": "src/runtime/runtime-test.cc",
        "patchSetId": 3
      },
      "lineNbr": 1127,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2018-01-17T10:04:33Z",
      "side": 1,
      "message": "I could add a method there, but wasm-code-wrapper.cc does not include wasm-module.h currently, so I am not sure if that would improve anything.",
      "parentUuid": "2180e284_67e0db9e",
      "revId": "c5fdcbbc6f695320a877db5b19ed6e867df8027e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e038ea9f_4450ddf4",
        "filename": "src/runtime/runtime-test.cc",
        "patchSetId": 3
      },
      "lineNbr": 1127,
      "author": {
        "id": 1119499
      },
      "writtenOn": "2018-01-17T10:06:38Z",
      "side": 1,
      "message": "Unless I am missing something, we shouldn\u0027t need wasm-module.h; func_start is just the start of the instructions in the code, needed to compute the offset below.",
      "parentUuid": "d63618b0_5704c458",
      "revId": "c5fdcbbc6f695320a877db5b19ed6e867df8027e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c43ef3eb_8c570dc9",
        "filename": "src/runtime/runtime-test.cc",
        "patchSetId": 3
      },
      "lineNbr": 1127,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2018-01-17T10:10:59Z",
      "side": 1,
      "message": "But where do we get that from, if not from the {WasmFunction} defined in wasm-module.h?",
      "parentUuid": "e038ea9f_4450ddf4",
      "revId": "c5fdcbbc6f695320a877db5b19ed6e867df8027e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1664ec16_2e74235a",
        "filename": "src/runtime/runtime-test.cc",
        "patchSetId": 3
      },
      "lineNbr": 1127,
      "author": {
        "id": 1119499
      },
      "writtenOn": "2018-01-17T10:21:32Z",
      "side": 1,
      "message": "Oh sorry, yes. This is the bytecode offset (was thinking machine code offset). I guess the problem is that frame-\u003eposition() returns an module-relative bytecode offset, while TraceMemoryOperation prints a function-relative bytecode offset. In that case, let\u0027s just leave the above TODO as a reminder that maybe we want to fix that later.",
      "parentUuid": "c43ef3eb_8c570dc9",
      "revId": "c5fdcbbc6f695320a877db5b19ed6e867df8027e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}