{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "476ea02f_3c413a06",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1305811
      },
      "writtenOn": "2021-03-11T21:23:58Z",
      "side": 1,
      "message": "Hey Ulan, here\u0027s an alternate stab at the CodeEntry finalizer work, inspired by your prior suggestions to do a main-thread sweep. Some important notes;\n\n- With this approach, we seem to be able to handle clearing out flushed bytecode during the sweep phase. Looking into whether or not this is a reasonable expectation, or undefined behaviour. I\u0027ve removed the bytecode flush logic in the mean time.\n- The CodeMap is changed to be backed by a |multimap|, as the CodeMap may no longer delete CodeEntry objects that are currently being tracked (as we need to first deregister the finalizer on the isolate thread). Let me know your thoughts on this vs. posting a task to the isolate thread. We generally run into these collisions very infrequently, only for things like EmptyFunction.\n\nPTAL -- and thanks a bunch!",
      "revId": "61a9249f61ffcf5e59ce0d3d3a427551f87fe42d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e093ffad_9901711d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2021-03-12T14:49:36Z",
      "side": 1,
      "message": "The approach looks good!\n\nI did not expect clearing of flushed bytecode to work, but looks like we are lucky with the order of clearing weak handles and in-place conversion of flushed bytecode.\n\nWhat happens here is:\n1) The shared function info becomes a candidate for bytecode flushing. The marking visitor treats its bytecode array (BA) field as weak.\n2) In MarkCompactCollector::MarkLiveObjects the BA is unmarked.\n3) MarkCompactCollector::MarkLiveObjects clears all weak handles with unmarked targets (including the BA handle): \nhttps://source.chromium.org/chromium/chromium/src/+/master:v8/src/heap/mark-compact.cc;l\u003d2024;drc\u003d3f9ff062b053155df7897f199e80a8bafe7c34df\n\n4) MarkCompactCollector::ClearNonLiveReferences iterates bytecode flushing candidates and in-place converts the flushed BA to an uncompile data and marks it as live.\n\nIf the order of (3) and (4) would be reversed, the clearing of handles would not work.\n\nLet\u0027s add a comment explaining the the order of clearing of weak handles is important in \nhttps://source.chromium.org/chromium/chromium/src/+/master:v8/src/heap/mark-compact.cc;l\u003d2024;drc\u003d3f9ff062b053155df7897f199e80a8bafe7c34df\n\n\nRegarding the multimap issue:\nIIUC it is caused by delayed code sweep events. By the time when GC epilogue runs, a new code object may be allocated in place of an old collected code object. We could fix it by moving the code sweep event to MarkCompactCollector::MarkLiveObjects after clearing the weak handles.",
      "parentUuid": "476ea02f_3c413a06",
      "revId": "61a9249f61ffcf5e59ce0d3d3a427551f87fe42d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "433aab3c_35aa20e2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1305811
      },
      "writtenOn": "2021-03-16T05:57:24Z",
      "side": 1,
      "message": "Thanks for the explanation Ulan!\n\n\u003e Let\u0027s add a comment explaining the the order of clearing of weak handles is important in  [...]\n\nSounds good to me.\n\n\u003e IIUC it is caused by delayed code sweep events. By the time when GC epilogue runs, a new code object may be allocated in place of an old collected code object. We could fix it by moving the code sweep event to MarkCompactCollector::MarkLiveObjects after clearing the weak handles.\n\nI\u0027m not certain this is the case, since collisions appear to be occurring during heap traversal (LogCompiledFunctions, in particular). I found this after adding some logging to EnumerateCompiledFunctions, where GC is disallowed.\n\nI think next steps are likely to be dependent on how easy it is to establish the invariant that duplicate code will not be reported by ExistingCodeLogger. I\u0027ll take a closer look at the nature of that.",
      "parentUuid": "e093ffad_9901711d",
      "revId": "61a9249f61ffcf5e59ce0d3d3a427551f87fe42d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa60acdf_02511d17",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2021-03-16T08:56:38Z",
      "side": 1,
      "message": "\u003e I found this after adding some logging to EnumerateCompiledFunctions, where GC is disallowed.\nI think it is an issue in EnumerateCompiledFunctions. It discovers code objects via SharedFunctionInfos and JSFunctions. The same code object can be referred from a SharedFunctionInfo and multiple JSFunctions.",
      "parentUuid": "433aab3c_35aa20e2",
      "revId": "61a9249f61ffcf5e59ce0d3d3a427551f87fe42d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5e1db181_efad4eee",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1305811
      },
      "writtenOn": "2021-03-17T01:56:47Z",
      "side": 1,
      "message": "Yup, the issue is indeed multiple SFIs referencing the same code object -- for example, the Uint8Array and Uint8ClampedArray constructor builtins both share the same code (TypedArrayConstructor).\n\n```\n(gdb) p pair.first-\u003ePrint()\n0x8c4081c9b55: [SharedFunctionInfo] in OldSpace\n - map: 0x08c4080425f9 \u003cMap[40]\u003e\n - name: 0x08c408044e2d \u003cString[10]: #Uint8Array\u003e\n - kind: NormalFunction\n - syntax kind: AnonymousExpression\n - function_map_index: 167\n - formal_parameter_count: 65535\n - expected_nof_properties: \n - language_mode: strict\n - data: 547\n - code (from data): 0x08c40004b561 \u003cCode BUILTIN TypedArrayConstructor\u003e\n - script: 0x08c4080423b5 \u003cundefined\u003e\n - function token position: 0\n - start position: 0\n - end position: 0\n - no debug info\n - scope info: 0x08c408042739 \u003cScopeInfo\u003e\n - length: 3\n - feedback_metadata: \u003cnone\u003e\n$9 \u003d void\n(gdb) p it-\u003esecond.Print()\n0x8c4081c9b2d: [SharedFunctionInfo] in OldSpace\n - map: 0x08c4080425f9 \u003cMap[40]\u003e\n - name: 0x08c408044e45 \u003cString[17]: #Uint8ClampedArray\u003e\n - kind: NormalFunction\n - syntax kind: AnonymousExpression\n - function_map_index: 167\n - formal_parameter_count: 65535\n - expected_nof_properties: \n - language_mode: strict\n - data: 547\n - code (from data): 0x08c40004b561 \u003cCode BUILTIN TypedArrayConstructor\u003e\n - script: 0x08c4080423b5 \u003cundefined\u003e\n - function token position: 0\n - start position: 0\n - end position: 0\n - no debug info\n - scope info: 0x08c408042739 \u003cScopeInfo\u003e\n - length: 3\n - feedback_metadata: \u003cnone\u003e\n$10 \u003d void\n```\n\nThis does seem to suggest that we should indeed be tolerant to collisions, as the relationship between code and labels is one-to-many.\n\nPerhaps leveraging a multimap is justifiable for that reason in the short term? It\u0027s also worth noting this collision logic is probably also causing some weird labeling with sampling builtins already.",
      "parentUuid": "fa60acdf_02511d17",
      "revId": "61a9249f61ffcf5e59ce0d3d3a427551f87fe42d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04b3644f_8a7a35a1",
        "filename": "src/profiler/profiler-listener.h",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2021-03-12T14:49:36Z",
      "side": 1,
      "message": "Let\u0027s remove this completely?",
      "range": {
        "startLine": 68,
        "startChar": 2,
        "endLine": 68,
        "endChar": 66
      },
      "revId": "61a9249f61ffcf5e59ce0d3d3a427551f87fe42d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8edcba7a_aa0bf749",
        "filename": "src/profiler/profiler-listener.h",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1305811
      },
      "writtenOn": "2021-03-16T05:57:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "04b3644f_8a7a35a1",
      "range": {
        "startLine": 68,
        "startChar": 2,
        "endLine": 68,
        "endChar": 66
      },
      "revId": "61a9249f61ffcf5e59ce0d3d3a427551f87fe42d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}