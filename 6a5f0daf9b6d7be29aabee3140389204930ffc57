{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "75a0d658_277427a0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 19,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2023-05-19T12:09:54Z",
      "side": 1,
      "message": "Where is this change?",
      "revId": "6a5f0daf9b6d7be29aabee3140389204930ffc57",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b094b33a_85c39fb5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 19,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2023-05-19T14:03:16Z",
      "side": 1,
      "message": "Ah, sorry, I pulled this out and landed it separately as https://crrev.com/c/4543302.",
      "parentUuid": "75a0d658_277427a0",
      "revId": "6a5f0daf9b6d7be29aabee3140389204930ffc57",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "367589cd_5092d819",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2023-05-17T12:34:35Z",
      "side": 1,
      "message": "PTAL",
      "revId": "6a5f0daf9b6d7be29aabee3140389204930ffc57",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "664e211b_aa0d70d9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2023-05-19T12:09:54Z",
      "side": 1,
      "message": "This CL seems like an ugly hack to me. Using `bottom` there is the signature makes the test pass because of a coincidence, but that\u0027s not how `bottom` is supposed to be used.\n\nAs far as I can tell, the problem is that `WasmOpcodes::Signature()` returns an invalid signature in either the mem32 or mem64 case. So why don\u0027t you introduce another function like `WasmOpcodes::SignatureOfAtomicOp(ValueType)` which gives you the correct signature depending on the ValueType?",
      "revId": "6a5f0daf9b6d7be29aabee3140389204930ffc57",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d80b329d_52056f5b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2023-05-19T14:03:16Z",
      "side": 1,
      "message": "My intention was to\n1) fix the misleading signature definitions, and\n2) avoid duplicated logic by using `PopArgs` for atomic operations.\n\nThe signature needs to hold the most specific super type of `i32` and `i64`, and I assumed that \u0027bottom\u0027 is the right type here. Is there anything better?\n\nEven though I don\u0027t agree that this is an ugly hack, I will abandon this CL until we find a better way to solve this.",
      "parentUuid": "664e211b_aa0d70d9",
      "revId": "6a5f0daf9b6d7be29aabee3140389204930ffc57",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aef92667_0b8bb243",
        "filename": "src/wasm/function-body-decoder-impl.h",
        "patchSetId": 5
      },
      "lineNbr": 6110,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2023-05-19T12:09:54Z",
      "side": 1,
      "message": "Could you not just write\n`V8_ASSUME(sig-\u003eGetParam(0).kind() \u003d\u003d kBottom);`\n\nWhat is actually the advantage of this assumption? Could it be a CHECK_EQ instead?",
      "range": {
        "startLine": 6110,
        "startChar": 14,
        "endLine": 6110,
        "endChar": 25
      },
      "revId": "6a5f0daf9b6d7be29aabee3140389204930ffc57",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04a57a77_8bea85c6",
        "filename": "src/wasm/function-body-decoder-impl.h",
        "patchSetId": 5
      },
      "lineNbr": 6110,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2023-05-19T14:03:16Z",
      "side": 1,
      "message": "Assumptions are very strict in what they support. In particular, they do not support any calls.\nThe advantage over a `CHECK_EQ` is that this does not produce a branch, but still tells the compiler that the first parameter does not need any validation (which the compiler can use to eliminate code after inlining `PopArgs`).",
      "parentUuid": "aef92667_0b8bb243",
      "range": {
        "startLine": 6110,
        "startChar": 14,
        "endLine": 6110,
        "endChar": 25
      },
      "revId": "6a5f0daf9b6d7be29aabee3140389204930ffc57",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebf2cd08_b9efb8e6",
        "filename": "src/wasm/function-body-decoder-impl.h",
        "patchSetId": 5
      },
      "lineNbr": 6117,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2023-05-19T12:09:54Z",
      "side": 1,
      "message": "The call to `Peek` is just for type checking, isn\u0027t it? If so, could you mention that in a comment?",
      "revId": "6a5f0daf9b6d7be29aabee3140389204930ffc57",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "6a5f0daf9b6d7be29aabee3140389204930ffc57",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "6a5f0daf9b6d7be29aabee3140389204930ffc57",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6a5f0daf9b6d7be29aabee3140389204930ffc57",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6a5f0daf9b6d7be29aabee3140389204930ffc57",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}