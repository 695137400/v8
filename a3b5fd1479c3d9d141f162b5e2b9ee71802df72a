{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f3084409_1924d523",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2022-11-01T21:52:02Z",
      "side": 1,
      "message": "PTAL Camillo, as you seem to have written a lot of the enumeration code. Please redirect if there\u0027s a better reviewer. Most of this CL is factoring out some code so builtins-struct can call it.",
      "revId": "a3b5fd1479c3d9d141f162b5e2b9ee71802df72a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "15d21e0a_c62f8712",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2022-11-02T08:50:49Z",
      "side": 1,
      "message": "LGTM with some comments",
      "revId": "a3b5fd1479c3d9d141f162b5e2b9ee71802df72a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7006f93b_42ab7b85",
        "filename": "src/builtins/builtins-struct.cc",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2022-11-02T08:50:49Z",
      "side": 1,
      "message": "perf-comment: I guess this is too early to worry about these things: but for memory reasons we initialize the enum cache lazily in most cases. This might slow-down struct creation needlessly.\n\nCould we use some sentinel to given the `KeyAccumulator` a hint to lazily allocate the enum-cache in the shared old space. I guess you cannot directly figure this out from the map?",
      "range": {
        "startLine": 107,
        "startChar": 0,
        "endLine": 109,
        "endChar": 58
      },
      "revId": "a3b5fd1479c3d9d141f162b5e2b9ee71802df72a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e72d4233_3ea24936",
        "filename": "src/builtins/builtins-struct.cc",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2022-11-02T16:01:22Z",
      "side": 1,
      "message": "This is happening in struct *type* creation (since structs have fixed layout and are sealed), not struct instance creation, so that seems acceptable to me.\n\nIt\u0027s easy enough to figure out if the map is in the shared old space. The issue with making it lazy for shared struct maps requires extra synchronization code in addition making it allocate in the shared old space:\n\n- Loads of the enum length will need to be acquire\n- Setting the enum length and initializing the enum cache for shared structs will need to use compare-and-swap to account for races\n\nI\u0027ll do some quick hacking to see how invasive the change is, maybe it\u0027s not too bad.",
      "parentUuid": "7006f93b_42ab7b85",
      "range": {
        "startLine": 107,
        "startChar": 0,
        "endLine": 109,
        "endChar": 58
      },
      "revId": "a3b5fd1479c3d9d141f162b5e2b9ee71802df72a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8083162f_54dc5c37",
        "filename": "src/builtins/builtins-struct.cc",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2022-11-02T18:09:41Z",
      "side": 1,
      "message": "Thanks for the comment.\n\nYeah I think we\u0027ve been careful with the enum cache mostly since it\u0027s not directly user-visible when we create maps. SharedStructs are quite explicit.",
      "parentUuid": "e72d4233_3ea24936",
      "range": {
        "startLine": 107,
        "startChar": 0,
        "endLine": 109,
        "endChar": 58
      },
      "revId": "a3b5fd1479c3d9d141f162b5e2b9ee71802df72a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e87af3d_7a3370a2",
        "filename": "src/heap/factory.cc",
        "patchSetId": 1
      },
      "lineNbr": 422,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2022-11-02T08:50:49Z",
      "side": 1,
      "message": "Should this be `DCHECK_EQ`?\nIs is ok to have shared-heap indices or keys and allocate in the enum-cache in normal old space?",
      "range": {
        "startLine": 422,
        "startChar": 2,
        "endLine": 422,
        "endChar": 16
      },
      "revId": "a3b5fd1479c3d9d141f162b5e2b9ee71802df72a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "63074a52_15ae34d2",
        "filename": "src/heap/factory.cc",
        "patchSetId": 1
      },
      "lineNbr": 422,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2022-11-03T15:49:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0e87af3d_7a3370a2",
      "range": {
        "startLine": 422,
        "startChar": 2,
        "endLine": 422,
        "endChar": 16
      },
      "revId": "a3b5fd1479c3d9d141f162b5e2b9ee71802df72a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}