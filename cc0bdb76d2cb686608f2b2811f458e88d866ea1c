{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b1ef4f84_69762206",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 10,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2024-07-22T11:32:30Z",
      "side": 1,
      "message": "I read the design doc but I don\u0027t fully understand the usecase.\nThe output example in the doc is a list of all detached objects. Can you elaborate how you intend for it to be used?\nThe doc mentions that the intention is to detect leaking DOM objects, but not all detached objects are leaking.",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 6
      },
      "revId": "cc0bdb76d2cb686608f2b2811f458e88d866ea1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8ac6d1f_fba15cd8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 10,
      "author": {
        "id": 3439269
      },
      "writtenOn": "2024-07-24T23:02:10Z",
      "side": 1,
      "message": "We have customers that are running into memory leak issues due to accidentally leaving DOM objects detached from the tree without cleaning up. This tool is aiming to help those customers quickly identify the DOM nodes that are detached that is causing memory leaks, so they\u0027re able to root cause the issue in their code by cleaning up the corresponding detached elements.",
      "parentUuid": "b1ef4f84_69762206",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 6
      },
      "revId": "cc0bdb76d2cb686608f2b2811f458e88d866ea1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70496a32_789d4a6f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 10,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2024-07-29T16:06:38Z",
      "side": 1,
      "message": "I understand that, but what I don\u0027t understand is how, given a list of detached DOM objects, will your clients identify which one is leaking. Not all detached objects are leaking, and some detached objects are retained by other detached objects (so I expect at least retraining paths will also be needed). I\u0027m not sure I understandf how this list of nodes is sufficient without the rest of the snapshot in order to get the full picture.\nCan you elaborate a bit more? I\u0027m trying to make sure that this new api this CL is adding is actually doing what it needs to do.",
      "parentUuid": "f8ac6d1f_fba15cd8",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 6
      },
      "revId": "cc0bdb76d2cb686608f2b2811f458e88d866ea1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66bceb97_4b8ce9f4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 10,
      "author": {
        "id": 3439269
      },
      "writtenOn": "2024-07-29T20:28:58Z",
      "side": 1,
      "message": "Ideally, we will add a \"reveal in retainer path\" option which would take a full heap snapshot and will provide the user with more information about the retained objects. This is briefly touched upon in the explainer, however, isn\u0027t at this time implemented in the front end. These are next steps. Currently, the detached nodes this API provides are evaluated in blink to find the entire detached tree that contains the retained nodes. This will show the detached tree to the user in the front end. Here is the blink CL if it helps: https://chromium-review.googlesource.com/c/chromium/src/+/5634107\n\nSo users will have the surrounding tree and objects as context, as well as a retainer path to analyze.",
      "parentUuid": "70496a32_789d4a6f",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 6
      },
      "revId": "cc0bdb76d2cb686608f2b2811f458e88d866ea1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6f4d360_ae077ce0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 10,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2024-07-29T21:26:36Z",
      "side": 1,
      "message": "If the intention is to, as a followup, add a \"reveal in retainer path\" option which anyway requires a full heap snapshot, then why not get the snapshot to begin with? You stated that the motivation is too have a faster solution, but this planned followup kind of defeats that purpose, wouldn\u0027t it?",
      "parentUuid": "66bceb97_4b8ce9f4",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 6
      },
      "revId": "cc0bdb76d2cb686608f2b2811f458e88d866ea1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eab36e4a_43dca89e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 10,
      "author": {
        "id": 1329477
      },
      "writtenOn": "2024-07-29T21:34:00Z",
      "side": 1,
      "message": "We have customers for whom taking a full heap snapshot might take ~a minute or more, but for these particular examples, this method returns almost instantaneously. \n\nTaking a full heap snapshot is only required if you need to have V8 walk the retaining path for you. However, if you can look at the specific elements that are being retained, and know where they might be created or retained, having the short form do this is tremendously helpful.\n\nThe ability to rapidly iterate and validate whether elements are being retained has been very important for Edge customers, but Edge\u0027s API implements this via DOM mutation observers implemented within the associated agent, which have drawbacks that were discussed in the related design document. We\u0027re trying to bring that same benefit to Chromium at large, minus the drawbacks; and, we\u0027re not absolutely certain that we\u0027re planning to do the later \"associate this node ID to the full heap snapshot\" thing later, contingent on feedback on usage.",
      "parentUuid": "d6f4d360_ae077ce0",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 6
      },
      "revId": "cc0bdb76d2cb686608f2b2811f458e88d866ea1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c1032f6_9547b9e1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 10,
      "author": {
        "id": 3439269
      },
      "writtenOn": "2024-07-31T20:44:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eab36e4a_43dca89e",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 6
      },
      "revId": "cc0bdb76d2cb686608f2b2811f458e88d866ea1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8719d64_81c5e14b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 3439269
      },
      "writtenOn": "2024-07-15T20:25:55Z",
      "side": 1,
      "message": "Uploading Patchset 11 reset the review status. Camillo and Simon, could you give another review?",
      "revId": "cc0bdb76d2cb686608f2b2811f458e88d866ea1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e690ba2b_544463ac",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 3439269
      },
      "writtenOn": "2024-07-22T07:06:00Z",
      "side": 1,
      "message": "Pinging again to request a quick review for this V8 CL to see if it\u0027s ready to land. Thanks @Camillo",
      "revId": "cc0bdb76d2cb686608f2b2811f458e88d866ea1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "92b9e6c6_e12bcb53",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2024-07-22T08:15:40Z",
      "side": 1,
      "message": "Omer could you have a quick look from the GC side? \nMostly fine from me otherwise.",
      "revId": "cc0bdb76d2cb686608f2b2811f458e88d866ea1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aeb6d0ea_8d8b754e",
        "filename": "include/v8-profiler.h",
        "patchSetId": 11
      },
      "lineNbr": 1111,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2024-07-22T11:32:30Z",
      "side": 1,
      "message": "Newline between comment and previous method.",
      "range": {
        "startLine": 1111,
        "startChar": 0,
        "endLine": 1111,
        "endChar": 2
      },
      "revId": "cc0bdb76d2cb686608f2b2811f458e88d866ea1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c01be5e_f1e9891e",
        "filename": "include/v8-profiler.h",
        "patchSetId": 11
      },
      "lineNbr": 1111,
      "author": {
        "id": 3439269
      },
      "writtenOn": "2024-07-24T23:02:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aeb6d0ea_8d8b754e",
      "range": {
        "startLine": 1111,
        "startChar": 0,
        "endLine": 1111,
        "endChar": 2
      },
      "revId": "cc0bdb76d2cb686608f2b2811f458e88d866ea1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f97fd83c_781dbfc6",
        "filename": "src/profiler/heap-profiler.cc",
        "patchSetId": 11
      },
      "lineNbr": 52,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2024-07-22T11:32:30Z",
      "side": 1,
      "message": "I\u0027m not sure this is guaranteed to get you all detached objects. You iterate over V8 objects. Minor GCs in V8 can drop the V8 object in some cases (i.e. if it is unmodified), while the DOM object remain live. I\u0027m not sure such objects cannot be detached, in which case the returned vector will be missing objects.",
      "range": {
        "startLine": 52,
        "startChar": 48,
        "endLine": 52,
        "endChar": 75
      },
      "revId": "cc0bdb76d2cb686608f2b2811f458e88d866ea1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b80531d4_d3b34935",
        "filename": "src/profiler/heap-profiler.cc",
        "patchSetId": 11
      },
      "lineNbr": 52,
      "author": {
        "id": 3439269
      },
      "writtenOn": "2024-07-24T23:02:10Z",
      "side": 1,
      "message": "Could you elaborate on the cases where V8 objects getting GC\u0027ed while DOM objects remain alive when it\u0027s associated to the mentioned V8 objects? In our observation so far, even if we associate a javascript variable with a DOM object without any additional modification, it seems like the V8 object will be kept alive in the heap. It would be an interesting case to further look into as that could also cause memory issue, but I\u0027d like to limit the scope of this CL as the current implementation is able to address the customers\u0027 needs to identify detached elements.",
      "parentUuid": "f97fd83c_781dbfc6",
      "range": {
        "startLine": 52,
        "startChar": 48,
        "endLine": 52,
        "endChar": 75
      },
      "revId": "cc0bdb76d2cb686608f2b2811f458e88d866ea1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c46ce759_349ed4ff",
        "filename": "src/profiler/heap-profiler.cc",
        "patchSetId": 11
      },
      "lineNbr": 52,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2024-07-29T16:06:38Z",
      "side": 1,
      "message": "Please take a look in the code at parts guarded by `v8_flags.reclaim_unmodified_wrappers`. It\u0027s been around for a while and can reclaim, during a minor GC, the JS counterparts of DOM objects if they are unmodified and belong to a subset of types that can be reconstructed from the DOM object.\nI don\u0027t how you tested it and what tests you wrote for it, so I can\u0027t comment on why you\u0027ve never observed it. Note though that adding an object to a hash map for example would also count as modifying it (since the hash is cached on the object).\nLike I mentioned above, if we\u0027re adding a new api to V8, I\u0027d like to make sure it does what it should.",
      "parentUuid": "b80531d4_d3b34935",
      "range": {
        "startLine": 52,
        "startChar": 48,
        "endLine": 52,
        "endChar": 75
      },
      "revId": "cc0bdb76d2cb686608f2b2811f458e88d866ea1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7dfec5c_f9576b3c",
        "filename": "src/profiler/heap-profiler.cc",
        "patchSetId": 11
      },
      "lineNbr": 52,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2024-07-29T17:32:15Z",
      "side": 1,
      "message": "This method only follows V8-\u003eBlink traced handles. There\u0027s _many_ more detached DOM nodes. Since the method only seems to be interested in JS wrappers this seems sufficient.",
      "parentUuid": "c46ce759_349ed4ff",
      "range": {
        "startLine": 52,
        "startChar": 48,
        "endLine": 52,
        "endChar": 75
      },
      "revId": "cc0bdb76d2cb686608f2b2811f458e88d866ea1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30159f0a_b7c1feae",
        "filename": "src/profiler/heap-profiler.cc",
        "patchSetId": 11
      },
      "lineNbr": 52,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2024-07-29T17:43:58Z",
      "side": 1,
      "message": "What do you mean by \"sufficient\" in this context?\nIf this method intends to return *all* JSWrapper DOM objects and does so by following V8 to DOM edges, and some V8 objects are dropped, then the current implementation is not sufficient to fulfill the intention.",
      "parentUuid": "c7dfec5c_f9576b3c",
      "range": {
        "startLine": 52,
        "startChar": 48,
        "endLine": 52,
        "endChar": 75
      },
      "revId": "cc0bdb76d2cb686608f2b2811f458e88d866ea1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2c40805_b0fefd53",
        "filename": "src/profiler/heap-profiler.cc",
        "patchSetId": 11
      },
      "lineNbr": 52,
      "author": {
        "id": 3439269
      },
      "writtenOn": "2024-07-29T20:13:57Z",
      "side": 1,
      "message": "This function is intended as a quicker way to get the list of objects which would be flagged as detached in a full heap snapshot. Like in a full heap snapshot, this function doesn\u0027t enumerate every detached object, just those directly referenced by V8 wrapper objects. If a Blink object never had a JS wrapper, or if its JS wrapper has been garbage-collected, then it\u0027s okay to skip that object.",
      "parentUuid": "30159f0a_b7c1feae",
      "range": {
        "startLine": 52,
        "startChar": 48,
        "endLine": 52,
        "endChar": 75
      },
      "revId": "cc0bdb76d2cb686608f2b2811f458e88d866ea1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea0e8b75_2565f3fc",
        "filename": "src/profiler/heap-profiler.cc",
        "patchSetId": 11
      },
      "lineNbr": 52,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2024-07-29T21:26:36Z",
      "side": 1,
      "message": "\u003e This function is intended as a quicker way to get the list of objects which would be flagged as detached in a full heap snapshot.\n\nA full heap snapshot enumerates both the V8 heap and the Oilpan heap, which contains blink\u0027s GCed DOM objects. If the goal is \"to get the list of objects which would be flagged as detached in a full heap snapshot\", then you would need to iterate both heaps, not just the V8 heap.\n\n\u003e Like in a full heap snapshot, this function doesn\u0027t enumerate every detached object, just those directly referenced by V8 wrapper objects.\n\nHeap snapshot don\u0027t contain all detached objects, but they do (or at least should) currently contain all GCed detached objects, not just the ones referenced from V8.",
      "parentUuid": "a2c40805_b0fefd53",
      "range": {
        "startLine": 52,
        "startChar": 48,
        "endLine": 52,
        "endChar": 75
      },
      "revId": "cc0bdb76d2cb686608f2b2811f458e88d866ea1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b49b64c3_b3cf16bf",
        "filename": "src/profiler/heap-profiler.cc",
        "patchSetId": 11
      },
      "lineNbr": 52,
      "author": {
        "id": 1329477
      },
      "writtenOn": "2024-07-29T21:34:00Z",
      "side": 1,
      "message": "\u003e A full heap snapshot enumerates both the V8 heap and the Oilpan heap, which contains blink\u0027s GCed DOM objects. If the goal is \"to get the list of objects which would be flagged as detached in a full heap snapshot\", then you would need to iterate both heaps, not just the V8 heap.\n\nI don\u0027t think it\u0027s necessary to enumerate the Oilpan heap, because if the object hasn\u0027t been GC\u0027d in DOM but isn\u0027t accessible via V8, this isn\u0027t an issue per se of incorrect JavaScript. We\u0027re trying to find the problems related to programmer error, not just \"the Blink GC hasn\u0027t run to clean up your elements yet\" issues.",
      "parentUuid": "ea0e8b75_2565f3fc",
      "range": {
        "startLine": 52,
        "startChar": 48,
        "endLine": 52,
        "endChar": 75
      },
      "revId": "cc0bdb76d2cb686608f2b2811f458e88d866ea1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4b504de_2a9eef78",
        "filename": "src/profiler/heap-profiler.cc",
        "patchSetId": 11
      },
      "lineNbr": 52,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2024-07-30T07:36:31Z",
      "side": 1,
      "message": "\u003e What do you mean by \"sufficient\" in this context?\n\nThe functionality tries to find detached JS wrappers and this is exactly what is implemented.\n\n\u003e If this method intends to return all JSWrapper DOM objects and does so by following V8 to DOM edges, and some V8 objects are dropped, then the current implementation is not sufficient to fulfill the intention.\n\nIf a JS objects is reclaimed it\u0027s not showing up but also not a detached JS wrapper object. \n\nIn order to find a V8-\u003eDOM-\u003eV8 wrapper object this is sufficient because all DOM-\u003eV8 references are considered. Since all wrappers are always created via DOM there\u0027s always a DOM-\u003eV8 references present for them which is exactly what is considered here.",
      "parentUuid": "b49b64c3_b3cf16bf",
      "range": {
        "startLine": 52,
        "startChar": 48,
        "endLine": 52,
        "endChar": 75
      },
      "revId": "cc0bdb76d2cb686608f2b2811f458e88d866ea1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e660f45_d180b068",
        "filename": "src/profiler/heap-profiler.cc",
        "patchSetId": 11
      },
      "lineNbr": 52,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2024-07-30T21:14:51Z",
      "side": 1,
      "message": "I believe I misunderstood your intention. I thought you were trying to collect all detached DOM objects matching JSWrappers. I see now that what you\u0027re after is actually the JS objects. In that case, I agree that enumerating the Oilpan heap is not needed and this method does do what you intended. Resolving and sorry for the confusion.",
      "parentUuid": "d4b504de_2a9eef78",
      "range": {
        "startLine": 52,
        "startChar": 48,
        "endLine": 52,
        "endChar": 75
      },
      "revId": "cc0bdb76d2cb686608f2b2811f458e88d866ea1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8429f1ec_9fb45694",
        "filename": "src/profiler/heap-profiler.cc",
        "patchSetId": 11
      },
      "lineNbr": 54,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2024-07-22T11:32:30Z",
      "side": 1,
      "message": "This iterator iterates over code space and read only space as well. This are not needed for your purposes. You could use `HeapObjectIterator` to at least skip the read only space.",
      "range": {
        "startLine": 54,
        "startChar": 2,
        "endLine": 54,
        "endChar": 28
      },
      "revId": "cc0bdb76d2cb686608f2b2811f458e88d866ea1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "18438762_ec570282",
        "filename": "src/profiler/heap-profiler.cc",
        "patchSetId": 11
      },
      "lineNbr": 54,
      "author": {
        "id": 3439269
      },
      "writtenOn": "2024-07-24T23:02:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8429f1ec_9fb45694",
      "range": {
        "startLine": 54,
        "startChar": 2,
        "endLine": 54,
        "endChar": 28
      },
      "revId": "cc0bdb76d2cb686608f2b2811f458e88d866ea1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14b543e4_521dfdb5",
        "filename": "src/profiler/heap-profiler.cc",
        "patchSetId": 11
      },
      "lineNbr": 60,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2024-07-22T11:32:30Z",
      "side": 1,
      "message": "Since you\u0027re only interested in `JSApiWrapperObjects`, and their CppHeap counterparts IIRC all must inherit from `ScriptWrappable`, you could just iterate over `traced_handles` instead of iterating over the whole heap.",
      "range": {
        "startLine": 60,
        "startChar": 9,
        "endLine": 60,
        "endChar": 29
      },
      "revId": "cc0bdb76d2cb686608f2b2811f458e88d866ea1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de9115cb_e9ebe522",
        "filename": "src/profiler/heap-profiler.cc",
        "patchSetId": 11
      },
      "lineNbr": 60,
      "author": {
        "id": 3439269
      },
      "writtenOn": "2024-07-24T23:02:10Z",
      "side": 1,
      "message": "Yes this works, and iterating over `tracd_handles` rather than the heap seems to be the faster solution. Good catch! This has been implemented.",
      "parentUuid": "14b543e4_521dfdb5",
      "range": {
        "startLine": 60,
        "startChar": 9,
        "endLine": 60,
        "endChar": 29
      },
      "revId": "cc0bdb76d2cb686608f2b2811f458e88d866ea1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d57533a_97f97ab6",
        "filename": "src/profiler/heap-profiler.cc",
        "patchSetId": 11
      },
      "lineNbr": 69,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2024-07-22T11:32:30Z",
      "side": 1,
      "message": "`data` is already a `v8::Local\u003cv8::Value\u003e`. I believe this case here is redundant.",
      "range": {
        "startLine": 69,
        "startChar": 28,
        "endLine": 69,
        "endChar": 44
      },
      "revId": "cc0bdb76d2cb686608f2b2811f458e88d866ea1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bfae02ec_ac393f28",
        "filename": "src/profiler/heap-profiler.cc",
        "patchSetId": 11
      },
      "lineNbr": 69,
      "author": {
        "id": 3439269
      },
      "writtenOn": "2024-07-24T23:02:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9d57533a_97f97ab6",
      "range": {
        "startLine": 69,
        "startChar": 28,
        "endLine": 69,
        "endChar": 44
      },
      "revId": "cc0bdb76d2cb686608f2b2811f458e88d866ea1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}