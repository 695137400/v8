{
  "comments": [
    {
      "key": {
        "uuid": "78f30848_b8e0dcda",
        "filename": "src/compiler/simd-scalar-lowering.cc",
        "patchSetId": 5
      },
      "lineNbr": 2035,
      "author": {
        "id": 1001213
      },
      "writtenOn": "2020-09-09T20:47:11Z",
      "side": 1,
      "message": "Do we need this if int64 lowering is the next phase?",
      "range": {
        "startLine": 2035,
        "startChar": 0,
        "endLine": 2035,
        "endChar": 75
      },
      "revId": "8cd79422991950d995ecbc3c25c89d4ed8637055",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91597c81_d3f0896b",
        "filename": "src/compiler/simd-scalar-lowering.cc",
        "patchSetId": 5
      },
      "lineNbr": 2035,
      "author": {
        "id": 1249724
      },
      "writtenOn": "2020-09-09T20:55:43Z",
      "side": 1,
      "message": "I think we need this. This changes i64x2 to i32x4, which can happen if e.g. i32x4.neg(i64x2.neg(x)) (for whatever reason).\nThe i64 lowering case takes care when i64x2 is lowered to 2 nodes of i64.",
      "parentUuid": "78f30848_b8e0dcda",
      "range": {
        "startLine": 2035,
        "startChar": 0,
        "endLine": 2035,
        "endChar": 75
      },
      "revId": "8cd79422991950d995ecbc3c25c89d4ed8637055",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9da0f76_45160336",
        "filename": "src/compiler/simd-scalar-lowering.cc",
        "patchSetId": 5
      },
      "lineNbr": 2035,
      "author": {
        "id": 1001213
      },
      "writtenOn": "2020-09-09T21:42:26Z",
      "side": 1,
      "message": "I guess I expected for reversing bytes, i64x2 could be converted here to 2 i64 ReverseBytes, which int64lowering can handle:\nhttps://source.chromium.org/chromium/chromium/src/+/master:v8/src/compiler/int64-lowering.cc;drc\u003dc0eee179b38d04d02721446a6f7ef4959f0ce885;l\u003d864",
      "parentUuid": "91597c81_d3f0896b",
      "range": {
        "startLine": 2035,
        "startChar": 0,
        "endLine": 2035,
        "endChar": 75
      },
      "revId": "8cd79422991950d995ecbc3c25c89d4ed8637055",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14317226_daa1d532",
        "filename": "src/compiler/simd-scalar-lowering.cc",
        "patchSetId": 5
      },
      "lineNbr": 2035,
      "author": {
        "id": 1249724
      },
      "writtenOn": "2020-09-09T22:11:29Z",
      "side": 1,
      "message": "Yea you\u0027re right, kSimd128ReverseBytes right now only handles lowering to 32x4, could add in support to lower to 64x2 too.\n\nMilad, is there also a test case that you can add? Or is this causing failures on existing test cases when running on BE machines?",
      "parentUuid": "d9da0f76_45160336",
      "range": {
        "startLine": 2035,
        "startChar": 0,
        "endLine": 2035,
        "endChar": 75
      },
      "revId": "8cd79422991950d995ecbc3c25c89d4ed8637055",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c29c07f_5c323c7e",
        "filename": "src/compiler/simd-scalar-lowering.cc",
        "patchSetId": 5
      },
      "lineNbr": 2035,
      "author": {
        "id": 1323125
      },
      "writtenOn": "2020-09-09T22:28:49Z",
      "side": 1,
      "message": "That\u0027s right it only lowers to 32x4 at the moment. kSimd128ReverseBytes is only called on BE machines as WASM is LE enforced. After https://chromium-review.googlesource.com/c/v8/v8/+/2399051 all the lowered F64x2 tests started failing on our BE machines as kSimd128ReverseBytes didn\u0027t know how to handle 64x2 inputs. This CL is enabling that.",
      "parentUuid": "14317226_daa1d532",
      "range": {
        "startLine": 2035,
        "startChar": 0,
        "endLine": 2035,
        "endChar": 75
      },
      "revId": "8cd79422991950d995ecbc3c25c89d4ed8637055",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}