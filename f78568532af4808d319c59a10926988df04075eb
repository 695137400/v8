{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9e26d1f5_41cbd9da",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2021-01-18T09:40:32Z",
      "side": 1,
      "message": "Thanks, addressed one comment, follow-up on the second. PTAL.",
      "revId": "f78568532af4808d319c59a10926988df04075eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2f96cea_c44af204",
        "filename": "src/wasm/baseline/liftoff-compiler.cc",
        "patchSetId": 7
      },
      "lineNbr": 273,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2021-01-15T18:37:54Z",
      "side": 1,
      "message": "I think this return should be before the FATAL above.",
      "revId": "f78568532af4808d319c59a10926988df04075eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4886bdc6_0919862c",
        "filename": "src/wasm/baseline/liftoff-compiler.cc",
        "patchSetId": 7
      },
      "lineNbr": 273,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2021-01-18T09:40:32Z",
      "side": 1,
      "message": "I would have thought that passing --liftoff-only should fail even on unsupported platforms. That could help them implement Liftoff, and would avoid confusion if TurboFan code is being executed even though --liftoff-only was passed.",
      "parentUuid": "d2f96cea_c44af204",
      "revId": "f78568532af4808d319c59a10926988df04075eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3df00166_c17e3b10",
        "filename": "src/wasm/baseline/liftoff-compiler.cc",
        "patchSetId": 7
      },
      "lineNbr": 273,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2021-01-18T09:47:27Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4886bdc6_0919862c",
      "revId": "f78568532af4808d319c59a10926988df04075eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad459d12_d5258f3e",
        "filename": "src/wasm/baseline/liftoff-compiler.cc",
        "patchSetId": 7
      },
      "lineNbr": 297,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2021-01-15T18:37:54Z",
      "side": 1,
      "message": "Doesn\u0027t this just say that if there is any staged feature enabled, then reftypes can bailout, no matter if reftypes is shipped or not?\n\nWould it not be easier to say\nif (reason \u003d\u003d kExternRef \u0026\u0026 kStagedFeatures.has_reftypes()) return;",
      "revId": "f78568532af4808d319c59a10926988df04075eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "070de17a_7cd0dce1",
        "filename": "src/wasm/baseline/liftoff-compiler.cc",
        "patchSetId": 7
      },
      "lineNbr": 297,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2021-01-18T09:40:32Z",
      "side": 1,
      "message": "Ack, it\u0027s better to look at {reason} instead of the enabled features. I restructured the checks to:\n   STATIC_ASSERT(kStagedFeatures.has_simd());\n   if (reason \u003d\u003d kSimd) {\n     DCHECK(env-\u003eenabled_features.has_simd());\n     return;\n   }\n\n(and similar for reftypes)\nThe static assert forces us to look at this again before shipping the feature.",
      "parentUuid": "ad459d12_d5258f3e",
      "revId": "f78568532af4808d319c59a10926988df04075eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}