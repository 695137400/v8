{
  "comments": [
    {
      "key": {
        "uuid": "be57ac12_ef0e34e0",
        "filename": "src/heap/cppgc/marker.cc",
        "patchSetId": 8
      },
      "lineNbr": 122,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-06-03T14:32:21Z",
      "side": 1,
      "message": "marking_visitor_-\u003emarked_bytes()",
      "range": {
        "startLine": 122,
        "startChar": 52,
        "endLine": 122,
        "endChar": 53
      },
      "revId": "28de2bd013d7352dd44922534ced6e3251b2baf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f5e1c6f_b107b818",
        "filename": "src/heap/cppgc/marker.cc",
        "patchSetId": 8
      },
      "lineNbr": 122,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-06-03T15:11:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "be57ac12_ef0e34e0",
      "range": {
        "startLine": 122,
        "startChar": 52,
        "endLine": 122,
        "endChar": 53
      },
      "revId": "28de2bd013d7352dd44922534ced6e3251b2baf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c075805c_4e67f1c4",
        "filename": "src/heap/cppgc/stats-collector.h",
        "patchSetId": 8
      },
      "lineNbr": 48,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-06-03T14:32:21Z",
      "side": 1,
      "message": "nit: Is StatsCollector\u0026\u0026 allowed?\n(I don\u0027t think it should be needed)",
      "range": {
        "startLine": 48,
        "startChar": 23,
        "endLine": 48,
        "endChar": 38
      },
      "revId": "28de2bd013d7352dd44922534ced6e3251b2baf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3204464d_40dd144b",
        "filename": "src/heap/cppgc/stats-collector.h",
        "patchSetId": 8
      },
      "lineNbr": 48,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-06-03T15:11:30Z",
      "side": 1,
      "message": "No, it\u0027s not allowed. The compiler won\u0027t generate a default move ctor because the copy ctor is deleted. (We can rely on this.)",
      "parentUuid": "c075805c_4e67f1c4",
      "range": {
        "startLine": 48,
        "startChar": 23,
        "endLine": 48,
        "endChar": 38
      },
      "revId": "28de2bd013d7352dd44922534ced6e3251b2baf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e2fcff5_93462b8f",
        "filename": "src/heap/cppgc/stats-collector.h",
        "patchSetId": 8
      },
      "lineNbr": 56,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-06-03T14:32:21Z",
      "side": 1,
      "message": "I think the term SafePoint is very vague here (I\u0027m not even sure why OutOfLineAllocation is considered a safe point). Can we give this method a more descriptive name?",
      "range": {
        "startLine": 56,
        "startChar": 5,
        "endLine": 56,
        "endChar": 15
      },
      "revId": "28de2bd013d7352dd44922534ced6e3251b2baf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15e95bd0_66c89ca6",
        "filename": "src/heap/cppgc/stats-collector.h",
        "patchSetId": 8
      },
      "lineNbr": 56,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-06-03T15:11:30Z",
      "side": 1,
      "message": "Safepoints are locations where we can execute GC. I think the meaning matches exactly.\n\nOOL allocate is a safepoint as our free lists, sweeper, LABs, and so on are in consistent state.",
      "parentUuid": "2e2fcff5_93462b8f",
      "range": {
        "startLine": 56,
        "startChar": 5,
        "endLine": 56,
        "endChar": 15
      },
      "revId": "28de2bd013d7352dd44922534ced6e3251b2baf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "947d0251_297f496d",
        "filename": "src/heap/cppgc/stats-collector.h",
        "patchSetId": 8
      },
      "lineNbr": 56,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-06-03T15:19:03Z",
      "side": 1,
      "message": "I think what confuses me here is in what regard are these points safe?\n\nWe have too many terms called safepoints. For example, here it\u0027s locations where you might start a GC, but elsewhere it means you are guaranteed not to have a stack.\nTo me this seems confusing.",
      "parentUuid": "15e95bd0_66c89ca6",
      "range": {
        "startLine": 56,
        "startChar": 5,
        "endLine": 56,
        "endChar": 15
      },
      "revId": "28de2bd013d7352dd44922534ced6e3251b2baf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "122368a2_6634614d",
        "filename": "src/heap/cppgc/stats-collector.h",
        "patchSetId": 8
      },
      "lineNbr": 56,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-06-03T15:34:26Z",
      "side": 1,
      "message": "Safe point is a location where we may safely do GC :) I think there\u0027s multiple such safe points which all have different characteristics.\n\nWe should probably be more explicit when talking about \"safepoints without stack\" because there we make use of the property that there\u0027s no stack.\n\nI renamed this one to \"NotifySafePointForConservativeCollection\" to make clear what we can do there.",
      "parentUuid": "947d0251_297f496d",
      "range": {
        "startLine": 56,
        "startChar": 5,
        "endLine": 56,
        "endChar": 15
      },
      "revId": "28de2bd013d7352dd44922534ced6e3251b2baf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48975266_09720cd6",
        "filename": "src/heap/cppgc/stats-collector.h",
        "patchSetId": 8
      },
      "lineNbr": 88,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-06-03T14:32:21Z",
      "side": 1,
      "message": "nit: I don\u0027t think these values can be negative. If you explicitly free something, you increment the explicitly_freed_bytes_since_safepoint_ counter. I don\u0027t see where we will decrement the counters.",
      "range": {
        "startLine": 88,
        "startChar": 70,
        "endLine": 88,
        "endChar": 78
      },
      "revId": "28de2bd013d7352dd44922534ced6e3251b2baf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7bc6649a_df93bf88",
        "filename": "src/heap/cppgc/stats-collector.h",
        "patchSetId": 8
      },
      "lineNbr": 88,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-06-03T15:11:30Z",
      "side": 1,
      "message": "allocated_bytes_since_end_of_marking_ can be negative as the comment states. After marking that value is 0. At this point an explicit free can put it \u003c0.\n\nThe other values are themselves always positive but always used as deltas which is why we keep int64_t arithmetic.\n\nI added a comment that should describe this better.",
      "parentUuid": "48975266_09720cd6",
      "range": {
        "startLine": 88,
        "startChar": 70,
        "endLine": 88,
        "endChar": 78
      },
      "revId": "28de2bd013d7352dd44922534ced6e3251b2baf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a5bac93_5ff93085",
        "filename": "src/heap/cppgc/stats-collector.h",
        "patchSetId": 8
      },
      "lineNbr": 88,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-06-03T15:19:03Z",
      "side": 1,
      "message": "Ack. I thought the comment was regarding explicitly_freed_bytes_since_safepoint_ because it explicitly mentioned explicitly freeing an object.",
      "parentUuid": "7bc6649a_df93bf88",
      "range": {
        "startLine": 88,
        "startChar": 70,
        "endLine": 88,
        "endChar": 78
      },
      "revId": "28de2bd013d7352dd44922534ced6e3251b2baf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45b989c8_03d0c0f4",
        "filename": "src/heap/cppgc/sweeper.cc",
        "patchSetId": 8
      },
      "lineNbr": 512,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-06-03T14:32:21Z",
      "side": 1,
      "message": "Should we have an explicit NotifySweepingStarted call (Instead of it being implicit via NotifyMarkingCompleted)?\nI realize this makes StatsCollector\u0027s GarbageCollectionState more complicated but maybe it makes sense for the standalone library?",
      "range": {
        "startLine": 512,
        "startChar": 22,
        "endLine": 512,
        "endChar": 45
      },
      "revId": "28de2bd013d7352dd44922534ced6e3251b2baf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50554b65_4e17928e",
        "filename": "src/heap/cppgc/sweeper.cc",
        "patchSetId": 8
      },
      "lineNbr": 512,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-06-03T15:11:30Z",
      "side": 1,
      "message": "I am up for adding if we need it. Right now it does not add any value and complicates the state as we need a name for \"after marking but before sweeping\".",
      "parentUuid": "45b989c8_03d0c0f4",
      "range": {
        "startLine": 512,
        "startChar": 22,
        "endLine": 512,
        "endChar": 45
      },
      "revId": "28de2bd013d7352dd44922534ced6e3251b2baf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}