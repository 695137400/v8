{
  "comments": [
    {
      "key": {
        "uuid": "1babaeea_4ec8cd90",
        "filename": "src/objects/transitions.cc",
        "patchSetId": 17
      },
      "lineNbr": 121,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2020-06-25T09:22:04Z",
      "side": 1,
      "message": "What about adding similar code to line 108 above here so we can avoid searching in InsertWithNewArray? Perhaps we should also rename TransitionsAccessor::Insert to TransitionsAccessor::Set?",
      "revId": "cdd94cf570ff10b9236b0d8af156e9dfa1a76fe3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "637a89a2_a21e5f33",
        "filename": "src/objects/transitions.cc",
        "patchSetId": 17
      },
      "lineNbr": 121,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2020-06-25T10:37:44Z",
      "side": 1,
      "message": "If you are talking about the case where we are going to be replacing the target in the existing index, I replied to the other comment with suggestions.\n\nIf you are talking about the case where we add a new transition, we would have to perform the search to know whether to insert in index 0 or 1.",
      "parentUuid": "1babaeea_4ec8cd90",
      "revId": "cdd94cf570ff10b9236b0d8af156e9dfa1a76fe3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1eab09db_b637b84f",
        "filename": "src/objects/transitions.cc",
        "patchSetId": 17
      },
      "lineNbr": 121,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2020-06-25T11:31:20Z",
      "side": 1,
      "message": "What I\u0027m suggesting here is the equivalent of your option 2 from the other comment; I\u0027d just move it down a little to the case !GetSimpleTransition().is_null() since that\u0027s the only case were we have an existing transition already.\n\nNote that we don\u0027t really need to do a search, we can reuse the check from line 108 as I mentioned. Basically you can extend the check at line 122 to also check whether GetSimpleTransitionKey(simple_transition) !\u003d *name || GetTargetDetails(*name, *target).attributes() !\u003d GetSimpleTransitionDetails(...).attributes()",
      "parentUuid": "637a89a2_a21e5f33",
      "revId": "cdd94cf570ff10b9236b0d8af156e9dfa1a76fe3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db1eb6ee_234a3320",
        "filename": "src/objects/transitions.cc",
        "patchSetId": 17
      },
      "lineNbr": 121,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2020-06-25T12:44:18Z",
      "side": 1,
      "message": "We can reuse parts of the check in 108 but we can\u0027t reuse as-is. That check know that the flag is SIMPLE_PROPERTY_TRANSITION. However, at this point we do not know this. For example, it could be SPECIAL_TRANSITION and in that case we only care about the name and not the details. If it\u0027s not special transition we have to match name AND details (not OR as you pointed in your comment).\n\nAnd even then this does not avoid searching for cases where we have a transition and we are adding a second one. TransitionArray is *not* append only so we need to know whether we should insert the new one in index 0, or index 1.\n\nThe only way I see us avoid \"searching\" is to change it to \"comparison\" of the elements (which is what the search does inside anyway). For this, we could use a mix of CompareName and CompareDetails.",
      "parentUuid": "1eab09db_b637b84f",
      "revId": "cdd94cf570ff10b9236b0d8af156e9dfa1a76fe3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}