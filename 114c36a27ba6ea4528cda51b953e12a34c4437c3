{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "29863f4e_bac63c4d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 24
      },
      "lineNbr": 0,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2021-06-16T16:31:54Z",
      "side": 1,
      "message": "Thanks, guys! PTAL at this \"small\" template magic addition.",
      "revId": "114c36a27ba6ea4528cda51b953e12a34c4437c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39779bd1_9233f670",
        "filename": "include/v8-fast-api-calls.h",
        "patchSetId": 24
      },
      "lineNbr": 560,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-06-17T06:40:57Z",
      "side": 1,
      "message": "Hmm this looks like overkill. We just need to define a struct templatized by primitive CTypeInfo::Type that carries its underlying C++ type.",
      "revId": "114c36a27ba6ea4528cda51b953e12a34c4437c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f76869c_3ee627c0",
        "filename": "include/v8-fast-api-calls.h",
        "patchSetId": 24
      },
      "lineNbr": 560,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2021-06-17T08:24:40Z",
      "side": 1,
      "message": "My first attempt was way shorter and it employed typeid, but we don\u0027t use RTTI, so that\u0027s unavailable. I\u0027m not aware of other way in C++ to compare two types for identity (and this is not too complex, IMO). I\u0027m open for other suggestions, but that was really the most concise solution I could come up with. The only improvement I\u0027m thinking about is renaming T and U to more descriptive type names.",
      "parentUuid": "39779bd1_9233f670",
      "revId": "114c36a27ba6ea4528cda51b953e12a34c4437c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "938330e5_b85aed3d",
        "filename": "include/v8-fast-api-calls.h",
        "patchSetId": 24
      },
      "lineNbr": 560,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-06-18T07:54:49Z",
      "side": 1,
      "message": "What I\u0027m imagining is having something like\nstatic_assert(std::is_same\u003cT, CTypeInfoTraits\u003ctype_info\u003e::ctype\u003e::value);\nat the top of CopyAndConvertArrayToCppBuffer.\n\nThen the task is to define CTypeInfoTraits\u003ctype_info\u003e such that its ctype component is the underlying C type.",
      "parentUuid": "4f76869c_3ee627c0",
      "revId": "114c36a27ba6ea4528cda51b953e12a34c4437c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8185635a_157e7b16",
        "filename": "include/v8-fast-api-calls.h",
        "patchSetId": 24
      },
      "lineNbr": 560,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2021-06-18T13:45:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "938330e5_b85aed3d",
      "revId": "114c36a27ba6ea4528cda51b953e12a34c4437c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49a5c62d_5bd01ac5",
        "filename": "include/v8-fast-api-calls.h",
        "patchSetId": 24
      },
      "lineNbr": 574,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-06-17T06:40:57Z",
      "side": 1,
      "message": "The name isn\u0027t very good. What\u0027s the idea here?\n\nDon\u0027t you want to split the primitive from the non-primitive types? In that case I\u0027d define PRIMITVE_FOO and FOO (or ALL_FOO).",
      "revId": "114c36a27ba6ea4528cda51b953e12a34c4437c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce5381dc_420a5304",
        "filename": "include/v8-fast-api-calls.h",
        "patchSetId": 24
      },
      "lineNbr": 574,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2021-06-17T08:24:40Z",
      "side": 1,
      "message": "I needed to split ApiObject out, because it\u0027s deprecated and can\u0027t be instantiated (which SPECIALIZE_C_TYPE_MATCHES_INFO attempts to do).",
      "parentUuid": "49a5c62d_5bd01ac5",
      "revId": "114c36a27ba6ea4528cda51b953e12a34c4437c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3055694d_2f633eac",
        "filename": "include/v8-fast-api-calls.h",
        "patchSetId": 24
      },
      "lineNbr": 574,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2021-06-18T13:45:12Z",
      "side": 1,
      "message": "Renamed, PTAL again.",
      "parentUuid": "ce5381dc_420a5304",
      "revId": "114c36a27ba6ea4528cda51b953e12a34c4437c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9d295ca_4d06d808",
        "filename": "include/v8.h",
        "patchSetId": 24
      },
      "lineNbr": 4427,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-06-17T06:40:57Z",
      "side": 1,
      "message": "Please update.",
      "range": {
        "startLine": 4427,
        "startChar": 41,
        "endLine": 4427,
        "endChar": 51
      },
      "revId": "114c36a27ba6ea4528cda51b953e12a34c4437c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "69189254_b2c58ea9",
        "filename": "include/v8.h",
        "patchSetId": 24
      },
      "lineNbr": 4427,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2021-06-17T08:24:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c9d295ca_4d06d808",
      "range": {
        "startLine": 4427,
        "startChar": 41,
        "endLine": 4427,
        "endChar": 51
      },
      "revId": "114c36a27ba6ea4528cda51b953e12a34c4437c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bfc5fa0f_c9162c8d",
        "filename": "src/api/api-inl.h",
        "patchSetId": 24
      },
      "lineNbr": 261,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-06-17T06:40:57Z",
      "side": 1,
      "message": "I find this name confusing, as this is not a CTypeInfo.",
      "range": {
        "startLine": 261,
        "startChar": 30,
        "endLine": 261,
        "endChar": 39
      },
      "revId": "114c36a27ba6ea4528cda51b953e12a34c4437c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ec07a24_2f8cfd3c",
        "filename": "src/api/api-inl.h",
        "patchSetId": 24
      },
      "lineNbr": 261,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-06-17T06:40:57Z",
      "side": 1,
      "message": "Shouldn\u0027t this be CTypeInfo::Type instead of uint8_t?\n\nActually, if you plan to go with the current setup where clamped and restricted etc. are not part of the CTypeInfo::Type but are encoded in separate flags then just the CTypeInfo::Type is not enough.",
      "range": {
        "startLine": 261,
        "startChar": 22,
        "endLine": 261,
        "endChar": 29
      },
      "revId": "114c36a27ba6ea4528cda51b953e12a34c4437c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89fab818_061b0622",
        "filename": "src/api/api-inl.h",
        "patchSetId": 24
      },
      "lineNbr": 261,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2021-06-17T08:24:40Z",
      "side": 1,
      "message": "I can\u0027t turn it into CTypeInfo::Type, because it\u0027s defined in v8-fast-api-calls.h and I can\u0027t include it in v8.h.\nRegarding clamped, restricted, etc. - that\u0027s the current design, I\u0027ll extend this with another uint8_t representing the Flags.",
      "parentUuid": "1ec07a24_2f8cfd3c",
      "range": {
        "startLine": 261,
        "startChar": 22,
        "endLine": 261,
        "endChar": 29
      },
      "revId": "114c36a27ba6ea4528cda51b953e12a34c4437c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "534012d2_a401ac11",
        "filename": "src/api/api-inl.h",
        "patchSetId": 24
      },
      "lineNbr": 261,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2021-06-17T08:24:40Z",
      "side": 1,
      "message": "Semantically it is a type info, it\u0027s just the underlying representation of the enum. Or maybe I could name it just `type`?",
      "parentUuid": "bfc5fa0f_c9162c8d",
      "range": {
        "startLine": 261,
        "startChar": 30,
        "endLine": 261,
        "endChar": 39
      },
      "revId": "114c36a27ba6ea4528cda51b953e12a34c4437c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f8706ff_cbc7c7ff",
        "filename": "src/api/api-inl.h",
        "patchSetId": 24
      },
      "lineNbr": 261,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2021-06-18T13:45:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "89fab818_061b0622",
      "range": {
        "startLine": 261,
        "startChar": 22,
        "endLine": 261,
        "endChar": 29
      },
      "revId": "114c36a27ba6ea4528cda51b953e12a34c4437c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d2d37a5_91ccaa80",
        "filename": "src/api/api-inl.h",
        "patchSetId": 24
      },
      "lineNbr": 261,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2021-06-18T13:45:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "534012d2_a401ac11",
      "range": {
        "startLine": 261,
        "startChar": 30,
        "endLine": 261,
        "endChar": 39
      },
      "revId": "114c36a27ba6ea4528cda51b953e12a34c4437c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e38375d6_32b7a4c1",
        "filename": "src/api/api-inl.h",
        "patchSetId": 24
      },
      "lineNbr": 265,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-06-17T06:40:57Z",
      "side": 1,
      "message": "We should be able to end up with a static_assert instead.",
      "revId": "114c36a27ba6ea4528cda51b953e12a34c4437c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d73f88c9_a3fd37ed",
        "filename": "src/api/api-inl.h",
        "patchSetId": 24
      },
      "lineNbr": 265,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2021-06-17T08:24:40Z",
      "side": 1,
      "message": "Done, although I\u0027m not sure it looks very good now.",
      "parentUuid": "e38375d6_32b7a4c1",
      "revId": "114c36a27ba6ea4528cda51b953e12a34c4437c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}