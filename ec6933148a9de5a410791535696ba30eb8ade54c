{
  "comments": [
    {
      "key": {
        "uuid": "73aeb289_92499a67",
        "filename": "src/heap/cppgc-js/cpp-heap.cc",
        "patchSetId": 12
      },
      "lineNbr": 71,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-06-16T07:55:24Z",
      "side": 1,
      "message": "Is this due to the style guide changes?",
      "range": {
        "startLine": 71,
        "startChar": 62,
        "endLine": 71,
        "endChar": 63
      },
      "revId": "ec6933148a9de5a410791535696ba30eb8ade54c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c98b6512_723a8ee4",
        "filename": "src/heap/cppgc-js/cpp-heap.cc",
        "patchSetId": 12
      },
      "lineNbr": 71,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-06-16T11:58:38Z",
      "side": 1,
      "message": "Yeah, the style guide allows non-const references. While they make it harder to distinguish ref vs value semantics they allow encoding of non-null refs.\n\nWe don\u0027t follow it 100% but for most parts in cppgc we return mutable refs when we know that we cannot have a null value.\n\nLMK if we should keep this style to cppgc\u0027s core.",
      "parentUuid": "73aeb289_92499a67",
      "range": {
        "startLine": 71,
        "startChar": 62,
        "endLine": 71,
        "endChar": 63
      },
      "revId": "ec6933148a9de5a410791535696ba30eb8ade54c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56120dee_d30f557a",
        "filename": "src/heap/cppgc-js/cpp-heap.cc",
        "patchSetId": 12
      },
      "lineNbr": 71,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-06-16T13:25:14Z",
      "side": 1,
      "message": "sgtm",
      "parentUuid": "c98b6512_723a8ee4",
      "range": {
        "startLine": 71,
        "startChar": 62,
        "endLine": 71,
        "endChar": 63
      },
      "revId": "ec6933148a9de5a410791535696ba30eb8ade54c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0819c7ac_cf5fdfb0",
        "filename": "src/heap/cppgc/marking-visitor.h",
        "patchSetId": 12
      },
      "lineNbr": 38,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-06-16T11:35:23Z",
      "side": 1,
      "message": "I understand this as a wrapper so we don\u0027t try to obtain a TraceDescriptor from v8 code.\nDoes this serve another purpose?",
      "range": {
        "startLine": 38,
        "startChar": 7,
        "endLine": 38,
        "endChar": 17
      },
      "revId": "ec6933148a9de5a410791535696ba30eb8ade54c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92d6f4b2_bf20c446",
        "filename": "src/heap/cppgc/marking-visitor.h",
        "patchSetId": 12
      },
      "lineNbr": 38,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-06-16T11:58:38Z",
      "side": 1,
      "message": "Yes, it\u0027s to avoid TraceDescriptor and also to avoid duplicating the internals of MarkHeader which deals with in-construction objects. It\u0027s currently not specified when to attach wrapper (JS) to wrappable (C++), so depending on how the setup code looks like we may encounter in-construction objects.",
      "parentUuid": "0819c7ac_cf5fdfb0",
      "range": {
        "startLine": 38,
        "startChar": 7,
        "endLine": 38,
        "endChar": 17
      },
      "revId": "ec6933148a9de5a410791535696ba30eb8ade54c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}