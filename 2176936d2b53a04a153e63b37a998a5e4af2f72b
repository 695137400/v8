{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "44084c27_7a755377",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1519522
      },
      "writtenOn": "2024-10-08T12:12:08Z",
      "side": 1,
      "message": "Hi! I think this is ready for a first round of review. See https://docs.google.com/document/d/1WkyEynMluvIr0LBmrapyF7MiE8wIHFHnlP5B6FFhQuA/edit#heading\u003dh.c44c9y2o0s3i for context. It seems to be pretty much working now, except for non-leaptiering builds. I guess for now, those will require another bunch of `#ifdef V8_ENABLE_LEAPTIERING`, at least I couldn\u0027t come up with a better solution so far.\n\nSee the follow-up CL for an example of how this will be used. Basically, it\u0027ll give us a trusted way of obtaining the dispatch entry used for calling a function. We could consider storing these also in the JS frames, which might help the deoptimizer and other code that inspects frames. But I haven\u0027t thought about that too deply.\n\nI\u0027ll also do another pass and add more DCHECKs and static_asserts where we make assumptions about the JS calling convention.\n\nHappy to discuss more details offline, let me know!",
      "revId": "2176936d2b53a04a153e63b37a998a5e4af2f72b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5886464c_ee343040",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2024-10-09T16:07:37Z",
      "side": 1,
      "message": "First round of comments.",
      "revId": "2176936d2b53a04a153e63b37a998a5e4af2f72b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e3860b63_99bbdbfa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1519522
      },
      "writtenOn": "2024-10-09T16:52:39Z",
      "side": 1,
      "message": "Thanks!",
      "revId": "2176936d2b53a04a153e63b37a998a5e4af2f72b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d313251_aa0157f6",
        "filename": "src/codegen/arm64/macro-assembler-arm64.cc",
        "patchSetId": 12
      },
      "lineNbr": 1524,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2024-10-09T16:07:37Z",
      "side": 1,
      "message": "Do dispatch handles look like Smis? We might need to store them in tagged form.",
      "range": {
        "startLine": 1524,
        "startChar": 9,
        "endLine": 1524,
        "endChar": 46
      },
      "revId": "2176936d2b53a04a153e63b37a998a5e4af2f72b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "29cff819_f51b8b44",
        "filename": "src/codegen/arm64/macro-assembler-arm64.cc",
        "patchSetId": 12
      },
      "lineNbr": 1524,
      "author": {
        "id": 1519522
      },
      "writtenOn": "2024-10-09T16:52:39Z",
      "side": 1,
      "message": "Right yes, they look like Smis. I\u0027ve added a `static_assert` here that the shift amount is greater than 0 so that the lower bits are zero.",
      "parentUuid": "0d313251_aa0157f6",
      "range": {
        "startLine": 1524,
        "startChar": 9,
        "endLine": 1524,
        "endChar": 46
      },
      "revId": "2176936d2b53a04a153e63b37a998a5e4af2f72b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0287905e_1e3268c8",
        "filename": "src/codegen/interface-descriptors.h",
        "patchSetId": 12
      },
      "lineNbr": 890,
      "author": {
        "id": 1519522
      },
      "writtenOn": "2024-10-08T12:12:08Z",
      "side": 1,
      "message": "Let me know if you have thoughts here. It took me a while to understand that this was the interface descriptor that I cared about, and that the others that also use `DEFINE_JS_PARAMETERS` are basically \"builtins with a js-like calling convention\". So happy to add more documentation or change names if that makes things more clear.",
      "range": {
        "startLine": 890,
        "startChar": 0,
        "endLine": 890,
        "endChar": 80
      },
      "revId": "2176936d2b53a04a153e63b37a998a5e4af2f72b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6819f8bb_a7fe0d59",
        "filename": "src/codegen/interface-descriptors.h",
        "patchSetId": 12
      },
      "lineNbr": 896,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2024-10-09T16:07:37Z",
      "side": 1,
      "message": "It feels like we should be passing this new argument everywhere, so this should rather be a part of `DEFINE_JS_PARAMETERS`/`DEFINE_JS_PARAMETER_TYPES` macros.\nThe idea behind `DEFINE_JS_PARAMETERS*` macros is that there are helper \"impl\" builtins which receive additional arguments on top of regular JS parameters and the \"parent\" builtin (which has a regular JS calling convention) just adds some data and passes the rest of JS arguments as is.",
      "revId": "2176936d2b53a04a153e63b37a998a5e4af2f72b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e258f404_4460ed35",
        "filename": "src/codegen/interface-descriptors.h",
        "patchSetId": 12
      },
      "lineNbr": 896,
      "author": {
        "id": 1519522
      },
      "writtenOn": "2024-10-09T16:52:39Z",
      "side": 1,
      "message": "So this was something I was also wondering about. I got the impression that we basically have:\n* The \"real\" JavaScript calling convention, used when invoking a JS function and specified by the JSTrampolineDescriptor, and\n* A number of \"JS-like\" calling conventions, used for various internal builtins that happen to need mostly the same arguments as the \"real\" JS calling convention.\n\nFor example, the ConstructX descriptors below are used by various Construct builtins that (afaiu) implement the logic for invoking a constructor (for example, ConstructWithSpread is I think directly invoked from the Interpreter: https://source.chromium.org/chromium/chromium/src/+/main:v8/src/builtins/x64/builtins-x64.cc;l\u003d1413;drc\u003d5360eddb94a622591b119111e6adf85e6f7541c9). So they are not really \"impl\" builtins, more like \"forwarding\" ones? However, for those the dispatch handle parameter doesn\u0027t make sense as they are invoked directly (i.e. hardcoded into e.g. the interpreter code). The dispatch handle really only makes sense for \"real\" JS function code that is invoked from a JSFunction object (where the dispatch handle comes from). So I\u0027m not sure where we would take the dispatch handle from when calling these other builtins. We could of course just use the kInvalidDispatchHandle, but then I guess why add the parameter in the first place?",
      "parentUuid": "6819f8bb_a7fe0d59",
      "revId": "2176936d2b53a04a153e63b37a998a5e4af2f72b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02f2d1dd_fd12617a",
        "filename": "src/codegen/interface-descriptors.h",
        "patchSetId": 12
      },
      "lineNbr": 900,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2024-10-09T16:07:37Z",
      "side": 1,
      "message": "Parent `StaticJSCallInterfaceDescriptor` class already defines the right set of registers.",
      "revId": "2176936d2b53a04a153e63b37a998a5e4af2f72b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d5108aa_8547ebbf",
        "filename": "src/codegen/interface-descriptors.h",
        "patchSetId": 12
      },
      "lineNbr": 900,
      "author": {
        "id": 1519522
      },
      "writtenOn": "2024-10-09T16:52:39Z",
      "side": 1,
      "message": "I guess this depends on the discussion above, but currently it\u0027s needed to add `kJavaScriptCallDispatchHandleRegister` just for this interface descriptor.",
      "parentUuid": "02f2d1dd_fd12617a",
      "revId": "2176936d2b53a04a153e63b37a998a5e4af2f72b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "800c40fc_db5f9f1b",
        "filename": "src/codegen/interface-descriptors.h",
        "patchSetId": 12
      },
      "lineNbr": 1778,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2024-10-09T16:07:37Z",
      "side": 1,
      "message": "While you are here... I believe it\u0027s a duplicate of `JSTrampolineDescriptor` and should be removed.",
      "revId": "2176936d2b53a04a153e63b37a998a5e4af2f72b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f597d7a_4e7a1c2b",
        "filename": "src/compiler/code-assembler.h",
        "patchSetId": 12
      },
      "lineNbr": 1366,
      "author": {
        "id": 1519522
      },
      "writtenOn": "2024-10-08T12:12:08Z",
      "side": 1,
      "message": "There\u0027s a bit of misc. refactoring here, e.g. to split CallJS (used to call a JS callable object via a CallX builtin) and CallJSBuiltin (used to directly call a builtin with JS linkage). Happy to move this to a separate CL if you think that\u0027d be useful.",
      "revId": "2176936d2b53a04a153e63b37a998a5e4af2f72b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}