{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "43986356_80c13aac",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 23
      },
      "lineNbr": 0,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2024-07-24T21:11:07Z",
      "side": 1,
      "message": "Thanks! Did only a qick skim as it\u0027s really late here. Will look in more details tomorrow.",
      "revId": "85a05b4d7737354b914aaecece1df36e1184b830",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "527465f9_3f536d09",
        "filename": "src/api/api.cc",
        "patchSetId": 23
      },
      "lineNbr": 10280,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2024-07-24T21:11:07Z",
      "side": 1,
      "message": "IIUC, the way this is set up we loose the ability to relibably trigger GC here based on our limit.\n\nMore specifically: We are not checking global limits here and if the relaxed limit flag is enabled then the `external_memory_limit()` is actually something rather large, right?\n\nI think what we would want here is to check the regular global limit. We may need to check it behind some other interrupt flag to avoid checking it too often though as `AdjustAmountOfExternalAllocatedMemory()` was perf sensitive call in the past.",
      "range": {
        "startLine": 10280,
        "startChar": 34,
        "endLine": 10280,
        "endChar": 55
      },
      "revId": "85a05b4d7737354b914aaecece1df36e1184b830",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7b3f6a2_41a8116e",
        "filename": "src/api/api.cc",
        "patchSetId": 23
      },
      "lineNbr": 10280,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2024-07-25T11:36:34Z",
      "side": 1,
      "message": "To make this a bit more concretely: If we want to treat it the same way as other memory in the global memory counters, we\u0027d do something along the lines of Oilpan like in https://source.chromium.org/chromium/chromium/src/+/main:v8/src/heap/cppgc-js/cpp-heap.cc;drc\u003d2017cd8a8925f180257662f78eaf9eb93e8e394d;bpv\u003d1;bpt\u003d1;l\u003d981\n\nIn essensce:\n- Update the counter;\n- On updates that cross thresholds of a few KB check whether we need to start GC\n\nA hard limit then can be kept separately if we want but I am inclined to try to remove that as well.",
      "parentUuid": "527465f9_3f536d09",
      "range": {
        "startLine": 10280,
        "startChar": 34,
        "endLine": 10280,
        "endChar": 55
      },
      "revId": "85a05b4d7737354b914aaecece1df36e1184b830",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b418376_2673f2bb",
        "filename": "src/api/api.cc",
        "patchSetId": 23
      },
      "lineNbr": 10280,
      "author": {
        "id": 1218025
      },
      "writtenOn": "2024-07-25T13:30:11Z",
      "side": 1,
      "message": "The logic here is kept only to support hard limit, whereas the regular limit is enforced through including external_memory() in GlobalConsumedBytes(), which is checked in IncrementalMarkingLimitReached() (I think that\u0027s similar to what you\u0027re describing for oilpan?).\nI\u0027m also happy to remove this codepath entirely under `external_memory_relaxed_limits` as I don\u0027t think hard limit contributes much.",
      "parentUuid": "b7b3f6a2_41a8116e",
      "range": {
        "startLine": 10280,
        "startChar": 34,
        "endLine": 10280,
        "endChar": 55
      },
      "revId": "85a05b4d7737354b914aaecece1df36e1184b830",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "947b0ffb_45836d8e",
        "filename": "src/api/api.cc",
        "patchSetId": 23
      },
      "lineNbr": 10280,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2024-07-25T16:17:34Z",
      "side": 1,
      "message": "We don\u0027t reach `IncrementalMarkingLimitReached()` through the path in here tough, no?",
      "parentUuid": "3b418376_2673f2bb",
      "range": {
        "startLine": 10280,
        "startChar": 34,
        "endLine": 10280,
        "endChar": 55
      },
      "revId": "85a05b4d7737354b914aaecece1df36e1184b830",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8c9fdf07_0e0c4f42",
        "filename": "src/api/api.cc",
        "patchSetId": 23
      },
      "lineNbr": 10280,
      "author": {
        "id": 1218025
      },
      "writtenOn": "2024-07-25T17:45:16Z",
      "side": 1,
      "message": "Ah I see what you mean.\nSure, I can add a call to StartIncrementalMarkingIfAllocationLimitIsReached.\nIn the latest patchset, I\u0027m using soft limits to trigger StartIncrementalMarkingIfAllocationLimitIsReached in ReportExternalMemoryPressure.",
      "parentUuid": "947b0ffb_45836d8e",
      "range": {
        "startLine": 10280,
        "startChar": 34,
        "endLine": 10280,
        "endChar": 55
      },
      "revId": "85a05b4d7737354b914aaecece1df36e1184b830",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29e7b5f2_6147cab0",
        "filename": "src/heap/heap.h",
        "patchSetId": 23
      },
      "lineNbr": 591,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2024-07-24T21:11:07Z",
      "side": 1,
      "message": "I think with the `external_memory_relaxed_limits` the limit and hard limit are a bit confusing as we essentially just have a hard limi, no?",
      "range": {
        "startLine": 591,
        "startChar": 17,
        "endLine": 591,
        "endChar": 47
      },
      "revId": "85a05b4d7737354b914aaecece1df36e1184b830",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6291626d_cae067ad",
        "filename": "src/heap/heap.h",
        "patchSetId": 23
      },
      "lineNbr": 591,
      "author": {
        "id": 1218025
      },
      "writtenOn": "2024-07-25T13:30:11Z",
      "side": 1,
      "message": "Essentially only external_memory_hard_limit() is kept under `external_memory_relaxed_limits `.\nThe extra complexity here is to retrofit the old behavior when the flag is disabled. Pathset 18 shows the end state without `external_memory_relaxed_limits `:\nhttps://chromium-review.googlesource.com/c/v8/v8/+/5688913/18",
      "parentUuid": "29e7b5f2_6147cab0",
      "range": {
        "startLine": 591,
        "startChar": 17,
        "endLine": 591,
        "endChar": 47
      },
      "revId": "85a05b4d7737354b914aaecece1df36e1184b830",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "19d4bac6_dfd1b6f3",
        "filename": "src/heap/heap.h",
        "patchSetId": 23
      },
      "lineNbr": 591,
      "author": {
        "id": 1218025
      },
      "writtenOn": "2024-09-12T19:34:46Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "6291626d_cae067ad",
      "range": {
        "startLine": 591,
        "startChar": 17,
        "endLine": 591,
        "endChar": 47
      },
      "revId": "85a05b4d7737354b914aaecece1df36e1184b830",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}