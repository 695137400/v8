{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d7f81157_9384b714",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-16T14:09:42Z",
      "side": 1,
      "message": "PTAL, got good hopes for green builds now.",
      "revId": "73c4a7aefee51ec7e613bdd2592c3dd5d228c051",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ed146b7_4faddd7b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-02-16T16:34:39Z",
      "side": 1,
      "message": "Forgot to add: This is scary enough that it would be really good to have some tests. Since Ulan\u0027s stress test setup is not in place yet, could you write a cctest along the lines of the others we have? https://source.chromium.org/chromium/chromium/src/+/master:v8/test/cctest/test-concurrent-descriptor-array.cc",
      "revId": "73c4a7aefee51ec7e613bdd2592c3dd5d228c051",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "877a2d2f_621af996",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-17T06:40:35Z",
      "side": 1,
      "message": "Ack working on it.",
      "parentUuid": "7ed146b7_4faddd7b",
      "revId": "73c4a7aefee51ec7e613bdd2592c3dd5d228c051",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e7d86ea5_d1ba61d0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-17T13:06:20Z",
      "side": 1,
      "message": "Done in the latest PS, and added modified the impl for tsan complaints:\n\n- relaxed getters for elements, length.\n- no handle creation on the bg thread.",
      "parentUuid": "877a2d2f_621af996",
      "revId": "73c4a7aefee51ec7e613bdd2592c3dd5d228c051",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a752924b_c5260ce0",
        "filename": "src/compiler/heap-refs.h",
        "patchSetId": 7
      },
      "lineNbr": 847,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-02-16T16:30:03Z",
      "side": 1,
      "message": "I think it would be cleaner if elements kind and length are read by GetOwnCowElement, so the caller doesn\u0027t need to worry about that aspect.",
      "revId": "73c4a7aefee51ec7e613bdd2592c3dd5d228c051",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88951039_cc9b7672",
        "filename": "src/compiler/heap-refs.h",
        "patchSetId": 7
      },
      "lineNbr": 847,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-17T06:40:35Z",
      "side": 1,
      "message": "There\u0027s reasoning behind the madness: the safety of reading both length/kind relies on the reference equality check that the caller must insert into opt code. Without the check+deopt point, it\u0027s *not* safe to use length/kind with the given elements.\n\nSo I kept these reads outside the function to make these requirements a bit more explicit.",
      "parentUuid": "a752924b_c5260ce0",
      "revId": "73c4a7aefee51ec7e613bdd2592c3dd5d228c051",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33c8031e_a7abd019",
        "filename": "src/compiler/heap-refs.h",
        "patchSetId": 7
      },
      "lineNbr": 847,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-02-17T09:18:51Z",
      "side": 1,
      "message": "The correctness of GetOwnCowElement relies on that elements check anyways, whether the kind and length are read inside or outside of that function. That\u0027s why I think it\u0027s cleaner to tell the caller only about elements (by making it a parameter and via a comment) and hide the trickyness regarding length and elements kind from the caller by reading them in GetOwnCowElement.",
      "parentUuid": "88951039_cc9b7672",
      "revId": "73c4a7aefee51ec7e613bdd2592c3dd5d228c051",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "42a5b5ee_c1ccfddb",
        "filename": "src/compiler/heap-refs.h",
        "patchSetId": 7
      },
      "lineNbr": 847,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-17T13:06:20Z",
      "side": 1,
      "message": "Fair enough, done.",
      "parentUuid": "33c8031e_a7abd019",
      "revId": "73c4a7aefee51ec7e613bdd2592c3dd5d228c051",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9cfdf193_bb6988bf",
        "filename": "src/compiler/js-heap-broker.cc",
        "patchSetId": 7
      },
      "lineNbr": 4055,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-02-16T16:30:03Z",
      "side": 1,
      "message": "Do you have a plan for when this is no longer guaranteed (i.e. when elements() is not serialized)?",
      "revId": "73c4a7aefee51ec7e613bdd2592c3dd5d228c051",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bb480966_0112d638",
        "filename": "src/compiler/js-heap-broker.cc",
        "patchSetId": 7
      },
      "lineNbr": 4055,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-17T06:40:35Z",
      "side": 1,
      "message": "Everything stays the same except the elements pointer read is concurrent and this DCHECK must be removed. We only proceed if its map is the fixed_cow_array_map, in which case it\u0027s immutable. We still insert a reference equality check in opt code to guard assumptions. Adding a TODO to remove the DCHECK.",
      "parentUuid": "9cfdf193_bb6988bf",
      "revId": "73c4a7aefee51ec7e613bdd2592c3dd5d228c051",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6fc267b5_a0eecb32",
        "filename": "src/compiler/js-heap-broker.cc",
        "patchSetId": 7
      },
      "lineNbr": 4055,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-02-17T09:18:51Z",
      "side": 1,
      "message": "Okay, makes sense. So the DCHECK is more a documentation of the current situation rather than a precondition for correctness.",
      "parentUuid": "bb480966_0112d638",
      "revId": "73c4a7aefee51ec7e613bdd2592c3dd5d228c051",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9402a44_b41e04a6",
        "filename": "src/compiler/js-heap-broker.cc",
        "patchSetId": 7
      },
      "lineNbr": 4060,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-02-16T16:30:03Z",
      "side": 1,
      "message": "This can be a DCHECK.",
      "revId": "73c4a7aefee51ec7e613bdd2592c3dd5d228c051",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5c6f6de0_6139ea26",
        "filename": "src/compiler/js-heap-broker.cc",
        "patchSetId": 7
      },
      "lineNbr": 4060,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-17T06:40:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e9402a44_b41e04a6",
      "revId": "73c4a7aefee51ec7e613bdd2592c3dd5d228c051",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bdeb48ac_2267fd0c",
        "filename": "src/compiler/js-native-context-specialization.cc",
        "patchSetId": 7
      },
      "lineNbr": 1965,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-02-16T16:30:03Z",
      "side": 1,
      "message": "Right, very good point. For GetOwnConstantElement we won\u0027t be able to make that assumption.",
      "revId": "73c4a7aefee51ec7e613bdd2592c3dd5d228c051",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7693b924_abf5f142",
        "filename": "src/compiler/js-native-context-specialization.cc",
        "patchSetId": 7
      },
      "lineNbr": 1965,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-17T06:40:35Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "bdeb48ac_2267fd0c",
      "revId": "73c4a7aefee51ec7e613bdd2592c3dd5d228c051",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "988b980b_e3f6c3e5",
        "filename": "src/objects/lookup.cc",
        "patchSetId": 7
      },
      "lineNbr": 1312,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-02-16T16:30:03Z",
      "side": 1,
      "message": "I assume this doesn\u0027t really matter and is just for hygiene?",
      "revId": "73c4a7aefee51ec7e613bdd2592c3dd5d228c051",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c1793607_574cc293",
        "filename": "src/objects/lookup.cc",
        "patchSetId": 7
      },
      "lineNbr": 1312,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-17T06:40:35Z",
      "side": 1,
      "message": "For holey JSArrays, reading a hole means the result of the GetOwnCowElement operation is \u0027not found\u0027. For packed JSArrays we should never read a hole. Since we can\u0027t trust the given elements_kind matches the given backing store, we need to filter out holes unconditionally.",
      "parentUuid": "988b980b_e3f6c3e5",
      "revId": "73c4a7aefee51ec7e613bdd2592c3dd5d228c051",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b08036b1_0698a645",
        "filename": "src/objects/lookup.cc",
        "patchSetId": 7
      },
      "lineNbr": 1312,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-02-17T09:18:51Z",
      "side": 1,
      "message": "If the elements kind doesn\u0027t match then we are in the situation where the value that we return is probably not the right one (no matter if it\u0027s a hole or not) and any use of it will be in dead code, right?",
      "parentUuid": "c1793607_574cc293",
      "revId": "73c4a7aefee51ec7e613bdd2592c3dd5d228c051",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "536b2c3e_b4df0e65",
        "filename": "src/objects/lookup.cc",
        "patchSetId": 7
      },
      "lineNbr": 1312,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-17T09:24:26Z",
      "side": 1,
      "message": "Right, we\u0027d hit the deopt in generated code; but before that we\u0027d embed the Hole constant in the graph - that doesn\u0027t seem like a good idea. Filtering out holes in general avoids that.",
      "parentUuid": "b08036b1_0698a645",
      "revId": "73c4a7aefee51ec7e613bdd2592c3dd5d228c051",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "68ff961c_ed347bbc",
        "filename": "src/objects/lookup.cc",
        "patchSetId": 7
      },
      "lineNbr": 1312,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-02-17T09:32:46Z",
      "side": 1,
      "message": "Okay, fine with me but I can assure you much crazier things happen in dead code.",
      "parentUuid": "536b2c3e_b4df0e65",
      "revId": "73c4a7aefee51ec7e613bdd2592c3dd5d228c051",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}