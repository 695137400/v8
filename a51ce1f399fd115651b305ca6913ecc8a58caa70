{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "605e6db0_1bd05ffc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1535087
      },
      "writtenOn": "2022-03-07T06:08:14Z",
      "side": 1,
      "message": "Hi, I have fixed the build failure on arm, Could you please try the CQ again? Thanks very much! Because \"arguments.h\" includes \"register-[arch].h\", which would cause redefinition of registers. And the cpp linter also requires \"arguments.cc\" must include \"arguments.h\". So I defined \"ClobberDoubleRegisters\" into a new file \"clobber-register.h\".",
      "revId": "a51ce1f399fd115651b305ca6913ecc8a58caa70",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ca6973bf_4723101c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2022-03-07T07:57:32Z",
      "side": 1,
      "message": "Thanks for the contribution!",
      "revId": "a51ce1f399fd115651b305ca6913ecc8a58caa70",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf64e59e_dca80dbd",
        "filename": "src/execution/clobber-registers.cc",
        "patchSetId": 7
      },
      "lineNbr": 8,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2022-03-07T07:07:44Z",
      "side": 1,
      "message": "nit: you can just include \"src/codegen/register.h\", this will include the arch specific headers.",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 8,
        "endChar": 20
      },
      "revId": "a51ce1f399fd115651b305ca6913ecc8a58caa70",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5ffe8b0_fb03cfea",
        "filename": "src/execution/clobber-registers.cc",
        "patchSetId": 7
      },
      "lineNbr": 8,
      "author": {
        "id": 1535087
      },
      "writtenOn": "2022-03-07T07:23:54Z",
      "side": 1,
      "message": "I found \"src/codegen/register.h\" seems not to include the arch specific headers, and \"src/codegen/register-arch.h\" will include the arch specific headers according to V8_TARGET_ARCH. And we need to include the arch specific headers according to V8_HOST_ARCH here, including \"src/codegen/register-arch.h\" might break the build.",
      "parentUuid": "cf64e59e_dca80dbd",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 8,
        "endChar": 20
      },
      "revId": "a51ce1f399fd115651b305ca6913ecc8a58caa70",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f64b6aa_54e6b053",
        "filename": "src/execution/clobber-registers.cc",
        "patchSetId": 7
      },
      "lineNbr": 8,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2022-03-07T07:41:43Z",
      "side": 1,
      "message": "I recently changed register-arch.h to register.h (and register.h to register-base.h) -- but you\u0027re right, it\u0027s the HOST that\u0027s important here, not the TARGET. Good observation!",
      "parentUuid": "b5ffe8b0_fb03cfea",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 8,
        "endChar": 20
      },
      "revId": "a51ce1f399fd115651b305ca6913ecc8a58caa70",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "a51ce1f399fd115651b305ca6913ecc8a58caa70",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "a51ce1f399fd115651b305ca6913ecc8a58caa70",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {},
      "overrideExpressionResult": {},
      "patchSetCommitId": "a51ce1f399fd115651b305ca6913ecc8a58caa70",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}