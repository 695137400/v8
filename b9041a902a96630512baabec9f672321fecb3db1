{
  "comments": [
    {
      "key": {
        "uuid": "bbde061e_50af9a50",
        "filename": "src/objects/backing-store.cc",
        "patchSetId": 2
      },
      "lineNbr": 463,
      "author": {
        "id": 1370170
      },
      "writtenOn": "2020-04-09T14:55:31Z",
      "side": 1,
      "message": "I don\u0027t know V8 code conventions, but perhaps a `Maybe\u003csize_t\u003e` as a return type would\u0027ve been a bit clearer?",
      "revId": "b9041a902a96630512baabec9f672321fecb3db1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d5b8e98_4b32db98",
        "filename": "src/objects/backing-store.cc",
        "patchSetId": 2
      },
      "lineNbr": 463,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2020-04-14T14:12:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bbde061e_50af9a50",
      "revId": "b9041a902a96630512baabec9f672321fecb3db1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "966f99ea_37de0998",
        "filename": "src/objects/backing-store.cc",
        "patchSetId": 2
      },
      "lineNbr": 467,
      "author": {
        "id": 1002783
      },
      "writtenOn": "2020-04-10T17:16:58Z",
      "side": 1,
      "message": "old_pages is not set in this case. It seems that this is OK in the existing caller. But I agree w/ Ingvar above that returning a Maybe\u003csize_t\u003e would prevent issues like this.",
      "revId": "b9041a902a96630512baabec9f672321fecb3db1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e45ae600_662c68fa",
        "filename": "src/objects/backing-store.cc",
        "patchSetId": 2
      },
      "lineNbr": 467,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2020-04-14T14:12:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "966f99ea_37de0998",
      "revId": "b9041a902a96630512baabec9f672321fecb3db1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "88514feb_7c1240f9",
        "filename": "src/wasm/wasm-objects.cc",
        "patchSetId": 2
      },
      "lineNbr": 907,
      "author": {
        "id": 1122079
      },
      "writtenOn": "2020-04-10T05:18:37Z",
      "side": 1,
      "message": "Could you add a comment here with a condensed description of what\u0027s in the CL description? Possibly better to preserve context in code.",
      "revId": "b9041a902a96630512baabec9f672321fecb3db1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d23a769_9c5c65bc",
        "filename": "src/wasm/wasm-objects.cc",
        "patchSetId": 2
      },
      "lineNbr": 907,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2020-04-14T14:12:23Z",
      "side": 1,
      "message": "I added the comment, but with the re-structuring of GrowWasmMemoryInPlace I think it\u0027s already more clear anyways.",
      "parentUuid": "88514feb_7c1240f9",
      "revId": "b9041a902a96630512baabec9f672321fecb3db1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc6205fd_ea610bcd",
        "filename": "src/wasm/wasm-objects.cc",
        "patchSetId": 2
      },
      "lineNbr": 920,
      "author": {
        "id": 1122079
      },
      "writtenOn": "2020-04-10T05:21:28Z",
      "side": 1,
      "message": "I\u0027m trying to reason what happens here if there is another call to Grow between the return statement and the one where we actually obtain the original size of the buffer. I guess if it succeeds, then it still guarantees that no two grow calls will return the same value of old_size so this still retains RMW behavior, does that match your reasoning for this as well?",
      "revId": "b9041a902a96630512baabec9f672321fecb3db1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6cc439af_ff5eeee7",
        "filename": "src/wasm/wasm-objects.cc",
        "patchSetId": 2
      },
      "lineNbr": 920,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2020-04-14T14:12:23Z",
      "side": 1,
      "message": "I took a look at that code now, and it turns out that reading {old_size} in the beginning is mostly unnecessary. It is just used to check if memory.grow will fail trivially. It was also used to calculate {new_pages}, but that value was not actually used in the multi-threaded case. I removed {new_pages} now where it is not necessary, to make it more clear.",
      "parentUuid": "fc6205fd_ea610bcd",
      "revId": "b9041a902a96630512baabec9f672321fecb3db1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9eb6491a_a2efa152",
        "filename": "src/wasm/wasm-objects.cc",
        "patchSetId": 2
      },
      "lineNbr": 928,
      "author": {
        "id": 1122079
      },
      "writtenOn": "2020-04-10T05:18:37Z",
      "side": 1,
      "message": "It\u0027s a little confusing here that we calculate old_pages above, and then overwrite it again here for the non-shared case. An option to make this better would be to restructure the checks above that use old_pages to use new_pages, or to move the checks where we obtain old_pages.",
      "revId": "b9041a902a96630512baabec9f672321fecb3db1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}