{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "82c1dc14_b8ae1524",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2021-07-05T09:27:40Z",
      "side": 1,
      "message": "Nit: could you add a description to the CL that describes what the problem was, and how you fixed it? This can give a good guideline in how to review the CL, and what to expect.",
      "revId": "a2fa44edb0469110be90b76d503f87b995809fb5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e58f4cea_ffef86a4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1118564
      },
      "writtenOn": "2021-07-05T09:01:43Z",
      "side": 1,
      "message": "Great, I added a test.\n\nAndreas, could you look at src/asmjs/asm-js.cc?\nLeszek, could you look at factory-base-inl.h?\nJakob, could you look at src/json/json-parser.cc?\n\nThanks much,\n--Michael",
      "revId": "a2fa44edb0469110be90b76d503f87b995809fb5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "24e59b20_fb8ac107",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2021-07-05T09:27:40Z",
      "side": 1,
      "message": "lgtm asmjs",
      "revId": "a2fa44edb0469110be90b76d503f87b995809fb5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2fec3fb8_49ee4839",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2021-07-05T10:14:32Z",
      "side": 1,
      "message": "json-parser.cc LGTM. (Didn\u0027t look at the rest.)",
      "revId": "a2fa44edb0469110be90b76d503f87b995809fb5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e8f449f6_df96e3cf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2021-07-05T10:21:04Z",
      "side": 1,
      "message": "Also, +1 to reducing (or rewriting) the test, in particular because a test that intentionally sets up a particular situation (say, function X getting compiled while function Y is executing in the foreground) has a higher chance of continuing to create those conditions in the future, compared to a fuzzer-generated massive random test that just so happens to accidentally get the timing right. Since you now know what the bug is, I\u0027d hope that it\u0027s not overly difficult to write a reliable and targeted test that triggers it?",
      "revId": "a2fa44edb0469110be90b76d503f87b995809fb5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5347473b_c5a90e85",
        "filename": "src/heap/factory-base-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 79,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2021-07-05T09:25:43Z",
      "side": 1,
      "message": "do we not want the same thing for value/set_value?",
      "range": {
        "startLine": 79,
        "startChar": 15,
        "endLine": 79,
        "endChar": 24
      },
      "revId": "a2fa44edb0469110be90b76d503f87b995809fb5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0fa9fa61_3798b887",
        "filename": "src/heap/factory-base-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 79,
      "author": {
        "id": 1118564
      },
      "writtenOn": "2021-07-05T10:22:56Z",
      "side": 1,
      "message": "Well, in compiler we work with the _as_bits() accessors. Since that\u0027s the source of concurrency, my judgment call was to annotate those accessors only. If I mark [set_]value() as relaxed load/store, it might hide a warning that may come later that would be interesting to us.\n\nIf I\u0027m going to mark accesses as relaxed, I want to be conservative about it, as each one should have a strong reason. In this case it\u0027s bound up in the compiler\u0027s dependency mechanism which does a re-read later on the main thread.",
      "parentUuid": "5347473b_c5a90e85",
      "range": {
        "startLine": 79,
        "startChar": 15,
        "endLine": 79,
        "endChar": 24
      },
      "revId": "a2fa44edb0469110be90b76d503f87b995809fb5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c4afc71_f7d3436c",
        "filename": "src/objects/heap-number-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2021-07-05T09:27:40Z",
      "side": 1,
      "message": "Nit: Could you add a comment on why you add this parameter? I can already see the next cleanup CL removing this parameter.",
      "range": {
        "startLine": 23,
        "startChar": 35,
        "endLine": 23,
        "endChar": 49
      },
      "revId": "a2fa44edb0469110be90b76d503f87b995809fb5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}