{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2d553194_c373f839",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2024-02-19T11:33:47Z",
      "side": 1,
      "message": "PTAL, @mliedtke@chromium.org!\n\nFYI, @sam.parker@arm.com :)",
      "revId": "fe3d8439ef53750bd74bb3e3917a331a2f97a472",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b4c8aef2_f00dfc80",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-02-19T11:36:53Z",
      "side": 1,
      "message": "LGTM with clarification question. ðŸ˜Š",
      "revId": "fe3d8439ef53750bd74bb3e3917a331a2f97a472",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ddf000ea_0717bf86",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2024-02-19T11:55:18Z",
      "side": 1,
      "message": "Thanks :)",
      "revId": "fe3d8439ef53750bd74bb3e3917a331a2f97a472",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e81f408_9c0f1496",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-02-19T11:58:18Z",
      "side": 1,
      "message": "Thanks!",
      "revId": "fe3d8439ef53750bd74bb3e3917a331a2f97a472",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7f36f47_c0e85703",
        "filename": "src/compiler/backend/instruction-selector-adapter.h",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-02-19T11:36:53Z",
      "side": 1,
      "message": "When do we get them? I think I raised the question to Nico \"what about floats?\" and IIRC all JS floats end up as `NumberConstant`? Is this different when coming from Maglev instead of Turbofan?",
      "revId": "fe3d8439ef53750bd74bb3e3917a331a2f97a472",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17704d6f_476273ad",
        "filename": "src/compiler/backend/instruction-selector-adapter.h",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2024-02-19T11:55:18Z",
      "side": 1,
      "message": "I just added\n```\n      case IrOpcode::kFloat32Constant:\n      case IrOpcode::kFloat64Constant:\n        UNREACHABLE();\n```\nin `is_constant` (in instruction-selector-adapter.h), and it triggered while running JetStream2. \n\nSo I guess that we do get them in JS, although I\u0027m not sure how/when exactly. Well, it crashed during float-mm, which might be using asm.js?\n\nAlso, I would expect that Wasm can run into this, but I haven\u0027t ran any tests to confirm this.\n\n(and we have unittests that rely on this, although this would be a poor reason to keep those without before able to generate them from JS and Wasm)",
      "parentUuid": "f7f36f47_c0e85703",
      "revId": "fe3d8439ef53750bd74bb3e3917a331a2f97a472",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e4fe04e1_d0c2530f",
        "filename": "src/compiler/backend/instruction-selector-adapter.h",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-02-19T11:58:18Z",
      "side": 1,
      "message": "Ah, I think I might be mixing things up here.\nWe do have e.g. `GetFloatConstantValue` in the arm64 instruction selector, so it makes clearly sense to also align this properly in the `ConstantView`.",
      "parentUuid": "17704d6f_476273ad",
      "revId": "fe3d8439ef53750bd74bb3e3917a331a2f97a472",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "fe3d8439ef53750bd74bb3e3917a331a2f97a472",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "fe3d8439ef53750bd74bb3e3917a331a2f97a472",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "fe3d8439ef53750bd74bb3e3917a331a2f97a472",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "fe3d8439ef53750bd74bb3e3917a331a2f97a472",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}