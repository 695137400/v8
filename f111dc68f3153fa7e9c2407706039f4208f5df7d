{
  "comments": [
    {
      "key": {
        "uuid": "d0e8574d_6b330431",
        "filename": "src/compiler/backend/instruction-selector.cc",
        "patchSetId": 3
      },
      "lineNbr": 1817,
      "author": {
        "id": 1001213
      },
      "writtenOn": "2019-07-09T16:59:15Z",
      "side": 1,
      "message": "Not MarkAsFloat64?",
      "range": {
        "startLine": 1817,
        "startChar": 13,
        "endLine": 1817,
        "endChar": 26
      },
      "revId": "f111dc68f3153fa7e9c2407706039f4208f5df7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5e062ff_817523ca",
        "filename": "src/compiler/backend/x64/code-generator-x64.cc",
        "patchSetId": 3
      },
      "lineNbr": 2250,
      "author": {
        "id": 1122079
      },
      "writtenOn": "2019-07-09T05:16:12Z",
      "side": 1,
      "message": "I\u0027m a little concerned about the loss of precision here and below, and as the ExtractLane/ReplaceLane test only does spot checks it\u0027s possible to miss cases where precision is required.",
      "revId": "f111dc68f3153fa7e9c2407706039f4208f5df7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c60a284b_a870be2e",
        "filename": "src/compiler/backend/x64/code-generator-x64.cc",
        "patchSetId": 3
      },
      "lineNbr": 2250,
      "author": {
        "id": 1001213
      },
      "writtenOn": "2019-07-09T16:59:15Z",
      "side": 1,
      "message": "I don\u0027t see the problem. What am I missing?",
      "parentUuid": "c5e062ff_817523ca",
      "revId": "f111dc68f3153fa7e9c2407706039f4208f5df7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df422a4b_115dc633",
        "filename": "src/compiler/backend/x64/code-generator-x64.cc",
        "patchSetId": 3
      },
      "lineNbr": 2250,
      "author": {
        "id": 1122079
      },
      "writtenOn": "2019-07-09T18:44:19Z",
      "side": 1,
      "message": "I meant this as a comment for the instruction sequence, i.e. moving a double to a regular scratch register and then using pinsrq which is the instruction to insert a qword integer value to insert a double. Ideally these should just work because we\u0027re treating them as 64-bit values, but I wasn\u0027t sure if using packed integer instructions would cause a loss of precision for the resulting value in the output register for example for the +0.0/-0.0 case.",
      "parentUuid": "c60a284b_a870be2e",
      "revId": "f111dc68f3153fa7e9c2407706039f4208f5df7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "144b747a_bd81f09c",
        "filename": "src/compiler/backend/x64/code-generator-x64.cc",
        "patchSetId": 3
      },
      "lineNbr": 2250,
      "author": {
        "id": 1001213
      },
      "writtenOn": "2019-07-09T19:02:59Z",
      "side": 1,
      "message": "I see. movq won\u0027t distinguish between integer and floating point values, so signed 0\u0027s and NaNs would be unchanged.",
      "parentUuid": "df422a4b_115dc633",
      "revId": "f111dc68f3153fa7e9c2407706039f4208f5df7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90d21a2f_769680c5",
        "filename": "src/compiler/backend/x64/code-generator-x64.cc",
        "patchSetId": 3
      },
      "lineNbr": 2250,
      "author": {
        "id": 1122079
      },
      "writtenOn": "2019-07-09T19:19:13Z",
      "side": 1,
      "message": "Thanks for clarifying!",
      "parentUuid": "144b747a_bd81f09c",
      "revId": "f111dc68f3153fa7e9c2407706039f4208f5df7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1f02c39_d7476840",
        "filename": "src/compiler/backend/x64/code-generator-x64.cc",
        "patchSetId": 3
      },
      "lineNbr": 2253,
      "author": {
        "id": 1001213
      },
      "writtenOn": "2019-07-09T16:59:15Z",
      "side": 1,
      "message": "Don\u0027t we still need to load into a scratch register in this case, since we can\u0027t guarantee 16 byte alignment?",
      "range": {
        "startLine": 2253,
        "startChar": 0,
        "endLine": 2253,
        "endChar": 80
      },
      "revId": "f111dc68f3153fa7e9c2407706039f4208f5df7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ed091e6_9a8673f8",
        "filename": "src/compiler/backend/x64/code-generator-x64.cc",
        "patchSetId": 3
      },
      "lineNbr": 2253,
      "author": {
        "id": 1122079
      },
      "writtenOn": "2019-07-09T18:44:19Z",
      "side": 1,
      "message": "The Extract/Insert instructions don\u0027t need the alignment guarantee. From the SDM - \n\"SSE4.1 adds 7 instructions (corresponding to 9 assembly instruction mnemonics) that simplify data insertion and extraction between general-purpose register (GPR) and XMM registers (EXTRACTPS, INSERTPS, PINSRB, PINSRD, PINSRQ, PEXTRB, PEXTRW, PEXTRD, and PEXTRQ). When accessing memory, no alignment is required for any of these instructions (unless alignment checking is enabled).\"\n\nWe use operands for the narrower operations as well.",
      "parentUuid": "d1f02c39_d7476840",
      "range": {
        "startLine": 2253,
        "startChar": 0,
        "endLine": 2253,
        "endChar": 80
      },
      "revId": "f111dc68f3153fa7e9c2407706039f4208f5df7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "911a85d7_d17de684",
        "filename": "src/compiler/backend/x64/code-generator-x64.cc",
        "patchSetId": 3
      },
      "lineNbr": 2253,
      "author": {
        "id": 1001213
      },
      "writtenOn": "2019-07-09T19:02:59Z",
      "side": 1,
      "message": "Great, thanks for the explanation.",
      "parentUuid": "2ed091e6_9a8673f8",
      "range": {
        "startLine": 2253,
        "startChar": 0,
        "endLine": 2253,
        "endChar": 80
      },
      "revId": "f111dc68f3153fa7e9c2407706039f4208f5df7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6930d27_2f7e3351",
        "filename": "src/compiler/backend/x64/code-generator-x64.cc",
        "patchSetId": 3
      },
      "lineNbr": 2253,
      "author": {
        "id": 1122079
      },
      "writtenOn": "2019-07-09T19:19:13Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "911a85d7_d17de684",
      "range": {
        "startLine": 2253,
        "startChar": 0,
        "endLine": 2253,
        "endChar": 80
      },
      "revId": "f111dc68f3153fa7e9c2407706039f4208f5df7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "014801d8_14ccb9fd",
        "filename": "test/cctest/wasm/test-run-wasm-simd.cc",
        "patchSetId": 3
      },
      "lineNbr": 741,
      "author": {
        "id": 1122079
      },
      "writtenOn": "2019-07-09T05:16:12Z",
      "side": 1,
      "message": "Can the Extract/Replace tests be modified to use FOR_FLOAT64_INPUTS?",
      "revId": "f111dc68f3153fa7e9c2407706039f4208f5df7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}