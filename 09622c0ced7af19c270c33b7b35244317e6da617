{
  "comments": [
    {
      "key": {
        "uuid": "1b12f804_997f87fc",
        "filename": "src/builtins/array-lastindexof.tq",
        "patchSetId": 7
      },
      "lineNbr": 79,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2018-08-30T07:50:56Z",
      "side": 1,
      "message": "nice!",
      "revId": "09622c0ced7af19c270c33b7b35244317e6da617",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "605ce5d3_595fda68",
        "filename": "src/builtins/array-lastindexof.tq",
        "patchSetId": 7
      },
      "lineNbr": 79,
      "author": {
        "id": 1273453
      },
      "writtenOn": "2018-08-31T08:51:45Z",
      "side": 1,
      "message": "Sadly, this got removed again. I feel similar as Jakob about introducing a type that could actually change over time.",
      "parentUuid": "1b12f804_997f87fc",
      "revId": "09622c0ced7af19c270c33b7b35244317e6da617",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fbb3abd1_79286497",
        "filename": "src/builtins/array-unshift.tq",
        "patchSetId": 7
      },
      "lineNbr": 15,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-29T08:24:03Z",
      "side": 1,
      "message": "Do we have COW arrays covered here? Is there a test case for this? Let\u0027s DCHECK all these conditions in the runtime function.",
      "revId": "09622c0ced7af19c270c33b7b35244317e6da617",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00976a32_d915f7fd",
        "filename": "src/builtins/array-unshift.tq",
        "patchSetId": 7
      },
      "lineNbr": 15,
      "author": {
        "id": 1273453
      },
      "writtenOn": "2018-08-29T13:04:46Z",
      "side": 1,
      "message": "I think COW arrays get correctly converted in elements.cc, but I think it will be safer to do it here upfront. Most of conditions get DCHECKED in the C++ builtin now.",
      "parentUuid": "fbb3abd1_79286497",
      "revId": "09622c0ced7af19c270c33b7b35244317e6da617",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c01d2054_cb07b1eb",
        "filename": "src/builtins/array-unshift.tq",
        "patchSetId": 7
      },
      "lineNbr": 23,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-29T08:24:03Z",
      "side": 1,
      "message": "Out of curiosity - do you have any data on how slow the generic path is compared to the fast path?",
      "revId": "09622c0ced7af19c270c33b7b35244317e6da617",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f908f1bd_56650ec7",
        "filename": "src/builtins/array-unshift.tq",
        "patchSetId": 7
      },
      "lineNbr": 54,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-29T08:24:03Z",
      "side": 1,
      "message": "Nit: This CL is still in C naming style, we should switch to JS-style at some point. Up to you whether to do it here or in a follow-up.",
      "revId": "09622c0ced7af19c270c33b7b35244317e6da617",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45b44362_de353b0f",
        "filename": "src/builtins/array-unshift.tq",
        "patchSetId": 7
      },
      "lineNbr": 54,
      "author": {
        "id": 1273453
      },
      "writtenOn": "2018-08-29T13:04:46Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f908f1bd_56650ec7",
      "revId": "09622c0ced7af19c270c33b7b35244317e6da617",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce0e0754_79a28bbc",
        "filename": "src/builtins/array-unshift.tq",
        "patchSetId": 7
      },
      "lineNbr": 80,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-29T08:24:03Z",
      "side": 1,
      "message": "Nit: Just make j an intptr and compare against arguments.length in the condition above.",
      "revId": "09622c0ced7af19c270c33b7b35244317e6da617",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be0e34ac_84aa9c22",
        "filename": "src/builtins/array-unshift.tq",
        "patchSetId": 7
      },
      "lineNbr": 80,
      "author": {
        "id": 1273453
      },
      "writtenOn": "2018-08-29T13:04:46Z",
      "side": 1,
      "message": "In that case wouldn\u0027t we need to SmiTag \u0027j\u0027 for the third argument (since its a builtin call)?\nPlus another variable to cache arg_count in intptr form.",
      "parentUuid": "ce0e0754_79a28bbc",
      "revId": "09622c0ced7af19c270c33b7b35244317e6da617",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c66c882_3b87f9a8",
        "filename": "src/builtins/array-unshift.tq",
        "patchSetId": 7
      },
      "lineNbr": 80,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-29T13:09:46Z",
      "side": 1,
      "message": "Ah yeah, didn\u0027t think of the builtin call. Let\u0027s keep the current form then.\n\n(We wouldn\u0027t need to cache arg_count, arguments.length already just returns a variable value.)",
      "parentUuid": "be0e34ac_84aa9c22",
      "revId": "09622c0ced7af19c270c33b7b35244317e6da617",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5edf0e0e_aa0e23f7",
        "filename": "src/builtins/array-unshift.tq",
        "patchSetId": 7
      },
      "lineNbr": 89,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-29T08:24:03Z",
      "side": 1,
      "message": "Could you use the factory()-\u003elength_string() instead to avoid creating a new string here? would a .length\u003d operator make sense on JSReceiver?",
      "revId": "09622c0ced7af19c270c33b7b35244317e6da617",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3725a04f_12b6466e",
        "filename": "src/builtins/array-unshift.tq",
        "patchSetId": 7
      },
      "lineNbr": 89,
      "author": {
        "id": 1273453
      },
      "writtenOn": "2018-08-29T13:04:46Z",
      "side": 1,
      "message": "We could do that using an \"extern constant\". We would need to change this later though, because with the Torque IR we won\u0027t be able to use arbitrary C++ strings as constexpr types.",
      "parentUuid": "5edf0e0e_aa0e23f7",
      "revId": "09622c0ced7af19c270c33b7b35244317e6da617",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25a205bb_09099a31",
        "filename": "src/builtins/array-unshift.tq",
        "patchSetId": 7
      },
      "lineNbr": 89,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-29T13:09:46Z",
      "side": 1,
      "message": "Two alternatives: add LengthString() to CSA, or add SetLengthProperty(). I think either are preferable to the raw \u0027length\u0027 string.",
      "parentUuid": "3725a04f_12b6466e",
      "revId": "09622c0ced7af19c270c33b7b35244317e6da617",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e17e62b_cc70b926",
        "filename": "src/builtins/array-unshift.tq",
        "patchSetId": 7
      },
      "lineNbr": 89,
      "author": {
        "id": 1273453
      },
      "writtenOn": "2018-08-31T08:51:45Z",
      "side": 1,
      "message": "Discovered there is \"LengthStringConstant()\" already in CSA. Will use that.",
      "parentUuid": "25a205bb_09099a31",
      "revId": "09622c0ced7af19c270c33b7b35244317e6da617",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bc6b4db5_53c9b369",
        "filename": "src/builtins/base.tq",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-29T08:24:03Z",
      "side": 1,
      "message": "Hmm I like how this makes fast-array checks look more natural. But it also implies safety that\u0027s not there; a FastJSArray can turn slow without this type noticing in various ways (e.g.: implicit or explicit calls into user-JS, modifications to the prototype, elements kind transitions). \n\nSo the \u0027FastJSArray\u0027 type really does say anything about whether the array is currently fast, only that it was fast at assignment. I don\u0027t know whether that might not lead to more confusion.\n\nAnd a drive-by comment here: TaggedToFastArray should really use BranchIfFastJSArray, not the inefficient IsFastJSArray wrapper. It also seems like dead code if it\u0027s not used by this CL.",
      "revId": "09622c0ced7af19c270c33b7b35244317e6da617",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4cb1723_4a7ff7ed",
        "filename": "src/builtins/base.tq",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 1273453
      },
      "writtenOn": "2018-08-31T08:51:45Z",
      "side": 1,
      "message": "Agreed, removed the type again and left the \"EnsureFastJSArray\" macro.",
      "parentUuid": "bc6b4db5_53c9b369",
      "revId": "09622c0ced7af19c270c33b7b35244317e6da617",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ce7121d_cf5957a5",
        "filename": "src/builtins/builtins-array.cc",
        "patchSetId": 7
      },
      "lineNbr": 83,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-29T08:24:03Z",
      "side": 1,
      "message": "Nit: No parentheses needed :) And let\u0027s spell out \u0027elements kinds\u0027",
      "revId": "09622c0ced7af19c270c33b7b35244317e6da617",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "753ea919_69b9a656",
        "filename": "src/builtins/builtins-array.cc",
        "patchSetId": 7
      },
      "lineNbr": 83,
      "author": {
        "id": 1273453
      },
      "writtenOn": "2018-08-29T13:04:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0ce7121d_cf5957a5",
      "revId": "09622c0ced7af19c270c33b7b35244317e6da617",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44ceb0ee_2b472541",
        "filename": "src/builtins/builtins-array.cc",
        "patchSetId": 7
      },
      "lineNbr": 104,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-29T08:24:03Z",
      "side": 1,
      "message": "It looks like this method assumes PACKED {smi,double,object} elements, since we transition to PACKED_DOUBLE_ELEMENTS/PACKED_ELEMENTS. Is that the case? Or do we also transition HOLEY -\u003e PACKED?",
      "revId": "09622c0ced7af19c270c33b7b35244317e6da617",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9d22883_7c90102f",
        "filename": "src/builtins/builtins-array.cc",
        "patchSetId": 7
      },
      "lineNbr": 104,
      "author": {
        "id": 1273453
      },
      "writtenOn": "2018-08-29T13:04:46Z",
      "side": 1,
      "message": "TransitionElementsKind will convert the target_kind to its respective HOLEY version, if the origin_kind is HOLEY.",
      "parentUuid": "44ceb0ee_2b472541",
      "revId": "09622c0ced7af19c270c33b7b35244317e6da617",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19457345_555bc1d8",
        "filename": "src/builtins/builtins-array.cc",
        "patchSetId": 7
      },
      "lineNbr": 529,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-29T08:24:03Z",
      "side": 1,
      "message": "Are the remaining checks in EnsureJSArrayWithWritableFastElements not needed here? For instance:\n\n - Dictionary elements\n - is_extensible\n - IsJSArrayFastElementMovingAllowed\n - IsAnyInitialArrayPrototype\n\nWhy not?",
      "revId": "09622c0ced7af19c270c33b7b35244317e6da617",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14523ffb_0aae0a40",
        "filename": "src/builtins/builtins-array.cc",
        "patchSetId": 7
      },
      "lineNbr": 529,
      "author": {
        "id": 1273453
      },
      "writtenOn": "2018-08-29T13:04:46Z",
      "side": 1,
      "message": "Added DCHECKs for these with a comment that they are checked in the Torque code.",
      "parentUuid": "19457345_555bc1d8",
      "revId": "09622c0ced7af19c270c33b7b35244317e6da617",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8f32ad49_62288e28",
        "filename": "test/mozilla/mozilla.status",
        "patchSetId": 7
      },
      "lineNbr": 162,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-29T08:24:03Z",
      "side": 1,
      "message": "Please link this to a crbug.",
      "revId": "09622c0ced7af19c270c33b7b35244317e6da617",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}