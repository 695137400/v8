{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5dd3cb4a_826216b4",
        "filename": "src/base/small-vector.h",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2022-12-06T13:54:11Z",
      "side": 1,
      "message": "Not sure if we can DCHECK in the constructor, but how about verifying that end \u003e\u003d begin?",
      "range": {
        "startLine": 61,
        "startChar": 38,
        "endLine": 61,
        "endChar": 63
      },
      "revId": "7d63ef4a35b09ee248bcada9b474b00d2c903da0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce1eb7d1_5658029d",
        "filename": "src/base/small-vector.h",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2022-12-07T14:06:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5dd3cb4a_826216b4",
      "range": {
        "startLine": 61,
        "startChar": 38,
        "endLine": 61,
        "endChar": 63
      },
      "revId": "7d63ef4a35b09ee248bcada9b474b00d2c903da0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dac73060_16a7bd1f",
        "filename": "src/compiler/turboshaft/type-inference-reducer.h",
        "patchSetId": 3
      },
      "lineNbr": 115,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2022-12-06T13:54:11Z",
      "side": 1,
      "message": "nit: you could use `is_wrapping` for readability.",
      "range": {
        "startLine": 115,
        "startChar": 11,
        "endLine": 115,
        "endChar": 38
      },
      "revId": "7d63ef4a35b09ee248bcada9b474b00d2c903da0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "51d58af5_2b222964",
        "filename": "src/compiler/turboshaft/type-inference-reducer.h",
        "patchSetId": 3
      },
      "lineNbr": 115,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2022-12-07T13:56:16Z",
      "side": 1,
      "message": "Done. And I think the non-wrapping case was in the wrong order (should be `range.second - range.first`).",
      "parentUuid": "dac73060_16a7bd1f",
      "range": {
        "startLine": 115,
        "startChar": 11,
        "endLine": 115,
        "endChar": 38
      },
      "revId": "7d63ef4a35b09ee248bcada9b474b00d2c903da0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e4b4163_17c9770f",
        "filename": "src/compiler/turboshaft/type-inference-reducer.h",
        "patchSetId": 3
      },
      "lineNbr": 513,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2022-12-06T13:54:11Z",
      "side": 1,
      "message": "nit: you might also check if the index is in range.",
      "range": {
        "startLine": 513,
        "startChar": 33,
        "endLine": 513,
        "endChar": 56
      },
      "revId": "7d63ef4a35b09ee248bcada9b474b00d2c903da0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "524d0e43_1c4e5646",
        "filename": "src/compiler/turboshaft/type-inference-reducer.h",
        "patchSetId": 3
      },
      "lineNbr": 513,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2022-12-07T13:56:16Z",
      "side": 1,
      "message": "`block_to_snapshot_mapping_` is a `GrowingBlockSidetable\u003c\u003e`, it will grow automatically if the index is out of range.",
      "parentUuid": "3e4b4163_17c9770f",
      "range": {
        "startLine": 513,
        "startChar": 33,
        "endLine": 513,
        "endChar": 56
      },
      "revId": "7d63ef4a35b09ee248bcada9b474b00d2c903da0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0829e5e6_b0f337b7",
        "filename": "src/compiler/turboshaft/type-inference-reducer.h",
        "patchSetId": 3
      },
      "lineNbr": 513,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2022-12-08T10:42:51Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "524d0e43_1c4e5646",
      "range": {
        "startLine": 513,
        "startChar": 33,
        "endLine": 513,
        "endChar": 56
      },
      "revId": "7d63ef4a35b09ee248bcada9b474b00d2c903da0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "494317ee_24b08be9",
        "filename": "src/compiler/turboshaft/type-inference-reducer.h",
        "patchSetId": 3
      },
      "lineNbr": 592,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2022-12-06T13:54:11Z",
      "side": 1,
      "message": "nit: if we are to keep this code (I guess we do), let\u0027s add comments to what are the different cases supported. The cascade of ternary conditions doesn\u0027t make it super easy to follow.\nAs an alternative, you might introduce two helper functions, e.g.\n`uint32_t GetUpperLimit(uint32_t limit, bool is_less_than)` and similarly `GetLowerLimit` that do the ternary branching and reduce next_smaller|next_larger or the original limit.",
      "range": {
        "startLine": 592,
        "startChar": 14,
        "endLine": 592,
        "endChar": 25
      },
      "revId": "7d63ef4a35b09ee248bcada9b474b00d2c903da0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3bf0178f_e59726ac",
        "filename": "src/compiler/turboshaft/type-inference-reducer.h",
        "patchSetId": 3
      },
      "lineNbr": 592,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2022-12-07T13:56:16Z",
      "side": 1,
      "message": "It is a very specific piece of code that is only really useful here, so I left it here instead of putting it to a separate function. I rewrote it without the ternaries. Wdyt?",
      "parentUuid": "494317ee_24b08be9",
      "range": {
        "startLine": 592,
        "startChar": 14,
        "endLine": 592,
        "endChar": 25
      },
      "revId": "7d63ef4a35b09ee248bcada9b474b00d2c903da0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e3d22d3_8d737382",
        "filename": "src/compiler/turboshaft/type-inference-reducer.h",
        "patchSetId": 3
      },
      "lineNbr": 592,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2022-12-08T10:42:51Z",
      "side": 1,
      "message": "I think it\u0027s more readable now, thanks!",
      "parentUuid": "3bf0178f_e59726ac",
      "range": {
        "startLine": 592,
        "startChar": 14,
        "endLine": 592,
        "endChar": 25
      },
      "revId": "7d63ef4a35b09ee248bcada9b474b00d2c903da0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "edf0bb3c_b3e050a4",
        "filename": "src/compiler/turboshaft/types.h",
        "patchSetId": 3
      },
      "lineNbr": 233,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2022-12-06T13:54:11Z",
      "side": 1,
      "message": "nit: could we turn this into a static_assert?",
      "range": {
        "startLine": 233,
        "startChar": 4,
        "endLine": 233,
        "endChar": 10
      },
      "revId": "7d63ef4a35b09ee248bcada9b474b00d2c903da0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aae04daf_a7f4b4d0",
        "filename": "src/compiler/turboshaft/types.h",
        "patchSetId": 3
      },
      "lineNbr": 233,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2022-12-07T13:56:16Z",
      "side": 1,
      "message": "`Kind` is only known at runtime, so that\u0027s not possible to turn this into a `static_assert`.",
      "parentUuid": "edf0bb3c_b3e050a4",
      "range": {
        "startLine": 233,
        "startChar": 4,
        "endLine": 233,
        "endChar": 10
      },
      "revId": "7d63ef4a35b09ee248bcada9b474b00d2c903da0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "56de8c30_97e8b6c8",
        "filename": "src/compiler/turboshaft/types.h",
        "patchSetId": 3
      },
      "lineNbr": 233,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2022-12-08T10:42:51Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "aae04daf_a7f4b4d0",
      "range": {
        "startLine": 233,
        "startChar": 4,
        "endLine": 233,
        "endChar": 10
      },
      "revId": "7d63ef4a35b09ee248bcada9b474b00d2c903da0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0f62ab9_886ae35f",
        "filename": "src/compiler/turboshaft/types.h",
        "patchSetId": 3
      },
      "lineNbr": 265,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2022-12-06T13:54:11Z",
      "side": 1,
      "message": "nit: why not simply loop until `i \u003c\u003d to`?",
      "range": {
        "startLine": 265,
        "startChar": 17,
        "endLine": 265,
        "endChar": 26
      },
      "revId": "7d63ef4a35b09ee248bcada9b474b00d2c903da0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05a7e1d1_1582c571",
        "filename": "src/compiler/turboshaft/types.h",
        "patchSetId": 3
      },
      "lineNbr": 265,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2022-12-07T13:56:16Z",
      "side": 1,
      "message": "Because after the loop\u0027s last iteration, `i` will be `to + 1`. In case `to \u003d\u003d std::numeric_limits\u003cword_t\u003e::max()`, this will unsigned overflow `i` to 0, turning this an infinite loop.",
      "parentUuid": "b0f62ab9_886ae35f",
      "range": {
        "startLine": 265,
        "startChar": 17,
        "endLine": 265,
        "endChar": 26
      },
      "revId": "7d63ef4a35b09ee248bcada9b474b00d2c903da0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "921fcfe7_6134dfc5",
        "filename": "src/compiler/turboshaft/types.h",
        "patchSetId": 3
      },
      "lineNbr": 265,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2022-12-08T10:42:51Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "05a7e1d1_1582c571",
      "range": {
        "startLine": 265,
        "startChar": 17,
        "endLine": 265,
        "endChar": 26
      },
      "revId": "7d63ef4a35b09ee248bcada9b474b00d2c903da0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67f68483_c55dc3f6",
        "filename": "src/compiler/turboshaft/types.h",
        "patchSetId": 3
      },
      "lineNbr": 482,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2022-12-06T13:54:11Z",
      "side": 1,
      "message": "This and the else branch are almost identical to what `WordType::Set` does, could we extract it to the base class?",
      "range": {
        "startLine": 479,
        "startChar": 6,
        "endLine": 482,
        "endChar": 59
      },
      "revId": "7d63ef4a35b09ee248bcada9b474b00d2c903da0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b6543d7_80b5e07f",
        "filename": "src/compiler/turboshaft/types.h",
        "patchSetId": 3
      },
      "lineNbr": 482,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2022-12-07T13:56:16Z",
      "side": 1,
      "message": "The problem is that those functions need to construct an object of the derived types (`WordSetType` and `FloatSetType` respectively). Moving the entire Set factory into `Type` is thus not feasible. We could move some of the implementation into a helper function in the base class and pass the derived type as a template argument. But since the two constructors require different arguments (due to `FloatType`\u0027s `special_values`), this might not be very uniform and require additional special casing. I thought that for the moment that was not worth it just to save 6-8 lines of similar code. I was planning to reevaluate this once we have more derived types that have similar `Set` logic. Wdyt?",
      "parentUuid": "67f68483_c55dc3f6",
      "range": {
        "startLine": 479,
        "startChar": 6,
        "endLine": 482,
        "endChar": 59
      },
      "revId": "7d63ef4a35b09ee248bcada9b474b00d2c903da0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6680c1a3_d879fce8",
        "filename": "src/compiler/turboshaft/types.h",
        "patchSetId": 3
      },
      "lineNbr": 482,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2022-12-08T10:42:51Z",
      "side": 1,
      "message": "Sounds good to reevaluate it later, thanks!",
      "parentUuid": "6b6543d7_80b5e07f",
      "range": {
        "startLine": 479,
        "startChar": 6,
        "endLine": 482,
        "endChar": 59
      },
      "revId": "7d63ef4a35b09ee248bcada9b474b00d2c903da0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}