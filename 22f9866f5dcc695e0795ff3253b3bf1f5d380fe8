{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fd88700a_78adb639",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1506979
      },
      "writtenOn": "2024-04-22T18:41:18Z",
      "side": 1,
      "message": "@syg@chromium.org PTAL. This fixes the regular expression issue but for some reason my script is generating 129 entries in the `asso_values` array and I don\u0027t know why. Could you check if this is also happening for you?",
      "revId": "22f9866f5dcc695e0795ff3253b3bf1f5d380fe8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0a2c936_5d1fa5f5",
        "filename": "src/parsing/keywords-gen.h",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1506979
      },
      "writtenOn": "2024-04-22T18:43:03Z",
      "side": 1,
      "message": "There shouldn\u0027t be any changes here, but `gperf` is generating an array with 129 entries, removing the last one shouldto work fine but I don\u0027t know if this is expected.",
      "range": {
        "startLine": 72,
        "startChar": 6,
        "endLine": 79,
        "endChar": 46
      },
      "revId": "22f9866f5dcc695e0795ff3253b3bf1f5d380fe8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ce31456_a7518a5f",
        "filename": "src/parsing/keywords-gen.h",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-04-22T20:46:39Z",
      "side": 1,
      "message": "Interesting. Removing the last one is right. Given that this shouldn\u0027t change at all, could you undo the formatting change here?\n\nI did a little digging why there\u0027s a difference, and AFAICT what\u0027s happening is that the `gperf` output _should_ be 129, because the actual hash function below is `len + asso_values[str[1]+1] + asso_values[str[0]]`. Since the max 7bit ASCII value is 127, the max value for `str[1]+1` would be 128, which means you need a 129-long table. I don\u0027t know why `gperf` does that instead of `asso_values[str[1]]`.\n\nBut we can never go out of bounds in the V8 usage because ASCII 127 (DEL) is a non-identifier character and so wouldn\u0027t hit the perfect keyword hash lookup path, since it can\u0027t be a character in a keyword.",
      "parentUuid": "b0a2c936_5d1fa5f5",
      "range": {
        "startLine": 72,
        "startChar": 6,
        "endLine": 79,
        "endChar": 46
      },
      "revId": "22f9866f5dcc695e0795ff3253b3bf1f5d380fe8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5eb672d6_c46c71c3",
        "filename": "src/parsing/keywords-gen.h",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1506979
      },
      "writtenOn": "2024-04-22T22:18:53Z",
      "side": 1,
      "message": "The 128 value is hardcoded do I changed it to 129, even tho we should never reach it. I still wonder why there was not an issue the last time this script was run, since the C++ naturally won\u0027t let you initialize an array of size 128 with 129 values.",
      "parentUuid": "3ce31456_a7518a5f",
      "range": {
        "startLine": 72,
        "startChar": 6,
        "endLine": 79,
        "endChar": 46
      },
      "revId": "22f9866f5dcc695e0795ff3253b3bf1f5d380fe8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e236277a_6e29725c",
        "filename": "src/parsing/keywords-gen.h",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-04-22T22:21:32Z",
      "side": 1,
      "message": "Sorry I wasn\u0027t clear. I originally meant that we should keep at it 128, leave the current table completely unchanged.\n\nBut this change to 129 also seems fine. We don\u0027t use anything beyond the first 32 items of the table anyway.\n\nLeszek, WDYT?",
      "parentUuid": "5eb672d6_c46c71c3",
      "range": {
        "startLine": 72,
        "startChar": 6,
        "endLine": 79,
        "endChar": 46
      },
      "revId": "22f9866f5dcc695e0795ff3253b3bf1f5d380fe8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b72e953b_8f670b1e",
        "filename": "src/parsing/keywords-gen.h",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 3401386
      },
      "writtenOn": "2024-04-23T01:22:20Z",
      "side": 1,
      "message": "\u003e I don\u0027t know why `gperf` does that instead of `asso_values[str[1]]`.\n\nIt\u0027s so that `\"else\"` (`asso_values[\u0027e\u0027] + asso_values[\u0027l\u0027 + 1]`) has a different hash than `\"let\"` (`asso_values[\u0027l\u0027] + asso_values[\u0027e\u0027 + 1]`). The 129 is correct, though I agree that 128 looks prettier on the screen and it definitely doesn\u0027t make a difference in this particular case because as you say, DEL _can\u0027t_ show up here. (And even if it did, it\u0027s _technically_ a buffer overread but it can\u0027t actually cause errors in this case other than a possible-though-unlikely segfault.)\n\nThen again, when I was diving this code it did take me a little while to realize that the `128` in `asso_values[128]` was not the same `128` as in `kPerfectKeywordLengthTable[128]` and `kPerfectKeywordHashTable[128]`. I thought those were three parallel arrays; it\u0027s not, it\u0027s two parallel arrays and an unrelated array. Changing it (back) to 129 might make the code easier to understand at first glance.",
      "parentUuid": "e236277a_6e29725c",
      "range": {
        "startLine": 72,
        "startChar": 6,
        "endLine": 79,
        "endChar": 46
      },
      "revId": "22f9866f5dcc695e0795ff3253b3bf1f5d380fe8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e26bd4b_a91a2fd6",
        "filename": "src/parsing/keywords-gen.h",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2024-04-23T09:32:39Z",
      "side": 1,
      "message": "`asso_values[str[1]]` would give a different value than `asso_values[str[1]+1]`, and so would be a different (likely non-perfect) hash function.\n\nChanging to 129 is the correct length, so let\u0027s do it.",
      "parentUuid": "b72e953b_8f670b1e",
      "range": {
        "startLine": 72,
        "startChar": 6,
        "endLine": 79,
        "endChar": 46
      },
      "revId": "22f9866f5dcc695e0795ff3253b3bf1f5d380fe8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b8be843_b2a3c428",
        "filename": "src/parsing/keywords-gen.h",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1506979
      },
      "writtenOn": "2024-04-23T16:09:48Z",
      "side": 1,
      "message": "Done. Thanks everyone!",
      "parentUuid": "8e26bd4b_a91a2fd6",
      "range": {
        "startLine": 72,
        "startChar": 6,
        "endLine": 79,
        "endChar": 46
      },
      "revId": "22f9866f5dcc695e0795ff3253b3bf1f5d380fe8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}