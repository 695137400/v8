{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "55089b86_340a460f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-12-02T12:24:37Z",
      "side": 1,
      "message": "This is the big refactoring to re-validate on a streaming decoder error. It\u0027s a bit big, but still manageable IMO. I left a few comments that might help reviewing.",
      "revId": "dce142d76eda2b2534ac4398fefaa9aafd093c45",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07cabc3f_2671b71a",
        "filename": "src/wasm/module-compiler.cc",
        "patchSetId": 4
      },
      "lineNbr": 2633,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2022-12-02T16:53:23Z",
      "side": 1,
      "message": "Does this step have to run in the foreground just because the isolate counters get updated here?",
      "revId": "dce142d76eda2b2534ac4398fefaa9aafd093c45",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d5cafd62_e1a50e98",
        "filename": "src/wasm/module-compiler.cc",
        "patchSetId": 4
      },
      "lineNbr": 2633,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-12-02T18:24:49Z",
      "side": 1,
      "message": "There are multiple things that need to run in the foreground: `PrepareRuntimeObjects`, `OnAfterCompile`, `FinalizeJSToWasmWrappers`, and finally resolving the promise. This is all done in `AsyncCompileJob::FinishCompile`.",
      "parentUuid": "07cabc3f_2671b71a",
      "revId": "dce142d76eda2b2534ac4398fefaa9aafd093c45",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ed9b911_005dac09",
        "filename": "src/wasm/module-compiler.cc",
        "patchSetId": 4
      },
      "lineNbr": 2892,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-12-02T12:24:37Z",
      "side": 1,
      "message": "This sample was missing before, in the streaming case.",
      "revId": "dce142d76eda2b2534ac4398fefaa9aafd093c45",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "375c86ed_6deeec79",
        "filename": "src/wasm/module-decoder-impl.h",
        "patchSetId": 4
      },
      "lineNbr": 269,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-12-02T12:24:37Z",
      "side": 1,
      "message": "Here I added a better error message; previously we produced a generic \"expected %u bytes, fell off end\".",
      "revId": "dce142d76eda2b2534ac4398fefaa9aafd093c45",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "747e36ee_5cbad736",
        "filename": "src/wasm/streaming-decoder.cc",
        "patchSetId": 4
      },
      "lineNbr": 221,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2022-12-02T16:53:23Z",
      "side": 1,
      "message": "I think the section buffers could just be views (offset + length) into `full_wire_bytes_`. Access to the section buffers and `full_wire_bytes_` is single-threaded, so the growing of the std::vector should not be a problem.",
      "revId": "dce142d76eda2b2534ac4398fefaa9aafd093c45",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7d523fd_95253df1",
        "filename": "src/wasm/streaming-decoder.cc",
        "patchSetId": 4
      },
      "lineNbr": 221,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-12-02T18:24:49Z",
      "side": 1,
      "message": "I think the problem is that background compilation and validation accesses the section buffers. So the memory should not get relocated. Maybe we can use something like a chunked list instead of a vector to fix this. I would propose to do that in a follow-up though, hence the TODO.",
      "parentUuid": "747e36ee_5cbad736",
      "revId": "dce142d76eda2b2534ac4398fefaa9aafd093c45",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f4c2c3b_3038c8c3",
        "filename": "src/wasm/streaming-decoder.cc",
        "patchSetId": 4
      },
      "lineNbr": 221,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2022-12-05T07:43:19Z",
      "side": 1,
      "message": "Sure, this comment was not meant to block this CL, but to think about possible solutions for this TODO.\n\nThe idea of the section buffers came up to implement a chunked list, as we don\u0027t know how many bytes to expect in total. Naturally this depends on the section size information from the module, which is only available in a well-formed module. We could introduce invalid sections though, with a fixed length, and then just fill all bytes that come after an error into SectionBuffers of invalid sections.",
      "parentUuid": "a7d523fd_95253df1",
      "revId": "dce142d76eda2b2534ac4398fefaa9aafd093c45",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}