{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "eaa12118_31145e9d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1418022
      },
      "writtenOn": "2020-10-20T18:54:12Z",
      "side": 1,
      "message": "Generic Notes\n\nDesign doc:\nhttps://docs.google.com/document/d/2xkXj94iExFgLWc_OszTNyNGi523ARaKMWPZTeomhI4U\n\nA lot has changed since the last patchset! I recommend revisiting this design\ndoc and reading the parts in green. I explain the roadmap for what changes to\nexpect from ETW instrumentation as well as the instrumentation of this\nparticular CL.\n\nRegarding the roadmap, I anticipate 2-3 total changelists:\n  - A CL that does the most minimal and basic ETW instrumentation (this one)\n  - A CL for emitting stack-walking events\n  - A CL for configuring which events we want to trace\n\nI\u0027ll do my best to answer any further questions anyone has about my particular\ninstrumentation or ETW in general :)\n\n---\nAbout this CL\n\nThis is the first of a series of changelists to round out ETW instrumentation\nfor V8. Check out this design doc to see the full roadmap:\nhttps://docs.google.com/document/d/1xkXj94iExFgLWc_OszTNyNGi523ARaKMWPZTeomhI4U\n\nThis changelist represents the most minimal change needed to instrument ETW in\nV8. In particular, it:\n  - defines and registers the ETW provider,\n  - interacts minimally with the rest of V8, by hooking into the existing\n    TracingController::AddTraceEvent function,\n  - is designed with a platform-agnostic layer, so that event tracers for other\n    platforms can be instrumented in the future.\n\nSome notes on instrumentation:\n\nWe make heavy use of the TraceLogging API to log events. It differs from\nprevious methods of emitting ETW events in that it doesn\u0027t require\nthe overhead of a separate manifest file to keep track of metadata; rather,\nevents using this API are self-descriptive.\n\nHere are the five major steps to instrument ETW via the TraceLogging API:\n  - Forward declare the provider (from provider-win.h)\n  - Define the provider in a .cc file (from provider-win.cc)\n  - Register the provider (called from init/v8.cc).\n  - Write events (called from libplatform/tracing/tracing-controller.cc)\n  - Unregister the provider (called from init/v8.cc)\n\nAt the base, we have an abstract provider class that describes the\nfunctionality of an event provider. These are things like registering and\nunregistering the provider, and the actual event-logging.\n\nThe provider class is split into provider-win and provider-mac (currently not\ninstantiated) classes, with OS-dependent implementations of the above functions.\n\nIn particular, the TraceLogging API is used only in provider-win. It is here\nthat we forward declare and define the provider, as well as write ETW events.\n\nFinally, there is a v8-provider class that serves as a top-level API and is\nexposed to the rest of V8. It acts as a wrapper for the platform-specific\nproviders.\n\nThe .wprp file is needed so that Windows Performance Recorder knows how to\ncapture our events.\n\nSome considerations:\n  - Is TracingController::AddTraceEvent the best place from which to write my\n    events?\n  - Is src/libplatform/tracing the best place to put my instrumentation?\n  - Right now, I fail the preupload because of this, which tells me my files are\n    probably not in the best location:\n\nYou added one or more #includes that violate checkdeps rules.  src\\init\\v8.cc\nIllegal include: \"src/libplatform/tracing/v8-provider.h\" Because of\n\"-src/libplatform\" from src\u0027s include_rules.",
      "revId": "46b533bed981a317081806b42d695cc5f0f5270e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}