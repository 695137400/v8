{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b54b6cc2_40cff6d3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-02-23T10:47:53Z",
      "side": 1,
      "message": "If there is a bug, we should fix the bug, and prevent the use of the mid-tier register allocator for those functions.\n\nI think it\u0027s a good idea to use the top-tier allocator for all statically compiled code, but not because of a bug, but because we don\u0027t care about compile time that much for those code objects. So I would suggest using this argument in the CL description instead.",
      "revId": "64c923e231b41ebba325efb5dcc1e876743d789d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7401ec4_c8a16f92",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1311345
      },
      "writtenOn": "2022-02-23T11:11:18Z",
      "side": 1,
      "message": "It wasn\u0027t clear to me whether or not the bug was in letting these functions be used by the allocator, or whether it was in the marking itself.",
      "parentUuid": "b54b6cc2_40cff6d3",
      "revId": "64c923e231b41ebba325efb5dcc1e876743d789d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b42ce611_8ff3761c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2022-02-23T16:01:34Z",
      "side": 1,
      "message": "Also not clear to me whether the mid-tier allocator was intended to be used for statically compiled code. If we agree it was not, then +1 to the motivation that we don\u0027t need a fast allocator in this case.\n\nBtw @Clemens, what would be the benefit of using the top-tier allocator always for statically compiled code? (besides not hitting this bug)",
      "parentUuid": "c7401ec4_c8a16f92",
      "revId": "64c923e231b41ebba325efb5dcc1e876743d789d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c5b519b_99958723",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-02-24T10:55:53Z",
      "side": 1,
      "message": "I think there are two orthogonal issues here, which are connected though:\n1. For statically compiled code we are more interested in best performance and we can sacrifice some compile time, so we should always use the top-tier register allocator.\n2. The mid-tier register allocator should generate a valid register allocation for every valid TurboFan graph, otherwise it\u0027s a bug. If the bug indeed only happens for code where we don\u0027t want to use this allocator (because of the point above), then that\u0027s low priority though, maybe not even worth fixing.",
      "parentUuid": "b42ce611_8ff3761c",
      "revId": "64c923e231b41ebba325efb5dcc1e876743d789d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ebf2ddb8_7f716fc8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1310167
      },
      "writtenOn": "2022-02-25T10:30:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6c5b519b_99958723",
      "revId": "64c923e231b41ebba325efb5dcc1e876743d789d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5f8ea99_840be941",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-02-23T10:47:53Z",
      "side": 1,
      "message": "This is missing the \"chromium:\" prefix.",
      "revId": "64c923e231b41ebba325efb5dcc1e876743d789d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "46a93f1b_fc8dc715",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1311345
      },
      "writtenOn": "2022-02-23T11:11:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a5f8ea99_840be941",
      "revId": "64c923e231b41ebba325efb5dcc1e876743d789d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "87291a7e_2f3c88e0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1311345
      },
      "writtenOn": "2022-02-23T10:40:19Z",
      "side": 1,
      "message": "It might be incorrect to turn it off for FOR_TESTING as this may simply be hiding bugs with the mid-tier register allocator itself.",
      "revId": "64c923e231b41ebba325efb5dcc1e876743d789d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38111849_533f3dda",
        "filename": "src/compiler/pipeline.cc",
        "patchSetId": 2
      },
      "lineNbr": 3463,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-02-23T10:47:53Z",
      "side": 1,
      "message": "Please add a short comment saying why we exclude those code kinds. Also (or alternatively), it might be a good idea to extract this into its own boolean variable:\n\nbool is_statically_compiled \u003d ...\nbool use_mid_tier_register_allocator \u003d !is_statically_compiled \u0026\u0026 ...",
      "range": {
        "startLine": 3460,
        "startChar": 0,
        "endLine": 3463,
        "endChar": 62
      },
      "revId": "64c923e231b41ebba325efb5dcc1e876743d789d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02f72c2e_66559a3b",
        "filename": "src/compiler/pipeline.cc",
        "patchSetId": 2
      },
      "lineNbr": 3463,
      "author": {
        "id": 1311345
      },
      "writtenOn": "2022-02-23T11:11:18Z",
      "side": 1,
      "message": "Is this a comprehensive list of code kinds that are statically compiled? I have only gone off what was causing crashes. Also, FOR_TESTING is not only used at static compile time as far as I can tell.",
      "parentUuid": "38111849_533f3dda",
      "range": {
        "startLine": 3460,
        "startChar": 0,
        "endLine": 3463,
        "endChar": 62
      },
      "revId": "64c923e231b41ebba325efb5dcc1e876743d789d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07428214_e4813f58",
        "filename": "src/compiler/pipeline.cc",
        "patchSetId": 2
      },
      "lineNbr": 3463,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2022-02-23T16:01:34Z",
      "side": 1,
      "message": "+1 for the `is_statically_compiled` suggestion, even if the list is not exhaustive, although I don\u0027t see any of the other CodeKinds to be used statically. We could even add a predicate to https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/code-kind.h for this logic (without the FOR_TESTING, which you might \u0027and\u0027 with the predicate here).",
      "parentUuid": "02f72c2e_66559a3b",
      "range": {
        "startLine": 3460,
        "startChar": 0,
        "endLine": 3463,
        "endChar": 62
      },
      "revId": "64c923e231b41ebba325efb5dcc1e876743d789d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a74b2d67_2a829d01",
        "filename": "src/compiler/pipeline.cc",
        "patchSetId": 2
      },
      "lineNbr": 3463,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-02-24T10:55:53Z",
      "side": 1,
      "message": "The CodeKinds are defined in code-kind.h. It seems like BYTECODE_HANDLER and BUILTIN are the most important kinds we want to exclude for mid-tier. C_WASM_ENTRY is only used by the wasm C API, but depending on the use case those could be dynamically generated. But those are small wrappers, so both register allocators should be fine.\n\nNot sure about FOR_TESTING. If it\u0027s not needed, I would recommend dropping it from this list. If that leads to issues, we could temporarily add it to the list, with a TODO to look into this (feel free to assign this to me).",
      "parentUuid": "07428214_e4813f58",
      "range": {
        "startLine": 3460,
        "startChar": 0,
        "endLine": 3463,
        "endChar": 62
      },
      "revId": "64c923e231b41ebba325efb5dcc1e876743d789d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e6c5e18_09b39ef3",
        "filename": "src/compiler/pipeline.cc",
        "patchSetId": 2
      },
      "lineNbr": 3463,
      "author": {
        "id": 1310167
      },
      "writtenOn": "2022-02-24T16:05:03Z",
      "side": 1,
      "message": "I will prevent use of the mid-tier register allocator for statically compiled functions only for now as they are sufficient to prevent any issues with v8_enable_builtins_profiling.\n\nWhen forcing use of the mid-tier allocator, the FOR_TESTING code fails for the same reason as the static code, I imagine none of the test code has enough virtual registers to reach the threshold for using the mid-tier register allocator as a huge function and so is not an issue that needs to be covered in this patch.\n\nThe C_WASM_ENTRY code fails when using the mid-tier allocator as it hits the DCHECK here: https://source.chromium.org/chromium/chromium/src/+/main:v8/src/compiler/backend/mid-tier-register-allocator.cc;l\u003d582;bpv\u003d0;bpt\u003d1\nThis may be a completely different bug and so I will not attempt to fix that here.",
      "parentUuid": "a74b2d67_2a829d01",
      "range": {
        "startLine": 3460,
        "startChar": 0,
        "endLine": 3463,
        "endChar": 62
      },
      "revId": "64c923e231b41ebba325efb5dcc1e876743d789d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ee4e07de_983495da",
        "filename": "src/compiler/pipeline.cc",
        "patchSetId": 2
      },
      "lineNbr": 3463,
      "author": {
        "id": 1310167
      },
      "writtenOn": "2022-02-25T10:30:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9e6c5e18_09b39ef3",
      "range": {
        "startLine": 3460,
        "startChar": 0,
        "endLine": 3463,
        "endChar": 62
      },
      "revId": "64c923e231b41ebba325efb5dcc1e876743d789d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}