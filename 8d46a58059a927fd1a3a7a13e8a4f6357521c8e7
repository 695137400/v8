{
  "comments": [
    {
      "key": {
        "uuid": "48f6b2f7_d08df1ad",
        "filename": "src/wasm/wasm-memory.cc",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2018-03-29T09:59:42Z",
      "side": 1,
      "message": "MemoryPressureNotification forces GC in all spaces. The second GC should not be needed unless there is floating garbage due to finalizers.\n\nAndreas, Michael, and Ben recently converted multiple wasm finalized handles to phantom handles, which removed the floating garbage. Could you please re-check your scenario on TOT?\n\nIt could be that the failure is already fixed or that we don\u0027t need the second GC (heap-\u003eCollectGarbage)\n\nIf the second GC still helps, then let\u0027s replace heap-\u003eCollectGarbage with \n\"if (!ReserveAddressSpace()) MemoryPressureNotification();\"\n\nNote that GC triggered by MemoryPressureNotification is a non-incremental GC, which can take hundreds on milliseconds.  If this path is triggered frequently in common cases, then Chrome will become unresponsive.",
      "range": {
        "startLine": 41,
        "startChar": 4,
        "endLine": 41,
        "endChar": 75
      },
      "revId": "8d46a58059a927fd1a3a7a13e8a4f6357521c8e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "208d6177_4073bd37",
        "filename": "src/wasm/wasm-memory.cc",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1144619
      },
      "writtenOn": "2018-03-29T16:44:44Z",
      "side": 1,
      "message": "Thanks for the suggestion. I was able to remove the second call to CollectGarbage and that seems to work fine.\n\nBased on current usage patterns, this is an extremely rare case. It\u0027s only needed after a page creates 128 wasm memories that weren\u0027t otherwise collected. For the most part, pages make 1 or 2 memories. We\u0027ve only hit this issue in some of our tests which create many wasm memories very rapidly to test small modules in isolation.",
      "parentUuid": "48f6b2f7_d08df1ad",
      "range": {
        "startLine": 41,
        "startChar": 4,
        "endLine": 41,
        "endChar": 75
      },
      "revId": "8d46a58059a927fd1a3a7a13e8a4f6357521c8e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "592e584d_084cc9c9",
        "filename": "src/wasm/wasm-memory.cc",
        "patchSetId": 3
      },
      "lineNbr": 42,
      "author": {
        "id": 1122079
      },
      "writtenOn": "2018-03-28T23:56:45Z",
      "side": 1,
      "message": "Triggering a GC here, means that we can possibly a collection during instantiation, either when allocating globals or memory. Given that the instance, and it\u0027s associated objects have not been completely set up yet, this might lead to the instance having stale references. Currently we turn off all variants of gc-stress testing on mjsunit tests when wasm-traps are used, and the cctests aren\u0027t as thorough when testing different variations of Grow, instances sharing memory etc. Would it be possible to turn on at least a subset of the mjsunit+gcstress tests with this CL? This would increase confidence because: \n - It proves that this CL will resolve some of the memory exhaustion issues which were the reason the mjsunit tests were turned off. \n - Better testing for wasm traps + memory edge cases. \n\n+titzer@ in case my understanding of how we keep objects live during instantiation is incorrect.",
      "revId": "8d46a58059a927fd1a3a7a13e8a4f6357521c8e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "faf282d9_b43a61d7",
        "filename": "src/wasm/wasm-memory.cc",
        "patchSetId": 3
      },
      "lineNbr": 42,
      "author": {
        "id": 1144619
      },
      "writtenOn": "2018-03-29T00:25:39Z",
      "side": 1,
      "message": "I just kicked off the GC stress trybots on https://crrev.com/c/985142. That CL builds on this one but always enables guard regions. That should show us the same coverage as re-enabling the tests with trap handlers.\n\nYou raise a good point that before I flip the trap handler default, I should re-enable all the tests that we disabled for that configuration.",
      "parentUuid": "592e584d_084cc9c9",
      "revId": "8d46a58059a927fd1a3a7a13e8a4f6357521c8e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ddf7587a_7804ef0e",
        "filename": "src/wasm/wasm-memory.cc",
        "patchSetId": 3
      },
      "lineNbr": 42,
      "author": {
        "id": 1122079
      },
      "writtenOn": "2018-03-29T00:50:15Z",
      "side": 1,
      "message": "Thanks for kicking off the GC stress trybots! It would be good to re-enable all the tests for the configuration, but as a starting point I\u0027d be ok with enabling the memory specific tests, and the js-api tests under gc-stress here - https://cs.chromium.org/chromium/src/v8/test/mjsunit/mjsunit.status?q\u003dmjsunit.stat\u0026sq\u003dpackage:chromium\u0026l\u003d787). Specifically the memory related tests in test/mjsunit/wasm/(grow-memory*, memory*, import-memory.js, instance-memory-gc-stress.js, module-memory.js etc.) would be a good sanity check.",
      "parentUuid": "faf282d9_b43a61d7",
      "revId": "8d46a58059a927fd1a3a7a13e8a4f6357521c8e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da76179a_3c5b9d22",
        "filename": "src/wasm/wasm-memory.cc",
        "patchSetId": 3
      },
      "lineNbr": 42,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2018-03-29T09:59:42Z",
      "side": 1,
      "message": "There is DisallowHeapAllocation scope if you want to check that no GC happens while you are initializing the object.\n\nThat being said, it is better to write code that is not sensitive to GC timing. Because that is a bug farm.",
      "revId": "8d46a58059a927fd1a3a7a13e8a4f6357521c8e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae19b493_85a064e0",
        "filename": "src/wasm/wasm-memory.cc",
        "patchSetId": 3
      },
      "lineNbr": 42,
      "author": {
        "id": 1144619
      },
      "writtenOn": "2018-03-29T21:17:09Z",
      "side": 1,
      "message": "I just removed the lines you pointed to. Based on the comment there, this seems like the right time to enable the tests again :)",
      "parentUuid": "ddf7587a_7804ef0e",
      "revId": "8d46a58059a927fd1a3a7a13e8a4f6357521c8e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8dced09c_a97afa5f",
        "filename": "src/wasm/wasm-memory.cc",
        "patchSetId": 3
      },
      "lineNbr": 42,
      "author": {
        "id": 1122079
      },
      "writtenOn": "2018-03-29T21:38:54Z",
      "side": 1,
      "message": "Awesome, thanks!",
      "parentUuid": "ae19b493_85a064e0",
      "revId": "8d46a58059a927fd1a3a7a13e8a4f6357521c8e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}