{
  "comments": [
    {
      "key": {
        "uuid": "8622bdd5_a4b864ab",
        "filename": "include/cppgc/gc-info.h",
        "patchSetId": 17
      },
      "lineNbr": 43,
      "author": {
        "id": 1344750
      },
      "writtenOn": "2020-03-24T10:26:36Z",
      "side": 1,
      "message": "Why don\u0027t we simplify DCL now to simple thread-safe static local initialization? With something like\n\ntemplate \u003ctypename T\u003e\nclass RegisterGCInfoIndex {\npublic:\n  // Definition is hidden in .cc file.\n  RegisterGCInfoIndex(const GCInfo* gc_info):\n    index_{GlobalGCInfoTable::GetMutable().RegisterNewEntry(\u0026gc_info)}\n  {}\n  \n  GCInfoIndex GetIndex() const { return index_; }\n\nprivate:\n  GCInfoIndex index_;\n};\n\ntemplate \u003ctypename T\u003e\nstruct GCInfoTrait {\n  static GCInfoIndex Index() {\n    static_assert(sizeof(T), \"T must be fully defined\");\n    static const GCInfo kGCInfo \u003d {FinalizerTrait\u003cT\u003e::kCallback,\n                                   std::is_polymorphic\u003cT\u003e::value};\n    static const RegisterGCInfoIndex\u003cT\u003e kNewEntry(\u0026kGCInfo);\n    return kNewEntry.GetIndex();\n  }\n};\n\nAs another thing, why don\u0027t we simplify it even further and store GCInfo directly in the table (not pointers to them)?",
      "revId": "17bbae432f0dbd96093328923e0883cd0c8e1f8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc81d86d_51016c8b",
        "filename": "include/cppgc/gc-info.h",
        "patchSetId": 17
      },
      "lineNbr": 43,
      "author": {
        "id": 1344750
      },
      "writtenOn": "2020-03-24T10:29:58Z",
      "side": 1,
      "message": "For reference: I experimented with storing GCInfos directly a while ago: https://chromium-review.googlesource.com/c/chromium/src/+/1746183",
      "parentUuid": "8622bdd5_a4b864ab",
      "revId": "17bbae432f0dbd96093328923e0883cd0c8e1f8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71b87e26_2c88c76a",
        "filename": "include/cppgc/gc-info.h",
        "patchSetId": 17
      },
      "lineNbr": 43,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-24T13:04:33Z",
      "side": 1,
      "message": "Done (thread-safe static local init).\nDone (storing GCInfo in table instead of splitting apart GCInfo and its ptr).",
      "parentUuid": "dc81d86d_51016c8b",
      "revId": "17bbae432f0dbd96093328923e0883cd0c8e1f8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ec3c4ab_e42cab7b",
        "filename": "src/heap/cppgc/api.cc",
        "patchSetId": 17
      },
      "lineNbr": 8,
      "author": {
        "id": 1344750
      },
      "writtenOn": "2020-03-24T10:26:36Z",
      "side": 1,
      "message": "I think having this api.cc file contradicts the Google\u0027s style guide rule that all .cc files (except for tests and main) need to have corresponding .h files. Or are we planning to add api.h later?\n\nJust wonder: do we really want to merge all API functions into single .cc file? Why not separate API and implementation on the directory basis (e.g. move all backend into detail/)?",
      "revId": "17bbae432f0dbd96093328923e0883cd0c8e1f8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7344bbb8_2563f1d3",
        "filename": "src/heap/cppgc/api.cc",
        "patchSetId": 17
      },
      "lineNbr": 8,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-24T13:04:33Z",
      "side": 1,
      "message": "Done. (`api.cc`-\u003e`gc-info.cc`)\n\nV8 has a single api.cc for its API but then again it also has a single v8.h. Let\u0027s see how the split works out.",
      "parentUuid": "0ec3c4ab_e42cab7b",
      "revId": "17bbae432f0dbd96093328923e0883cd0c8e1f8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0cad3317_4c160e20",
        "filename": "src/heap/cppgc/gc-info-table.h",
        "patchSetId": 17
      },
      "lineNbr": 87,
      "author": {
        "id": 1344750
      },
      "writtenOn": "2020-03-24T10:26:36Z",
      "side": 1,
      "message": "nit: Why not return \u0026 (as for constant Get()) to keep caller code consistent? IIRC, the Google\u0027s Style Guide has mutable-as-a-pointer rule only for parameters (correct me if I\u0027m wrong).",
      "range": {
        "startLine": 87,
        "startChar": 20,
        "endLine": 87,
        "endChar": 21
      },
      "revId": "17bbae432f0dbd96093328923e0883cd0c8e1f8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40c8ecf1_e5b29027",
        "filename": "src/heap/cppgc/gc-info-table.h",
        "patchSetId": 17
      },
      "lineNbr": 87,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-24T13:04:33Z",
      "side": 1,
      "message": "Done: I couldn\u0027t find a rule, so I think you are right.",
      "parentUuid": "0cad3317_4c160e20",
      "range": {
        "startLine": 87,
        "startChar": 20,
        "endLine": 87,
        "endChar": 21
      },
      "revId": "17bbae432f0dbd96093328923e0883cd0c8e1f8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}