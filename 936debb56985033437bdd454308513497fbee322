{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d2fe6f74_c88b2594",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1000264
      },
      "writtenOn": "2021-08-05T20:03:01Z",
      "side": 1,
      "message": "Hmm, curious!  I can\u0027t see an ELF toolchain doing that, but I suppose a Mac/Mach-O toolchain could.\n\nDo you have any information that could confirm that hypothesis?  e.g.\n\n* disassembly of binaries showing that the ProbeMemory function gets split up\n* standalone test cases showing that symbols declared with \".globl\"  get treated as starting new sections\n* any references to this in docs or other code?\n\nUnfortunately I don\u0027t have a Mac to test this out on.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 12,
        "endChar": 15
      },
      "revId": "936debb56985033437bdd454308513497fbee322",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5df03e90_58f63a4b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1000264
      },
      "writtenOn": "2021-08-06T02:49:35Z",
      "side": 1,
      "message": "I found the toolchain feature that caused this.\n\nI looked at the assembly output for Mac and found this directive at the end:\n\n $ clang hellow.c -S -o - -target x86_64-apple-darwin\n ...\n .subsections_via_symbols\n\n\"The .subsections_via_symbols directive indicates we can split each section along symbol boundaries, unless those symbols have been marked with .alt_entry.\" (from https://reviews.llvm.org/D79926)\n\nSo if this code had needed symbols defined within a function in a more complex case, we could use \".alt_entry\".",
      "parentUuid": "d2fe6f74_c88b2594",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 12,
        "endChar": 15
      },
      "revId": "936debb56985033437bdd454308513497fbee322",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aeb12903_0e2c64d9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2021-08-06T14:09:09Z",
      "side": 1,
      "message": "Ah, good to know what is causing this. I only observed that the disassembly of \"ProbeMemory\" was missing the \"ret\", and was instead followed by instructions that were disassembled as nops. Eventually is must have returned, but \"rax\" contained some garbage then which made the simulator continue at that address and fail.\n\nI think the current solution is good enough (a \"ret\" is a single byte anyway). Should we add a comment why it\u0027s needed?",
      "parentUuid": "5df03e90_58f63a4b",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 12,
        "endChar": 15
      },
      "revId": "936debb56985033437bdd454308513497fbee322",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}