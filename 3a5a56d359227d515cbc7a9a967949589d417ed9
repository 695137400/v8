{
  "comments": [
    {
      "key": {
        "uuid": "1bbb9f9c_c6c86415",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2019-09-30T15:39:17Z",
      "side": 1,
      "message": "Please see the style guide for formatting of commit messages. Especially, wrap at 72 characters and add a subject line (preferably \u003c\u003d 50 chars, max. 72 chars).\nhttp://go/chromium-commit-messages\n\nAlso, please add some text why we need to make this change, i.e. in which context you plan to use it. It might also help to create a tracking bug for this, so reviewers have more context.",
      "revId": "3a5a56d359227d515cbc7a9a967949589d417ed9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e121eba_57e81686",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2019-10-01T07:57:21Z",
      "side": 1,
      "message": "Is there any tooling to help with commit message formatting? Gerrit for instance doesn\u0027t help.",
      "parentUuid": "1bbb9f9c_c6c86415",
      "revId": "3a5a56d359227d515cbc7a9a967949589d417ed9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2562274_1bc13116",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2019-10-01T09:03:48Z",
      "side": 1,
      "message": "When showing the commit message, Gerrit shows a vertical line at 72 characters. But when editing, there is indeed no such help.\nUsually you write the commit message in your preferred text editor when uploading the CL, and there you can configure for automatic wrapping at 72 characters.",
      "parentUuid": "4e121eba_57e81686",
      "revId": "3a5a56d359227d515cbc7a9a967949589d417ed9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db3b840a_4fcadd16",
        "filename": "src/utils/locked-queue-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 63,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2019-09-30T15:39:17Z",
      "side": 1,
      "message": "Why {NotifyAll}, not {NotifyOne}?",
      "revId": "3a5a56d359227d515cbc7a9a967949589d417ed9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8775d3a_8c962fa2",
        "filename": "src/utils/locked-queue-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 110,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2019-09-30T15:39:17Z",
      "side": 1,
      "message": "If you do this in a loop, you might wait much longer than the given timeout, right?",
      "revId": "3a5a56d359227d515cbc7a9a967949589d417ed9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf7c91f4_bf6612e9",
        "filename": "src/utils/locked-queue-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 110,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2019-10-01T07:57:21Z",
      "side": 1,
      "message": "WaitFor returns false if the timeout expires, in which case we return from the function.",
      "parentUuid": "a8775d3a_8c962fa2",
      "revId": "3a5a56d359227d515cbc7a9a967949589d417ed9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01f73209_aaa5483e",
        "filename": "src/utils/locked-queue-inl.h",
        "patchSetId": 4
      },
      "lineNbr": 110,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2019-10-01T09:03:48Z",
      "side": 1,
      "message": "It looks like it can happen that {WaitFor} returns before the timeout, but there is still no element in the queue. Then we wait again (in a loop).\nUsing {NotifyOne} instead of {NotifyAll} (which is still unaddressed) might fix this.\nAny way, this method should be changed as well. If it\u0027s guaranteed that we can\u0027t wait repeatedly, then the {WaitFor} should not be in a loop.",
      "parentUuid": "cf7c91f4_bf6612e9",
      "revId": "3a5a56d359227d515cbc7a9a967949589d417ed9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ff79b95_661e4424",
        "filename": "src/utils/locked-queue.h",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2019-09-30T15:39:17Z",
      "side": 1,
      "message": "Can you try to forward-declare base::Optional instead of adding the include? If it\u0027s only used as a return type, that should work.",
      "revId": "3a5a56d359227d515cbc7a9a967949589d417ed9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5de4098_0a608a6c",
        "filename": "src/utils/locked-queue.h",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2019-10-01T07:57:21Z",
      "side": 1,
      "message": "Return types can\u0027t be incomplete.",
      "parentUuid": "3ff79b95_661e4424",
      "revId": "3a5a56d359227d515cbc7a9a967949589d417ed9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6426e5d3_b1914e4c",
        "filename": "src/utils/locked-queue.h",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2019-10-01T09:03:48Z",
      "side": 1,
      "message": "That is true for function definitions, but I am pretty sure that it\u0027s OK to have incomplete types in declarations. Did you try?",
      "parentUuid": "c5de4098_0a608a6c",
      "revId": "3a5a56d359227d515cbc7a9a967949589d417ed9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3056c822_46cf7727",
        "filename": "src/utils/locked-queue.h",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2019-09-30T15:39:17Z",
      "side": 1,
      "message": "TimeDelta is small enough to pass by value. We are not totally consistent there, but it seems like most other code already does this.",
      "revId": "3a5a56d359227d515cbc7a9a967949589d417ed9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "909ef9d1_5086139b",
        "filename": "src/utils/locked-queue.h",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2019-10-01T07:57:21Z",
      "side": 1,
      "message": "I could, but then TimeDelta can\u0027t be just forward declared anymore. Additionally, WaitFor takes a const-ref as well, so I\u0027ll just introduce another copy at my layer of the API. Is that worth it?",
      "parentUuid": "3056c822_46cf7727",
      "revId": "3a5a56d359227d515cbc7a9a967949589d417ed9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2e40c8a_25afdf89",
        "filename": "src/utils/locked-queue.h",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2019-10-01T09:03:48Z",
      "side": 1,
      "message": "Yes, we should do \"the right thing\" and clean up other code later, instead of introducing more suboptimal code.\n\nSimilar to above, the forward declaration should be enough to *declare* the method here. For the definition, you need to include the right header then.",
      "parentUuid": "909ef9d1_5086139b",
      "revId": "3a5a56d359227d515cbc7a9a967949589d417ed9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}