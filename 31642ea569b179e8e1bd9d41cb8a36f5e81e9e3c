{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0a366a68_2d46edb3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1519522
      },
      "writtenOn": "2023-03-23T11:55:02Z",
      "side": 1,
      "message": "Hi! (CCing a bunch of folks who may have inputs here, but feel free to unCC yourself!)\nWe have a bunch of tiering related flags now and I\u0027d like to have a single configuration option that sets all these thresholds to be suitable for JIT fuzzing. Previously we had a number of these flags in Fuzzilli (See https://team.git.corp.google.com/v8-team/fuzzilli/+/refs/heads/main/Sources/FuzzilliCli/Profiles/V8Profile.swift#288) but that is quite fragile and was missing a lot of these flags.\n\nI have to admit I don\u0027t fully understand what all of these thresholds control, so any help here would be much appreciated. I played around with this configuration locally and looked at the output of `%GetOptimizationStatus(f)`, and these values seemed to kind of work... Ideally, the configuration would be such that simply calling one function ~100 times, (and with --single-threaded) will lead to a few executions in Ignition, then a few in Sparkplug, then maybe a dozen or so in Maglev, and then finally tier up to Turbofan. But I guess it\u0027s far from straight-forward to set these thresholds in such a way... :)",
      "revId": "31642ea569b179e8e1bd9d41cb8a36f5e81e9e3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "387e26a0_8a29a90a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1115956
      },
      "writtenOn": "2023-03-23T12:09:29Z",
      "side": 1,
      "message": "I assume this is mainly going to be passed on fuzzilli. On other fuzzers we already manipulate all of those flags independently. Does it make sense to remove the individual flags and replace it all by this new flag? Can we reach more corner cases by different values on the different subflags?\n\nWould it make sense to add a certain pseudo-random component here? E.g. make these values random-seed dependent or introduce a new kind of random seed? (e.g. we already have https://source.chromium.org/chromium/chromium/src/+/main:v8/src/flags/flag-definitions.h;l\u003d1966;drc\u003d6588ba2f6bfbe641303f7f97dfa7aaf13837ce87) To get more variance into the fixed values. OTOH, I assume fuzzilli can\u0027t direct coverage based on flag values? I.e. reach more coverage by changing the flags belonging to a test.",
      "revId": "31642ea569b179e8e1bd9d41cb8a36f5e81e9e3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ffb8eb30_947733dd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1519522
      },
      "writtenOn": "2023-03-23T12:28:29Z",
      "side": 1,
      "message": "So I\u0027d like to have one \"supported\" configuration that basically just does all the tiering X times faster but otherwise leaves the relative number of invocations between tiers roughly equal. That way the individual fuzzers don\u0027t need to maintain the necessary flags themselves. I assume this could be useful for non-Fuzzilli fuzzers as well.\nI think what we\u0027ll try with Fuzzilli is to use just this flag to lower all thresholds at the same time, but then randomly disable some of the tiers, e.g. run with --no-maglev or --no-turbofan.\nWhat you describe also sounds like a good idea though, i.e. a kind of \"tiering-fuzzing\", where we set these thresholds to random values to maybe trigger interesting behavior. My gut feeling is that we\u0027d want this fairly rarely (since it will probably often prevent (some of the) JITing?), so I\u0027d prefer a separate mechanism for that, e.g. a `--stress-tiering` flag or just have the fuzzers pick random values for the individual flags. WDYT?",
      "parentUuid": "387e26a0_8a29a90a",
      "revId": "31642ea569b179e8e1bd9d41cb8a36f5e81e9e3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2cef16b4_e90802a2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1115956
      },
      "writtenOn": "2023-03-23T12:58:14Z",
      "side": 1,
      "message": "Random values of the individual flags makes sense. And that is also what we do to some degree on numfuzz (https://source.chromium.org/chromium/chromium/src/+/main:v8/tools/testrunner/testproc/fuzzer.py;l\u003d333). But it\u0027s just completely random and not directed in any way. We\u0027ll never know if one of the many random values was a good one (unless we find a bug). I wonder if fuzzilli could at some point start also tweaking the flag vector of a test case. And e.g. store it alongside the test case and manipulate it just like manipulating code. I.e. it could be that the same code leads to slightly better coverage just by tweaking one of these flags, e.g. a slightly lower interrupt budget. But maybe this discussion goes to far on this CL. We can continue it elsewhere.",
      "parentUuid": "ffb8eb30_947733dd",
      "revId": "31642ea569b179e8e1bd9d41cb8a36f5e81e9e3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "36fb891b_5debebfe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1519522
      },
      "writtenOn": "2023-03-23T13:10:09Z",
      "side": 1,
      "message": "Sounds good! One alternative idea might be to instead introduce runtime functions that control these values, and then letting the fuzzers call these with more or less random values. That should \"just work\" with our existing coverage feedback and would probably be a bit easier to implement than flag-tweaking (which would require changes to our REPRL logic), assuming V8 can handle these values changing at runtime. But yes, let\u0027s discuss this elsewhere :)",
      "parentUuid": "2cef16b4_e90802a2",
      "revId": "31642ea569b179e8e1bd9d41cb8a36f5e81e9e3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}