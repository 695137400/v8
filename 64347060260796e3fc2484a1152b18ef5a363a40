{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "bc2844ad_7f950a3b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2021-10-05T10:48:45Z",
      "side": 1,
      "message": "PTAL (Jakob as main reviewer, Maya as compiler owner)",
      "revId": "64347060260796e3fc2484a1152b18ef5a363a40",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a5f0267_bc470bd6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2021-10-05T14:09:26Z",
      "side": 1,
      "message": "LGTM for src/compiler, thanks!",
      "revId": "64347060260796e3fc2484a1152b18ef5a363a40",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aea6261e_882fe50f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2021-10-05T15:46:28Z",
      "side": 1,
      "message": "LGTM",
      "revId": "64347060260796e3fc2484a1152b18ef5a363a40",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ef4aa784_29368e35",
        "filename": "src/compiler/wasm-compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 7583,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2021-10-05T15:46:28Z",
      "side": 1,
      "message": "IMHO \"wasm to js\" is preferable because it\u0027s unambiguous. \"Wasm import\" could mean \"importing into Wasm\" or \"importing a Wasm function\".\n\nBesides, not all wasm-to-js calls are to imported functions. With the type-reflection proposal, you can pass a WebAssembly.Function as an argument from JS to an exported Wasm function, so it never goes through the import mechanism.",
      "range": {
        "startLine": 7583,
        "startChar": 5,
        "endLine": 7583,
        "endChar": 54
      },
      "revId": "64347060260796e3fc2484a1152b18ef5a363a40",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cae83f65_150cc695",
        "filename": "src/compiler/wasm-compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 7583,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2021-10-05T17:32:03Z",
      "side": 1,
      "message": "Right, the term \"wrapper\" is wrong. I still do not like \"wasm to js\" though, because as you noted we do not necessarily call out to JS. We just call \"an imported function\", which in this case is a Math intrinsic.\nIt\u0027s only a TODO after all, but I changed it to \"WASM_IMPORT_CALL\". The final name can be decided when/if that TODO will be addressed ;)",
      "parentUuid": "ef4aa784_29368e35",
      "range": {
        "startLine": 7583,
        "startChar": 5,
        "endLine": 7583,
        "endChar": 54
      },
      "revId": "64347060260796e3fc2484a1152b18ef5a363a40",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}