{
  "comments": [
    {
      "key": {
        "uuid": "07f2c7d7_32f842a1",
        "filename": "tools/testrunner/testproc/progress.py",
        "patchSetId": 26
      },
      "lineNbr": 9,
      "author": {
        "id": 1115956
      },
      "writtenOn": "2020-04-27T20:07:32Z",
      "side": 1,
      "message": "Where you planning to use this? It would indeed be interesting to find a more efficient way than resorting the sorted list again with each tests. What is python\u0027s default sorting algo? But whatever it is, we shouldn\u0027t rely on it and if we choose a large cutoff value, this might get slow.",
      "range": {
        "startLine": 9,
        "startChar": 7,
        "endLine": 9,
        "endChar": 12
      },
      "revId": "81cd4fbf85a81578743f2f046e72ace580ff8a7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "049fd656_45a6d972",
        "filename": "tools/testrunner/testproc/progress.py",
        "patchSetId": 26
      },
      "lineNbr": 9,
      "author": {
        "id": 1368998
      },
      "writtenOn": "2020-04-28T11:43:01Z",
      "side": 1,
      "message": "I started using largestn from this lib, but one error in my key lambda definition revealed that under the hood list.sort[:n] was used by this function. So no efficiency gain there. I will investigate the possibility of using an ordered collection if there is one in std lib. Still learning Python.\n\nI will remove the import.",
      "parentUuid": "07f2c7d7_32f842a1",
      "range": {
        "startLine": 9,
        "startChar": 7,
        "endLine": 9,
        "endChar": 12
      },
      "revId": "81cd4fbf85a81578743f2f046e72ace580ff8a7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d15a6d24_d2c19aa0",
        "filename": "tools/testrunner/testproc/progress.py",
        "patchSetId": 26
      },
      "lineNbr": 9,
      "author": {
        "id": 1115956
      },
      "writtenOn": "2020-04-28T12:37:18Z",
      "side": 1,
      "message": "I thought you\u0027d need heappush and heappop. Though I don\u0027t see them taking a key function. If they expect default sorting, you could arrange the elements as tuples maybe? (duration, object) - not sure what happens if there are two exactly equal durations...",
      "parentUuid": "049fd656_45a6d972",
      "range": {
        "startLine": 9,
        "startChar": 7,
        "endLine": 9,
        "endChar": 12
      },
      "revId": "81cd4fbf85a81578743f2f046e72ace580ff8a7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2de18ed_0297e7a4",
        "filename": "tools/testrunner/testproc/progress.py",
        "patchSetId": 26
      },
      "lineNbr": 9,
      "author": {
        "id": 1115956
      },
      "writtenOn": "2020-04-28T12:39:50Z",
      "side": 1,
      "message": "See also:\nhttps://stackoverflow.com/questions/7803121/in-python-heapq-heapify-doesnt-take-cmp-or-key-functions-as-arguments-like-sor",
      "parentUuid": "d15a6d24_d2c19aa0",
      "range": {
        "startLine": 9,
        "startChar": 7,
        "endLine": 9,
        "endChar": 12
      },
      "revId": "81cd4fbf85a81578743f2f046e72ace580ff8a7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "926564e0_5a286381",
        "filename": "tools/testrunner/testproc/progress.py",
        "patchSetId": 26
      },
      "lineNbr": 9,
      "author": {
        "id": 1115956
      },
      "writtenOn": "2020-04-28T12:44:59Z",
      "side": 1,
      "message": "Here some trial how this could look like. Essentially you could just add each test with heappush as tuple of (duration, test) and when we need to cut off you call heappop. In the end, the slowest tests remain.\n\n\u003e\u003e\u003e import heapq\n\u003e\u003e\u003e r \u003d []\n\u003e\u003e\u003e heapq.heappush(r, (3.5, \u0027bla\u0027))\n\u003e\u003e\u003e r\n[(3.5, \u0027bla\u0027)]\n\u003e\u003e\u003e heapq.heappush(r, (3.6, \u0027blub\u0027))\n\u003e\u003e\u003e heapq.heappush(r, (1.2, \u0027blub\u0027))\n\u003e\u003e\u003e heapq.heappush(r, (1.7, \u0027bla\u0027))\n\u003e\u003e\u003e heapq.heappush(r, (100, \u0027ble\u0027))\n\u003e\u003e\u003e r\n[(1.2, \u0027blub\u0027), (1.7, \u0027bla\u0027), (3.5, \u0027bla\u0027), (3.6, \u0027blub\u0027), (100, \u0027ble\u0027)]\n\u003e\u003e\u003e heapq.heappop(r)\n(1.2, \u0027blub\u0027)\n\u003e\u003e\u003e r\n[(1.7, \u0027bla\u0027), (3.6, \u0027blub\u0027), (3.5, \u0027bla\u0027), (100, \u0027ble\u0027)]",
      "parentUuid": "a2de18ed_0297e7a4",
      "range": {
        "startLine": 9,
        "startChar": 7,
        "endLine": 9,
        "endChar": 12
      },
      "revId": "81cd4fbf85a81578743f2f046e72ace580ff8a7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "529bc678_13c83309",
        "filename": "tools/testrunner/testproc/progress.py",
        "patchSetId": 26
      },
      "lineNbr": 354,
      "author": {
        "id": 1316073
      },
      "writtenOn": "2020-04-28T08:10:52Z",
      "side": 1,
      "message": "In python we don\u0027t shorten variable names this much even when it\u0027s used quickly below, so \u0027record\u0027 is more readable",
      "range": {
        "startLine": 354,
        "startChar": 6,
        "endLine": 354,
        "endChar": 9
      },
      "revId": "81cd4fbf85a81578743f2f046e72ace580ff8a7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64836dc7_c8fd4820",
        "filename": "tools/testrunner/testproc/progress.py",
        "patchSetId": 26
      },
      "lineNbr": 354,
      "author": {
        "id": 1115956
      },
      "writtenOn": "2020-04-28T17:48:55Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "529bc678_13c83309",
      "range": {
        "startLine": 354,
        "startChar": 6,
        "endLine": 354,
        "endChar": 9
      },
      "revId": "81cd4fbf85a81578743f2f046e72ace580ff8a7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27d5180c_fae2fdd8",
        "filename": "tools/testrunner/testproc/progress.py",
        "patchSetId": 26
      },
      "lineNbr": 354,
      "author": {
        "id": 1368998
      },
      "writtenOn": "2020-04-29T09:05:14Z",
      "side": 1,
      "message": "note: I would be more comfortable with longer names if the the line cutoff would be 120 rather than 80 :(",
      "parentUuid": "64836dc7_c8fd4820",
      "range": {
        "startLine": 354,
        "startChar": 6,
        "endLine": 354,
        "endChar": 9
      },
      "revId": "81cd4fbf85a81578743f2f046e72ace580ff8a7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8f3b06f6_aa500c2b",
        "filename": "tools/testrunner/testproc/progress.py",
        "patchSetId": 26
      },
      "lineNbr": 360,
      "author": {
        "id": 1115956
      },
      "writtenOn": "2020-04-27T20:07:32Z",
      "side": 1,
      "message": "nit: Let\u0027s add those to the common data. They are not costly.\n\nMaybe also the first line above? Otherwise we can\u0027t use PASS/FAIL as decision criteria later in queries. I don\u0027t think calling test.output_proc.get_outcome(output) is very costly in the PASS case. I could be wrong though...",
      "range": {
        "startLine": 359,
        "startChar": 10,
        "endLine": 360,
        "endChar": 48
      },
      "revId": "81cd4fbf85a81578743f2f046e72ace580ff8a7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bd9df10_f71fec27",
        "filename": "tools/testrunner/testproc/progress.py",
        "patchSetId": 26
      },
      "lineNbr": 360,
      "author": {
        "id": 1368998
      },
      "writtenOn": "2020-04-28T11:43:01Z",
      "side": 1,
      "message": "OK. I will pull down these fields. \n\nPractically result is in common data, only self.results will not collect records for has_unexpected_output, and we want to collect that in slow tests regardless.",
      "parentUuid": "8f3b06f6_aa500c2b",
      "range": {
        "startLine": 359,
        "startChar": 10,
        "endLine": 360,
        "endChar": 48
      },
      "revId": "81cd4fbf85a81578743f2f046e72ace580ff8a7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7eb73482_79d7fdfa",
        "filename": "tools/testrunner/testproc/progress.py",
        "patchSetId": 26
      },
      "lineNbr": 368,
      "author": {
        "id": 1316073
      },
      "writtenOn": "2020-04-28T08:10:52Z",
      "side": 1,
      "message": "Prefer the following convention in Python. else clause is not needed here\n```\nif not ...:\n  return \"\"\n\nreturn test.output......\n```",
      "revId": "81cd4fbf85a81578743f2f046e72ace580ff8a7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7fb37449_f7d6dab2",
        "filename": "tools/testrunner/testproc/progress.py",
        "patchSetId": 26
      },
      "lineNbr": 368,
      "author": {
        "id": 1368998
      },
      "writtenOn": "2020-04-29T09:05:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7eb73482_79d7fdfa",
      "revId": "81cd4fbf85a81578743f2f046e72ace580ff8a7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f104e38f_ecb7e97d",
        "filename": "tools/testrunner/testproc/progress.py",
        "patchSetId": 26
      },
      "lineNbr": 369,
      "author": {
        "id": 1115956
      },
      "writtenOn": "2020-04-27T20:07:32Z",
      "side": 1,
      "message": "As commented above: Could you investigate how expensive calling test.output_proc.get_outcome(output) is? I think it was called anyways to calculate has_unexpected_output. It\u0027d make this code also simpler if it were just included in the default record.\n\nIf has_unexpected_output is True and e.g. expected_outcomes is PASS, then in most cases the result is just FAIL. And if has_unexpected_output is False and then result is PASS.\n\nIn case calling get_outcome reanalyzes the whole output in e.g. webkit tests, maybe we could cache this somewhere.",
      "range": {
        "startLine": 369,
        "startChar": 15,
        "endLine": 369,
        "endChar": 51
      },
      "revId": "81cd4fbf85a81578743f2f046e72ace580ff8a7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "acc5e921_29273fc1",
        "filename": "tools/testrunner/testproc/progress.py",
        "patchSetId": 26
      },
      "lineNbr": 369,
      "author": {
        "id": 1368998
      },
      "writtenOn": "2020-04-28T11:43:01Z",
      "side": 1,
      "message": "Actually if I do not guard against has_unexpected_output the get_outcome call will fail in a nasty way. I did not investigate exactly way, but it was a very unpleasant surprise.",
      "parentUuid": "f104e38f_ecb7e97d",
      "range": {
        "startLine": 369,
        "startChar": 15,
        "endLine": 369,
        "endChar": 51
      },
      "revId": "81cd4fbf85a81578743f2f046e72ace580ff8a7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e576eca3_aa9ec54e",
        "filename": "tools/testrunner/testproc/progress.py",
        "patchSetId": 26
      },
      "lineNbr": 382,
      "author": {
        "id": 1115956
      },
      "writtenOn": "2020-04-27T20:07:32Z",
      "side": 1,
      "message": "Guess a heap would be a very good data structure here indeed.\n\nOptimization would be to remember the duration of the fastest in the list when over the limit. Every fast test can be skipped right away. Most slow tests come first anyways.\n\nOr you could make it truly buffered. E.g. add X tests without sorting at all then sort after test X and cut off.\n\nOr to go to the beginning: Can we also just buffer everything like in your first version? I had my worries with stdout/stderr, but how large would be all the other values in total for the largest suite we have? But if implementation doesn\u0027t take to long, the heap version would be nicer and more future-proof.",
      "range": {
        "startLine": 382,
        "startChar": 22,
        "endLine": 382,
        "endChar": 27
      },
      "revId": "81cd4fbf85a81578743f2f046e72ace580ff8a7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a82ed58_45a7ca1d",
        "filename": "tools/testrunner/testproc/progress.py",
        "patchSetId": 26
      },
      "lineNbr": 382,
      "author": {
        "id": 1368998
      },
      "writtenOn": "2020-04-28T11:43:01Z",
      "side": 1,
      "message": "As mentioned above, turns up that the heap implementation is a not so smart wrapper around sorted()[:n] . Will find a better solution.",
      "parentUuid": "e576eca3_aa9ec54e",
      "range": {
        "startLine": 382,
        "startChar": 22,
        "endLine": 382,
        "endChar": 27
      },
      "revId": "81cd4fbf85a81578743f2f046e72ace580ff8a7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "644c0736_a68d5133",
        "filename": "tools/testrunner/testproc/progress.py",
        "patchSetId": 26
      },
      "lineNbr": 382,
      "author": {
        "id": 1115956
      },
      "writtenOn": "2020-04-28T12:37:18Z",
      "side": 1,
      "message": "Hmm, that\u0027s strange. Then maybe a linked list that you keep sorted? That\u0027s O(n) for every insertion. But I thought with a heap it would be O(logn). With the implementation now it seems to be O(n*logn) given the sort call. Probably no problem for small n, but for larger ones?",
      "parentUuid": "8a82ed58_45a7ca1d",
      "range": {
        "startLine": 382,
        "startChar": 22,
        "endLine": 382,
        "endChar": 27
      },
      "revId": "81cd4fbf85a81578743f2f046e72ace580ff8a7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}