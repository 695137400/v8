{
  "comments": [
    {
      "key": {
        "uuid": "d6a9abe3_7e3c8b8d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1322305
      },
      "writtenOn": "2020-08-04T08:09:59Z",
      "side": 1,
      "message": "PTAL again, thanks ðŸ˜Š",
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e005533d_7564b662",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2020-08-04T08:24:46Z",
      "side": 1,
      "message": "This looks really great! Just a few nits from me, I\u0027ll let Jakob do the +1.",
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a25468fb_9b456bdc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-04T08:32:23Z",
      "side": 1,
      "message": "Getting there, thanks.",
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2c360a5c_7c9bf617",
        "filename": "src/builtins/number.tq",
        "patchSetId": 14
      },
      "lineNbr": 69,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2020-08-04T08:24:46Z",
      "side": 1,
      "message": "nit: this could return a char8, with appropriate use of %RawDownCast. This would save us the masking with 0xFF",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 69,
        "endChar": 39
      },
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b1c142f_81760cda",
        "filename": "src/builtins/number.tq",
        "patchSetId": 14
      },
      "lineNbr": 69,
      "author": {
        "id": 1322305
      },
      "writtenOn": "2020-08-04T09:25:06Z",
      "side": 1,
      "message": "Would not save us a masking IMO. For this to return char8, we need to convert from int32 to char8 anyway.",
      "parentUuid": "2c360a5c_7c9bf617",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 69,
        "endChar": 39
      },
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70bc0d32_802bfafb",
        "filename": "src/builtins/number.tq",
        "patchSetId": 14
      },
      "lineNbr": 69,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-04T09:31:23Z",
      "side": 1,
      "message": "It would because the returned value is guaranteed to be a single byte and thus doesn\u0027t need to be masked.",
      "parentUuid": "4b1c142f_81760cda",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 69,
        "endChar": 39
      },
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8ce83b5_2347c251",
        "filename": "src/builtins/number.tq",
        "patchSetId": 14
      },
      "lineNbr": 122,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-04T08:32:23Z",
      "side": 1,
      "message": "AllocateSeqOneByteString could just return a SeqOneByteString type",
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3deb985c_21271811",
        "filename": "src/builtins/number.tq",
        "patchSetId": 14
      },
      "lineNbr": 122,
      "author": {
        "id": 1322305
      },
      "writtenOn": "2020-08-04T09:25:06Z",
      "side": 1,
      "message": "but AllocateSeqOneByteString could return an EmptyString",
      "parentUuid": "e8ce83b5_2347c251",
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf0e506b_b41e9daa",
        "filename": "src/builtins/number.tq",
        "patchSetId": 14
      },
      "lineNbr": 122,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-04T09:31:23Z",
      "side": 1,
      "message": "Is the EmptyString not a sequential one byte string?",
      "parentUuid": "3deb985c_21271811",
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10a0a332_6444eb4d",
        "filename": "src/builtins/number.tq",
        "patchSetId": 14
      },
      "lineNbr": 128,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2020-08-04T08:24:46Z",
      "side": 1,
      "message": "it\u0027s technically slightly better to have the decrement after the write to chars (and start with length - 1), to lengthen the data dependency between `cursor` and `strSeq.chars[cursor]`. In practice I expect it won\u0027t make much difference though.",
      "range": {
        "startLine": 128,
        "startChar": 6,
        "endLine": 128,
        "endChar": 26
      },
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b28abc7_5d34b1c0",
        "filename": "src/builtins/number.tq",
        "patchSetId": 14
      },
      "lineNbr": 128,
      "author": {
        "id": 1322305
      },
      "writtenOn": "2020-08-04T09:25:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "10a0a332_6444eb4d",
      "range": {
        "startLine": 128,
        "startChar": 6,
        "endLine": 128,
        "endChar": 26
      },
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5050e4d_29a69dc8",
        "filename": "src/builtins/number.tq",
        "patchSetId": 14
      },
      "lineNbr": 134,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2020-08-04T08:24:46Z",
      "side": 1,
      "message": "could this just be a char8 constant, to avoid the Convert?",
      "range": {
        "startLine": 134,
        "startChar": 6,
        "endLine": 134,
        "endChar": 31
      },
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc6011d1_835f8d61",
        "filename": "src/builtins/number.tq",
        "patchSetId": 14
      },
      "lineNbr": 134,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-04T08:32:23Z",
      "side": 1,
      "message": "Also could this be literal \u0027-\u0027 instead of 45? If it doesn\u0027t work, 45 is fine by me.",
      "parentUuid": "c5050e4d_29a69dc8",
      "range": {
        "startLine": 134,
        "startChar": 6,
        "endLine": 134,
        "endChar": 31
      },
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "361c7580_00749075",
        "filename": "src/builtins/number.tq",
        "patchSetId": 14
      },
      "lineNbr": 134,
      "author": {
        "id": 1322305
      },
      "writtenOn": "2020-08-04T09:25:06Z",
      "side": 1,
      "message": "Added convert from constexpr int31 to char8 and it works with 45. Although it cannot accept literal \u0027-\u0027.",
      "parentUuid": "dc6011d1_835f8d61",
      "range": {
        "startLine": 134,
        "startChar": 6,
        "endLine": 134,
        "endChar": 31
      },
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a201a82a_45a5c168",
        "filename": "src/codegen/code-stub-assembler.cc",
        "patchSetId": 14
      },
      "lineNbr": 5817,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-04T08:32:23Z",
      "side": 1,
      "message": "final nit, a more efficient way to implement this is\n\n (instance_type \u0026 (kStringRepresentationMask | kStringEncodingMask)) \u003d\u003d (kSeqStringTag | kOneByteStringTag)\n\nThat\u0027s 1 and, 1 equals, instead of 3 ands, 2 equals.",
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0cd54a7_c6e08c23",
        "filename": "src/codegen/code-stub-assembler.cc",
        "patchSetId": 14
      },
      "lineNbr": 5817,
      "author": {
        "id": 1322305
      },
      "writtenOn": "2020-08-04T09:25:06Z",
      "side": 1,
      "message": "thanks for the tips ðŸ˜Ž",
      "parentUuid": "a201a82a_45a5c168",
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "672342bc_eb2d2b56",
        "filename": "src/codegen/code-stub-assembler.cc",
        "patchSetId": 14
      },
      "lineNbr": 6094,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-04T08:32:23Z",
      "side": 1,
      "message": "s/SloppyTNode/TNode/",
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b99a88e_0d4d4b63",
        "filename": "src/codegen/code-stub-assembler.cc",
        "patchSetId": 14
      },
      "lineNbr": 6094,
      "author": {
        "id": 1322305
      },
      "writtenOn": "2020-08-04T09:25:06Z",
      "side": 1,
      "message": "What do you mean here?",
      "parentUuid": "672342bc_eb2d2b56",
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}