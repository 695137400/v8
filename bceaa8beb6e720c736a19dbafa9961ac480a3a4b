{
  "comments": [
    {
      "key": {
        "uuid": "d6a9abe3_7e3c8b8d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1322305
      },
      "writtenOn": "2020-08-04T08:09:59Z",
      "side": 1,
      "message": "PTAL again, thanks ðŸ˜Š",
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e005533d_7564b662",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2020-08-04T08:24:46Z",
      "side": 1,
      "message": "This looks really great! Just a few nits from me, I\u0027ll let Jakob do the +1.",
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a25468fb_9b456bdc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-04T08:32:23Z",
      "side": 1,
      "message": "Getting there, thanks.",
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2c360a5c_7c9bf617",
        "filename": "src/builtins/number.tq",
        "patchSetId": 14
      },
      "lineNbr": 69,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2020-08-04T08:24:46Z",
      "side": 1,
      "message": "nit: this could return a char8, with appropriate use of %RawDownCast. This would save us the masking with 0xFF",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 69,
        "endChar": 39
      },
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b1c142f_81760cda",
        "filename": "src/builtins/number.tq",
        "patchSetId": 14
      },
      "lineNbr": 69,
      "author": {
        "id": 1322305
      },
      "writtenOn": "2020-08-04T09:25:06Z",
      "side": 1,
      "message": "Would not save us a masking IMO. For this to return char8, we need to convert from int32 to char8 anyway.",
      "parentUuid": "2c360a5c_7c9bf617",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 69,
        "endChar": 39
      },
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70bc0d32_802bfafb",
        "filename": "src/builtins/number.tq",
        "patchSetId": 14
      },
      "lineNbr": 69,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-04T09:31:23Z",
      "side": 1,
      "message": "It would because the returned value is guaranteed to be a single byte and thus doesn\u0027t need to be masked.",
      "parentUuid": "4b1c142f_81760cda",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 69,
        "endChar": 39
      },
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e8605e1_554ae535",
        "filename": "src/builtins/number.tq",
        "patchSetId": 14
      },
      "lineNbr": 69,
      "author": {
        "id": 1322305
      },
      "writtenOn": "2020-08-04T09:54:02Z",
      "side": 1,
      "message": "never mind, I thought I cannot use %RawDownCast directly ðŸ˜Š",
      "parentUuid": "70bc0d32_802bfafb",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 69,
        "endChar": 39
      },
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9eea0df_b5b6173d",
        "filename": "src/builtins/number.tq",
        "patchSetId": 14
      },
      "lineNbr": 69,
      "author": {
        "id": 1322305
      },
      "writtenOn": "2020-08-04T10:35:38Z",
      "side": 1,
      "message": "Hmm, I\u0027m not sure what went wrong here but csa_verify build is failing\n\n# TypeError: node #2481:Store[kRepWord16, NoWriteBarrier] uses node #2209:Phi[kRepWord8]:kRepWord8 which doesn\u0027t have a kRepWord32 representation.\n\nAny suggestion?",
      "parentUuid": "7e8605e1_554ae535",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 69,
        "endChar": 39
      },
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d1d0969_1ad910ba",
        "filename": "src/builtins/number.tq",
        "patchSetId": 14
      },
      "lineNbr": 69,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-04T10:39:59Z",
      "side": 1,
      "message": "Types aren\u0027t matching up in TF.. Tobias could you PTAL?",
      "parentUuid": "b9eea0df_b5b6173d",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 69,
        "endChar": 39
      },
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f2eca97_7e2a655e",
        "filename": "src/builtins/number.tq",
        "patchSetId": 14
      },
      "lineNbr": 69,
      "author": {
        "id": 1322305
      },
      "writtenOn": "2020-08-04T11:24:00Z",
      "side": 1,
      "message": "I think if we write %RawDownCast(a+b), in TF it would try %RawDownCast(a) + %RawDownCast(b) which failed the kWord32Rep check for \u0027+\u0027 operation ðŸ˜Š",
      "parentUuid": "0d1d0969_1ad910ba",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 69,
        "endChar": 39
      },
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc043c74_2bcb24a1",
        "filename": "src/builtins/number.tq",
        "patchSetId": 14
      },
      "lineNbr": 69,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2020-08-05T08:51:14Z",
      "side": 1,
      "message": "The problem is that Torque/CSA picks the wrong representation for the phi node, which should be kRepWord32 instaed of kRepWord8. Smaller word representations should never be used for SSA values, but only for memory operations. I\u0027ll write a fix in a moment.",
      "parentUuid": "2f2eca97_7e2a655e",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 69,
        "endChar": 39
      },
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f8477bf_13e3dcb7",
        "filename": "src/builtins/number.tq",
        "patchSetId": 14
      },
      "lineNbr": 69,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2020-08-05T11:18:45Z",
      "side": 1,
      "message": "Should be fixed with this CL: https://chromium-review.googlesource.com/c/v8/v8/+/2339096",
      "parentUuid": "dc043c74_2bcb24a1",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 69,
        "endChar": 39
      },
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e8ce83b5_2347c251",
        "filename": "src/builtins/number.tq",
        "patchSetId": 14
      },
      "lineNbr": 122,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-04T08:32:23Z",
      "side": 1,
      "message": "AllocateSeqOneByteString could just return a SeqOneByteString type",
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3deb985c_21271811",
        "filename": "src/builtins/number.tq",
        "patchSetId": 14
      },
      "lineNbr": 122,
      "author": {
        "id": 1322305
      },
      "writtenOn": "2020-08-04T09:25:06Z",
      "side": 1,
      "message": "but AllocateSeqOneByteString could return an EmptyString",
      "parentUuid": "e8ce83b5_2347c251",
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf0e506b_b41e9daa",
        "filename": "src/builtins/number.tq",
        "patchSetId": 14
      },
      "lineNbr": 122,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-04T09:31:23Z",
      "side": 1,
      "message": "Is the EmptyString not a sequential one byte string?",
      "parentUuid": "3deb985c_21271811",
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c898e7ea_f0d415cb",
        "filename": "src/builtins/number.tq",
        "patchSetId": 14
      },
      "lineNbr": 122,
      "author": {
        "id": 1322305
      },
      "writtenOn": "2020-08-04T09:54:02Z",
      "side": 1,
      "message": "it goes like EmptyString extends String and SeqOneByteString extends SeqString extends String. For it happens, I think EmptyString needs to extend SeqOneByteString. I tried that and there were a bunch of errors ðŸ˜•",
      "parentUuid": "cf0e506b_b41e9daa",
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "429d9387_2c091589",
        "filename": "src/builtins/number.tq",
        "patchSetId": 14
      },
      "lineNbr": 122,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-04T10:16:25Z",
      "side": 1,
      "message": "I think it\u0027s okay to cast (unsafe cast or raw cast if needed) in this case. The only thing that matters is the instance type, and that will be a sequential one byte string for the empty string constant afaik. Then AllocateSeqOneByteString can return a SeqOneByteString.",
      "parentUuid": "c898e7ea_f0d415cb",
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "107d62ff_ff7470b1",
        "filename": "src/builtins/number.tq",
        "patchSetId": 14
      },
      "lineNbr": 122,
      "author": {
        "id": 1322305
      },
      "writtenOn": "2020-08-04T10:35:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "429d9387_2c091589",
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10a0a332_6444eb4d",
        "filename": "src/builtins/number.tq",
        "patchSetId": 14
      },
      "lineNbr": 128,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2020-08-04T08:24:46Z",
      "side": 1,
      "message": "it\u0027s technically slightly better to have the decrement after the write to chars (and start with length - 1), to lengthen the data dependency between `cursor` and `strSeq.chars[cursor]`. In practice I expect it won\u0027t make much difference though.",
      "range": {
        "startLine": 128,
        "startChar": 6,
        "endLine": 128,
        "endChar": 26
      },
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b28abc7_5d34b1c0",
        "filename": "src/builtins/number.tq",
        "patchSetId": 14
      },
      "lineNbr": 128,
      "author": {
        "id": 1322305
      },
      "writtenOn": "2020-08-04T09:25:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "10a0a332_6444eb4d",
      "range": {
        "startLine": 128,
        "startChar": 6,
        "endLine": 128,
        "endChar": 26
      },
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5050e4d_29a69dc8",
        "filename": "src/builtins/number.tq",
        "patchSetId": 14
      },
      "lineNbr": 134,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2020-08-04T08:24:46Z",
      "side": 1,
      "message": "could this just be a char8 constant, to avoid the Convert?",
      "range": {
        "startLine": 134,
        "startChar": 6,
        "endLine": 134,
        "endChar": 31
      },
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc6011d1_835f8d61",
        "filename": "src/builtins/number.tq",
        "patchSetId": 14
      },
      "lineNbr": 134,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-04T08:32:23Z",
      "side": 1,
      "message": "Also could this be literal \u0027-\u0027 instead of 45? If it doesn\u0027t work, 45 is fine by me.",
      "parentUuid": "c5050e4d_29a69dc8",
      "range": {
        "startLine": 134,
        "startChar": 6,
        "endLine": 134,
        "endChar": 31
      },
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "361c7580_00749075",
        "filename": "src/builtins/number.tq",
        "patchSetId": 14
      },
      "lineNbr": 134,
      "author": {
        "id": 1322305
      },
      "writtenOn": "2020-08-04T09:25:06Z",
      "side": 1,
      "message": "Added convert from constexpr int31 to char8 and it works with 45. Although it cannot accept literal \u0027-\u0027.",
      "parentUuid": "dc6011d1_835f8d61",
      "range": {
        "startLine": 134,
        "startChar": 6,
        "endLine": 134,
        "endChar": 31
      },
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a201a82a_45a5c168",
        "filename": "src/codegen/code-stub-assembler.cc",
        "patchSetId": 14
      },
      "lineNbr": 5817,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-04T08:32:23Z",
      "side": 1,
      "message": "final nit, a more efficient way to implement this is\n\n (instance_type \u0026 (kStringRepresentationMask | kStringEncodingMask)) \u003d\u003d (kSeqStringTag | kOneByteStringTag)\n\nThat\u0027s 1 and, 1 equals, instead of 3 ands, 2 equals.",
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0cd54a7_c6e08c23",
        "filename": "src/codegen/code-stub-assembler.cc",
        "patchSetId": 14
      },
      "lineNbr": 5817,
      "author": {
        "id": 1322305
      },
      "writtenOn": "2020-08-04T09:25:06Z",
      "side": 1,
      "message": "thanks for the tips ðŸ˜Ž",
      "parentUuid": "a201a82a_45a5c168",
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "672342bc_eb2d2b56",
        "filename": "src/codegen/code-stub-assembler.cc",
        "patchSetId": 14
      },
      "lineNbr": 6094,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-04T08:32:23Z",
      "side": 1,
      "message": "s/SloppyTNode/TNode/",
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b99a88e_0d4d4b63",
        "filename": "src/codegen/code-stub-assembler.cc",
        "patchSetId": 14
      },
      "lineNbr": 6094,
      "author": {
        "id": 1322305
      },
      "writtenOn": "2020-08-04T09:25:06Z",
      "side": 1,
      "message": "What do you mean here?",
      "parentUuid": "672342bc_eb2d2b56",
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f054bec_0fb15ea3",
        "filename": "src/codegen/code-stub-assembler.cc",
        "patchSetId": 14
      },
      "lineNbr": 6094,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-04T10:16:25Z",
      "side": 1,
      "message": "I mean, please don\u0027t use SloppyTNode in new code. Use TNode instead.",
      "parentUuid": "1b99a88e_0d4d4b63",
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "278fea87_425dc9da",
        "filename": "src/codegen/code-stub-assembler.cc",
        "patchSetId": 14
      },
      "lineNbr": 6094,
      "author": {
        "id": 1322305
      },
      "writtenOn": "2020-08-04T10:35:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8f054bec_0fb15ea3",
      "revId": "bceaa8beb6e720c736a19dbafa9961ac480a3a4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}