{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "29625945_dc362732",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1305811
      },
      "writtenOn": "2020-12-16T03:22:15Z",
      "side": 1,
      "message": "Hey Peter, PTAL. This CL is a first stab at leveraging refcounting for the strings managed by CodeEntry objects in order to support long-lived CodeMaps. This CL shouldn\u0027t change any existing behaviour, only freeing strings associated with the profiler at shutdown. Leak verification is done through DCHECKing that the string table is empty after the last profile is removed.\n\nThe most contentious part of this CL is probably making StringsStorage operations guarded by a mutex, but it should be relatively fast since the lock will be primarily held by the main thread. Rarely, we\u0027ll free an unused CodeEntry on the profiler thread which requires decrementing string refcounts / hash table mutation.\n\nCodeEntries are additionally modified to require calling ReleaseStrings before being deallocated, in order to avoid associating each CodeEntry with its StringsStorage. This saves us from storing a pointer with each CodeEntry, but requires us to be careful with deallocation.\n\nThe next steps here are making CodeEntry objects refcounted as well (instead of the `mark_used` logic) to ensure that we can handle CodeEntry deletion events.\n\nLet me know your thoughts. Thanks!",
      "revId": "386c661d978077c51ad97ce5e43a02dd93dec80b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3abfe86d_d3e36621",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2020-12-16T12:44:22Z",
      "side": 1,
      "message": "Nice! Thanks, a few comments",
      "revId": "386c661d978077c51ad97ce5e43a02dd93dec80b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5bfcbee_b1b2ff09",
        "filename": "src/profiler/cpu-profiler.h",
        "patchSetId": 5
      },
      "lineNbr": 367,
      "author": {
        "id": 1305811
      },
      "writtenOn": "2020-12-16T03:39:15Z",
      "side": 1,
      "message": "FYI, this is being defined as a |shared_ptr| so that tests may keep it alive (for cases where the test code manually passes it in). Open to converting this to |unique_ptr| if you prefer, though it makes dependencies a bit messier.",
      "revId": "386c661d978077c51ad97ce5e43a02dd93dec80b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "816560d8_30eb24c7",
        "filename": "src/profiler/cpu-profiler.h",
        "patchSetId": 5
      },
      "lineNbr": 367,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2020-12-16T12:44:22Z",
      "side": 1,
      "message": "Do the tests need to keep it alive? I don\u0027t see them using it after the Profiler has been deleted. If that\u0027s the case I\u0027d prefer to follow the same pattern as the other bits here and use unique_ptr. The tests can still look at the raw ptr if they need to, before the Profiler dies",
      "parentUuid": "c5bfcbee_b1b2ff09",
      "revId": "386c661d978077c51ad97ce5e43a02dd93dec80b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae17ccc8_a24d2d19",
        "filename": "src/profiler/cpu-profiler.h",
        "patchSetId": 5
      },
      "lineNbr": 367,
      "author": {
        "id": 1305811
      },
      "writtenOn": "2020-12-17T04:08:47Z",
      "side": 1,
      "message": "The main concern is with destruction order, in the cases where CpuProfiler gets destroyed before other instances that also depend on a StringsStorage and outlive the CpuProfiler (e.g. ProfilerCodeObserver). If the ownership is transferred with unique_ptr there, we\u0027ll free it too early when the CpuProfiler destructs.\n\nWhat we can do is move the ownership to the ProfilerCodeObserver, since its lifetime is at least as long as CpuProfiler. This coheres with having ProfilerCodeObserver own the CodeMap as well as its dependencies.\n\nI\u0027ve gone ahead and done that, let me know what you think!",
      "parentUuid": "816560d8_30eb24c7",
      "revId": "386c661d978077c51ad97ce5e43a02dd93dec80b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "70904d4b_29f415a6",
        "filename": "src/profiler/cpu-profiler.h",
        "patchSetId": 5
      },
      "lineNbr": 367,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2020-12-21T09:17:23Z",
      "side": 1,
      "message": "Nice",
      "parentUuid": "ae17ccc8_a24d2d19",
      "revId": "386c661d978077c51ad97ce5e43a02dd93dec80b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04d200c9_7f602ed4",
        "filename": "src/profiler/profile-generator.cc",
        "patchSetId": 5
      },
      "lineNbr": 232,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2020-12-16T12:44:22Z",
      "side": 1,
      "message": "We could add a destructor that DCHECKS name_ and resource_name_ are nullptr to ensure that this has been called?",
      "range": {
        "startLine": 228,
        "startChar": 4,
        "endLine": 232,
        "endChar": 29
      },
      "revId": "386c661d978077c51ad97ce5e43a02dd93dec80b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9b3d2dd_06deae9b",
        "filename": "src/profiler/profile-generator.cc",
        "patchSetId": 5
      },
      "lineNbr": 232,
      "author": {
        "id": 1305811
      },
      "writtenOn": "2020-12-17T04:08:47Z",
      "side": 1,
      "message": "This sounds good, the only issue is that we\u0027d strictly couple CodeEntry with StringsStorage. It\u0027s permissible (and pretty common in our tests) to have string literals provided to CodeEntry fields, with no StringsStorage instance required.\n\nWe could either do this and add a stub StringsStorage to the CodeEntry tests, add a bit to indicate that a StringsStorage owns the strings, or add a ReleaseStringsForTesting method that nulls them. The second option would have the benefit of avoiding a hash table lookup on calls to ReleaseStrings when a string literal is used, if unmanaged by StringsStorage. What do you think?",
      "parentUuid": "04d200c9_7f602ed4",
      "range": {
        "startLine": 228,
        "startChar": 4,
        "endLine": 232,
        "endChar": 29
      },
      "revId": "386c661d978077c51ad97ce5e43a02dd93dec80b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da1b1504_efd8152b",
        "filename": "src/profiler/profile-generator.cc",
        "patchSetId": 5
      },
      "lineNbr": 232,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2020-12-21T09:17:23Z",
      "side": 1,
      "message": "Ah hmm. Either way you need to remember to do the right call in tests which is kind of annoying. I\u0027ll leave it up to you, we can leave it as-is because we have DCHECKS elsewhere",
      "parentUuid": "a9b3d2dd_06deae9b",
      "range": {
        "startLine": 228,
        "startChar": 4,
        "endLine": 232,
        "endChar": 29
      },
      "revId": "386c661d978077c51ad97ce5e43a02dd93dec80b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f8c8e8c_09921f0a",
        "filename": "src/profiler/profile-generator.cc",
        "patchSetId": 5
      },
      "lineNbr": 232,
      "author": {
        "id": 1305811
      },
      "writtenOn": "2020-12-22T02:37:10Z",
      "side": 1,
      "message": "Sounds good -- will leave as-is for now.",
      "parentUuid": "da1b1504_efd8152b",
      "range": {
        "startLine": 228,
        "startChar": 4,
        "endLine": 232,
        "endChar": 29
      },
      "revId": "386c661d978077c51ad97ce5e43a02dd93dec80b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7979082_34cabfcf",
        "filename": "src/profiler/profile-generator.h",
        "patchSetId": 5
      },
      "lineNbr": 171,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2020-12-16T12:44:22Z",
      "side": 1,
      "message": "Maybe make this explicit in the comment that this is called before every destruction (and only then)",
      "range": {
        "startLine": 171,
        "startChar": 2,
        "endLine": 171,
        "endChar": 47
      },
      "revId": "386c661d978077c51ad97ce5e43a02dd93dec80b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f9839b32_c7d86862",
        "filename": "src/profiler/profile-generator.h",
        "patchSetId": 5
      },
      "lineNbr": 171,
      "author": {
        "id": 1305811
      },
      "writtenOn": "2020-12-17T04:08:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c7979082_34cabfcf",
      "range": {
        "startLine": 171,
        "startChar": 2,
        "endLine": 171,
        "endChar": 47
      },
      "revId": "386c661d978077c51ad97ce5e43a02dd93dec80b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "243e076f_c69d5084",
        "filename": "test/cctest/test-profile-generator.cc",
        "patchSetId": 5
      },
      "lineNbr": 71,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2020-12-16T12:44:22Z",
      "side": 1,
      "message": "Are these needed in this + following tests? It doesn\u0027t seem to be used",
      "range": {
        "startLine": 71,
        "startChar": 2,
        "endLine": 71,
        "endChar": 25
      },
      "revId": "386c661d978077c51ad97ce5e43a02dd93dec80b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f1c7f9b2_2bb381e7",
        "filename": "test/cctest/test-profile-generator.cc",
        "patchSetId": 5
      },
      "lineNbr": 71,
      "author": {
        "id": 1305811
      },
      "writtenOn": "2020-12-17T04:08:47Z",
      "side": 1,
      "message": "Nope, just a relic from a previous approach. Removed.",
      "parentUuid": "243e076f_c69d5084",
      "range": {
        "startLine": 71,
        "startChar": 2,
        "endLine": 71,
        "endChar": 25
      },
      "revId": "386c661d978077c51ad97ce5e43a02dd93dec80b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d096d2cb_a09a6562",
        "filename": "test/cctest/test-profile-generator.cc",
        "patchSetId": 5
      },
      "lineNbr": 799,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2020-12-16T12:44:22Z",
      "side": 1,
      "message": "Is this used?",
      "range": {
        "startLine": 799,
        "startChar": 2,
        "endLine": 799,
        "endChar": 25
      },
      "revId": "386c661d978077c51ad97ce5e43a02dd93dec80b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c68760df_ef95da8f",
        "filename": "test/cctest/test-profile-generator.cc",
        "patchSetId": 5
      },
      "lineNbr": 799,
      "author": {
        "id": 1305811
      },
      "writtenOn": "2020-12-17T04:08:47Z",
      "side": 1,
      "message": "Nope, (as mentioned above) part of an earlier revision.",
      "parentUuid": "d096d2cb_a09a6562",
      "range": {
        "startLine": 799,
        "startChar": 2,
        "endLine": 799,
        "endChar": 25
      },
      "revId": "386c661d978077c51ad97ce5e43a02dd93dec80b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}