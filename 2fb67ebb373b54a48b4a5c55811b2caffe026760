{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "97ff013d_11699604",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2021-05-26T11:11:38Z",
      "side": 1,
      "message": "ahaas@ PTAL rename in src/wasm/*\nleszks@ PTAL src/baseline/*",
      "revId": "2fb67ebb373b54a48b4a5c55811b2caffe026760",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3014c52c_9b8bd16b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2021-05-26T11:56:20Z",
      "side": 1,
      "message": "rename in wasm lgtm",
      "revId": "2fb67ebb373b54a48b4a5c55811b2caffe026760",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d6b4c36_a5a81407",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2021-05-26T16:12:06Z",
      "side": 1,
      "message": "I like the idea of embedding the saving of the registers to the builtin itself, however I feel like this CL is a bit hacky/hardcoded. We are now relying on a particular set of registers for the builtin (which are not the usual arg_reg_x). This CL is also impacting some architectures like Arm for which we shouldn\u0027t be seeing impact as far as I can see, which leads me to believe that this has more impact than the localized RecordWrite builtin.\n\nWhat are the savings in code size and compilation speed? If Sparkplug is the only one who benefits, is there a way to localize the change over there?\n\nCould we instead do something similar to Builtins::Generate_DynamicCheckMapsTrampoline that saves the register in the builtin? https://source.chromium.org/chromium/chromium/src/+/main:v8/src/builtins/x64/builtins-x64.cc;l\u003d4509;drc\u003dbaa4ba3f7d20fc9ec925a83d126e8efce9e57d85",
      "revId": "2fb67ebb373b54a48b4a5c55811b2caffe026760",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f38595a8_0ee5c8a8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2021-05-26T16:24:40Z",
      "side": 1,
      "message": "I\u0027m doing exactly what the DynamicCheckMapsTrampoline does :).\nThe problem is that RecordWrite is written in CSA, so I do have to specify it somehow and tell TurboFan to do this.\n\nRegister shuffling is mostly needed to avoid additional moves in Sparkplug, and there is a set of registers that will work well (not overlapping with kContextRegister and kInterpreterAccumulatorRegister).\n\nThis is now explicitly ensured with all the DCHECK(!AreAliased(...)) in place.",
      "parentUuid": "1d6b4c36_a5a81407",
      "revId": "2fb67ebb373b54a48b4a5c55811b2caffe026760",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3cfad00_3a18c847",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2021-05-26T16:28:59Z",
      "side": 1,
      "message": "Just do give you an idea: the call-sites for RecordWrite are very large (my previous change where I reduced the call-sites to two arguments in registers instead of 4, reduced builtin size by \u003e 2KiB);\n\nFor sparkplug this CL reduces code-size by 4%, and I\u0027m pretty sure turbofan will benefit as well from smaller code.",
      "parentUuid": "f38595a8_0ee5c8a8",
      "revId": "2fb67ebb373b54a48b4a5c55811b2caffe026760",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69d9893d_6d07458d",
        "filename": "src/codegen/arm/interface-descriptors-arm-inl.h",
        "patchSetId": 18
      },
      "lineNbr": 24,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2021-05-26T16:12:06Z",
      "side": 1,
      "message": "Why is this and arm64 re-shuffling needed?",
      "range": {
        "startLine": 24,
        "startChar": 39,
        "endLine": 24,
        "endChar": 41
      },
      "revId": "2fb67ebb373b54a48b4a5c55811b2caffe026760",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f37f44f7_2026055c",
        "filename": "src/codegen/arm/interface-descriptors-arm-inl.h",
        "patchSetId": 18
      },
      "lineNbr": 24,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2021-05-26T16:24:40Z",
      "side": 1,
      "message": "r0 \u003d\u003d kAccumulatorRegister which would require more code changes.",
      "parentUuid": "69d9893d_6d07458d",
      "range": {
        "startLine": 24,
        "startChar": 39,
        "endLine": 24,
        "endChar": 41
      },
      "revId": "2fb67ebb373b54a48b4a5c55811b2caffe026760",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20dcf974_b9847f1c",
        "filename": "src/codegen/x64/interface-descriptors-x64-inl.h",
        "patchSetId": 18
      },
      "lineNbr": 28,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2021-05-26T16:12:06Z",
      "side": 1,
      "message": "How were these registers chosen? Some of them are the same for windows and non-windows, but some are not. Also, `rax` (kReturnRegister0) is used in both cases, but in a different position.\nSince we are not using them in the regular way of \"arg_reg_1, arg_reg_2, ...\" WDYT about using the register itself? Unless there\u0027s a reason we would like to update them automatically if arg_reg_1 changes or similar.",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 28,
        "endChar": 41
      },
      "revId": "2fb67ebb373b54a48b4a5c55811b2caffe026760",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c6ff773_81957a61",
        "filename": "src/codegen/x64/interface-descriptors-x64-inl.h",
        "patchSetId": 18
      },
      "lineNbr": 28,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2021-05-26T16:24:40Z",
      "side": 1,
      "message": "This looks fairly random, but is rather deliberate:\n\n- We need arg_reg_1 - arg_reg_4 for the runtime call in the RecordWrite builtin, they are platform specific\n- kReturnRegister0 is used as well, since it\u0027s always accessed\n- We need kContextRegister since it\u0027s accessed as well by default in the builtin (this accidentally overlaps with arg_reg_2 on x64)\n- rbx on linux could be anything that doesn\u0027t mess too much with\n  existing code.",
      "parentUuid": "20dcf974_b9847f1c",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 28,
        "endChar": 41
      },
      "revId": "2fb67ebb373b54a48b4a5c55811b2caffe026760",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "038dbf7d_26f7dbec",
        "filename": "src/codegen/x64/interface-descriptors-x64-inl.h",
        "patchSetId": 18
      },
      "lineNbr": 45,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2021-05-26T16:12:06Z",
      "side": 1,
      "message": "Why the change here? rcx is arg_reg_4 for non-windows.",
      "range": {
        "startLine": 45,
        "startChar": 52,
        "endLine": 45,
        "endChar": 55
      },
      "revId": "2fb67ebb373b54a48b4a5c55811b2caffe026760",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50db9e34_0c684768",
        "filename": "src/codegen/x64/interface-descriptors-x64-inl.h",
        "patchSetId": 18
      },
      "lineNbr": 45,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2021-05-26T16:24:40Z",
      "side": 1,
      "message": "You\u0027re right, changing to arg_reg_4",
      "parentUuid": "038dbf7d_26f7dbec",
      "range": {
        "startLine": 45,
        "startChar": 52,
        "endLine": 45,
        "endChar": 55
      },
      "revId": "2fb67ebb373b54a48b4a5c55811b2caffe026760",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6bd93027_19a80f89",
        "filename": "src/codegen/x64/macro-assembler-x64.cc",
        "patchSetId": 18
      },
      "lineNbr": 326,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2021-05-26T11:14:36Z",
      "side": 1,
      "message": "since this is clobbered anyway, should we just not pass it (and force using WriteBarrierDescriptor::SlotAddressRegister)?",
      "range": {
        "startLine": 326,
        "startChar": 54,
        "endLine": 326,
        "endChar": 75
      },
      "revId": "2fb67ebb373b54a48b4a5c55811b2caffe026760",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "946dd75b_dc96af6b",
        "filename": "src/codegen/x64/macro-assembler-x64.cc",
        "patchSetId": 18
      },
      "lineNbr": 326,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2021-05-26T11:17:53Z",
      "side": 1,
      "message": "I\u0027m still torn between making this explicit (passing all used registers) and doing the minimal registers approach (but then we need a temp register scope line on arm64 to make it clean).",
      "parentUuid": "6bd93027_19a80f89",
      "range": {
        "startLine": 326,
        "startChar": 54,
        "endLine": 326,
        "endChar": 75
      },
      "revId": "2fb67ebb373b54a48b4a5c55811b2caffe026760",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}