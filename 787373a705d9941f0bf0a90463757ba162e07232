{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3aa2df78_90fe8204",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1115956
      },
      "writtenOn": "2024-03-13T12:20:59Z",
      "side": 1,
      "message": "PTAL. I don\u0027t know who\u0027s the current owner of the existing json fuzzer. It was originally added by Jochen (https://source.chromium.org/chromium/chromium/src/+/main:v8/test/fuzzer/json.cc).\n\nA fuzztest for this is probably not that valuable (i.e. I don\u0027t think it will find anything), but serves more as a demo.",
      "revId": "787373a705d9941f0bf0a90463757ba162e07232",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "08457c6b_73c6f6ef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-03-13T13:17:32Z",
      "side": 1,
      "message": "LGTM, even though this looks a bit like black magic.\n\nOne question about the domain part. It\u0027s the first time I am seeing this, so I am trying to make sense of the code :)",
      "revId": "787373a705d9941f0bf0a90463757ba162e07232",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ae660982_15e79d91",
        "filename": "test/unittests/BUILD.gn",
        "patchSetId": 13
      },
      "lineNbr": 814,
      "author": {
        "id": 1115956
      },
      "writtenOn": "2024-03-13T12:20:59Z",
      "side": 1,
      "message": "This dependency seems unused and vacated in V8 since some time. Now I used it again, but there are probably other libraries for the same purpose. I just used this because it was already there and because Chromium also depends on it.",
      "range": {
        "startLine": 814,
        "startChar": 17,
        "endLine": 814,
        "endChar": 46
      },
      "revId": "787373a705d9941f0bf0a90463757ba162e07232",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a4224657_189e9947",
        "filename": "test/unittests/json/json-unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 21,
      "author": {
        "id": 1115956
      },
      "writtenOn": "2024-03-13T12:20:59Z",
      "side": 1,
      "message": "This is an area where I don\u0027t really know what I\u0027m doing... Since fuzztest calls the ParseValidJsonP repeatedly with different inputs in the same process, would we need a separate try_catch around each call?",
      "range": {
        "startLine": 18,
        "startChar": 4,
        "endLine": 21,
        "endChar": 37
      },
      "revId": "787373a705d9941f0bf0a90463757ba162e07232",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6bb0d6f_f7aa0ae6",
        "filename": "test/unittests/json/json-unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 21,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-03-13T13:17:32Z",
      "side": 1,
      "message": "Yes, this looks like the standard setup before calling into V8. I am not sure if JSON parsing is expected to throw exceptions if we feed it with valid input, so the `TryCatch` might not be needed.",
      "parentUuid": "a4224657_189e9947",
      "range": {
        "startLine": 18,
        "startChar": 4,
        "endLine": 21,
        "endChar": 37
      },
      "revId": "787373a705d9941f0bf0a90463757ba162e07232",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f21d6ab_577ab49a",
        "filename": "test/unittests/json/json-unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 21,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-03-13T13:23:10Z",
      "side": 1,
      "message": "We should be able to check that `!isolate-\u003ehas_pending_exceptions()` or something like that.",
      "parentUuid": "b6bb0d6f_f7aa0ae6",
      "range": {
        "startLine": 18,
        "startChar": 4,
        "endLine": 21,
        "endChar": 37
      },
      "revId": "787373a705d9941f0bf0a90463757ba162e07232",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "882c5d9d_ef589dd8",
        "filename": "test/unittests/json/json-unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 72,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-03-13T13:17:32Z",
      "side": 1,
      "message": "I guess the type to put here would be too complex to write out, right?\nIt\u0027s probably some Domain for `Json::Value`.",
      "revId": "787373a705d9941f0bf0a90463757ba162e07232",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6099de8d_5588beae",
        "filename": "test/unittests/json/json-unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 85,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-03-13T13:17:32Z",
      "side": 1,
      "message": "This line makes sense to me. It says: If you want to build a `Json::Value`, choose one of the leaf, array, or object domain.\n\nWhat does the next line specify? Is it actually OK to call `.Set` twice for the same type?",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 85,
        "endChar": 73
      },
      "revId": "787373a705d9941f0bf0a90463757ba162e07232",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1477b27_f14420a5",
        "filename": "test/unittests/json/json-unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 88,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-03-13T13:23:10Z",
      "side": 1,
      "message": "What does this `std::move` do? An rvalue `this` pointer for an instance function call doesn\u0027t exist I guess? So removing it shouldn\u0027t have any impact?",
      "range": {
        "startLine": 88,
        "startChar": 9,
        "endLine": 88,
        "endChar": 27
      },
      "revId": "787373a705d9941f0bf0a90463757ba162e07232",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}