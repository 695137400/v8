{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3aa2df78_90fe8204",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1115956
      },
      "writtenOn": "2024-03-13T12:20:59Z",
      "side": 1,
      "message": "PTAL. I don\u0027t know who\u0027s the current owner of the existing json fuzzer. It was originally added by Jochen (https://source.chromium.org/chromium/chromium/src/+/main:v8/test/fuzzer/json.cc).\n\nA fuzztest for this is probably not that valuable (i.e. I don\u0027t think it will find anything), but serves more as a demo.",
      "revId": "787373a705d9941f0bf0a90463757ba162e07232",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "08457c6b_73c6f6ef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-03-13T13:17:32Z",
      "side": 1,
      "message": "LGTM, even though this looks a bit like black magic.\n\nOne question about the domain part. It\u0027s the first time I am seeing this, so I am trying to make sense of the code :)",
      "revId": "787373a705d9941f0bf0a90463757ba162e07232",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ae660982_15e79d91",
        "filename": "test/unittests/BUILD.gn",
        "patchSetId": 13
      },
      "lineNbr": 814,
      "author": {
        "id": 1115956
      },
      "writtenOn": "2024-03-13T12:20:59Z",
      "side": 1,
      "message": "This dependency seems unused and vacated in V8 since some time. Now I used it again, but there are probably other libraries for the same purpose. I just used this because it was already there and because Chromium also depends on it.",
      "range": {
        "startLine": 814,
        "startChar": 17,
        "endLine": 814,
        "endChar": 46
      },
      "revId": "787373a705d9941f0bf0a90463757ba162e07232",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a4224657_189e9947",
        "filename": "test/unittests/json/json-unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 21,
      "author": {
        "id": 1115956
      },
      "writtenOn": "2024-03-13T12:20:59Z",
      "side": 1,
      "message": "This is an area where I don\u0027t really know what I\u0027m doing... Since fuzztest calls the ParseValidJsonP repeatedly with different inputs in the same process, would we need a separate try_catch around each call?",
      "range": {
        "startLine": 18,
        "startChar": 4,
        "endLine": 21,
        "endChar": 37
      },
      "revId": "787373a705d9941f0bf0a90463757ba162e07232",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6bb0d6f_f7aa0ae6",
        "filename": "test/unittests/json/json-unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 21,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-03-13T13:17:32Z",
      "side": 1,
      "message": "Yes, this looks like the standard setup before calling into V8. I am not sure if JSON parsing is expected to throw exceptions if we feed it with valid input, so the `TryCatch` might not be needed.",
      "parentUuid": "a4224657_189e9947",
      "range": {
        "startLine": 18,
        "startChar": 4,
        "endLine": 21,
        "endChar": 37
      },
      "revId": "787373a705d9941f0bf0a90463757ba162e07232",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f21d6ab_577ab49a",
        "filename": "test/unittests/json/json-unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 21,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-03-13T13:23:10Z",
      "side": 1,
      "message": "We should be able to check that `!isolate-\u003ehas_pending_exceptions()` or something like that.",
      "parentUuid": "b6bb0d6f_f7aa0ae6",
      "range": {
        "startLine": 18,
        "startChar": 4,
        "endLine": 21,
        "endChar": 37
      },
      "revId": "787373a705d9941f0bf0a90463757ba162e07232",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "882c5d9d_ef589dd8",
        "filename": "test/unittests/json/json-unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 72,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-03-13T13:17:32Z",
      "side": 1,
      "message": "I guess the type to put here would be too complex to write out, right?\nIt\u0027s probably some Domain for `Json::Value`.",
      "revId": "787373a705d9941f0bf0a90463757ba162e07232",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e771b11c_6d57bf97",
        "filename": "test/unittests/json/json-unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 72,
      "author": {
        "id": 1115956
      },
      "writtenOn": "2024-03-13T13:51:21Z",
      "side": 1,
      "message": "No, added it, since I added it at the other functions as well.",
      "parentUuid": "882c5d9d_ef589dd8",
      "revId": "787373a705d9941f0bf0a90463757ba162e07232",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6099de8d_5588beae",
        "filename": "test/unittests/json/json-unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 85,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-03-13T13:17:32Z",
      "side": 1,
      "message": "This line makes sense to me. It says: If you want to build a `Json::Value`, choose one of the leaf, array, or object domain.\n\nWhat does the next line specify? Is it actually OK to call `.Set` twice for the same type?",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 85,
        "endChar": 73
      },
      "revId": "787373a705d9941f0bf0a90463757ba162e07232",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a42190fc_6b86d4ff",
        "filename": "test/unittests/json/json-unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 85,
      "author": {
        "id": 1115956
      },
      "writtenOn": "2024-03-13T13:51:21Z",
      "side": 1,
      "message": "The domain builder creates a recursion that can have multiple recursive paths. And one of them is usually used as the root in the Finalize call. The secondary path just makes sure that we don\u0027t have a primitive at the root, as this would not be valid json (I think).\n\nFor simplicity I could also just drop this and accept a few invalid inputs?\n\nBut I was wondering if we could extend the fuzz test with valid inputs a bit further and e.g. test for a property of valid json, e.g. that we reach the same json when stringifying the json object again (with similar or no whitespace). But not sure if that property actually holds.",
      "parentUuid": "6099de8d_5588beae",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 85,
        "endChar": 73
      },
      "revId": "787373a705d9941f0bf0a90463757ba162e07232",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "962d98c1_d19850e9",
        "filename": "test/unittests/json/json-unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 85,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-03-13T13:59:22Z",
      "side": 1,
      "message": "Ah, yes, I think I understand the code now :) \n\nBut I also think it\u0027s not necessary. Strings like \"true\" or \"3\" should be valid JSON.",
      "parentUuid": "a42190fc_6b86d4ff",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 85,
        "endChar": 73
      },
      "revId": "787373a705d9941f0bf0a90463757ba162e07232",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1477b27_f14420a5",
        "filename": "test/unittests/json/json-unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 88,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-03-13T13:23:10Z",
      "side": 1,
      "message": "What does this `std::move` do? An rvalue `this` pointer for an instance function call doesn\u0027t exist I guess? So removing it shouldn\u0027t have any impact?",
      "range": {
        "startLine": 88,
        "startChar": 9,
        "endLine": 88,
        "endChar": 27
      },
      "revId": "787373a705d9941f0bf0a90463757ba162e07232",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb6a355a_d09dab88",
        "filename": "test/unittests/json/json-unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 88,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-03-13T13:27:14Z",
      "side": 1,
      "message": "I was also wondering, but in fact `Finalize` can *only* be called with an r-value `this`, see https://github.com/google/fuzztest/blob/main/fuzztest/domain_core.h#L104 (the `\u0026\u0026` in the declaration).\n\nThis is to mark that the builder in invalidated by this method call.",
      "parentUuid": "d1477b27_f14420a5",
      "range": {
        "startLine": 88,
        "startChar": 9,
        "endLine": 88,
        "endChar": 27
      },
      "revId": "787373a705d9941f0bf0a90463757ba162e07232",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9279d194_bf73684c",
        "filename": "test/unittests/json/json-unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 88,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-03-13T13:37:02Z",
      "side": 1,
      "message": "Wow, I didn\u0027t know that was possible. Given that `Finalize` still requires to leave a valid object behind, I am not totally convinced that this is a nice design, but anyways, that\u0027s independent of this CL. 😊",
      "parentUuid": "eb6a355a_d09dab88",
      "range": {
        "startLine": 88,
        "startChar": 9,
        "endLine": 88,
        "endChar": 27
      },
      "revId": "787373a705d9941f0bf0a90463757ba162e07232",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4cbe3343_7171cf87",
        "filename": "test/unittests/json/json-unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 88,
      "author": {
        "id": 1115956
      },
      "writtenOn": "2024-03-13T13:51:21Z",
      "side": 1,
      "message": "I took this from the domain reference docs. Without it we get this error:\n../../test/unittests/json/json-unittest.cc:88:18: error: no matching member function for call to \u0027Finalize\u0027\n   88 |   return builder.Finalize\u003cJson::Value\u003e(\"root_json\");\n      |          ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n../../third_party/fuzztest/src/./fuzztest/domain_core.h:104:13: note: candidate function template not viable: expects an rvalue for object argument\n  104 |   Domain\u003cT\u003e Finalize(std::string_view name) \u0026\u0026 {\n      |             ^",
      "parentUuid": "eb6a355a_d09dab88",
      "range": {
        "startLine": 88,
        "startChar": 9,
        "endLine": 88,
        "endChar": 27
      },
      "revId": "787373a705d9941f0bf0a90463757ba162e07232",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}