{
  "comments": [
    {
      "key": {
        "uuid": "e746a7c3_271ff794",
        "filename": "include/cppgc/gc-info.h",
        "patchSetId": 4
      },
      "lineNbr": 22,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-20T11:55:08Z",
      "side": 1,
      "message": "Ulan: Not sure we can avoid exposing this type on the API because it\u0027s filled by the trait below. The only thing we could do is have a different name here than we have internally, but imho that would not get us anything. wdyt?",
      "range": {
        "startLine": 22,
        "startChar": 7,
        "endLine": 22,
        "endChar": 13
      },
      "revId": "756c15b5cf8de835ca138277c18df48bfa06c31e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e66de0fe_a22edb99",
        "filename": "include/cppgc/gc-info.h",
        "patchSetId": 4
      },
      "lineNbr": 22,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-03-23T09:25:49Z",
      "side": 1,
      "message": "To check my understanding: GCInfoTrait is overridable by the embedder for some types?\nIf so, I agree that we have to expose GCInfo and I think that would be ok.",
      "parentUuid": "e746a7c3_271ff794",
      "range": {
        "startLine": 22,
        "startChar": 7,
        "endLine": 22,
        "endChar": 13
      },
      "revId": "756c15b5cf8de835ca138277c18df48bfa06c31e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92d54fb8_e993a0c3",
        "filename": "include/cppgc/gc-info.h",
        "patchSetId": 4
      },
      "lineNbr": 22,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2020-03-23T09:47:47Z",
      "side": 1,
      "message": "Currently the only overrides for GCInfoTrait in Oilpan are made by us (for on-heap collections in heap_allocator.h). I don\u0027t think it should be overridable by anyone else.",
      "parentUuid": "e66de0fe_a22edb99",
      "range": {
        "startLine": 22,
        "startChar": 7,
        "endLine": 22,
        "endChar": 13
      },
      "revId": "756c15b5cf8de835ca138277c18df48bfa06c31e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6df9f84a_9d0b24ca",
        "filename": "include/cppgc/gc-info.h",
        "patchSetId": 4
      },
      "lineNbr": 22,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-23T10:06:03Z",
      "side": 1,
      "message": "As clarified offline: GCInfoTrait needs to be on the API as we loose type information when calling from the API into the internals.\n\nCode will look something like:\n\n  template\u003ctypename T\u003e\n  T* MakeGCed(Args\u0026\u0026... args) {\n    GCInfoIndex index \u003d GCInfoTrait\u003cT\u003e::Index();\n    // Other stuff needed for allocation/ctor.\n    void* memory \u003d AllocateInternally(index, ...);\n    T* object \u003d ::new (memory) T(std::forward\u003cArgs\u003e(args)...);\n    // Other stuff needed for allocation/ctor.\n    return object;\n  }",
      "parentUuid": "e66de0fe_a22edb99",
      "range": {
        "startLine": 22,
        "startChar": 7,
        "endLine": 22,
        "endChar": 13
      },
      "revId": "756c15b5cf8de835ca138277c18df48bfa06c31e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "66fcd611_9d763b87",
        "filename": "src/heap/cppgc/gc-info-table.cc",
        "patchSetId": 4
      },
      "lineNbr": 83,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-20T11:55:08Z",
      "side": 1,
      "message": "This is a new \"feature\". (See unittests for crash on write.)",
      "range": {
        "startLine": 83,
        "startChar": 5,
        "endLine": 83,
        "endChar": 13
      },
      "revId": "756c15b5cf8de835ca138277c18df48bfa06c31e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0b98104_b43482c8",
        "filename": "src/heap/cppgc/gc-info-table.cc",
        "patchSetId": 4
      },
      "lineNbr": 104,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-20T11:55:08Z",
      "side": 1,
      "message": "We always assumed that an uncontended lock here is as fast as playing around with atomics. We can try out whether that is really the case. Especially during startup we should expect to see hundreds of different types which need to go through this path.",
      "range": {
        "startLine": 104,
        "startChar": 12,
        "endLine": 104,
        "endChar": 22
      },
      "revId": "756c15b5cf8de835ca138277c18df48bfa06c31e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4fecb14_081154b5",
        "filename": "src/heap/cppgc/gc-info-table.cc",
        "patchSetId": 4
      },
      "lineNbr": 104,
      "author": {
        "id": 1119605
      },
      "writtenOn": "2020-03-24T13:23:29Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "c0b98104_b43482c8",
      "range": {
        "startLine": 104,
        "startChar": 12,
        "endLine": 104,
        "endChar": 22
      },
      "revId": "756c15b5cf8de835ca138277c18df48bfa06c31e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2139cc53_46b01589",
        "filename": "src/heap/cppgc/gc-info-table.cc",
        "patchSetId": 4
      },
      "lineNbr": 104,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-03-24T13:36:24Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f4fecb14_081154b5",
      "range": {
        "startLine": 104,
        "startChar": 12,
        "endLine": 104,
        "endChar": 22
      },
      "revId": "756c15b5cf8de835ca138277c18df48bfa06c31e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}