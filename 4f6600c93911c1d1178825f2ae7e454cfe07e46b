{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9e83925e_78d5f785",
        "filename": "src/heap/heap-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 1357035
      },
      "writtenOn": "2022-05-16T18:48:56Z",
      "side": 1,
      "message": "I think that could cause a data race when called from a background thread (the race is on isolate-\u003ethread_id() since the main thread can be migrated between threads). So we can\u0027t use `!Heap::IsMainThread()` to check whether we are on the background thread without a race. We can only assert that we are on the main thread. That\u0027s why I would actually prefer AssertMainThread() here.",
      "revId": "4f6600c93911c1d1178825f2ae7e454cfe07e46b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8f888046_441eae66",
        "filename": "src/heap/heap-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2022-05-17T11:07:39Z",
      "side": 1,
      "message": "`Isolate::thread_id` now uses an atomic load and there\u0027s no race.\nhttps://source.chromium.org/chromium/chromium/src/+/main:v8/src/execution/isolate.h;drc\u003d30fab86ce58ec526248ef454a9b512dbf7d9cac4;l\u003d767",
      "parentUuid": "9e83925e_78d5f785",
      "revId": "4f6600c93911c1d1178825f2ae7e454cfe07e46b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fb501208_4c23ce64",
        "filename": "src/heap/heap-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 1357035
      },
      "writtenOn": "2022-05-17T12:06:39Z",
      "side": 1,
      "message": "Ah indeed, you are obviously right.",
      "parentUuid": "8f888046_441eae66",
      "revId": "4f6600c93911c1d1178825f2ae7e454cfe07e46b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "677dd096_d24dc874",
        "filename": "src/heap/heap-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 107,
      "author": {
        "id": 1357035
      },
      "writtenOn": "2022-05-16T18:48:56Z",
      "side": 1,
      "message": "In GCTracer this was more internal but imho also already a bit surprising. Since this new method here is supposed to be used from other places as well, I think it\u0027s even more surprising that we have handle shared isolates implicitly as well. Can we make this more explicit?",
      "revId": "4f6600c93911c1d1178825f2ae7e454cfe07e46b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eae70b12_384ed0ce",
        "filename": "src/heap/heap-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 107,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2022-05-17T11:07:39Z",
      "side": 1,
      "message": "As discussed offline, we initially thought that the shared isolate check is not required anymore, after isolate migration was been implemented. I tried to simplify this in patchset 3. But the failing tests indicate that there are still cases where the shared isolate check is required, so patchset 4 introduces `Heap::IsSharedMainThread`.",
      "parentUuid": "677dd096_d24dc874",
      "revId": "4f6600c93911c1d1178825f2ae7e454cfe07e46b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e99df1af_9801aca3",
        "filename": "src/heap/heap-inl.h",
        "patchSetId": 2
      },
      "lineNbr": 107,
      "author": {
        "id": 1357035
      },
      "writtenOn": "2022-05-17T12:06:39Z",
      "side": 1,
      "message": "Thanks for checking!",
      "parentUuid": "eae70b12_384ed0ce",
      "revId": "4f6600c93911c1d1178825f2ae7e454cfe07e46b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}