{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c94fa527_aba5ebd0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1323125
      },
      "writtenOn": "2024-05-23T19:03:15Z",
      "side": 1,
      "message": "Hello,\n\nThis change seems to fix a test failure on ppc caused by https://crrev.com/c/5541750 (i have added details on it\u0027s comment section). Could you please tell me if this the correct way of fixing the problem? I\u0027m following the comments on arm64 and setting kGuardPageSize to 0.",
      "revId": "5a04ca90f76477c8aa9ee94094b5e6bee90ac878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a537f79d_c663df6c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1344750
      },
      "writtenOn": "2024-05-24T08:23:52Z",
      "side": 1,
      "message": "On M1 the page size is 16KB, so we don\u0027t want to waste too much of reserved memory and therefore don\u0027t use the guard pages for Oilpan.\n\nI\u0027m surprised you see the test failures after the Benoit\u0027s change. I suppose if the page size on ppc64 has always been 64kb (whatever the OS you\u0027re referring to), we\u0027d see the failures much earlier, when trying to `mprotect` the 4kb guard pages. Do you know why this hasn\u0027t been the case?",
      "parentUuid": "c94fa527_aba5ebd0",
      "revId": "5a04ca90f76477c8aa9ee94094b5e6bee90ac878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3e1ec017_334bc915",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1323125
      },
      "writtenOn": "2024-05-24T12:19:57Z",
      "side": 1,
      "message": "Is there a specific test for mprotect scnario? \n\nThe error in this case happens after `DiscardPooledPages` is called:\nhttps://source.chromium.org/chromium/chromium/src/+/main:v8/test/unittests/heap/cppgc/page-memory-unittest.cc;l\u003d284\nseems to be the only places it is used on tests.\n\nThe address that is passed to `OS::DecommitPages \u003e mmap` has to be aligned to page size or it will return an error. In this case the address seems to go out of alignment here before being passed to mmap:\nhttps://source.chromium.org/chromium/chromium/src/+/main:v8/src/heap/cppgc/page-memory.h;l\u003d74",
      "parentUuid": "a537f79d_c663df6c",
      "revId": "5a04ca90f76477c8aa9ee94094b5e6bee90ac878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e3dfa9ad_bc5f152a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1344750
      },
      "writtenOn": "2024-05-24T12:57:15Z",
      "side": 1,
      "message": "`mprotect` for the writable area is called on every page allocaion, which is covered in almost all tests:\nhttps://source.chromium.org/chromium/chromium/src/+/main:v8/src/heap/cppgc/page-memory.cc;l\u003d23\nThat area has been only 4K aligned on ppc64. My question is why didn\u0027t page allocation failed before on ppc64?",
      "parentUuid": "3e1ec017_334bc915",
      "revId": "5a04ca90f76477c8aa9ee94094b5e6bee90ac878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "66d5aa09_cfcfd467",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1323125
      },
      "writtenOn": "2024-05-24T14:19:12Z",
      "side": 1,
      "message": "block is never executed on ppc, `SupportsCommittingGuardPages` returns false as\n```\nkGuardPageSize % allocator.CommitPageSize()\n\u003d\n4096 % 65536\n```\nwhich not zero.",
      "parentUuid": "e3dfa9ad_bc5f152a",
      "revId": "5a04ca90f76477c8aa9ee94094b5e6bee90ac878",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}