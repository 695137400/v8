{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "261eabac_cb3023b6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 465
      },
      "lineNbr": 0,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T07:33:24Z",
      "side": 1,
      "message": "Still busy with this review, publishing replies and comments on snapshot/ now.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d04d83ae_90db5a70",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 465
      },
      "lineNbr": 0,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:03:17Z",
      "side": 1,
      "message": "runtime/ comments",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "61ca29c1_acaba9ce",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 465
      },
      "lineNbr": 0,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:35:06Z",
      "side": 1,
      "message": "Just to repeat, these comments aren\u0027t blocking - to avoid rebasing I\u0027m okay with landing first and addressing after. Of course, whatever can be addressed before landing is a bonus.\n\nComments for objects/. The main q is about mark_for_deoptimization.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a71c805b_cd7fbc7a",
        "filename": "src/objects/code-inl.h",
        "patchSetId": 465
      },
      "lineNbr": 334,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:35:06Z",
      "side": 1,
      "message": "Please add a reminder to combine this with TranslationArray de/encoding.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5958aca3_86ab0f86",
        "filename": "src/objects/code-inl.h",
        "patchSetId": 465
      },
      "lineNbr": 353,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:35:06Z",
      "side": 1,
      "message": "Maybe we could consider CHECKs here and below, getting this wrong seems pretty bad and doing a runtime CHECK fairly inexpensive.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3046cc90_a4715dad",
        "filename": "src/objects/code-inl.h",
        "patchSetId": 465
      },
      "lineNbr": 395,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:35:06Z",
      "side": 1,
      "message": "q: Why this change? Is CodeKindIsInterpretedJSFunction now !\u003d CodeKind::INTERPRETED_FUNCTION? That seems a bit surprising.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f194acb1_8becf8e5",
        "filename": "src/objects/code-inl.h",
        "patchSetId": 465
      },
      "lineNbr": 529,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:35:06Z",
      "side": 1,
      "message": "Curious about this, can sparkplug really be marked for deoptimization? Why, tests? Should we allow this / what\u0027s the intended behavior?",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9eb8dfc3_5eb4c9d4",
        "filename": "src/objects/code.cc",
        "patchSetId": 465
      },
      "lineNbr": 539,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:35:06Z",
      "side": 1,
      "message": "accidental nesting",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3263ee08_1dbb8970",
        "filename": "src/objects/shared-function-info-inl.h",
        "patchSetId": 465
      },
      "lineNbr": 507,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:35:06Z",
      "side": 1,
      "message": "q: what does the \u0027active\u0027 mean, why not just \u0027GetBytecodeArray\u0027? Fyi the word \u0027active\u0027 has meaning in a related spot, see JSFunction::GetActiveTier and related functions.",
      "range": {
        "startLine": 507,
        "startChar": 28,
        "endLine": 507,
        "endChar": 50
      },
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "741aa7a6_035afdf4",
        "filename": "src/runtime/runtime-compiler.cc",
        "patchSetId": 465
      },
      "lineNbr": 310,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:03:17Z",
      "side": 1,
      "message": "nit: type \u003d\u003d INTERPRETED.\n\nIn general I think the interpreted/sp smashup of frame types is a bit problematic, and it would be cleaner to either keep the frames identical, or be very clear about used terms and predicates. \n\nWith the current state there\u0027s confusion about what \u0027interpreted\u0027 means. For example, here we look at an InterpretedFrame, but it could be type INTERPRETED or type SPARKPLUG.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53a7885d_066949f7",
        "filename": "src/runtime/runtime-compiler.cc",
        "patchSetId": 465
      },
      "lineNbr": 435,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:03:17Z",
      "side": 1,
      "message": "This feels worth a comment, why do we potentially compile multiple times below?",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a56d0d1a_3b219176",
        "filename": "src/runtime/runtime-compiler.cc",
        "patchSetId": 465
      },
      "lineNbr": 465,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:03:17Z",
      "side": 1,
      "message": "q: Every other compilation currently goes through a Compiler::CompileX function, should we do the same for SP?",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc994045_d8d85677",
        "filename": "src/runtime/runtime-compiler.cc",
        "patchSetId": 465
      },
      "lineNbr": 471,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:03:17Z",
      "side": 1,
      "message": "Unused?",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5b0f08d_26dc3652",
        "filename": "src/runtime/runtime-internal.cc",
        "patchSetId": 465
      },
      "lineNbr": 47,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:03:17Z",
      "side": 1,
      "message": "Leftover?",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2debc6fc_b6ebc142",
        "filename": "src/runtime/runtime-internal.cc",
        "patchSetId": 465
      },
      "lineNbr": 353,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:03:17Z",
      "side": 1,
      "message": "q: was there a reason for set_code to be kept outside CompileWithBaseline? I ask because some other compiler functions do the set_code themselves.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94d71079_f6207f83",
        "filename": "src/runtime/runtime-interpreter.cc",
        "patchSetId": 465
      },
      "lineNbr": 112,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:03:17Z",
      "side": 1,
      "message": "nit: imo a more obvious type here is Bool True/False, or some other more explicit encoding. Again minor point, but 1000 paper cuts.. Obviously this is not a blocking comment.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb9af2db_ddab702b",
        "filename": "src/runtime/runtime-test.cc",
        "patchSetId": 465
      },
      "lineNbr": 193,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:03:17Z",
      "side": 1,
      "message": "Could we put this inside Deoptimizer::DeoptimizeFunction?",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6e177e0_2958fe95",
        "filename": "src/runtime/runtime-test.cc",
        "patchSetId": 465
      },
      "lineNbr": 481,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:03:17Z",
      "side": 1,
      "message": "Hm, this now includes SP? What about IsInterpreterOrBaselineFrame?",
      "range": {
        "startLine": 481,
        "startChar": 18,
        "endLine": 481,
        "endChar": 41
      },
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae89ec8d_12db396e",
        "filename": "src/runtime/runtime-test.cc",
        "patchSetId": 465
      },
      "lineNbr": 574,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:03:17Z",
      "side": 1,
      "message": "Please integrate into the existing predicates (like HasAttachedOptimizedCode, ActiveTierIsIgnition). What is the expected behavior here, is SP code \u0027turbofanned and optimized\u0027?",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "82699fc1_2467ce6e",
        "filename": "src/snapshot/serializer.cc",
        "patchSetId": 465
      },
      "lineNbr": 641,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T07:33:24Z",
      "side": 1,
      "message": "Thank you! :D",
      "range": {
        "startLine": 641,
        "startChar": 70,
        "endLine": 641,
        "endChar": 71
      },
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44edba76_f278bfa0",
        "filename": "src/snapshot/serializer.cc",
        "patchSetId": 465
      },
      "lineNbr": 644,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T07:33:24Z",
      "side": 1,
      "message": "This condition was ugly before and now it\u0027s reaching the limit imo; please extract the body into a helper function, `bool MaybeDeferObject` or similar.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89124267_0ae89e01",
        "filename": "src/snapshot/serializer.cc",
        "patchSetId": 465
      },
      "lineNbr": 720,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T07:33:24Z",
      "side": 1,
      "message": "I\u0027d prefer not keeping these style of TODOs in the tree. I\u0027m still trying to understand why we need to support SP serialization at all, at least in this initial CL. We probably don\u0027t want them in the startup snapshot. If possible I\u0027d vote for removing this and the below change.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "964ee30f_826ecde5",
        "filename": "src/snapshot/serializer.cc",
        "patchSetId": 465
      },
      "lineNbr": 1168,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T07:33:24Z",
      "side": 1,
      "message": "Perfect use-case for a scope object.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f886b8a_30a53cce",
        "filename": "src/snapshot/serializer.h",
        "patchSetId": 465
      },
      "lineNbr": 190,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T07:33:24Z",
      "side": 1,
      "message": "A general comment on snapshot/ changes: please extract those to a future CL, and let\u0027s implement snapshot support nicely there. We should clarify when/if we want to serialize SP code at all. For now, I\u0027d prefer if we replace BaselineData on the fly with bytecode during serialization.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d662ff89_c9c40480",
        "filename": "src/snapshot/serializer.h",
        "patchSetId": 465
      },
      "lineNbr": 200,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T07:33:24Z",
      "side": 1,
      "message": "nit: please keep the variable and accessor name the same. Also the pattern for simple accessors is \n\n bool allow_objects_deferral() const {...}\n void set_allow_objects_deferral(bool v) {...}",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40cc0a28_693aa5e2",
        "filename": "src/snapshot/serializer.h",
        "patchSetId": 465
      },
      "lineNbr": 350,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T07:33:24Z",
      "side": 1,
      "message": "nit: this is mostly just restating the variable name, please add a half-sentence with an example of why deferral could be disabled.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e76122b_4685a6e8",
        "filename": "src/snapshot/startup-serializer.cc",
        "patchSetId": 465
      },
      "lineNbr": 93,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T07:33:24Z",
      "side": 1,
      "message": "When does this happen? I\u0027m not sure we want sparkplug code in the startup snapshot, alternatively we could clear compiled data prior to serialization, or replace it with the bytecode inline.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e025dff9_0918bab7",
        "filename": "test/mjsunit/mjsunit.status",
        "patchSetId": 465
      },
      "lineNbr": 1353,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T07:33:24Z",
      "side": 1,
      "message": "Maybe a whitelist would be easier? Small distinction since arch\u0027s don\u0027t change often, but just yesterday we landed the riscv port :).",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}