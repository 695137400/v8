{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "261eabac_cb3023b6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 465
      },
      "lineNbr": 0,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T07:33:24Z",
      "side": 1,
      "message": "Still busy with this review, publishing replies and comments on snapshot/ now.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d04d83ae_90db5a70",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 465
      },
      "lineNbr": 0,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:03:17Z",
      "side": 1,
      "message": "runtime/ comments",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "61ca29c1_acaba9ce",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 465
      },
      "lineNbr": 0,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:35:06Z",
      "side": 1,
      "message": "Just to repeat, these comments aren\u0027t blocking - to avoid rebasing I\u0027m okay with landing first and addressing after. Of course, whatever can be addressed before landing is a bonus.\n\nComments for objects/. The main q is about mark_for_deoptimization.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b3180be3_e7c74e96",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 465
      },
      "lineNbr": 0,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T09:55:23Z",
      "side": 1,
      "message": "Comments on debug, execution, heap, ic, interpreter, logging:",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4bf0c938_14d79afc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 465
      },
      "lineNbr": 0,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T10:30:49Z",
      "side": 1,
      "message": "builtins/, codegen/",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3e32fd25_3c1de230",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 465
      },
      "lineNbr": 0,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T10:47:04Z",
      "side": 1,
      "message": "builtins-x64",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a604d3b_27c7ea03",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 465
      },
      "lineNbr": 0,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T10:55:04Z",
      "side": 1,
      "message": "deoptimizer/",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e6992b5_44f88f79",
        "filename": "src/DEPS",
        "patchSetId": 465
      },
      "lineNbr": 72,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T09:55:23Z",
      "side": 1,
      "message": "Should this be in src/baseline/DEPS? (The same applies to the other things in this file ofc but those are old code.)",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6bafcae_85f5c155",
        "filename": "src/baseline/baseline-compiler.cc",
        "patchSetId": 465
      },
      "lineNbr": 258,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T11:08:53Z",
      "side": 1,
      "message": "Consider a Register::feedback_vector_offset() to formalize this?",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a7e1aab_09616e31",
        "filename": "src/baseline/baseline-compiler.cc",
        "patchSetId": 465
      },
      "lineNbr": 372,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T11:08:53Z",
      "side": 1,
      "message": "-\u003ebytecode offset?",
      "range": {
        "startLine": 372,
        "startChar": 18,
        "endLine": 372,
        "endChar": 33
      },
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "abbca8b5_5e6d463a",
        "filename": "src/baseline/baseline-compiler.h",
        "patchSetId": 465
      },
      "lineNbr": 59,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T11:08:53Z",
      "side": 1,
      "message": "Do you have thoughts on how to generalize this platform-independent interface to masm?",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67518750_cc731c51",
        "filename": "src/baseline/baseline.cc",
        "patchSetId": 465
      },
      "lineNbr": 47,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T11:08:53Z",
      "side": 1,
      "message": "Feels like this should go into Factory::NewBaselineData.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa4c9095_78767007",
        "filename": "src/baseline/baseline.cc",
        "patchSetId": 465
      },
      "lineNbr": 67,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T11:08:53Z",
      "side": 1,
      "message": "All this is so similar to Compiler:: logic, was there a reason to not stick it in there? IMO it makes sense to keep compiler logic in compiler.{h,cc}.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b3c0d16_91898ef1",
        "filename": "src/baseline/baseline.h",
        "patchSetId": 465
      },
      "lineNbr": 17,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T11:08:53Z",
      "side": 1,
      "message": "q: is this the full public api? If so, üëç and consider restricting access to only this file in src/DEPS.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6be77b68_94d4cd58",
        "filename": "src/builtins/arm/builtins-arm.cc",
        "patchSetId": 465
      },
      "lineNbr": 1581,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-02-10T13:41:42Z",
      "side": 1,
      "message": "nit - newline below (same for other archs)",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cef6f90c_66bed293",
        "filename": "src/builtins/arm64/builtins-arm64.cc",
        "patchSetId": 465
      },
      "lineNbr": 412,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-02-10T13:41:42Z",
      "side": 1,
      "message": "Could we unify all the checks into this function and have it\n - fallthrough for bytecode\n - goto is_baseline for baseline \n - goto not_compiled if there isn\u0027t either (pulling the checks which are currently immediately after the call to this function into this function)\nand specify this in a comment.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55134b70_dc922522",
        "filename": "src/builtins/arm64/builtins-arm64.cc",
        "patchSetId": 465
      },
      "lineNbr": 1214,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-02-10T13:41:42Z",
      "side": 1,
      "message": "Not sure what this comment means, since this is the Prologue - do you mean it\u0027s pushed by the caller\u0027s call sequence? Where are these pushed?",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ace33d04_d531cbf5",
        "filename": "src/builtins/arm64/builtins-arm64.cc",
        "patchSetId": 465
      },
      "lineNbr": 1215,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-02-10T13:41:42Z",
      "side": 1,
      "message": "leftover comment?",
      "range": {
        "startLine": 1215,
        "startChar": 2,
        "endLine": 1215,
        "endChar": 3
      },
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72839697_2f4081e8",
        "filename": "src/builtins/arm64/builtins-arm64.cc",
        "patchSetId": 465
      },
      "lineNbr": 1222,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-02-10T13:41:42Z",
      "side": 1,
      "message": "nit - move this to line 1212?",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12f83510_c66863a3",
        "filename": "src/builtins/arm64/builtins-arm64.cc",
        "patchSetId": 465
      },
      "lineNbr": 1240,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-02-10T13:41:42Z",
      "side": 1,
      "message": "Can we move this out of the frame setup code, e.g., just above the stack / interrupt check.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c06756a_86baec31",
        "filename": "src/builtins/arm64/builtins-arm64.cc",
        "patchSetId": 465
      },
      "lineNbr": 1245,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-02-10T13:41:42Z",
      "side": 1,
      "message": "Can we make this a specific feature of BaselineFrames and not a horrible hack, with some means to determine whether a frame is a baseline frame rather than an interpreted frame (when required) so we can differentiate them.",
      "range": {
        "startLine": 1245,
        "startChar": 5,
        "endLine": 1245,
        "endChar": 19
      },
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec2c0946_4876d891",
        "filename": "src/builtins/arm64/builtins-arm64.cc",
        "patchSetId": 465
      },
      "lineNbr": 1283,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-02-10T13:41:42Z",
      "side": 1,
      "message": "Is there an explanation of how the prologue call logic works, I can\u0027t find it in the design doc. It\u0027s not clear to me why we are returning here rather than jumping to the baseline code.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1084616d_0901d186",
        "filename": "src/builtins/arm64/builtins-arm64.cc",
        "patchSetId": 465
      },
      "lineNbr": 1286,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-02-10T13:41:42Z",
      "side": 1,
      "message": "Can we share most of this logic with the code in InterpreterEntryTrampoline using a helper function?",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab8a46dd_f2a0fea7",
        "filename": "src/builtins/arm64/builtins-arm64.cc",
        "patchSetId": 465
      },
      "lineNbr": 1578,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-02-10T13:41:42Z",
      "side": 1,
      "message": "Why would we have baseline code without a feedback vector?",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74756c3d_01f85e8f",
        "filename": "src/builtins/arm64/builtins-arm64.cc",
        "patchSetId": 465
      },
      "lineNbr": 1588,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-02-10T13:41:42Z",
      "side": 1,
      "message": "Can we drop this in that case?",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ddf7d8a7_fd621690",
        "filename": "src/builtins/builtins-call-gen.cc",
        "patchSetId": 465
      },
      "lineNbr": 67,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-02-10T13:41:42Z",
      "side": 1,
      "message": "Can we make all of these new builtins named \"\u003cBuiltinName\u003e_Baseline\" for all these functions (with the underscores similar to X_WithFeedback) so it is clear these are just variants of the same builtin but specialized for the  callee.",
      "range": {
        "startLine": 67,
        "startChar": 11,
        "endLine": 67,
        "endChar": 49
      },
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "848d5af6_abca294d",
        "filename": "src/builtins/builtins-constructor-gen.cc",
        "patchSetId": 465
      },
      "lineNbr": 64,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-02-10T13:41:42Z",
      "side": 1,
      "message": "For all of these extra builtins, can we split out the code that does the builtin operation from the logic that gets the arguments (either from parameters or the baseline stackframe) so that the main logic of the builtin can be shared in a single helper function, and the Construct_Baseline vs Construct_WithFeedback functions just deal with getting the arguments to pass to the shared helper funciton.",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 64,
        "endChar": 49
      },
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bafbe8b0_f0ce1f81",
        "filename": "src/builtins/builtins-definitions.h",
        "patchSetId": 465
      },
      "lineNbr": 649,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-02-10T13:41:42Z",
      "side": 1,
      "message": "I\u0027m a bit worried about the number of extra builtins that are being added for baseline specific calls. How many of these are trampolines that simply get the feedbackvector / context form the frame and trampoline to the real builtin, vs replacement builtins. Any idea on binary size impact of these extra builtins?",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "234b2f8d_14d85295",
        "filename": "src/builtins/builtins-lazy-gen.cc",
        "patchSetId": 465
      },
      "lineNbr": 152,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T10:30:49Z",
      "side": 1,
      "message": "So if we have baseline code we can skip most of the checks above, and we know if have SP code since GetSharedFunctionInfoCode. To avoid the repeat check you could jump to a label in GetSharedFunctionInfoCode.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42cebff0_4dcb48f3",
        "filename": "src/builtins/builtins-lazy-gen.cc",
        "patchSetId": 465
      },
      "lineNbr": 199,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T10:30:49Z",
      "side": 1,
      "message": "Is this used anywhere? Looks like we just call the runtime function directly.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a885a302_dd4d992a",
        "filename": "src/builtins/x64/builtins-x64.cc",
        "patchSetId": 465
      },
      "lineNbr": 5,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T10:30:49Z",
      "side": 1,
      "message": "Same here (after the #if)",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2398dc90_bc6af596",
        "filename": "src/builtins/x64/builtins-x64.cc",
        "patchSetId": 465
      },
      "lineNbr": 5,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2021-02-10T13:15:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a885a302_dd4d992a",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4b1d253_467bc1c1",
        "filename": "src/builtins/x64/builtins-x64.cc",
        "patchSetId": 465
      },
      "lineNbr": 767,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T10:47:04Z",
      "side": 1,
      "message": "No CmpObjectType here?",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "118e4764_eff20f86",
        "filename": "src/builtins/x64/builtins-x64.cc",
        "patchSetId": 465
      },
      "lineNbr": 1272,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T10:47:04Z",
      "side": 1,
      "message": "Could/should this also be moved to the prologue? If the vector is flushed, it\u0027s probably not safe to assume the next SP call will come from the IET. Plus it\u0027d make this block a lot less complex.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0dbad065_8a763756",
        "filename": "src/builtins/x64/builtins-x64.cc",
        "patchSetId": 465
      },
      "lineNbr": 1287,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T10:47:04Z",
      "side": 1,
      "message": "+1 seems reasonable to remove.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c080b237_294d20f7",
        "filename": "src/builtins/x64/builtins-x64.cc",
        "patchSetId": 465
      },
      "lineNbr": 1635,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T10:47:04Z",
      "side": 1,
      "message": "Meaning what, we clobber a callee-saved register? That\u0027s okay why?",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35b0f315_8e3324ba",
        "filename": "src/builtins/x64/builtins-x64.cc",
        "patchSetId": 465
      },
      "lineNbr": 1679,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T10:47:04Z",
      "side": 1,
      "message": "Maybe a helper fn? I assume this is copied from another location.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d00bc763_48576cf5",
        "filename": "src/builtins/x64/builtins-x64.cc",
        "patchSetId": 465
      },
      "lineNbr": 1703,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T10:47:04Z",
      "side": 1,
      "message": "Same here a helper fn could be useful.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c515dee_4518ef5a",
        "filename": "src/codegen/code-stub-assembler.cc",
        "patchSetId": 465
      },
      "lineNbr": 9665,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T10:30:49Z",
      "side": 1,
      "message": "The arg is unused and we still unconditionally check \u003d\u003d undefined?",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3fc5dedf_2e4553d2",
        "filename": "src/codegen/code-stub-assembler.cc",
        "patchSetId": 465
      },
      "lineNbr": 10933,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T10:30:49Z",
      "side": 1,
      "message": "Please assert cur_depth !\u003d 0, otherwise we loop 2^32 times.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01836e0f_626555c1",
        "filename": "src/codegen/code-stub-assembler.cc",
        "patchSetId": 465
      },
      "lineNbr": 10954,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T10:30:49Z",
      "side": 1,
      "message": "Please add an `out` label and change this to Branch(..., \u0026context_search, \u0026out) to make the loop exit more explicit.\n\nWhat is the contract for cur_context? Can it be used both in the fallthrough and in the extension-found case?",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca9294df_a18103b5",
        "filename": "src/codegen/compiler.cc",
        "patchSetId": 465
      },
      "lineNbr": 243,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-02-10T13:41:42Z",
      "side": 1,
      "message": "nit - newline (to match with closing bracket)",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a048ef8_f89ef9fb",
        "filename": "src/codegen/compiler.cc",
        "patchSetId": 465
      },
      "lineNbr": 1055,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T10:30:49Z",
      "side": 1,
      "message": "nit: extract the repeated load.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d959ddc_f6d142f5",
        "filename": "src/codegen/compiler.cc",
        "patchSetId": 465
      },
      "lineNbr": 1233,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T10:30:49Z",
      "side": 1,
      "message": "This condition is repeated in the runtime file, could we extract it to some helper? Also in slightly different form (HasDebugInfo) below.",
      "range": {
        "startLine": 1233,
        "startChar": 8,
        "endLine": 1233,
        "endChar": 36
      },
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0cfccac7_93fe1ea3",
        "filename": "src/codegen/compiler.cc",
        "patchSetId": 465
      },
      "lineNbr": 1843,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-02-10T13:41:42Z",
      "side": 1,
      "message": "Can we have the always_sparkplug checks near the always_opt checks?",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1dfefd34_0a3ce4be",
        "filename": "src/codegen/compiler.cc",
        "patchSetId": 465
      },
      "lineNbr": 1856,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T10:30:49Z",
      "side": 1,
      "message": "So we\u0027ve usually done this after installing the Code object on the JSFunction up to now, and elsewhere in this CL it\u0027s also done that way for SP. Could we continue that pattern, or is there a reason it must be done here prior to compilation?",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba745957_838a263a",
        "filename": "src/codegen/compiler.h",
        "patchSetId": 465
      },
      "lineNbr": 76,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T10:30:49Z",
      "side": 1,
      "message": "Would it make sense to reuse CodeKind? It\u0027s what we use everywhere else when we\u0027re interested in the code kind, and a new enum doesn\u0027t seem to be needed here. Maybe I missed something.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa3e055f_5d2aa22e",
        "filename": "src/codegen/x64/macro-assembler-x64.cc",
        "patchSetId": 465
      },
      "lineNbr": 3025,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T10:30:49Z",
      "side": 1,
      "message": "q: This seems unsymmetric with EnterFrame; so in this case we call LeaveFrame without a corresponding EnterFrame? When does this happen?",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f25f5053_94d27ebe",
        "filename": "src/codegen/x64/macro-assembler-x64.cc",
        "patchSetId": 465
      },
      "lineNbr": 3025,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2021-02-10T13:15:04Z",
      "side": 1,
      "message": "Currently it happens because the baseline prologue does a manual push/move instead of calling EnterFrame. I think we could recover this symmetry by adding the same `if` condition to EnterFrame.",
      "parentUuid": "aa3e055f_5d2aa22e",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d99ac43_e7d62b1b",
        "filename": "src/debug/x64/debug-x64.cc",
        "patchSetId": 465
      },
      "lineNbr": 48,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T09:55:23Z",
      "side": 1,
      "message": "I feel like I need an explanation of the whole JUMP_FUNCTION_DONT_ADAPT business :)",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1d32e247_7067546c",
        "filename": "src/debug/x64/debug-x64.cc",
        "patchSetId": 465
      },
      "lineNbr": 48,
      "author": {
        "id": 1368302
      },
      "writtenOn": "2021-02-10T09:58:57Z",
      "side": 1,
      "message": "https://chromium-review.googlesource.com/c/v8/v8/+/2675927",
      "parentUuid": "5d99ac43_e7d62b1b",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39677090_b718da77",
        "filename": "src/deoptimizer/deoptimizer.cc",
        "patchSetId": 465
      },
      "lineNbr": 425,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T10:55:04Z",
      "side": 1,
      "message": "I don\u0027t understand this function name. Maybe DeoptimizeSparkplugVisitor?\n\nIt\u0027s also simple enough that I\u0027d propose to split the DeoptimizeAll and DeoptimizeSFI into two classes rather than having the dispatch on shared_.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b07b1d3_e058e614",
        "filename": "src/deoptimizer/deoptimizer.cc",
        "patchSetId": 465
      },
      "lineNbr": 425,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2021-02-10T13:15:04Z",
      "side": 1,
      "message": "@victorgomes",
      "parentUuid": "39677090_b718da77",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb260441_57f43af2",
        "filename": "src/deoptimizer/deoptimizer.cc",
        "patchSetId": 465
      },
      "lineNbr": 425,
      "author": {
        "id": 1368302
      },
      "writtenOn": "2021-02-10T13:25:24Z",
      "side": 1,
      "message": "Naming things is always hard! Specially after some iteration... üòä\nYes, DeoptimizeSparkplugVisitor sounds good to me. I\u0027ll change.",
      "parentUuid": "1b07b1d3_e058e614",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30dfb4c7_0f52a962",
        "filename": "src/deoptimizer/deoptimizer.cc",
        "patchSetId": 465
      },
      "lineNbr": 460,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T10:55:04Z",
      "side": 1,
      "message": "So a heap iteration is a lot more expensive than using the optimized code list. +Ulan ptal.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a757425_157fbea0",
        "filename": "src/deoptimizer/deoptimizer.cc",
        "patchSetId": 465
      },
      "lineNbr": 460,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2021-02-10T10:58:33Z",
      "side": 1,
      "message": "It is okay for the prototype.\n\nIn production we probably want to keep track of SFI \u003d\u003e sparkplug code list to avoid heap iteration, which may require O(100) ms for larger heaps.",
      "parentUuid": "30dfb4c7_0f52a962",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a97a98c_5246e317",
        "filename": "src/deoptimizer/deoptimizer.cc",
        "patchSetId": 465
      },
      "lineNbr": 460,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2021-02-10T13:15:04Z",
      "side": 1,
      "message": "This \"deoptimization\" is currently debugger-only anyway (dropping SP code so that we can set breakpoints in ignition), so it does a similar heap walk to the one in `Debug::InstallDebugBreakTrampoline`. We might revisit the single function DeoptimizeSparkplug, but I don\u0027t see a reasonable way of getting rid of the heap walk in DeoptimizeAllSparkplug.",
      "parentUuid": "6a757425_157fbea0",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17a1eef8_acd7543e",
        "filename": "src/deoptimizer/deoptimizer.h",
        "patchSetId": 465
      },
      "lineNbr": 69,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T10:55:04Z",
      "side": 1,
      "message": "Mentioned elsewhere, if possible I\u0027d prefer to have only one entry point (DeoptimizeFunction) which dispatches internally to DeoptimizeSparkplug. The DeoptimizeSparkplug* functions below could be made private.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a8cc221_239e9637",
        "filename": "src/deoptimizer/deoptimizer.h",
        "patchSetId": 465
      },
      "lineNbr": 69,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2021-02-10T13:15:04Z",
      "side": 1,
      "message": "@victorgomes",
      "parentUuid": "17a1eef8_acd7543e",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48c96864_f70799af",
        "filename": "src/deoptimizer/deoptimizer.h",
        "patchSetId": 465
      },
      "lineNbr": 69,
      "author": {
        "id": 1368302
      },
      "writtenOn": "2021-02-10T13:25:24Z",
      "side": 1,
      "message": "We would need at least DeoptimizeSparkplug(SharedFunctionInfo) and DeoptimizeAllSparkplug(). Since the latter deoptimize every function (used on DeoptimizeAll). I\u0027ll change.",
      "parentUuid": "4a8cc221_239e9637",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be0f3edc_03d491a8",
        "filename": "src/execution/frames.h",
        "patchSetId": 465
      },
      "lineNbr": 22,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T09:55:23Z",
      "side": 1,
      "message": "Rebase artifact? These no longer exist, do they?",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b84f6ca_8fdebc14",
        "filename": "src/execution/frames.h",
        "patchSetId": 465
      },
      "lineNbr": 132,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-02-10T13:41:42Z",
      "side": 1,
      "message": "Not keen on this naming given Sparkplug isn\u0027t interpreted. How about HasUnoptimizedJavascriptFrameType or similar?",
      "range": {
        "startLine": 132,
        "startChar": 7,
        "endLine": 132,
        "endChar": 30
      },
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "566b5957_9c1e8033",
        "filename": "src/execution/frames.h",
        "patchSetId": 465
      },
      "lineNbr": 218,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T09:55:23Z",
      "side": 1,
      "message": "Left other comments re this as well, but here\u0027s a dedicated one: SP frames count as is_interpreted, SP code counts as optimized. It\u0027d be nice to find a solution that\u0027s a bit more intuitive.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8791e3cc_e2b2c788",
        "filename": "src/execution/frames.h",
        "patchSetId": 465
      },
      "lineNbr": 218,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-02-10T13:41:42Z",
      "side": 1,
      "message": "ditto, I think is_interpreted should only be for interpreted frames, and if we want something to unify them then we should have is_unoptimized_js or similar.",
      "parentUuid": "566b5957_9c1e8033",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ed9463a_6f4e36e5",
        "filename": "src/execution/runtime-profiler.cc",
        "patchSetId": 465
      },
      "lineNbr": 167,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T09:55:23Z",
      "side": 1,
      "message": "What about a predicate for this INTERPRETED||SPARKPLUG check?\n\nJust to point out, it\u0027s slightly confusing how sparkplug frames count as \u0027interpreted\u0027, while sparkplug code objects count as \u0027optimized\u0027 :P",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "786cde29_7428fd56",
        "filename": "src/heap/factory.h",
        "patchSetId": 465
      },
      "lineNbr": 840,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T09:55:23Z",
      "side": 1,
      "message": "We still need to clean this up, at least by updating the variable name (here and on Code itself). Ideally through some other means that don\u0027t require a code_kind !\u003d SPARKPLUG in every spot that reads the source_position_table.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "492ebe06_2ad227b0",
        "filename": "src/ic/unary-op-assembler.cc",
        "patchSetId": 465
      },
      "lineNbr": 22,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T09:55:23Z",
      "side": 1,
      "message": "nit, optional: an enum would be nice to make callsites more readable (nobody knows what \u0027false\u0027 means otherwise). Same with the old \u0027rhs_known_smi\u0027 in other files.",
      "range": {
        "startLine": 22,
        "startChar": 27,
        "endLine": 22,
        "endChar": 51
      },
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2a32083_9bdfa068",
        "filename": "src/interpreter/interpreter-assembler.cc",
        "patchSetId": 465
      },
      "lineNbr": 1286,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T09:55:23Z",
      "side": 1,
      "message": "Here\u0027s the other side of where the suggested named constant would be nice.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc0e0bc0_eb530a73",
        "filename": "src/interpreter/interpreter.cc",
        "patchSetId": 465
      },
      "lineNbr": 13,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T09:55:23Z",
      "side": 1,
      "message": "leftovers?",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "673a57a1_71186281",
        "filename": "src/logging/log.cc",
        "patchSetId": 465
      },
      "lineNbr": 1224,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T09:55:23Z",
      "side": 1,
      "message": "I wish we could avoid these; could we either have a function that returns a SourcePositionTableIterator (empty if Sparkplug), or teach SourcePositionTableIterator itself about SP? It\u0027s bound to be confused at some point otherwise.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a71c805b_cd7fbc7a",
        "filename": "src/objects/code-inl.h",
        "patchSetId": 465
      },
      "lineNbr": 334,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:35:06Z",
      "side": 1,
      "message": "Please add a reminder to combine this with TranslationArray de/encoding.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5958aca3_86ab0f86",
        "filename": "src/objects/code-inl.h",
        "patchSetId": 465
      },
      "lineNbr": 353,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:35:06Z",
      "side": 1,
      "message": "Maybe we could consider CHECKs here and below, getting this wrong seems pretty bad and doing a runtime CHECK fairly inexpensive.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3046cc90_a4715dad",
        "filename": "src/objects/code-inl.h",
        "patchSetId": 465
      },
      "lineNbr": 395,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:35:06Z",
      "side": 1,
      "message": "q: Why this change? Is CodeKindIsInterpretedJSFunction now !\u003d CodeKind::INTERPRETED_FUNCTION? That seems a bit surprising.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f194acb1_8becf8e5",
        "filename": "src/objects/code-inl.h",
        "patchSetId": 465
      },
      "lineNbr": 529,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:35:06Z",
      "side": 1,
      "message": "Curious about this, can sparkplug really be marked for deoptimization? Why, tests? Should we allow this / what\u0027s the intended behavior?",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9eb8dfc3_5eb4c9d4",
        "filename": "src/objects/code.cc",
        "patchSetId": 465
      },
      "lineNbr": 539,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:35:06Z",
      "side": 1,
      "message": "accidental nesting",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3263ee08_1dbb8970",
        "filename": "src/objects/shared-function-info-inl.h",
        "patchSetId": 465
      },
      "lineNbr": 507,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:35:06Z",
      "side": 1,
      "message": "q: what does the \u0027active\u0027 mean, why not just \u0027GetBytecodeArray\u0027? Fyi the word \u0027active\u0027 has meaning in a related spot, see JSFunction::GetActiveTier and related functions.",
      "range": {
        "startLine": 507,
        "startChar": 28,
        "endLine": 507,
        "endChar": 50
      },
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "741aa7a6_035afdf4",
        "filename": "src/runtime/runtime-compiler.cc",
        "patchSetId": 465
      },
      "lineNbr": 310,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:03:17Z",
      "side": 1,
      "message": "nit: type \u003d\u003d INTERPRETED.\n\nIn general I think the interpreted/sp smashup of frame types is a bit problematic, and it would be cleaner to either keep the frames identical, or be very clear about used terms and predicates. \n\nWith the current state there\u0027s confusion about what \u0027interpreted\u0027 means. For example, here we look at an InterpretedFrame, but it could be type INTERPRETED or type SPARKPLUG.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e9e8a7b_2c5dcc3f",
        "filename": "src/runtime/runtime-compiler.cc",
        "patchSetId": 465
      },
      "lineNbr": 310,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-02-10T13:41:42Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "741aa7a6_035afdf4",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53a7885d_066949f7",
        "filename": "src/runtime/runtime-compiler.cc",
        "patchSetId": 465
      },
      "lineNbr": 435,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:03:17Z",
      "side": 1,
      "message": "This feels worth a comment, why do we potentially compile multiple times below?",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a56d0d1a_3b219176",
        "filename": "src/runtime/runtime-compiler.cc",
        "patchSetId": 465
      },
      "lineNbr": 465,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:03:17Z",
      "side": 1,
      "message": "q: Every other compilation currently goes through a Compiler::CompileX function, should we do the same for SP?",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc994045_d8d85677",
        "filename": "src/runtime/runtime-compiler.cc",
        "patchSetId": 465
      },
      "lineNbr": 471,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:03:17Z",
      "side": 1,
      "message": "Unused?",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5b0f08d_26dc3652",
        "filename": "src/runtime/runtime-internal.cc",
        "patchSetId": 465
      },
      "lineNbr": 47,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:03:17Z",
      "side": 1,
      "message": "Leftover?",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2debc6fc_b6ebc142",
        "filename": "src/runtime/runtime-internal.cc",
        "patchSetId": 465
      },
      "lineNbr": 353,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:03:17Z",
      "side": 1,
      "message": "q: was there a reason for set_code to be kept outside CompileWithBaseline? I ask because some other compiler functions do the set_code themselves.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0253461_55a18496",
        "filename": "src/runtime/runtime-interpreter.cc",
        "patchSetId": 465
      },
      "lineNbr": 102,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-02-10T13:41:42Z",
      "side": 1,
      "message": "I\u0027m not super keen on a function called InterpreterTraceBytecodeEntry also being used for Sparkplug. Could we just have two functions (one for SP one for Igntiion) that call a common helper function that has the extra is_sparkplug argument?",
      "range": {
        "startLine": 102,
        "startChar": 25,
        "endLine": 102,
        "endChar": 54
      },
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94d71079_f6207f83",
        "filename": "src/runtime/runtime-interpreter.cc",
        "patchSetId": 465
      },
      "lineNbr": 112,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:03:17Z",
      "side": 1,
      "message": "nit: imo a more obvious type here is Bool True/False, or some other more explicit encoding. Again minor point, but 1000 paper cuts.. Obviously this is not a blocking comment.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb9af2db_ddab702b",
        "filename": "src/runtime/runtime-test.cc",
        "patchSetId": 465
      },
      "lineNbr": 193,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:03:17Z",
      "side": 1,
      "message": "Could we put this inside Deoptimizer::DeoptimizeFunction?",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6e177e0_2958fe95",
        "filename": "src/runtime/runtime-test.cc",
        "patchSetId": 465
      },
      "lineNbr": 481,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:03:17Z",
      "side": 1,
      "message": "Hm, this now includes SP? What about IsInterpreterOrBaselineFrame?",
      "range": {
        "startLine": 481,
        "startChar": 18,
        "endLine": 481,
        "endChar": 41
      },
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae89ec8d_12db396e",
        "filename": "src/runtime/runtime-test.cc",
        "patchSetId": 465
      },
      "lineNbr": 574,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T08:03:17Z",
      "side": 1,
      "message": "Please integrate into the existing predicates (like HasAttachedOptimizedCode, ActiveTierIsIgnition). What is the expected behavior here, is SP code \u0027turbofanned and optimized\u0027?",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "82699fc1_2467ce6e",
        "filename": "src/snapshot/serializer.cc",
        "patchSetId": 465
      },
      "lineNbr": 641,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T07:33:24Z",
      "side": 1,
      "message": "Thank you! :D",
      "range": {
        "startLine": 641,
        "startChar": 70,
        "endLine": 641,
        "endChar": 71
      },
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44edba76_f278bfa0",
        "filename": "src/snapshot/serializer.cc",
        "patchSetId": 465
      },
      "lineNbr": 644,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T07:33:24Z",
      "side": 1,
      "message": "This condition was ugly before and now it\u0027s reaching the limit imo; please extract the body into a helper function, `bool MaybeDeferObject` or similar.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b4f29255_f23f1633",
        "filename": "src/snapshot/serializer.cc",
        "patchSetId": 465
      },
      "lineNbr": 644,
      "author": {
        "id": 1468500
      },
      "writtenOn": "2021-02-10T11:51:32Z",
      "side": 1,
      "message": "Ack\nRemoved for now.",
      "parentUuid": "44edba76_f278bfa0",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89124267_0ae89e01",
        "filename": "src/snapshot/serializer.cc",
        "patchSetId": 465
      },
      "lineNbr": 720,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T07:33:24Z",
      "side": 1,
      "message": "I\u0027d prefer not keeping these style of TODOs in the tree. I\u0027m still trying to understand why we need to support SP serialization at all, at least in this initial CL. We probably don\u0027t want them in the startup snapshot. If possible I\u0027d vote for removing this and the below change.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f9b669a_37b72cc7",
        "filename": "src/snapshot/serializer.cc",
        "patchSetId": 465
      },
      "lineNbr": 720,
      "author": {
        "id": 1468500
      },
      "writtenOn": "2021-02-10T11:51:32Z",
      "side": 1,
      "message": "This TODO was not meant to survive until the changes are merged to the tree.\nulan@ thinks it was a restriction back when the deserializer used its own allocator. Now that the deserializer uses the main allocator, large objects are supported.\nReverted the change anyways for now.",
      "parentUuid": "89124267_0ae89e01",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "964ee30f_826ecde5",
        "filename": "src/snapshot/serializer.cc",
        "patchSetId": 465
      },
      "lineNbr": 1168,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T07:33:24Z",
      "side": 1,
      "message": "Perfect use-case for a scope object.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e4ed59d7_0d3bfd9a",
        "filename": "src/snapshot/serializer.cc",
        "patchSetId": 465
      },
      "lineNbr": 1168,
      "author": {
        "id": 1468500
      },
      "writtenOn": "2021-02-10T11:51:32Z",
      "side": 1,
      "message": "Ack\nRemoved for now.",
      "parentUuid": "964ee30f_826ecde5",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f886b8a_30a53cce",
        "filename": "src/snapshot/serializer.h",
        "patchSetId": 465
      },
      "lineNbr": 190,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T07:33:24Z",
      "side": 1,
      "message": "A general comment on snapshot/ changes: please extract those to a future CL, and let\u0027s implement snapshot support nicely there. We should clarify when/if we want to serialize SP code at all. For now, I\u0027d prefer if we replace BaselineData on the fly with bytecode during serialization.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7b587c19_0c8f8279",
        "filename": "src/snapshot/serializer.h",
        "patchSetId": 465
      },
      "lineNbr": 190,
      "author": {
        "id": 1468500
      },
      "writtenOn": "2021-02-10T11:51:32Z",
      "side": 1,
      "message": "Done.\nReverted the changes and instead replaced BaselineData with bytecode during serialization.",
      "parentUuid": "0f886b8a_30a53cce",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d662ff89_c9c40480",
        "filename": "src/snapshot/serializer.h",
        "patchSetId": 465
      },
      "lineNbr": 200,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T07:33:24Z",
      "side": 1,
      "message": "nit: please keep the variable and accessor name the same. Also the pattern for simple accessors is \n\n bool allow_objects_deferral() const {...}\n void set_allow_objects_deferral(bool v) {...}",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c3951706_95cc15b9",
        "filename": "src/snapshot/serializer.h",
        "patchSetId": 465
      },
      "lineNbr": 200,
      "author": {
        "id": 1468500
      },
      "writtenOn": "2021-02-10T11:51:32Z",
      "side": 1,
      "message": "Ack\nRemoved for now.",
      "parentUuid": "d662ff89_c9c40480",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40cc0a28_693aa5e2",
        "filename": "src/snapshot/serializer.h",
        "patchSetId": 465
      },
      "lineNbr": 350,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T07:33:24Z",
      "side": 1,
      "message": "nit: this is mostly just restating the variable name, please add a half-sentence with an example of why deferral could be disabled.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd698975_c6f6f6b1",
        "filename": "src/snapshot/serializer.h",
        "patchSetId": 465
      },
      "lineNbr": 350,
      "author": {
        "id": 1468500
      },
      "writtenOn": "2021-02-10T11:51:32Z",
      "side": 1,
      "message": "Ack\nRemoved for now.",
      "parentUuid": "40cc0a28_693aa5e2",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e76122b_4685a6e8",
        "filename": "src/snapshot/startup-serializer.cc",
        "patchSetId": 465
      },
      "lineNbr": 93,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T07:33:24Z",
      "side": 1,
      "message": "When does this happen? I\u0027m not sure we want sparkplug code in the startup snapshot, alternatively we could clear compiled data prior to serialization, or replace it with the bytecode inline.",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b507a15_c3f822a2",
        "filename": "src/snapshot/startup-serializer.cc",
        "patchSetId": 465
      },
      "lineNbr": 93,
      "author": {
        "id": 1468500
      },
      "writtenOn": "2021-02-10T11:51:32Z",
      "side": 1,
      "message": "It happens only with --always-sparkplug.\nRemoved for now.",
      "parentUuid": "0e76122b_4685a6e8",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e025dff9_0918bab7",
        "filename": "test/mjsunit/mjsunit.status",
        "patchSetId": 465
      },
      "lineNbr": 1353,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-02-10T07:33:24Z",
      "side": 1,
      "message": "Maybe a whitelist would be easier? Small distinction since arch\u0027s don\u0027t change often, but just yesterday we landed the riscv port :).",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "81bf5b8f_915422d3",
        "filename": "test/mjsunit/mjsunit.status",
        "patchSetId": 465
      },
      "lineNbr": 1353,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2021-02-10T13:15:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e025dff9_0918bab7",
      "revId": "9d11aa5153a5dcfe4afef8f26a42203b928066b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}