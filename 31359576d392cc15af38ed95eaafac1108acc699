{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "dbaf0fdd_ff77dd0b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2021-03-12T15:35:15Z",
      "side": 1,
      "message": "Checked now in Blink that this approach works. ",
      "revId": "31359576d392cc15af38ed95eaafac1108acc699",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "95ac5a8b_5f392ef6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-03-12T16:52:54Z",
      "side": 1,
      "message": "This CL made me realize that we have a bug in Resize. We can currently potentially resize a normal object to a large object. That should fail and the object should be reallocated in the large space.",
      "revId": "31359576d392cc15af38ed95eaafac1108acc699",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5fff4940_f121c503",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-03-12T16:56:46Z",
      "side": 1,
      "message": "lgtm (sorry, forgot)",
      "revId": "31359576d392cc15af38ed95eaafac1108acc699",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6cd46c9_542f53b7",
        "filename": "include/cppgc/custom-space.h",
        "patchSetId": 7
      },
      "lineNbr": 63,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-03-12T16:52:54Z",
      "side": 1,
      "message": "The embedder doesn\u0027t know when a GC runs.",
      "range": {
        "startLine": 63,
        "startChar": 48,
        "endLine": 63,
        "endChar": 53
      },
      "revId": "31359576d392cc15af38ed95eaafac1108acc699",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c9fd302_ef43b742",
        "filename": "include/cppgc/custom-space.h",
        "patchSetId": 7
      },
      "lineNbr": 63,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-03-12T16:56:46Z",
      "side": 1,
      "message": "Since the embedder doesn\u0027t know about GC timings, it might try to retighten bounds during a GC which I think can race with concurrent marking.",
      "parentUuid": "f6cd46c9_542f53b7",
      "range": {
        "startLine": 63,
        "startChar": 48,
        "endLine": 63,
        "endChar": 53
      },
      "revId": "31359576d392cc15af38ed95eaafac1108acc699",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af3fdcab_3bc66500",
        "filename": "include/cppgc/custom-space.h",
        "patchSetId": 7
      },
      "lineNbr": 67,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-03-12T16:52:54Z",
      "side": 1,
      "message": "Clarify somewhere that a type that requires annotations must go in a custom space with annotations enabled. We can\u0027t have such type in a regular space.\nAlso we need to clarify that mixins cannot require annotations.",
      "range": {
        "startLine": 67,
        "startChar": 3,
        "endLine": 67,
        "endChar": 5
      },
      "revId": "31359576d392cc15af38ed95eaafac1108acc699",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4472e51f_c4433688",
        "filename": "src/heap/cppgc/heap-space.cc",
        "patchSetId": 7
      },
      "lineNbr": 27,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-03-12T16:52:54Z",
      "side": 1,
      "message": "I don\u0027t think this is a good idea. I\u0027d rather embedder use a simple tagging for spaces and not depend on build arguments. If asan is disabled, the macros will resolve to noop anyway.",
      "range": {
        "startLine": 27,
        "startChar": 8,
        "endLine": 27,
        "endChar": 32
      },
      "revId": "31359576d392cc15af38ed95eaafac1108acc699",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a195e3d5_d044a4ba",
        "filename": "src/heap/cppgc/object-allocator.cc",
        "patchSetId": 7
      },
      "lineNbr": 87,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-03-12T16:52:54Z",
      "side": 1,
      "message": "Replace with \"NormalPageSpace* space_for_type\"?\nReasons:\n1) The original_space will always be a NormalPageSpace so we can use the stricter type. (I understand that it doesn\u0027t match the current tests but we can just adjust the tests accordingly)\n2) I think space_for_type is a bit more descriptive than original_space and better clarifies what this space is.",
      "range": {
        "startLine": 87,
        "startChar": 26,
        "endLine": 87,
        "endChar": 51
      },
      "revId": "31359576d392cc15af38ed95eaafac1108acc699",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}