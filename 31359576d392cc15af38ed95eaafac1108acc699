{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "dbaf0fdd_ff77dd0b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2021-03-12T15:35:15Z",
      "side": 1,
      "message": "Checked now in Blink that this approach works. ",
      "revId": "31359576d392cc15af38ed95eaafac1108acc699",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "95ac5a8b_5f392ef6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-03-12T16:52:54Z",
      "side": 1,
      "message": "This CL made me realize that we have a bug in Resize. We can currently potentially resize a normal object to a large object. That should fail and the object should be reallocated in the large space.",
      "revId": "31359576d392cc15af38ed95eaafac1108acc699",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5fff4940_f121c503",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-03-12T16:56:46Z",
      "side": 1,
      "message": "lgtm (sorry, forgot)",
      "revId": "31359576d392cc15af38ed95eaafac1108acc699",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c2848423_85e2673f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2021-03-12T17:25:39Z",
      "side": 1,
      "message": "Ack, there\u0027s a check against LO size needed.",
      "parentUuid": "95ac5a8b_5f392ef6",
      "revId": "31359576d392cc15af38ed95eaafac1108acc699",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "555306f1_438b87c7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2021-03-12T18:50:41Z",
      "side": 1,
      "message": "There\u0027s actually a possible alternative to all of this: We really only need the annotations for trivially destructible backings. We could keep the Blink annotations in destructor and TraceTrait and only add the annotations in ASAN to all our trivially destructible objects. That means no API required.\n\n(We could keep the bottleneck refactorings.)",
      "revId": "31359576d392cc15af38ed95eaafac1108acc699",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6cd46c9_542f53b7",
        "filename": "include/cppgc/custom-space.h",
        "patchSetId": 7
      },
      "lineNbr": 63,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-03-12T16:52:54Z",
      "side": 1,
      "message": "The embedder doesn\u0027t know when a GC runs.",
      "range": {
        "startLine": 63,
        "startChar": 48,
        "endLine": 63,
        "endChar": 53
      },
      "revId": "31359576d392cc15af38ed95eaafac1108acc699",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c9fd302_ef43b742",
        "filename": "include/cppgc/custom-space.h",
        "patchSetId": 7
      },
      "lineNbr": 63,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-03-12T16:56:46Z",
      "side": 1,
      "message": "Since the embedder doesn\u0027t know about GC timings, it might try to retighten bounds during a GC which I think can race with concurrent marking.",
      "parentUuid": "f6cd46c9_542f53b7",
      "range": {
        "startLine": 63,
        "startChar": 48,
        "endLine": 63,
        "endChar": 53
      },
      "revId": "31359576d392cc15af38ed95eaafac1108acc699",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d6f66dc_f29aad95",
        "filename": "include/cppgc/custom-space.h",
        "patchSetId": 7
      },
      "lineNbr": 63,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2021-03-12T17:25:39Z",
      "side": 1,
      "message": "True, will rephrase. Essentially the embedder must do what Blink does: Check that it doesn\u0027t tighten bounds during GC.",
      "parentUuid": "3c9fd302_ef43b742",
      "range": {
        "startLine": 63,
        "startChar": 48,
        "endLine": 63,
        "endChar": 53
      },
      "revId": "31359576d392cc15af38ed95eaafac1108acc699",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e35ee1c9_79620084",
        "filename": "include/cppgc/custom-space.h",
        "patchSetId": 7
      },
      "lineNbr": 63,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-03-12T18:04:43Z",
      "side": 1,
      "message": "If we\u0027re saying that the embedder needs to check if a GC is in progress (or more specifically that marking is in progress) then we\u0027ll need to provide a stable api to check that and move HeapState out of subtle.",
      "parentUuid": "2d6f66dc_f29aad95",
      "range": {
        "startLine": 63,
        "startChar": 48,
        "endLine": 63,
        "endChar": 53
      },
      "revId": "31359576d392cc15af38ed95eaafac1108acc699",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af3fdcab_3bc66500",
        "filename": "include/cppgc/custom-space.h",
        "patchSetId": 7
      },
      "lineNbr": 67,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-03-12T16:52:54Z",
      "side": 1,
      "message": "Clarify somewhere that a type that requires annotations must go in a custom space with annotations enabled. We can\u0027t have such type in a regular space.\nAlso we need to clarify that mixins cannot require annotations.",
      "range": {
        "startLine": 67,
        "startChar": 3,
        "endLine": 67,
        "endChar": 5
      },
      "revId": "31359576d392cc15af38ed95eaafac1108acc699",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "22c5b62b_3a7007b3",
        "filename": "include/cppgc/custom-space.h",
        "patchSetId": 7
      },
      "lineNbr": 67,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2021-03-12T17:25:39Z",
      "side": 1,
      "message": "\u003e Clarify somewhere that a type that requires annotations must go in a custom space with annotations enabled. We can\u0027t have such type in a regular space.\n\nThat\u0027s why the flag is on a custom space. There\u0027s no mentioning of regular spaces on the API.\n\n\u003e Also we need to clarify that mixins cannot require annotations.\n\nAnnotations may per ASAN only be used with contiguous containers.\n\n(Mixins could actually use annotations but we would always unpoison the whole object.)",
      "parentUuid": "af3fdcab_3bc66500",
      "range": {
        "startLine": 67,
        "startChar": 3,
        "endLine": 67,
        "endChar": 5
      },
      "revId": "31359576d392cc15af38ed95eaafac1108acc699",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1953823_8478a9f1",
        "filename": "include/cppgc/custom-space.h",
        "patchSetId": 7
      },
      "lineNbr": 67,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-03-12T18:04:43Z",
      "side": 1,
      "message": "My comment was regarding the gap between annotations being applied to an *object* and being enabled on a *space*. All objects that need annotations need to be allocated on a space that supports it. I think we need to clarify that and/or that annotations are disabled by default for non-custom spaces.\n\nNvm about the mixins. Contiguous containers can be mixin, nothing prevents that, but since they cannot be large object the code should still work.",
      "parentUuid": "22c5b62b_3a7007b3",
      "range": {
        "startLine": 67,
        "startChar": 3,
        "endLine": 67,
        "endChar": 5
      },
      "revId": "31359576d392cc15af38ed95eaafac1108acc699",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4472e51f_c4433688",
        "filename": "src/heap/cppgc/heap-space.cc",
        "patchSetId": 7
      },
      "lineNbr": 27,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-03-12T16:52:54Z",
      "side": 1,
      "message": "I don\u0027t think this is a good idea. I\u0027d rather embedder use a simple tagging for spaces and not depend on build arguments. If asan is disabled, the macros will resolve to noop anyway.",
      "range": {
        "startLine": 27,
        "startChar": 8,
        "endLine": 27,
        "endChar": 32
      },
      "revId": "31359576d392cc15af38ed95eaafac1108acc699",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4db5419_569527b0",
        "filename": "src/heap/cppgc/heap-space.cc",
        "patchSetId": 7
      },
      "lineNbr": 27,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2021-03-12T17:25:39Z",
      "side": 1,
      "message": "I have removed and re-added this block several times before sending it out :) \n\nI see the point of having simple tagging but it would also be a problem if the embedder is built with ASAN and requires annotations and V8 is built without it. This simple CHECK would catch that.",
      "parentUuid": "4472e51f_c4433688",
      "range": {
        "startLine": 27,
        "startChar": 8,
        "endLine": 27,
        "endChar": 32
      },
      "revId": "31359576d392cc15af38ed95eaafac1108acc699",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b062f25_37e6608d",
        "filename": "src/heap/cppgc/heap-space.cc",
        "patchSetId": 7
      },
      "lineNbr": 27,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-03-12T18:04:43Z",
      "side": 1,
      "message": "I think it should be up to the embedder to make sure it propagates enabling/disabling asan to v8. I don\u0027t think we need to check it.",
      "parentUuid": "f4db5419_569527b0",
      "range": {
        "startLine": 27,
        "startChar": 8,
        "endLine": 27,
        "endChar": 32
      },
      "revId": "31359576d392cc15af38ed95eaafac1108acc699",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a195e3d5_d044a4ba",
        "filename": "src/heap/cppgc/object-allocator.cc",
        "patchSetId": 7
      },
      "lineNbr": 87,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-03-12T16:52:54Z",
      "side": 1,
      "message": "Replace with \"NormalPageSpace* space_for_type\"?\nReasons:\n1) The original_space will always be a NormalPageSpace so we can use the stricter type. (I understand that it doesn\u0027t match the current tests but we can just adjust the tests accordingly)\n2) I think space_for_type is a bit more descriptive than original_space and better clarifies what this space is.",
      "range": {
        "startLine": 87,
        "startChar": 26,
        "endLine": 87,
        "endChar": 51
      },
      "revId": "31359576d392cc15af38ed95eaafac1108acc699",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}