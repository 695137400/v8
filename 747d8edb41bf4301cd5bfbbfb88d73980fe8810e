{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "417e12e7_d27da200",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1468500
      },
      "writtenOn": "2022-01-05T16:37:22Z",
      "side": 1,
      "message": "Just added some comments so the diff is easier to parse, as I moved MigrateStringMapUnderLockIfNeeded from string.cc to string-inl.h with some changes.",
      "revId": "747d8edb41bf4301cd5bfbbfb88d73980fe8810e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4c46dba3_a18bad5a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2022-01-05T22:15:53Z",
      "side": 1,
      "message": "After some thinking, I think this doesn\u0027t completely fix the bug.\n\nTo recap, the bug you found is with 3 threads and 2 strings:\n\nstr1: 0x1(aa)\nstr2: 0x2(aa)\n\nT1: Miss on str1 -\u003e optimistically sets str1\u0027s map to an internalized string before actually inserting into the table: *Write-write race with T3*\nT2: Miss on str2 -\u003e Adds str2 to string table\nT3: Hit on str1 -\u003e Tries to make str1 into a thin string pointing to str2: *Write-write race with T1*\n\nThis points to another bug. Since StringTable::LookupKey optimistically sets a string\u0027s map to the internalized string map *before* actual insertion, it\u0027s possible for threads to see strings that have an internalized map that are not actually internalized. Eventually, that optimistic setting of the map will be undone by MakeThin on a string table hit, but until that happens, we lose the invariant that \"a string with an internalized map implies it is in the string table\", which could result in incorrectness if we pointer compare it to an internalized string with the same contents.\n\nI think the right fix here is to delay updating the map for in-place internalization until we are in fact sure we\u0027re inserting into the map (i.e. the two `data-\u003eSet(entry, *new_string)` lines in StringTable::LookupKey.\n\nI think this removes the write-write race with MakeThin completely, as it moves the internalized map update to be protected by the StringTable write_mutex, so the only possible concurrent migration remains Seq -\u003e Thin.\n\nThis requires some refactoring of the StringTable and StringTableKey::AsHandle code. Maybe the StringTableKey can be made stateful and AsHandle can be split into a PrepareForInsertion and GetHandleForInsertion:\n\n  Handle\u003cString\u003e StringTable::LookupKey(...) {\n    ...\n    // If a copy is needed, allocate the copy.\n    key-\u003ePrepareForInsertion(isolate);\n    {\n      base::MutexGuard guard(\u0026write_mutex_);\n      ...\n      if (element \u003d\u003d empty_element()) {\n        // Either returns the pre-allocated copy, or updates the map\n        // and returns the original string.\n        Handle\u003cString\u003e new_string \u003d key-\u003eGetHandleForInsertion();\n        data-\u003eSet(entry, new_string);\n        ...\n        return new_string\n      }\n      ...\n    }\n  }",
      "revId": "747d8edb41bf4301cd5bfbbfb88d73980fe8810e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8816634e_50436b1b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1468500
      },
      "writtenOn": "2022-01-12T16:28:30Z",
      "side": 1,
      "message": "You are right, there is still an issue where other threads could see an internalized map for not actually internalized strings.\n\nI like your suggestion of splitting AsHandle and moving the actual update inside the critical section.\n\nI also just realised that StringTable::TryStringToIndexOrLookupExisting needs some extra checks, since the lookup-string could have been internalized by another thread.",
      "parentUuid": "4c46dba3_a18bad5a",
      "revId": "747d8edb41bf4301cd5bfbbfb88d73980fe8810e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06aea38f_9363d038",
        "filename": "src/objects/string-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 640,
      "author": {
        "id": 1468500
      },
      "writtenOn": "2022-01-05T16:37:22Z",
      "side": 1,
      "message": "drive-by",
      "range": {
        "startLine": 640,
        "startChar": 0,
        "endLine": 640,
        "endChar": 9
      },
      "revId": "747d8edb41bf4301cd5bfbbfb88d73980fe8810e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "62abae66_386a6e8a",
        "filename": "src/objects/string-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 640,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2022-01-13T01:32:21Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "06aea38f_9363d038",
      "range": {
        "startLine": 640,
        "startChar": 0,
        "endLine": 640,
        "endChar": 9
      },
      "revId": "747d8edb41bf4301cd5bfbbfb88d73980fe8810e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "469b8fe6_e8546d90",
        "filename": "src/objects/string-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 670,
      "author": {
        "id": 1468500
      },
      "writtenOn": "2022-01-05T16:37:22Z",
      "side": 1,
      "message": "drive-by",
      "range": {
        "startLine": 670,
        "startChar": 0,
        "endLine": 670,
        "endChar": 9
      },
      "revId": "747d8edb41bf4301cd5bfbbfb88d73980fe8810e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3c5c85f6_f8b92821",
        "filename": "src/objects/string-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 670,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2022-01-13T01:32:21Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "469b8fe6_e8546d90",
      "range": {
        "startLine": 670,
        "startChar": 0,
        "endLine": 670,
        "endChar": 9
      },
      "revId": "747d8edb41bf4301cd5bfbbfb88d73980fe8810e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30c77fef_02431f7f",
        "filename": "src/objects/string-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 812,
      "author": {
        "id": 1468500
      },
      "writtenOn": "2022-01-05T16:37:22Z",
      "side": 1,
      "message": "TODO for me: Update this comment",
      "range": {
        "startLine": 808,
        "startChar": 0,
        "endLine": 812,
        "endChar": 58
      },
      "revId": "747d8edb41bf4301cd5bfbbfb88d73980fe8810e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a11d8c0_e6398bb8",
        "filename": "src/objects/string-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 812,
      "author": {
        "id": 1468500
      },
      "writtenOn": "2022-01-12T16:28:30Z",
      "side": 1,
      "message": "no longer relevant",
      "parentUuid": "30c77fef_02431f7f",
      "range": {
        "startLine": 808,
        "startChar": 0,
        "endLine": 812,
        "endChar": 58
      },
      "revId": "747d8edb41bf4301cd5bfbbfb88d73980fe8810e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2d0b52a_e9442f79",
        "filename": "src/objects/string-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 871,
      "author": {
        "id": 1468500
      },
      "writtenOn": "2022-01-05T16:37:22Z",
      "side": 1,
      "message": "This is the major change to this method.\nA pointer to the target map is now passed to the callback, as the target map might depend on the current map.\nNow that I am thinking about it again it might not be need anymore. It took me some iterations of this to understand everything better and choosing the strategy (+ target map) outside of the lock might be OK. Have to think about this again.",
      "range": {
        "startLine": 871,
        "startChar": 56,
        "endLine": 871,
        "endChar": 67
      },
      "revId": "747d8edb41bf4301cd5bfbbfb88d73980fe8810e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "932ffa8c_ac11b799",
        "filename": "src/objects/string-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 871,
      "author": {
        "id": 1468500
      },
      "writtenOn": "2022-01-12T16:28:30Z",
      "side": 1,
      "message": "no longer relevant",
      "parentUuid": "b2d0b52a_e9442f79",
      "range": {
        "startLine": 871,
        "startChar": 56,
        "endLine": 871,
        "endChar": 67
      },
      "revId": "747d8edb41bf4301cd5bfbbfb88d73980fe8810e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}