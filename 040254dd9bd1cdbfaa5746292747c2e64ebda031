{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "48084d0e_fb8020a9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2023-11-13T09:47:49Z",
      "side": 1,
      "message": "Why is that a problem?\nA direct handle to an on stack object should be safe imo.",
      "range": {
        "startLine": 11,
        "startChar": 30,
        "endLine": 11,
        "endChar": 53
      },
      "revId": "040254dd9bd1cdbfaa5746292747c2e64ebda031",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b0a73bf_2d5dee6d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2023-11-13T13:37:56Z",
      "side": 1,
      "message": "It\u0027s the same problem we had with out-of-stack `v8::Local`, externally. A heap-allocated vector of `Handle\u003cT\u003e` is indeed safe, and will remain so (as long as `Handle\u003cT\u003e` is indirect). A heap-allocated vector of `DirectHandle\u003cT\u003e` is not safe, because the pointers are not scanned conservatively. If we need such vectors, we will have to introduce a `DirectHandleVector\u003cT\u003e`, as we did with `v8::LocalVector`.\n\nThis CL eliminates some instances where the vector is not really required, so that they can subsequently be migrated.",
      "parentUuid": "48084d0e_fb8020a9",
      "range": {
        "startLine": 11,
        "startChar": 30,
        "endLine": 11,
        "endChar": 53
      },
      "revId": "040254dd9bd1cdbfaa5746292747c2e64ebda031",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4afe8dac_0b6c519f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2023-11-13T13:57:15Z",
      "side": 1,
      "message": "Other than `Local` vs `Handle`, is there another diff between `DirectHandleVector\u003cT\u003e` and `LocalVector\u003cT\u003e`?",
      "parentUuid": "7b0a73bf_2d5dee6d",
      "range": {
        "startLine": 11,
        "startChar": 30,
        "endLine": 11,
        "endChar": 53
      },
      "revId": "040254dd9bd1cdbfaa5746292747c2e64ebda031",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "880d8604_2db59c18",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2023-11-13T14:15:26Z",
      "side": 1,
      "message": "No. The only differences are:\n- `v8::Local` is external, `[Direct]Handle` is internal.\n- `v8::Local` will automatically switch to direct, eventually, and so will `DirectHandle`. On the other hand, `Handle` will stay indirect (unless we change our minds).\n\nIn both cases, if handles are direct, a backing store is needed (for storing the actual pointers) that must be registered as persistent roots, for CSS.",
      "parentUuid": "4afe8dac_0b6c519f",
      "range": {
        "startLine": 11,
        "startChar": 30,
        "endLine": 11,
        "endChar": 53
      },
      "revId": "040254dd9bd1cdbfaa5746292747c2e64ebda031",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9135339_4c2d5bdf",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2023-11-13T15:43:19Z",
      "side": 1,
      "message": "Resolved.",
      "parentUuid": "880d8604_2db59c18",
      "range": {
        "startLine": 11,
        "startChar": 30,
        "endLine": 11,
        "endChar": 53
      },
      "revId": "040254dd9bd1cdbfaa5746292747c2e64ebda031",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1cedc3ab_f645f5e3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2023-11-13T13:57:15Z",
      "side": 1,
      "message": "lgtm",
      "revId": "040254dd9bd1cdbfaa5746292747c2e64ebda031",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f664c9e7_1bb06b97",
        "filename": "src/heap/factory.h",
        "patchSetId": 2
      },
      "lineNbr": 807,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2023-11-13T09:47:49Z",
      "side": 1,
      "message": "Are you sure about this? It seems wrong to me.\n`sizeof...` would have nothing to unpack here, so you just checking `sizeof(MemorySpan)` which would be fixed. I assume you want to check how many args were passed, but that is dynamic and can\u0027t be constexpr imo.",
      "range": {
        "startLine": 807,
        "startChar": 25,
        "endLine": 807,
        "endChar": 40
      },
      "revId": "040254dd9bd1cdbfaa5746292747c2e64ebda031",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9db01e5f_014e326f",
        "filename": "src/heap/factory.h",
        "patchSetId": 2
      },
      "lineNbr": 807,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2023-11-13T13:37:56Z",
      "side": 1,
      "message": "This `sizeof...` counts the number of arguments in the parameter pack passed to this function template: https://en.cppreference.com/w/cpp/language/sizeof...\nIt is known at compile-time when the template is instantiated, hence the `constexpr` both in `N` and in the `if` below.",
      "parentUuid": "f664c9e7_1bb06b97",
      "range": {
        "startLine": 807,
        "startChar": 25,
        "endLine": 807,
        "endChar": 40
      },
      "revId": "040254dd9bd1cdbfaa5746292747c2e64ebda031",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "550a276b_04d0afa3",
        "filename": "src/heap/factory.h",
        "patchSetId": 2
      },
      "lineNbr": 807,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2023-11-13T13:57:15Z",
      "side": 1,
      "message": "Sorry, I thought this was the same method that started in line 798 above. I missed that these are 2 different methods.",
      "parentUuid": "9db01e5f_014e326f",
      "range": {
        "startLine": 807,
        "startChar": 25,
        "endLine": 807,
        "endChar": 40
      },
      "revId": "040254dd9bd1cdbfaa5746292747c2e64ebda031",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "040254dd9bd1cdbfaa5746292747c2e64ebda031",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "040254dd9bd1cdbfaa5746292747c2e64ebda031",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "040254dd9bd1cdbfaa5746292747c2e64ebda031",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "040254dd9bd1cdbfaa5746292747c2e64ebda031",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}