{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e8c690b7_cc0bb295",
        "filename": "src/compiler/turboshaft/assembler.h",
        "patchSetId": 12
      },
      "lineNbr": 151,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2023-06-22T13:37:07Z",
      "side": 1,
      "message": "`\u0026 ConditionalGotoStatus::kGotoDestination)` should also work, no? And I think that\u0027s a bit easier to read. (Same below).",
      "range": {
        "startLine": 150,
        "startChar": 55,
        "endLine": 151,
        "endChar": 50
      },
      "revId": "6c0e585f58460fcfa92a1a5c03b36f6b795af8bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6b04809a_ec7eaef9",
        "filename": "src/compiler/turboshaft/assembler.h",
        "patchSetId": 12
      },
      "lineNbr": 151,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-06-26T14:53:27Z",
      "side": 1,
      "message": "Good point. Done.",
      "parentUuid": "e8c690b7_cc0bb295",
      "range": {
        "startLine": 150,
        "startChar": 55,
        "endLine": 151,
        "endChar": 50
      },
      "revId": "6c0e585f58460fcfa92a1a5c03b36f6b795af8bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17e76c03_78d74f68",
        "filename": "src/compiler/turboshaft/assembler.h",
        "patchSetId": 12
      },
      "lineNbr": 163,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2023-06-22T13:37:07Z",
      "side": 1,
      "message": "This name is super confusing. Can we find better names for those?",
      "range": {
        "startLine": 163,
        "startChar": 31,
        "endLine": 163,
        "endChar": 50
      },
      "revId": "6c0e585f58460fcfa92a1a5c03b36f6b795af8bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "522c4ffb_48f096eb",
        "filename": "src/compiler/turboshaft/assembler.h",
        "patchSetId": 12
      },
      "lineNbr": 163,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-06-26T14:53:27Z",
      "side": 1,
      "message": "I\u0027m not too fond of those names either, but I don\u0027t have much better in mind. Any suggestions? {kGotoDestination, kDestinationUnreachable, kBranch} maybe? (kDestinationUnreachable is not quite accurate though because the destination could be reachable through some other paths, including the \"else\" branch of the GotoIf)\n\n(the comments on the definition of ConditionalGotoStatus should help clarify things, but I still agree that better names would be even better...)",
      "parentUuid": "17e76c03_78d74f68",
      "range": {
        "startLine": 163,
        "startChar": 31,
        "endLine": 163,
        "endChar": 50
      },
      "revId": "6c0e585f58460fcfa92a1a5c03b36f6b795af8bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d47ae731_048cf747",
        "filename": "src/compiler/turboshaft/assembler.h",
        "patchSetId": 12
      },
      "lineNbr": 163,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2023-06-27T06:32:33Z",
      "side": 1,
      "message": "Yeah it\u0027s not easy to find good names that describe the situation and are not entire sentences. I think the thing that is the most confusing is the `kGotoNotDestination` in particular when having a `GotoIfNot`. If I understand correctly, if a `GotoIfNot(false, dst)` is optimized, we will get a `kGotoDestination` because of the condition being `false` it will always go to `dst`, right? I can think of two options:\n1.) The `kGotoNotDestination` case is basically just fallthrough as if the `GotoIf[Not]` just didn\u0027t exist at all. Maybe we can reflect this at something like `kGotoEliminated` (the other could then be e.g. `kUnconditionalGotoDestination`).\n2.) I think just having the `kGotoNotDestination` being `kGotoOther` would already be a bit clearer (to me at least).\nI think this might be something that you need to take a look at the definition/comment before using it either way, so I think we can also just keep it.",
      "parentUuid": "522c4ffb_48f096eb",
      "range": {
        "startLine": 163,
        "startChar": 31,
        "endLine": 163,
        "endChar": 50
      },
      "revId": "6c0e585f58460fcfa92a1a5c03b36f6b795af8bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bec46736_46a5616e",
        "filename": "src/compiler/turboshaft/assembler.h",
        "patchSetId": 12
      },
      "lineNbr": 163,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-06-27T07:07:47Z",
      "side": 1,
      "message": "I like GotoEliminated, thanks for the suggestion. I\u0027ve added this comment to the definition to help clarify even more:\n```\n  // Some examples of this:\n  //   GotoIf(true, dst)     \u003d\u003d\u003d\u003e kGotoDestination\n  //   GotoIf(false, dst)    \u003d\u003d\u003d\u003e kGotoEliminated\n  //   GotoIf(var, dst)      \u003d\u003d\u003d\u003e kBranch\n  //   GotoIfNot(true, dst)  \u003d\u003d\u003d\u003e kGotoEliminated\n  //   GotoIfNot(false, dst) \u003d\u003d\u003d\u003e kGotoDestination\n  //   GotoIfNot(var, dst)   \u003d\u003d\u003d\u003e kBranch\n```",
      "parentUuid": "d47ae731_048cf747",
      "range": {
        "startLine": 163,
        "startChar": 31,
        "endLine": 163,
        "endChar": 50
      },
      "revId": "6c0e585f58460fcfa92a1a5c03b36f6b795af8bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf35ced8_67a2828b",
        "filename": "src/compiler/turboshaft/machine-lowering-reducer.h",
        "patchSetId": 12
      },
      "lineNbr": 555,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2023-06-22T13:37:07Z",
      "side": 1,
      "message": "Maybe put this into `AllocateBigInt`.",
      "range": {
        "startLine": 555,
        "startChar": 7,
        "endLine": 555,
        "endChar": 57
      },
      "revId": "6c0e585f58460fcfa92a1a5c03b36f6b795af8bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b46a1d1_6d5666f5",
        "filename": "src/compiler/turboshaft/machine-lowering-reducer.h",
        "patchSetId": 12
      },
      "lineNbr": 555,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-06-26T14:53:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cf35ced8_67a2828b",
      "range": {
        "startLine": 555,
        "startChar": 7,
        "endLine": 555,
        "endChar": 57
      },
      "revId": "6c0e585f58460fcfa92a1a5c03b36f6b795af8bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fe84ed5_ac6f3fef",
        "filename": "src/compiler/turboshaft/machine-optimization-reducer.h",
        "patchSetId": 12
      },
      "lineNbr": 65,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2023-06-22T13:37:07Z",
      "side": 1,
      "message": "What are the implications of this? Does this have a performance impact because of the local heap and the unparking?",
      "range": {
        "startLine": 65,
        "startChar": 4,
        "endLine": 65,
        "endChar": 48
      },
      "revId": "6c0e585f58460fcfa92a1a5c03b36f6b795af8bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "85cd01e5_3a74992b",
        "filename": "src/compiler/turboshaft/machine-optimization-reducer.h",
        "patchSetId": 12
      },
      "lineNbr": 65,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-06-26T14:53:27Z",
      "side": 1,
      "message": "Thanks for the comment. I\u0027ve move the Unparking: we now unpark only before doing the constant-folding, which should be more efficient (less blocking of the GC, at the cost of a few more compare-and-swap, but probably not that many).",
      "parentUuid": "6fe84ed5_ac6f3fef",
      "range": {
        "startLine": 65,
        "startChar": 4,
        "endLine": 65,
        "endChar": 48
      },
      "revId": "6c0e585f58460fcfa92a1a5c03b36f6b795af8bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}