{
  "comments": [
    {
      "key": {
        "uuid": "cb9b9f83_d9a62add",
        "filename": "src/factory.cc",
        "patchSetId": 17
      },
      "lineNbr": 3102,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2017-10-17T11:59:17Z",
      "side": 1,
      "message": "Is this a bug for which we can land the fix separately? This probably needs a test?",
      "revId": "6604f36b36f212ae2326b68b96c881eee6bec97e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c1d11fd_388fe943",
        "filename": "src/objects.cc",
        "patchSetId": 17
      },
      "lineNbr": 13081,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2017-10-17T11:59:17Z",
      "side": 1,
      "message": "Why did you change this? Doesn\u0027t this increase memory usage? We probably should at least try to encode this more compactly; e.g., both start and end (or length) in a single smi?\n\nWhat about doing this in another CL?",
      "revId": "6604f36b36f212ae2326b68b96c881eee6bec97e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10339154_e1115a55",
        "filename": "src/objects/literal-objects.cc",
        "patchSetId": 17
      },
      "lineNbr": 62,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2017-10-17T11:59:17Z",
      "side": 1,
      "message": "This DCHECK is implicit in ::encode; see utils.h:313.",
      "revId": "6604f36b36f212ae2326b68b96c881eee6bec97e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92142eba_f7baf664",
        "filename": "src/objects/literal-objects.cc",
        "patchSetId": 17
      },
      "lineNbr": 76,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2017-10-17T11:59:17Z",
      "side": 1,
      "message": "What about swapping the 2 cases to make \u003d\u003d kNotFound first? Kinda nicer to avoid the double negation imho.",
      "revId": "6604f36b36f212ae2326b68b96c881eee6bec97e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09e49b4f_7adb6415",
        "filename": "src/objects/literal-objects.cc",
        "patchSetId": 17
      },
      "lineNbr": 118,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2017-10-17T11:59:17Z",
      "side": 1,
      "message": "Doesn\u0027t this code belong in one of the dictionary-related files?",
      "revId": "6604f36b36f212ae2326b68b96c881eee6bec97e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3c6000f_54d4f21b",
        "filename": "src/objects/literal-objects.cc",
        "patchSetId": 17
      },
      "lineNbr": 144,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2017-10-17T11:59:17Z",
      "side": 1,
      "message": "Also kData boilerplate properties require slow elements since they are non-enumerable. Probably needs a test :)\n\nAnd if everything requires slow elements, we probably just want to set this once upfront in case there are elements?",
      "revId": "6604f36b36f212ae2326b68b96c881eee6bec97e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7260a77_26ea4882",
        "filename": "src/objects/literal-objects.cc",
        "patchSetId": 17
      },
      "lineNbr": 160,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2017-10-17T11:59:17Z",
      "side": 1,
      "message": "Same as above",
      "range": {
        "startLine": 160,
        "startChar": 11,
        "endLine": 160,
        "endChar": 12
      },
      "revId": "6604f36b36f212ae2326b68b96c881eee6bec97e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f05f1e6b_ad5da432",
        "filename": "src/objects/literal-objects.cc",
        "patchSetId": 17
      },
      "lineNbr": 169,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2017-10-17T11:59:17Z",
      "side": 1,
      "message": "It would be nice to have higher level helpers for this.",
      "revId": "6604f36b36f212ae2326b68b96c881eee6bec97e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "791797bd_cf09b0df",
        "filename": "src/objects/literal-objects.cc",
        "patchSetId": 17
      },
      "lineNbr": 391,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2017-10-17T11:59:17Z",
      "side": 1,
      "message": "property_count_ sounds better to me",
      "revId": "6604f36b36f212ae2326b68b96c881eee6bec97e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "607351b3_653a3fe7",
        "filename": "src/objects/literal-objects.cc",
        "patchSetId": 17
      },
      "lineNbr": 393,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2017-10-17T11:59:17Z",
      "side": 1,
      "message": "element_count_",
      "revId": "6604f36b36f212ae2326b68b96c881eee6bec97e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ef5a2ef_5bb58bf5",
        "filename": "src/objects/literal-objects.cc",
        "patchSetId": 17
      },
      "lineNbr": 534,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2017-10-17T11:59:17Z",
      "side": 1,
      "message": "IsPropertyName internally does AsArrayIndex. You probably want to implement an AsArrayIndex on literal and just do:\n\nif (key_literal-\u003eAsArrayIndex(\u0026index)) {\n  desc.AddIndexedProperty(isolate, index, value_kind, value_index);\n} else {\n   Handle\u003cString\u003e name \u003d key_literal-\u003eAsRawPropertyName()-\u003estring();\n   // you could add a DCHECK(name-\u003eIsInternalizedString()) here,\n   // but that\u0027s guaranteed by the parser...\n   desc.AddNamedProperty(isolate, name, value_kind, value_index);\n}",
      "revId": "6604f36b36f212ae2326b68b96c881eee6bec97e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ac4ce4b_ccb6a504",
        "filename": "src/objects/literal-objects.h",
        "patchSetId": 17
      },
      "lineNbr": 88,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2017-10-17T11:59:17Z",
      "side": 1,
      "message": "Default -\u003e Minimum? DefaultPrototype sounds a bit like IntrinsicDefaultProto :)",
      "revId": "6604f36b36f212ae2326b68b96c881eee6bec97e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "789fb8c5_b74bce1d",
        "filename": "src/objects/literal-objects.h",
        "patchSetId": 17
      },
      "lineNbr": 90,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2017-10-17T11:59:17Z",
      "side": 1,
      "message": "Is this just to allow sloppiness below?",
      "revId": "6604f36b36f212ae2326b68b96c881eee6bec97e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f529f064_ef6bb87b",
        "filename": "src/runtime/runtime-classes.cc",
        "patchSetId": 17
      },
      "lineNbr": 110,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2017-10-17T11:59:17Z",
      "side": 1,
      "message": "This function has a weird name...\nCan we be a bit more descriptive somehow?\n\nAdditionally, couldn\u0027t we just do 2 loops, one where we simply attach home objects to whatever needs it, and a second where we install those values into the resulting object? Separating these concerns would simplify understanding this code quite a bit...",
      "revId": "6604f36b36f212ae2326b68b96c881eee6bec97e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a046b51_bc9a3b70",
        "filename": "src/runtime/runtime-classes.cc",
        "patchSetId": 17
      },
      "lineNbr": 115,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2017-10-17T11:59:17Z",
      "side": 1,
      "message": "Should we rename kFirstDynamicArgument to kFirstMethod or so to make it clear we\u0027re only post-processing methods? I suppose that\u0027s not the best name for getters/setters... Another idea?",
      "revId": "6604f36b36f212ae2326b68b96c881eee6bec97e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26689239_f22517bd",
        "filename": "src/runtime/runtime-classes.cc",
        "patchSetId": 17
      },
      "lineNbr": 276,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2017-10-17T11:59:17Z",
      "side": 1,
      "message": "It would be nice to have helpers again that wrap around smis rather than dealing with smis directly. Perhaps GetValueNoSetName could write back the value into the right place? It\u0027s kinda weird that you overwrite value again below even though the accessor case doesn\u0027t need it? Can you just move up descriptors-\u003eSet(i, name, value, details) up here?",
      "revId": "6604f36b36f212ae2326b68b96c881eee6bec97e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f56e80c_a9bd4024",
        "filename": "src/runtime/runtime-classes.cc",
        "patchSetId": 17
      },
      "lineNbr": 382,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2017-10-17T11:59:17Z",
      "side": 1,
      "message": "NumberOfElements() \u003e 0) { ..",
      "revId": "6604f36b36f212ae2326b68b96c881eee6bec97e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2cf518dc_a337ab3c",
        "filename": "src/runtime/runtime-classes.cc",
        "patchSetId": 17
      },
      "lineNbr": 403,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2017-10-17T11:59:17Z",
      "side": 1,
      "message": "I suppose we should rename is_prototype to something like is_singleton or is_special_instance or so...?",
      "revId": "6604f36b36f212ae2326b68b96c881eee6bec97e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b63a7c1_0fa4e7d3",
        "filename": "src/runtime/runtime-classes.cc",
        "patchSetId": 17
      },
      "lineNbr": 434,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2017-10-17T11:59:17Z",
      "side": 1,
      "message": "Is this necessary? (I really don\u0027t know :))",
      "revId": "6604f36b36f212ae2326b68b96c881eee6bec97e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17c1baf8_2ce7bc55",
        "filename": "src/runtime/runtime-classes.cc",
        "patchSetId": 17
      },
      "lineNbr": 466,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2017-10-17T11:59:17Z",
      "side": 1,
      "message": "Also this function should probably be named differently. ShouldBeFastInstanceMap or so?",
      "revId": "6604f36b36f212ae2326b68b96c881eee6bec97e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}