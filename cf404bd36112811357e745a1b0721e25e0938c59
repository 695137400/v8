{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "69c950b8_febfb8bb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 8,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2023-06-07T06:50:55Z",
      "side": 1,
      "message": "Please add a description (what does it do, how does it work, anything interesting in the impl?). Where is the table stored? What are its contents? Relative or absolute targets? Why can\u0027t we use the \u0027normal\u0027 switch jump table impl?\n\nAnd is there a good bug you could link to?",
      "revId": "cf404bd36112811357e745a1b0721e25e0938c59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "20f25ed8_5b7fa863",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 8,
      "author": {
        "id": 1513087
      },
      "writtenOn": "2023-06-13T06:13:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "69c950b8_febfb8bb",
      "revId": "cf404bd36112811357e745a1b0721e25e0938c59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "87c6bab0_17e18f39",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2023-06-06T09:54:28Z",
      "side": 1,
      "message": "Thanks!",
      "revId": "cf404bd36112811357e745a1b0721e25e0938c59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c88968ff_3d08169c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1513087
      },
      "writtenOn": "2023-06-07T05:33:56Z",
      "side": 1,
      "message": "Hi Jakob, do you have any other comments? Thanks!",
      "revId": "cf404bd36112811357e745a1b0721e25e0938c59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "20a21672_a0f5125b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2023-06-07T06:50:55Z",
      "side": 1,
      "message": "Did a first pass, in general lg with main high-level comments:\n- please add more documentation, comments, an actual CL description\n- more ifdefs to avoid impact on non-x64 platforms",
      "revId": "cf404bd36112811357e745a1b0721e25e0938c59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4bda1110_b1cb4ee0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1513087
      },
      "writtenOn": "2023-06-14T07:37:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c88968ff_3d08169c",
      "revId": "cf404bd36112811357e745a1b0721e25e0938c59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f21ea89_a07ef927",
        "filename": "src/codegen/builtins-jump-table-info.h",
        "patchSetId": 7
      },
      "lineNbr": 1,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2023-06-07T06:50:55Z",
      "side": 1,
      "message": "Since this is all x64-only, could you move this file to codegen/x64?",
      "revId": "cf404bd36112811357e745a1b0721e25e0938c59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8e73a3fb_9e7aaf41",
        "filename": "src/codegen/builtins-jump-table-info.h",
        "patchSetId": 7
      },
      "lineNbr": 1,
      "author": {
        "id": 1513087
      },
      "writtenOn": "2023-06-13T06:13:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8f21ea89_a07ef927",
      "revId": "cf404bd36112811357e745a1b0721e25e0938c59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1e9e014_ded017ea",
        "filename": "src/codegen/builtins-jump-table-info.h",
        "patchSetId": 7
      },
      "lineNbr": 5,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2023-06-07T06:50:55Z",
      "side": 1,
      "message": "nit: the file is called \u0027builtins\u0027 (plural) and the class \u0027Builtin\u0027 (singular), mind unifying that?\n\nAlso, why is the class called \u0027..Info\u0027? Isn\u0027t it the jump table itself (if so, just \u0027BuiltinJumpTable\u0027 could be more fitting)?",
      "revId": "cf404bd36112811357e745a1b0721e25e0938c59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f107324_c61bcd13",
        "filename": "src/codegen/builtins-jump-table-info.h",
        "patchSetId": 7
      },
      "lineNbr": 5,
      "author": {
        "id": 1513087
      },
      "writtenOn": "2023-06-13T06:13:09Z",
      "side": 1,
      "message": "It\u0027s not the jump table itself. It\u0027s for recording the position of every jump table entry, and will be used in disassembler.",
      "parentUuid": "f1e9e014_ded017ea",
      "revId": "cf404bd36112811357e745a1b0721e25e0938c59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a172104c_14691759",
        "filename": "src/codegen/builtins-jump-table-info.h",
        "patchSetId": 7
      },
      "lineNbr": 18,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2023-06-07T06:50:55Z",
      "side": 1,
      "message": "Some kind of top-level comment that explains what this is all about in 1-2 sentences would be nice.",
      "revId": "cf404bd36112811357e745a1b0721e25e0938c59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c60f73b3_35f913e3",
        "filename": "src/codegen/builtins-jump-table-info.h",
        "patchSetId": 7
      },
      "lineNbr": 18,
      "author": {
        "id": 1513087
      },
      "writtenOn": "2023-06-13T06:13:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a172104c_14691759",
      "revId": "cf404bd36112811357e745a1b0721e25e0938c59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7695695f_7dfc185f",
        "filename": "src/codegen/builtins-jump-table-info.h",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2023-06-07T06:50:55Z",
      "side": 1,
      "message": "What\u0027s a \u0027section\u0027?",
      "revId": "cf404bd36112811357e745a1b0721e25e0938c59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72a86b17_c402f886",
        "filename": "src/codegen/builtins-jump-table-info.h",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 1513087
      },
      "writtenOn": "2023-06-13T06:13:09Z",
      "side": 1,
      "message": "It\u0027s one section in the metadata, which records the position of a jump table. The naming method here refers to `CodeCommentsWriter::section`.",
      "parentUuid": "7695695f_7dfc185f",
      "revId": "cf404bd36112811357e745a1b0721e25e0938c59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c61feef6_296370fc",
        "filename": "src/codegen/x64/assembler-x64.h",
        "patchSetId": 7
      },
      "lineNbr": 2181,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2023-06-07T06:50:55Z",
      "side": 1,
      "message": "The generic `dd` name doesn\u0027t fit here since it\u0027s specific to the builtin jump table. Please pick a better name. \u0027WriteBuiltinJumpTableEntry\u0027?",
      "revId": "cf404bd36112811357e745a1b0721e25e0938c59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "10121698_4730fc10",
        "filename": "src/codegen/x64/assembler-x64.h",
        "patchSetId": 7
      },
      "lineNbr": 2181,
      "author": {
        "id": 1513087
      },
      "writtenOn": "2023-06-13T06:13:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c61feef6_296370fc",
      "revId": "cf404bd36112811357e745a1b0721e25e0938c59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e85278ae_ff677470",
        "filename": "src/compiler/backend/code-generator.h",
        "patchSetId": 7
      },
      "lineNbr": 417,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2023-06-07T06:50:55Z",
      "side": 1,
      "message": "This is left declared but undefined for non-x64. That\u0027s a bit weird, please either add an #ifdef here, or just remove the extra method and handle builtin case inside `AssembleJumpTable`.",
      "revId": "cf404bd36112811357e745a1b0721e25e0938c59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40494b4f_1f6d2997",
        "filename": "src/compiler/backend/code-generator.h",
        "patchSetId": 7
      },
      "lineNbr": 417,
      "author": {
        "id": 1513087
      },
      "writtenOn": "2023-06-13T06:13:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e85278ae_ff677470",
      "revId": "cf404bd36112811357e745a1b0721e25e0938c59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0abcde40_a9240379",
        "filename": "src/compiler/backend/code-generator.h",
        "patchSetId": 7
      },
      "lineNbr": 480,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2023-06-07T06:50:55Z",
      "side": 1,
      "message": "The `masm_` already knows the builtin id. Please add a `Builtin builtin() const` accessor in macro-assembler-base.h and use that instead.",
      "revId": "cf404bd36112811357e745a1b0721e25e0938c59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "007a36e1_34aeeb96",
        "filename": "src/compiler/backend/code-generator.h",
        "patchSetId": 7
      },
      "lineNbr": 480,
      "author": {
        "id": 1513087
      },
      "writtenOn": "2023-06-13T06:13:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0abcde40_a9240379",
      "revId": "cf404bd36112811357e745a1b0721e25e0938c59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0f3b96c_b6a08f94",
        "filename": "src/compiler/backend/x64/code-generator-x64.cc",
        "patchSetId": 7
      },
      "lineNbr": 6221,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2023-06-07T06:50:55Z",
      "side": 1,
      "message": "I don\u0027t understand this and the below comment. Please describe in full sentences what\u0027s happening, and mention the BuiltinJumpTable class name.",
      "revId": "cf404bd36112811357e745a1b0721e25e0938c59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bfb6d42f_b844fee3",
        "filename": "src/compiler/backend/x64/code-generator-x64.cc",
        "patchSetId": 7
      },
      "lineNbr": 6221,
      "author": {
        "id": 1513087
      },
      "writtenOn": "2023-06-13T06:13:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f0f3b96c_b6a08f94",
      "revId": "cf404bd36112811357e745a1b0721e25e0938c59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a461cbd_7092db6b",
        "filename": "src/compiler/backend/x64/code-generator-x64.cc",
        "patchSetId": 7
      },
      "lineNbr": 6222,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2023-06-07T06:50:55Z",
      "side": 1,
      "message": "Let\u0027s add constants in BuiltinJumpTableInfoEntry that you can static assert here to guard the `times_4`. I guess the `times_4` is the inline `emit(uint32_t)` in the method currently called `dd`?",
      "revId": "cf404bd36112811357e745a1b0721e25e0938c59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "896088b4_a9bba0b1",
        "filename": "src/compiler/backend/x64/code-generator-x64.cc",
        "patchSetId": 7
      },
      "lineNbr": 6222,
      "author": {
        "id": 1513087
      },
      "writtenOn": "2023-06-13T06:13:09Z",
      "side": 1,
      "message": "\u003e Let\u0027s add constants in BuiltinJumpTableInfoEntry that you can static assert here to guard the times_4.\n\nI am not sure if we need this assert here, `BuiltinJumpTableInfoEntry` is different with the jump table entry, it\u0027s metadata used to record positions of jump table entry.\n\n\u003e I guess the times_4 is the inline emit(uint32_t) in the method currently called dd?\n\nRight, I have added more specific code comments here.",
      "parentUuid": "5a461cbd_7092db6b",
      "revId": "cf404bd36112811357e745a1b0721e25e0938c59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "91d1e639_19a27ab9",
        "filename": "src/compiler/backend/x64/code-generator-x64.cc",
        "patchSetId": 7
      },
      "lineNbr": 6222,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2023-06-13T06:55:23Z",
      "side": 1,
      "message": "\u003e \u003e Let\u0027s add constants in BuiltinJumpTableInfoEntry that you can static assert here to guard the times_4.\n\u003e \n\u003e I am not sure if we need this assert here, `BuiltinJumpTableInfoEntry` is different with the jump table entry, it\u0027s metadata used to record positions of jump table entry.\n\nI see, that wasn\u0027t clear to me from comments.",
      "parentUuid": "896088b4_a9bba0b1",
      "revId": "cf404bd36112811357e745a1b0721e25e0938c59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76589112_b48f7f61",
        "filename": "src/compiler/backend/x64/code-generator-x64.cc",
        "patchSetId": 7
      },
      "lineNbr": 7061,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2023-06-07T06:50:55Z",
      "side": 1,
      "message": "IMO this encoding is interesting enough to describe thoroughly here and in the CL message. What are we emitting inline? What is put into the out-of-line jump table? How does the actual jump instruction sequence work?",
      "revId": "cf404bd36112811357e745a1b0721e25e0938c59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de7e854b_eda5e319",
        "filename": "src/compiler/backend/x64/code-generator-x64.cc",
        "patchSetId": 7
      },
      "lineNbr": 7061,
      "author": {
        "id": 1513087
      },
      "writtenOn": "2023-06-13T06:13:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "76589112_b48f7f61",
      "revId": "cf404bd36112811357e745a1b0721e25e0938c59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f75ec845_539a16a2",
        "filename": "src/diagnostics/disassembler.cc",
        "patchSetId": 7
      },
      "lineNbr": 337,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2023-06-07T06:50:55Z",
      "side": 1,
      "message": "Also refer to a BuiltinJumpTableInfoEntry constant here.",
      "revId": "cf404bd36112811357e745a1b0721e25e0938c59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "37a775d5_324831d2",
        "filename": "src/diagnostics/disassembler.cc",
        "patchSetId": 7
      },
      "lineNbr": 337,
      "author": {
        "id": 1513087
      },
      "writtenOn": "2023-06-13T06:13:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f75ec845_539a16a2",
      "revId": "cf404bd36112811357e745a1b0721e25e0938c59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "258fefda_ae244e53",
        "filename": "src/objects/code.h",
        "patchSetId": 7
      },
      "lineNbr": 338,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2023-06-07T06:50:55Z",
      "side": 1,
      "message": "Hmm it\u0027s unfortunate that we spend yet another Code field for builtin-specific contents. Let\u0027s at least #ifdef it for x64. In fact, I think we should #ifdef out more in this entire CL, I suggest we do that based on a derived define `V8_ENABLE_BUILTIN_JUMP_TABLE`.",
      "revId": "cf404bd36112811357e745a1b0721e25e0938c59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcf0b6aa_a386a188",
        "filename": "src/objects/code.h",
        "patchSetId": 7
      },
      "lineNbr": 338,
      "author": {
        "id": 1513087
      },
      "writtenOn": "2023-06-13T06:13:09Z",
      "side": 1,
      "message": "That make sense, this is only needed when the disassembler is enabled. \nI refer to the implementation of constant pool, now this field will be saved if `V8_BUILTIN_JUMP_TABLE_INFO_BOOL` [1] is false.\n\nBy the way, I notice that the code comments field can also be saved using such methods, do you think it\u0027s worth doing?\n\n\n[1] https://chromium-review.googlesource.com/c/v8/v8/+/4352114/7..18/src/common/globals.h#328",
      "parentUuid": "258fefda_ae244e53",
      "revId": "cf404bd36112811357e745a1b0721e25e0938c59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91d7220a_5c7044df",
        "filename": "src/objects/code.h",
        "patchSetId": 7
      },
      "lineNbr": 338,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2023-06-13T06:55:23Z",
      "side": 1,
      "message": "\u003e By the way, I notice that the code comments field can also be saved using such methods, do you think it\u0027s worth doing?\n\nYes that sounds like a nice cleanup :)",
      "parentUuid": "fcf0b6aa_a386a188",
      "revId": "cf404bd36112811357e745a1b0721e25e0938c59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e3cd4e6_7db6b1bb",
        "filename": "src/objects/code.h",
        "patchSetId": 7
      },
      "lineNbr": 338,
      "author": {
        "id": 1513087
      },
      "writtenOn": "2023-06-14T07:37:32Z",
      "side": 1,
      "message": "I will try to do the cleanup for \u0027code comments\u0027 in another CL.",
      "parentUuid": "91d7220a_5c7044df",
      "revId": "cf404bd36112811357e745a1b0721e25e0938c59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}