{
  "comments": [
    {
      "key": {
        "uuid": "607dea35_74a775c0",
        "filename": "src/objects/objects.cc",
        "patchSetId": 3
      },
      "lineNbr": 8056,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2019-11-26T13:42:23Z",
      "side": 1,
      "message": "Why don\u0027t you use the macro ASSIGN_RETURN_ON_EXCEPTION_VALUE?",
      "revId": "941d3ccaba4c88ebac6d6166f716af7f290bffe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b36987e7_4f48c3f2",
        "filename": "src/objects/objects.cc",
        "patchSetId": 3
      },
      "lineNbr": 8056,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2019-11-29T10:59:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "607dea35_74a775c0",
      "revId": "941d3ccaba4c88ebac6d6166f716af7f290bffe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "755c295b_3df315f3",
        "filename": "src/objects/objects.cc",
        "patchSetId": 3
      },
      "lineNbr": 8081,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2019-11-26T13:42:23Z",
      "side": 1,
      "message": "Same as above.",
      "revId": "941d3ccaba4c88ebac6d6166f716af7f290bffe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f666a8f_6743b6d8",
        "filename": "src/objects/objects.cc",
        "patchSetId": 3
      },
      "lineNbr": 8081,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2019-11-29T10:59:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "755c295b_3df315f3",
      "revId": "941d3ccaba4c88ebac6d6166f716af7f290bffe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1e52063a_702f408c",
        "filename": "src/objects/objects.cc",
        "patchSetId": 3
      },
      "lineNbr": 8097,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2019-11-26T13:42:23Z",
      "side": 1,
      "message": "Why do you go through the trouble of creating descriptor objects, rather than simply putting the value in the array as you previously did? We can identify accessors as values that are AccessorPairs on the outside.\n\nIf we want something like this, we should have property CreateDataDescriptor and CreateAccessorDescriptor functions that create object literals of the proper size. I\u0027d prefer not to create these unnecessary intermediate objects though.",
      "revId": "941d3ccaba4c88ebac6d6166f716af7f290bffe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "032bcf0d_ef8e30e5",
        "filename": "src/objects/objects.cc",
        "patchSetId": 3
      },
      "lineNbr": 8097,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2019-11-26T14:50:38Z",
      "side": 1,
      "message": "Is it OK to use types in src/objects/struct.h in the inspector? From what I can tell, there are no precedences, and files under src/inspector only make use of API types exposed in the public v8.h, so I wonder if that restriction is intentional.",
      "parentUuid": "1e52063a_702f408c",
      "revId": "941d3ccaba4c88ebac6d6166f716af7f290bffe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41d334a8_1111831f",
        "filename": "src/objects/objects.cc",
        "patchSetId": 3
      },
      "lineNbr": 8097,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2019-11-27T13:28:23Z",
      "side": 1,
      "message": "The inspector used to be outside of V8. It might be a good idea to keep it that way. We could possibly use v8::PropertyDescriptor? I\u0027ll let the DevTools folks chime in on how this should best be done since I don\u0027t know too much about how the inspect is supposed to work.",
      "parentUuid": "032bcf0d_ef8e30e5",
      "revId": "941d3ccaba4c88ebac6d6166f716af7f290bffe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e88b1a3_7ea3a220",
        "filename": "src/objects/objects.cc",
        "patchSetId": 3
      },
      "lineNbr": 8097,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2019-11-27T14:40:46Z",
      "side": 1,
      "message": "Since\n\n- v8::PropertyDescriptor does not have a name field\n- v8::PropertyDescriptor is not a v8::Value\n\nWhat would the signature of debug::GetPrivateMemberDescriptors() look like if we use v8::PropertyDescriptor? Maybe this?\n\nMaybeLocal\u003cArray\u003e debug::GetPrivateMemberDescriptors(\n    Local\u003cContext\u003e context, Local\u003cObject\u003e value,\n    std::vector\u003cv8::PropertyDescriptor\u003e* descriptors);\n\n(Where the returned Local\u003cArray\u003e contain the names of the descriptors in the corresponding index. The handles allocated shall all live in the closest HandleScope created by the caller.)",
      "parentUuid": "41d334a8_1111831f",
      "revId": "941d3ccaba4c88ebac6d6166f716af7f290bffe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6025b966_aaafdecd",
        "filename": "src/objects/objects.cc",
        "patchSetId": 3
      },
      "lineNbr": 8097,
      "author": {
        "id": 1118373
      },
      "writtenOn": "2019-11-28T12:39:51Z",
      "side": 1,
      "message": "I\u0027d be open to introducing a v8::debug::AccessorPair in debug-interface.h. We have done this for v8::internal::Script -\u003e v8::debug::Script as well. That way, we can expose accessors directly to the inspector.",
      "parentUuid": "0e88b1a3_7ea3a220",
      "revId": "941d3ccaba4c88ebac6d6166f716af7f290bffe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "571e2ca9_b68ec637",
        "filename": "src/objects/objects.cc",
        "patchSetId": 3
      },
      "lineNbr": 8097,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2019-11-28T14:12:28Z",
      "side": 1,
      "message": "I think the issue is we don\u0027t have a v8:: or v8::debug type that can describe both data properties and accessor properties, while inhering from the same class as v8::String. We then have to\n\n1. return them in v8::Arrays in two different calls (iterating each object twice), with [name, value, name, value] or [name, accessor, name, accessor] format\n2. or return the names and the descriptors separately in one call, with at least one of them being out parameters (or maybe we can use std::vector\u003cstd::pair\u003cv8::String, v8::Descriptor\u003e\u003e?)\n3. or use some flexible dictionary type that somewhat does the job\n\nThis CL is currently using v8::Object for 3 in the format of [{name, value}, {name, get}, ...] because v8::Object is flexible enough to represent optional data or accessor properties while including the names, and it\u0027s v8::Value.\n\nWith v8:: PropertyDescriptor we can get to 2. If we add a name field to it, we can also just return one std::vector of it (is it safe to return them in std::vector though?)\n\nWith v8::debug::AccessorPair we can get to 1. But I think 1 is a bit unnecessarily expensive, and we still need v8::debug::AccessorPair to be v8::Value if we want to put them into the same array as the names, or use something like std::vector\u003cstd::pair\u003cv8::String, v8::debug::AccessorPair\u003e\u003e otherwise.",
      "parentUuid": "6025b966_aaafdecd",
      "revId": "941d3ccaba4c88ebac6d6166f716af7f290bffe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dfe0a3f4_d65d91ed",
        "filename": "src/objects/objects.cc",
        "patchSetId": 3
      },
      "lineNbr": 8097,
      "author": {
        "id": 1118373
      },
      "writtenOn": "2019-11-28T14:38:29Z",
      "side": 1,
      "message": "Why can\u0027t we declare v8::debug::AccessorPair so that it inherits from v8::Value?",
      "parentUuid": "571e2ca9_b68ec637",
      "revId": "941d3ccaba4c88ebac6d6166f716af7f290bffe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a2c3b7c_cb79c0ba",
        "filename": "src/objects/objects.cc",
        "patchSetId": 3
      },
      "lineNbr": 8097,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2019-11-28T15:44:27Z",
      "side": 1,
      "message": "Ah, I see, then we can just return a v8::Array of [name, value|accessors, name, value|accessors]. Sounds good to me!",
      "parentUuid": "dfe0a3f4_d65d91ed",
      "revId": "941d3ccaba4c88ebac6d6166f716af7f290bffe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4dbd01d_00b7eceb",
        "filename": "src/objects/objects.cc",
        "patchSetId": 3
      },
      "lineNbr": 8097,
      "author": {
        "id": 1118373
      },
      "writtenOn": "2019-11-28T16:12:08Z",
      "side": 1,
      "message": "yup. one problem I see with this is that the thing we return is no longer a real JS Array. If that ever escapes into JS, we would be in trouble. So it might be better to return a vector of Local handles. If we do that, it no longer matters whether debug::AccessorPair inherits from v8::Value. And while we are at this, we could also return two vectors instead, one for names, one for value/accessors.",
      "parentUuid": "2a2c3b7c_cb79c0ba",
      "revId": "941d3ccaba4c88ebac6d6166f716af7f290bffe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64ac31bd_4ae24627",
        "filename": "src/objects/objects.cc",
        "patchSetId": 3
      },
      "lineNbr": 8097,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2019-11-28T17:10:56Z",
      "side": 1,
      "message": "The array returned before this patch was not a real JSArray either though, because it contained v8::Private instead of v8::String for the names.",
      "parentUuid": "a4dbd01d_00b7eceb",
      "revId": "941d3ccaba4c88ebac6d6166f716af7f290bffe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c795fe38_4bae7f65",
        "filename": "src/objects/objects.cc",
        "patchSetId": 3
      },
      "lineNbr": 8097,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2019-11-28T17:18:12Z",
      "side": 1,
      "message": "I think we still need debug::AccessorPair to inherit from v8::Value one way or another, if we are going to put the values and accessors into one vector/array.",
      "parentUuid": "64ac31bd_4ae24627",
      "revId": "941d3ccaba4c88ebac6d6166f716af7f290bffe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5b44f00_d632b4be",
        "filename": "src/objects/objects.cc",
        "patchSetId": 3
      },
      "lineNbr": 8097,
      "author": {
        "id": 1118373
      },
      "writtenOn": "2019-11-29T09:07:16Z",
      "side": 1,
      "message": "They could all inherit from v8::Data :)",
      "parentUuid": "c795fe38_4bae7f65",
      "revId": "941d3ccaba4c88ebac6d6166f716af7f290bffe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c127e63_45bd9a96",
        "filename": "src/objects/objects.cc",
        "patchSetId": 3
      },
      "lineNbr": 8097,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2019-11-29T10:59:38Z",
      "side": 1,
      "message": "I stick to the v8::Value to avoid a downcast before passing the value to ValueMirror::create(), and convert the FixedArray to std::vector\u003cLocal\u003cValue\u003e\u003e in the API (I am not sure if it\u0027s a good idea to create v8::Locals directly in the v8::internal::JSReceiver methods, there doesn\u0027t seem to be any precedents). Let me know what you think.",
      "parentUuid": "c5b44f00_d632b4be",
      "revId": "941d3ccaba4c88ebac6d6166f716af7f290bffe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}