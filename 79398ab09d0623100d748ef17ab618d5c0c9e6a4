{
  "comments": [
    {
      "key": {
        "uuid": "25a584aa_d1cc4f43",
        "filename": "test/cctest/interpreter/test-interpreter.cc",
        "patchSetId": 1
      },
      "lineNbr": 596,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2020-03-09T18:08:55Z",
      "side": 0,
      "message": "I\u0027m wondering why these changing? the receiver should still be at the correct position in the list of arguments.",
      "revId": "79398ab09d0623100d748ef17ab618d5c0c9e6a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a286e9a9_56acd704",
        "filename": "test/cctest/interpreter/test-interpreter.cc",
        "patchSetId": 1
      },
      "lineNbr": 596,
      "author": {
        "id": 1368302
      },
      "writtenOn": "2020-03-10T13:53:08Z",
      "side": 0,
      "message": "I might have misunderstood the code, but I think the tests were simply wrong before, and it was working by chance.\n\nFor instance, the Bytecode Array generated by the test InterpreterParameter1 was\n\n         0x3d840020d6ea @    0 : 25 02             Ldar \u003cthis\u003e\n         0x3d840020d6ec @    2 : ab                Return \n\nNow is\n\n         0x5240020d6ea @    0 : 25 03             Ldar a0\n         0x5240020d6ec @    2 : ab                Return \n\nThe bytecode is executed in line 567. This line calls execution.cc::Execution::Call with receiver \u003d undefined.\n\nThe previous stack was like this:\n\n- undefined (receiver)\n- true_value (parameter 1)\n- Return Address\n\nThat means we have two parameters (including the receiver). The BytecodeArrayBuilder was constructed with a size of 1 (including the receiver), so it thinks that the receiver is the only thing in the stack. So it is the first word above the return address. The execution works by chance.\n\nNow, the stack is like this:\n\n- true_value (parameter 1)\n- undefined (receiver)\n- Return Address\n\nAgain, the BytecodeArrayBuilder thinks that the receiver is the only thing in the stack, so it reads the undefined value.\n\nTo fix the tests, we need to add one to the BytecodeArrayBuilder, and read the correct parameters instead of the receiver.",
      "parentUuid": "25a584aa_d1cc4f43",
      "revId": "79398ab09d0623100d748ef17ab618d5c0c9e6a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d04a8919_857a0e1f",
        "filename": "test/cctest/interpreter/test-interpreter.cc",
        "patchSetId": 1
      },
      "lineNbr": 596,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2020-03-10T18:50:04Z",
      "side": 0,
      "message": "I think it makes sense to keep testing builder.Receiver() as well. But in order to fix the test we need to ensure the receiver argument is properly passed through InterpreterCallable-\u003eCallInterpreter machinery.\n\nI\u0027d suggest to add an explicit receiver parameter to InterpreterCallable::operator() and to CallInterpreter() function instead of passing undefined receiver. This should fix all the tests with minimal changes.",
      "parentUuid": "a286e9a9_56acd704",
      "revId": "79398ab09d0623100d748ef17ab618d5c0c9e6a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "954b63d6_5a59faed",
        "filename": "test/cctest/interpreter/test-interpreter.cc",
        "patchSetId": 1
      },
      "lineNbr": 596,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2020-03-12T10:59:08Z",
      "side": 0,
      "message": "Thanks for catching this. +1 to Igor\u0027s suggestion.",
      "parentUuid": "d04a8919_857a0e1f",
      "revId": "79398ab09d0623100d748ef17ab618d5c0c9e6a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "150f014b_9d3021a9",
        "filename": "test/cctest/interpreter/test-interpreter.cc",
        "patchSetId": 1
      },
      "lineNbr": 596,
      "author": {
        "id": 1368302
      },
      "writtenOn": "2020-03-13T09:53:17Z",
      "side": 0,
      "message": "I did what Igor suggested, but that was actually not a great idea. The reason being is that receivers have special semantics:\n\n* Any undefined object is converted to the global proxy. The test test-interpreter-intrinsics/IsJSReceiver fails because of that. PS: although intrinsics do not convert receivers, the test harness is setup in a way that every test is called inside a function \"function f(args) { test }\" which call the builtin CallFunction that converts receivers.\n* Any primitive object is encapsulated by a JSPrimitiveWrapper. The test-interpreter/InterpreterParameter1 fails because of that.\n\nOf course, one can massage these tests (by for example adding an undefined receiver), but I think it is morally wrong to use the receiver as incoming arguments and expect the same semantics.",
      "parentUuid": "954b63d6_5a59faed",
      "revId": "79398ab09d0623100d748ef17ab618d5c0c9e6a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "04eff92c_67a267e9",
        "filename": "test/cctest/interpreter/test-interpreter.cc",
        "patchSetId": 1
      },
      "lineNbr": 596,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2020-03-13T11:39:43Z",
      "side": 0,
      "message": "Yeah, the receiver argument has special semantics and on the other hand we need to be able to test it. For example, \"return this + a + b;\" is still a valid code.\nIf you stop using Receiver() then we will no longer test this logic. I still think it makes sense to update the test harness and fix the tests you mentioned. It could be another CL before this one.",
      "parentUuid": "150f014b_9d3021a9",
      "revId": "79398ab09d0623100d748ef17ab618d5c0c9e6a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "431a52fc_dc4fa932",
        "filename": "test/cctest/interpreter/test-interpreter.cc",
        "patchSetId": 1
      },
      "lineNbr": 602,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2020-03-10T18:50:04Z",
      "side": 0,
      "message": "Suggestion: \"SUB\" in order to make the test sensitive to the arguments order.",
      "range": {
        "startLine": 602,
        "startChar": 37,
        "endLine": 602,
        "endChar": 40
      },
      "revId": "79398ab09d0623100d748ef17ab618d5c0c9e6a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dfba63d3_e94b2186",
        "filename": "test/cctest/interpreter/test-interpreter.cc",
        "patchSetId": 1
      },
      "lineNbr": 602,
      "author": {
        "id": 1368302
      },
      "writtenOn": "2020-03-13T09:53:17Z",
      "side": 0,
      "message": "The bytecode generated is this:\n         0x2fa60820e58e @    0 : 25 09             Ldar a0\n         0x2fa60820e590 @    2 : 34 08 00          Add a1, [0]\n         0x2fa60820e593 @    5 : 34 07 01          Add a2, [1]\n         0x2fa60820e596 @    8 : 34 06 02          Add a3, [2]\n         0x2fa60820e599 @   11 : 34 05 03          Add a4, [3]\n         0x2fa60820e59c @   14 : 34 04 04          Add a5, [4]\n         0x2fa60820e59f @   17 : 35 03 05          Sub a6, [5]\n         0x2fa60820e5a2 @   20 : 34 02 06          Add a7, [6]\n         0x2fa60820e5a5 @   23 : ab                Return \n\nThe semantics of the bytecode Sub is: LHS(argument) - RHS(accumulator).\nSo in this case LHS(7) - RHS(21) \u003d -15.\nTo finish, we add 8, so the result returned is -6, instead of 22.",
      "parentUuid": "431a52fc_dc4fa932",
      "range": {
        "startLine": 602,
        "startChar": 37,
        "endLine": 602,
        "endChar": 40
      },
      "revId": "79398ab09d0623100d748ef17ab618d5c0c9e6a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "00e07db1_b42be75c",
        "filename": "test/cctest/interpreter/test-interpreter.cc",
        "patchSetId": 1
      },
      "lineNbr": 602,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2020-03-13T11:39:43Z",
      "side": 0,
      "message": "Ack",
      "parentUuid": "dfba63d3_e94b2186",
      "range": {
        "startLine": 602,
        "startChar": 37,
        "endLine": 602,
        "endChar": 40
      },
      "revId": "79398ab09d0623100d748ef17ab618d5c0c9e6a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44387b97_5da258a9",
        "filename": "test/cctest/interpreter/test-interpreter.cc",
        "patchSetId": 1
      },
      "lineNbr": 624,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2020-03-10T18:50:04Z",
      "side": 0,
      "message": "If you follow the suggestion above then \"22\".",
      "range": {
        "startLine": 624,
        "startChar": 48,
        "endLine": 624,
        "endChar": 50
      },
      "revId": "79398ab09d0623100d748ef17ab618d5c0c9e6a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "346913c2_7568f5e6",
        "filename": "test/cctest/interpreter/test-interpreter.cc",
        "patchSetId": 1
      },
      "lineNbr": 624,
      "author": {
        "id": 1368302
      },
      "writtenOn": "2020-03-13T09:53:17Z",
      "side": 0,
      "message": "-6",
      "parentUuid": "44387b97_5da258a9",
      "range": {
        "startLine": 624,
        "startChar": 48,
        "endLine": 624,
        "endChar": 50
      },
      "revId": "79398ab09d0623100d748ef17ab618d5c0c9e6a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb244add_3525ca2a",
        "filename": "test/cctest/interpreter/test-interpreter.cc",
        "patchSetId": 1
      },
      "lineNbr": 624,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2020-03-13T11:39:43Z",
      "side": 0,
      "message": "Maybe add a comment\n// The code above computes 8 + 7 - (6 + 5 + 4 + 3 + 2 + 1)",
      "parentUuid": "346913c2_7568f5e6",
      "range": {
        "startLine": 624,
        "startChar": 48,
        "endLine": 624,
        "endChar": 50
      },
      "revId": "79398ab09d0623100d748ef17ab618d5c0c9e6a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}