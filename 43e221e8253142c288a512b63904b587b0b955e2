{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2fa70d0c_10176252",
        "filename": "src/heap/minor-gc-job.cc",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2023-08-30T11:01:20Z",
      "side": 0,
      "message": "Drive-by: This bailout was intended for the case where a GC happens between scheduling the task and actually running it. It assumed the task is scheduled on when the trigger is reached. We saw yesterday that this is not really the case (see lines 46-52 above), in which case the task would bailout without doing a GC even though it\u0027s still needed. I\u0027m replacing this bailout with a more explicit `CancelTask` method called on GC and the matching bailout in line 74.",
      "range": {
        "startLine": 73,
        "startChar": 2,
        "endLine": 74,
        "endChar": 11
      },
      "revId": "43e221e8253142c288a512b63904b587b0b955e2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "320d0e9e_cde52eab",
        "filename": "src/heap/minor-gc-job.cc",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2023-08-30T12:56:45Z",
      "side": 0,
      "message": "I would prefer if we could keep this similar to IncrementalMarkingJob in that we don\u0027t cancel the task but merely bail out when it runs.",
      "parentUuid": "2fa70d0c_10176252",
      "range": {
        "startLine": 73,
        "startChar": 2,
        "endLine": 74,
        "endChar": 11
      },
      "revId": "43e221e8253142c288a512b63904b587b0b955e2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3bf02ef_48eb1a66",
        "filename": "src/heap/minor-gc-job.cc",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2023-08-30T13:17:00Z",
      "side": 0,
      "message": "I don\u0027t see a reasonable way to have a bailout here based on young gen size that will be correct. With the existing bailout we could be, since we might schedule a task before we actually reach the trigger, bailing out of a GC here and ending up with a GC on allocation failure, even though we could have and should have GCed in the task.\nThat is imo unavoidable due to the refining allocated bytes after sweeping case.\nI think we need to revise this bailout to match its original meaning of \"no need to GC since we already GCed\".\nDo you have another idea how to achieve that?",
      "parentUuid": "320d0e9e_cde52eab",
      "range": {
        "startLine": 73,
        "startChar": 2,
        "endLine": 74,
        "endChar": 11
      },
      "revId": "43e221e8253142c288a512b63904b587b0b955e2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f14dc0d8_610324f6",
        "filename": "src/heap/minor-gc-job.cc",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2023-08-30T13:29:11Z",
      "side": 0,
      "message": "The other way is in IncrementalMarkingJob: Assuming that the Job is stale and just checking the necessary conditions. That requires reposting in case the condition doesn\u0027t hold (assuming we would otherwise post it anyways)\n\n(Refined bytes should just be ignored)\n\nHaving written up all that I am not sure it\u0027s strictly better. We can leave as is.",
      "parentUuid": "f3bf02ef_48eb1a66",
      "range": {
        "startLine": 73,
        "startChar": 2,
        "endLine": 74,
        "endChar": 11
      },
      "revId": "43e221e8253142c288a512b63904b587b0b955e2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40fe868b_4892ac84",
        "filename": "src/heap/minor-gc-job.cc",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2023-08-31T08:57:54Z",
      "side": 0,
      "message": "The issue with the IncrementalMarkingJob approach is the reposting. It\u0027s essentially what we had before, and we ended up with long reposting and bailing out cycles. A delayed task could have helped but I don\u0027t like that as a solution here. Perhaps a low priority task could have been appropriate, but even that would have problems.",
      "parentUuid": "f14dc0d8_610324f6",
      "range": {
        "startLine": 73,
        "startChar": 2,
        "endLine": 74,
        "endChar": 11
      },
      "revId": "43e221e8253142c288a512b63904b587b0b955e2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}