action_pool_depth
    Current value (from the default) = -1
      From //build/toolchain/BUILD.gn:10

    Pool for non goma tasks.

also_build_ash_chrome
    Current value (from the default) = false
      From //build/config/chromeos/ui_mode.gni:23

    Setting this to true when building LaCrOS-chrome will cause it to
    *also* build ash-chrome in a subdirectory using an alternate toolchain.
    Don't set this unless you're sure you want it, because it'll double
    your build time.

android_full_debug
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:51

    Normally, Android builds are lightly optimized, even for debug builds, to
    keep binary size down. Setting this flag to true disables such optimization

archive_seed_corpus
    Current value (from the default) = true
      From //build/config/sanitizers/sanitizers.gni:119

    When true, seed corpora archives are built.

auto_profile_path
    Current value (from the default) = ""
      From //build/config/compiler/BUILD.gn:79

    AFDO (Automatic Feedback Directed Optimizer) is a form of profile-guided
    optimization that GCC supports. It used by ChromeOS in their official
    builds. To use it, set auto_profile_path to the path to a file containing
    the needed gcov profiling data.

branding_file_path
    Current value (from the default) = "//chrome/app/theme/chromium/BRANDING"
      From //build/config/chrome_build.gni:24

    The path to the BRANDING file in chrome/app/theme.

branding_path_component
    Current value (from the default) = "chromium"
      From //build/config/chrome_build.gni:18

cast_is_debug
    Current value (from the default) = true
      From //build/config/chromecast_build.gni:16

    If true, IS_CAST_DEBUG_BUILD() will evaluate to 1 in version.h. Otherwise,
    it will evaluate to 0. Overriding this when is_debug=false is useful for
    doing engineering builds.

cc_wrapper
    Current value (from the default) = ""
      From //build/toolchain/cc_wrapper.gni:36

    Set to "ccache", "icecc" or "distcc".  Probably doesn't work on windows.

chrome_pgo_phase
    Current value (from the default) = 0
      From //build/config/compiler/pgo/pgo.gni:14

    Specify the current PGO phase.
    Here's the different values that can be used:
        0 : Means that PGO is turned off.
        1 : Used during the PGI (instrumentation) phase.
        2 : Used during the PGO (optimization) phase.

chromecast_branding
    Current value (from the default) = "public"
      From //build/config/chromecast_build.gni:20

    chromecast_branding is used to include or exclude Google-branded components.
    Set it to "public" for a Chromium build.

chromeos_afdo_platform
    Current value (from the default) = "atom"
      From //build/config/compiler/BUILD.gn:102

    This configuration is used to select a default profile in Chrome OS based on
    the microarchitectures we are using. This is only used if
    clang_use_default_sample_profile is true and clang_sample_profile_path is
    empty.

chromeos_is_browser_only
    Current value (from the default) = false
      From //build/config/chromeos/ui_mode.gni:17

    Deprecated, use is_lacros.
   
    This controls UI configuration for Chrome.
    If this flag is set, we assume Chrome runs on Chrome OS devices, using
    Wayland (instead of X11).
   
    TODO(crbug.com/1052397):
    Define chromeos_product instead, which takes either "browser" or "ash".
    Re-define the following variables as:
    is_lacros = chromeos_product == "browser"
    is_ash = chromeos_product == "ash"

clang_base_path
    Current value (from the default) = "//third_party/llvm-build/Release+Asserts"
      From //build/config/clang/clang.gni:17

clang_diagnostic_dir
    Current value (from the default) = "../../tools/clang/crashreports"
      From //build/config/compiler/compiler.gni:102

clang_emit_debug_info_for_profiling
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:105

    Emit debug information for profiling wile building with clang.

clang_sample_profile_path
    Current value (from the default) = ""
      From //build/config/compiler/BUILD.gn:86

    Path to an AFDO profile to use while building with clang, if any. Empty
    implies none.

clang_use_chrome_plugins
    Current value (from the default) = true
      From //build/config/clang/clang.gni:14

clang_use_default_sample_profile
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:95

clang_version
    Current value (from the default) = "13.0.0"
      From //build/toolchain/toolchain.gni:40

compiler_timing
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:108

    Turn this on to have the compiler output extra timing information.

compute_build_timestamp
    Current value (from the default) = "compute_build_timestamp.py"
      From //build/timestamp.gni:17

    This should be the filename of a script that prints a single line
    containing an integer that's a unix timestamp in UTC.
    This timestamp is used as build time and will be compiled into
    other code.
   
    This argument may look unused. Before removing please check with the
    chromecast team to see if they still use it internally.

concurrent_links
    Current value (from the default) = -1
      From //build/toolchain/concurrent_links.gni:23

    Limit the number of concurrent links; we often want to run fewer
    links at once than we do compiles, because linking is memory-intensive.
    The default to use varies by platform and by the amount of memory
    available, so we call out to a script to get the right value.

coverage_instrumentation_input_file
    Current value (from the default) = ""
      From //build/config/coverage/coverage.gni:29

    The path to the coverage instrumentation input file should be a source root
    absolute path (e.g. //out/Release/coverage_instrumentation_input.txt), and
    the file consists of multiple lines where each line represents a path to a
    source file, and the paths must be relative to the root build directory.
    e.g. ../../base/task/post_task.cc for build directory 'out/Release'.
   
    NOTE that this arg will be non-op if use_clang_coverage is false.

cppgc_enable_caged_heap
    Current value (from the default) = true
      From //BUILD.gn:265

    Enable heap reservation of size 4GB. Only possible for 64bit archs.

cppgc_enable_object_names
    Current value (from the default) = false
      From //BUILD.gn:262

    Enable object names in cppgc for debug purposes.

cppgc_enable_young_generation
    Current value (from the default) = false
      From //BUILD.gn:268

    Enable young generation in cppgc.

cppgc_is_standalone
    Current value (from the default) = false
      From //gni/v8.gni:86

cros_board
    Current value (from the default) = ""
      From //build/config/chromeos/args.gni:8

    This is used only by Simple Chrome to bind its value to test-runner scripts
    generated at build-time.

cros_sdk_version
    Current value (from the default) = ""
      From //build/config/chromeos/args.gni:12

    Similar to cros_board above, this used only by test-runner scripts in
    Simple Chrome.

current_cpu
    Current value (from the default) = ""
      (Internally set; try `gn help current_cpu`.)

current_os
    Current value (from the default) = ""
      (Internally set; try `gn help current_os`.)

custom_toolchain
    Current value (from the default) = ""
      From //build/config/BUILDCONFIG.gn:141

    Allows the path to a custom target toolchain to be injected as a single
    argument, and set as the default toolchain.

dcheck_always_on
    Current value (from the default) = false
      From //build/config/dcheck_always_on.gni:14

    Set to true to enable dcheck in Release builds.

dcheck_is_configurable
    Current value (from the default) = false
      From //build/config/dcheck_always_on.gni:9

    Enables DCHECKs to be built-in, but to default to being non-fatal/log-only.
    DCHECKS can then be set as fatal/non-fatal via the DCheckIsFatal feature.
    See https://bit.ly/dcheck-albatross for details on how this is used.

disable_libfuzzer
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:97

    Helper variable for testing builds with disabled libfuzzer.
    Not for client use.

enable_call_graph_profile_sort
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:158

    Turn off the --call-graph-profile-sort flag for lld by default. Enable
    selectively for targets where it's beneficial.

enable_cast_renderer
    Current value (from the default) = false
      From //build/config/chromecast_build.gni:49

    True to enable the cast renderer.  It is enabled by default for linux and
    android audio only builds.

enable_cet_shadow_stack
    Current value (from the default) = true
      From //build/config/compiler/compiler.gni:109

    Mark binaries as compatible with Shadow Stack of Control-flow Enforcement
    Technology (CET). If Windows version and hardware supports the feature and
    it's enabled by OS then additional validation of return address will be
    performed as mitigation against Return-oriented programming (ROP).
    https://chromium.googlesource.com/chromium/src/+/master/docs/design/sandbox.md#cet-shadow-stack

enable_dsyms
    Current value (from the default) = false
      From //build/config/mac/symbols.gni:17

    Produce dSYM files for targets that are configured to do so. dSYM
    generation is controlled globally as it is a linker output (produced via
    the //build/toolchain/mac/linker_driver.py. Enabling this will result in
    all shared library, loadable module, and executable targets having a dSYM
    generated.

enable_full_stack_frames_for_profiling
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:58

    Compile in such a way as to make it possible for the profiler to unwind full
    stack frames. Setting this flag has a large effect on the performance of the
    generated code than just setting profiling, but gives the profiler more
    information to analyze.
    Requires profiling to be set to true.

enable_iterator_debugging
    Current value (from the default) = false
      From //build/config/c++/c++.gni:42

    When set, enables libc++ debug mode with iterator debugging.
   
    Iterator debugging is generally useful for catching bugs. But it can
    introduce extra locking to check the state of an iterator against the state
    of the current object. For iterator- and thread-heavy code, this can
    significantly slow execution - two orders of magnitude slowdown has been
    seen (crbug.com/903553) and iterator debugging also slows builds by making
    generation of snapshot_blob.bin take ~40-60 s longer. Therefore this
    defaults to off.

enable_modular_updater
    Current value (from the default) = false
      From //build/config/chromecast_build.gni:30

    Set true to enable modular_updater.

enable_precompiled_headers
    Current value (from the default) = false
      From //build/config/pch.gni:15

enable_profiling
    Current value (from the default) = false
      From //build/config/compiler/compiler.gni:51

    Compile in such a way as to enable profiling of the generated code. For
    example, don't omit the frame pointer and leave in symbols.

enable_segment_heap
    Current value (from the default) = false
      From //build/config/win/manifest.gni:46

enable_stripping
    Current value (from the default) = false
      From //build/config/mac/symbols.gni:24

    Strip symbols from linked targets by default. If this is enabled, the
    //build/config/mac:strip_all config will be applied to all linked targets.
    If custom stripping parameters are required, remove that config from a
    linked target and apply custom -Wcrl,strip flags. See
    //build/toolchain/mac/linker_driver.py for more information.

enable_wmax_tokens
    Current value (from the default) = true
      From //build/config/compiler/BUILD.gn:149

exclude_unwind_tables
    Current value (from the default) = false
      From //build/config/compiler/compiler.gni:98

    Exclude unwind tables by default for official builds as unwinding can be
    done from stack dumps produced by Crashpad at a later time "offline" in the
    crash server. Since this increases binary size, we don't recommend including
    them in shipping builds.
    For unofficial (e.g. development) builds and non-Chrome branded (e.g. Cronet
    which doesn't use Crashpad, crbug.com/479283) builds it's useful to be able
    to unwind at runtime.

fatal_linker_warnings
    Current value (from the default) = true
      From //build/config/compiler/BUILD.gn:68

    Enable fatal linker warnings. Building Chromium with certain versions
    of binutils can cause linker warning.
    TODO(thakis): Set this to true unconditionally once lld/MachO bring-up
    is along far enough that it no longer emits linker warnings.

forbid_non_component_debug_builds
    Current value (from the default) = false
      From //build/config/compiler/compiler.gni:89

    Whether an error should be raised on attempts to make debug builds with
    is_component_build=false. Very large debug symbols can have unwanted side
    effects so this is enforced by default for chromium.

generate_linker_map
    Current value (from the default) = false
      From //build/toolchain/toolchain.gni:25

    Used for binary size analysis.

gold_path
    Current value (from the default) = ""
      From //build/config/compiler/BUILD.gn:62

    When we are going to use gold we need to find it.
    This is initialized below, after use_gold might have been overridden.

goma_dir
    Current value (from the default) = ""
      From //build/toolchain/goma.gni:17

    Absolute directory containing the gomacc binary.

host_byteorder
    Current value (from the default) = "undefined"
      From //build/config/host_byteorder.gni:9

host_cpu
    Current value (from the default) = "x64"
      (Internally set; try `gn help host_cpu`.)

host_os
    Current value (from the default) = "win"
      (Internally set; try `gn help host_os`.)

host_toolchain
    Current value (from the default) = ""
      From //build/config/BUILDCONFIG.gn:145

    This should not normally be set as a build argument.  It's here so that
    every toolchain can pass through the "global" value via toolchain_args().

icu_disable_thin_archive
    Current value (from the default) = false
      From //third_party/icu/config.gni:12

    If true, compile icu into a standalone static library. Currently this is
    only useful on Chrome OS.

icu_use_data_file
    Current value (from the default) = true
      From //third_party/icu/config.gni:8

    Tells icu to load an external data file rather than rely on the icudata
    being linked directly into the binary.

init_stack_vars
    Current value (from the default) = true
      From //build/config/compiler/BUILD.gn:135

    Initialize all local variables with a pattern. This flag will fill
    uninitialized floating-point types (and 32-bit pointers) with 0xFF and the
    rest with 0xAA. This makes behavior of uninitialized memory bugs consistent,
    recognizable in the debugger, and crashes on memory accesses through
    uninitialized pointers.
   
    TODO(crbug.com/1131993): Enabling this when 'is_android' is true breaks
    content_shell_test_apk on both ARM and x86.
   
    TODO(crbug.com/977230): Enabling this when 'use_xcode_clang' is true may
    call an old clang that doesn't support auto-init.

ios_deployment_target
    Current value (from the default) = "12.2"
      From //build/config/ios/ios_sdk_overrides.gni:10

    Version of iOS that we're targeting.

ios_use_goma_rbe
    Current value (from the default) = -1
      From //build/toolchain/goma.gni:31

    Deprecated and ignored as Goma RBE is now the default. Still exists
    to avoid breaking the build on the bots. Will be removed when all
    bots have been configured to not set this variable.

is_asan
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:14

    Compile for Address Sanitizer to find memory bugs.

is_cast_audio_only
    Current value (from the default) = false
      From //build/config/chromecast_build.gni:23

    Set this true for an audio-only Chromecast build.

is_cast_desktop_build
    Current value (from the default) = false
      From //build/config/chromecast_build.gni:42

    True if Chromecast build is targeted for linux desktop. This type of build
    is useful for testing and development, but currently supports only a subset
    of Cast functionality. Though this defaults to true for x86 Linux devices,
    this should be overriden manually for an embedded x86 build.
    TODO(slan): Remove instances of this when x86 is a fully supported platform.

is_cfi
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:62

is_chrome_branded
    Current value (from the default) = false
      From //build/config/chrome_build.gni:9

    Select the desired branding flavor. False means normal Chromium branding,
    true means official Google Chrome branding (requires extra Google-internal
    resources).

is_chromecast
    Current value (from the default) = false
      From //build/config/chromecast_build.gni:11

    Set this true for a Chromecast build. Chromecast builds are supported on
    Linux and Android.

is_chromeos_device
    Current value (from the default) = false
      From //build/config/chromeos/args.gni:26

    Determines if we're building for a Chrome OS device (or VM) and not just
    linux-chromeos. NOTE: Most test targets in Chrome expect to run under
    linux-chromeos, so some have compile-time asserts that intentionally fail
    when this build flag is set. Build and run the tests for linux-chromeos
    instead.
    https://chromium.googlesource.com/chromium/src/+/master/docs/chromeos_build_instructions.md
    https://chromium.googlesource.com/chromiumos/docs/+/master/simple_chrome_workflow.md

is_clang
    Current value (from the default) = true
      From //build/config/BUILDCONFIG.gn:134

    Set to true when compiling with the Clang compiler.

is_component_build
    Current value = false
      From //out/Default/args.gn:5
    Overridden from the default = true
      From //build/config/BUILDCONFIG.gn:162

    Component build. Setting to true compiles targets declared as "components"
    as shared libraries loaded dynamically. This speeds up development time.
    When false, components will be linked statically.
   
    For more information see
    https://chromium.googlesource.com/chromium/src/+/master/docs/component_build.md

is_debug
    Current value = true
      From //out/Default/args.gn:3
    Overridden from the default = true
      From //build/config/BUILDCONFIG.gn:152

    Debug build. Enabling official builds automatically sets is_debug to false.

is_hwasan
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:19

    Compile for Hardware-Assisted Address Sanitizer to find memory bugs
    (android/arm64 only).
    See http://clang.llvm.org/docs/HardwareAssistedAddressSanitizerDesign.html

is_lsan
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:22

    Compile for Leak Sanitizer to find leaks.

is_msan
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:25

    Compile for Memory Sanitizer to find uninitialized reads.

is_official_build
    Current value (from the default) = false
      From //build/config/BUILDCONFIG.gn:131

    Set to enable the official build level of optimization. This has nothing
    to do with branding, but enables an additional level of optimization above
    release (!is_debug). This might be better expressed as a tri-state
    (debug, release, official) but for historical reasons there are two
    separate flags.

is_tsan
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:28

    Compile for Thread Sanitizer to find threading bugs.

is_ubsan
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:32

    Compile for Undefined Behaviour Sanitizer to find various types of
    undefined behaviour (excludes vptr checks).

is_ubsan_no_recover
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:35

    Halt the program if a problem is detected.

is_ubsan_null
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:38

    Compile for Undefined Behaviour Sanitizer's null pointer checks.

is_ubsan_security
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:93

    Enables core ubsan security features. Will later be removed once it matches
    is_ubsan.

is_ubsan_vptr
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:41

    Compile for Undefined Behaviour Sanitizer's vptr checks.

libcxx_abi_unstable
    Current value (from the default) = true
      From //build/config/c++/BUILD.gn:19

    lldb pretty printing only works when libc++ is built in the __1 (or __ndk1)
    namespaces.  For pretty printing to work out-of-the-box on Mac (where lldb
    is primarily used), this flag is set to false to build with the __1
    namespace (to maintain ABI compatibility, this implies building without
    _LIBCPP_ABI_UNSTABLE).  This is not necessary on non-component builds
    because we leave the ABI version set to __1 in that case because libc++
    symbols are not exported.
    TODO(thomasanderson): Set this to true by default once rL352899 is available
    in MacOS's lldb.

libcxx_is_shared
    Current value (from the default) = false
      From //build/config/c++/c++.gni:56

    WARNING: Setting this to a non-default value is highly discouraged.
    If true, libc++ will be built as a shared library; otherwise libc++ will be
    linked statically. Setting this to something other than the default is
    unsupported and can be broken by libc++ rolls. Note that if this is set to
    true, you must also set libcxx_abi_unstable=false, which is bad for
    performance and memory use.

libcxx_natvis_include
    Current value (from the default) = true
      From //build/config/c++/c++.gni:31

    Builds libcxx Natvis into the symbols for type visualization.
    Set to false to workaround http://crbug.com/966676 and
    http://crbug.com/966687.

libcxx_revision
    Current value (from the default) = "8fa87946779682841e21e2da977eccfb6cb3bded"
      From //buildtools/deps_revisions.gni:8

    Used to cause full rebuilds on libc++ rolls. This should be kept in sync
    with the libcxx_revision vars in //DEPS and //buildtools/DEPS.

llvm_force_head_revision
    Current value (from the default) = false
      From //build/toolchain/toolchain.gni:17

    If this is set to true, we use the revision in the llvm repo to determine
    the CLANG_REVISION to use, instead of the version hard-coded into
    //tools/clang/scripts/update.py. This should only be used in
    conjunction with setting the llvm_force_head_revision DEPS variable when
    `gclient runhooks` is run as well.

mac_sdk_min
    Current value (from the default) = "10.15"
      From //build/config/mac/mac_sdk_overrides.gni:12

mips_use_mmi
    Current value (from the default) = false
      From //build/config/mips.gni:13

    MIPS MultiMedia Instruction compilation flag.

msan_track_origins
    Current value (from the default) = 2
      From //build/config/sanitizers/sanitizers.gni:46

    Track where uninitialized memory originates from. From fastest to slowest:
    0 - no tracking, 1 - track only the initial allocation site, 2 - track the
    chain of stores leading from allocation site to use site.

needs_gomacc_path_arg
    Current value (from the default) = false
      From //build/toolchain/goma.gni:14

    This flag is for ChromeOS compiler wrapper.
    By passing gomacc path via cmd-line arg, ChromeOS' compiler wrapper
    invokes gomacc inside it.

optimize_for_fuzzing
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:101

    Optimize for coverage guided fuzzing (balance between speed and number of
    branches). Can be also used to remove non-determinism and other issues.

pgo_data_path
    Current value (from the default) = ""
      From //build/config/compiler/pgo/pgo.gni:24

    When using chrome_pgo_phase = 2, read profile data from this path.

proprietary_codecs
    Current value (from the default) = false
      From //build/config/features.gni:26

    Enables proprietary codecs and demuxers; e.g. H264, AAC, MP3, and MP4.
    We always build Google Chrome and Chromecast with proprietary codecs.
   
    Note: this flag is used by WebRTC which is DEPSed into Chrome. Moving it
    out of //build will require using the build_overrides directory.

sample_profile_is_accurate
    Current value (from the default) = false
      From //build/config/compiler/compiler.gni:125

    Whether we should consider the profile we're using to be accurate. Accurate
    profiles have the benefit of (potentially substantial) binary size
    reductions, by instructing the compiler to optimize cold and uncovered
    functions heavily for size. This often comes at the cost of performance.

sanitizer_coverage_flags
    Current value (from the default) = ""
      From //build/config/sanitizers/sanitizers.gni:111

    Value for -fsanitize-coverage flag. Setting this causes
    use_sanitizer_coverage to be enabled.
    This flag is not used for libFuzzer (use_libfuzzer=true). Instead, we use:
        -fsanitize=fuzzer-no-link
    Default value when unset and use_fuzzing_engine=true:
        trace-pc-guard
    Default value when unset and use_sanitizer_coverage=true:
        trace-pc-guard,indirect-calls

strip_debug_info
    Current value (from the default) = false
      From //build/config/compiler/compiler.gni:47

    Android-only: Strip the debug info of libraries within lib.unstripped to
    reduce size. As long as symbol_level > 0, this will still allow stacks to be
    symbolized.

symbol_level
    Current value = 2
      From //out/Default/args.gn:4
    Overridden from the default = -1
      From //build/config/compiler/compiler.gni:42

    How many symbols to include in the build. This affects the performance of
    the build since the symbols are large and dealing with them is slow.
      2 means regular build with symbols.
      1 means minimal symbols, usually enough for backtraces only. Symbols with
    internal linkage (static functions or those in anonymous namespaces) may not
    appear when using this level.
      0 means no symbols.
      -1 means auto-set according to debug/release and platform.

target_cpu
    Current value (from the default) = ""
      (Internally set; try `gn help target_cpu`.)

target_os
    Current value (from the default) = ""
      (Internally set; try `gn help target_os`.)

target_rpath
    Current value (from the default) = ""
      From //build/config/chromecast_build.gni:27

    If non empty, rpath of executables is set to this.
    If empty, default value is used.

target_winuwp_family
    Current value (from the default) = "app"
      From //build/config/win/BUILD.gn:33

    possible values:
      "app" - Windows Store Applications
      "phone" - Windows Phone Applications
      "system" - Windows Drivers and Tools
      "server" - Windows Server Applications
      "desktop" - Windows Desktop Applications

target_winuwp_version
    Current value (from the default) = "10"
      From //build/config/win/BUILD.gn:25

    possible values for target_winuwp_version:
      "10" - Windows UWP 10
      "8.1" - Windows RT 8.1
      "8.0" - Windows RT 8.0

thin_lto_enable_optimizations
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:122

toolkit_views
    Current value (from the default) = true
      From //build/config/ui.gni:41

    True means the UI is built using the "views" framework.

treat_warnings_as_errors
    Current value (from the default) = true
      From //build/config/compiler/compiler.gni:32

    Default to warnings as errors for default workflow, where we catch
    warnings with known toolchains. Allow overriding this e.g. for Chromium
    builds on Linux that could use a different version of the compiler.
    With GCC, warnings in no-Chromium code are always not treated as errors.

use_afl
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:86

    Compile for fuzzing with AFL.

use_aura
    Current value (from the default) = true
      From //build/config/ui.gni:36

    Indicates if Aura is enabled. Aura is a low-level windowing library, sort
    of a replacement for GDI or GTK.

use_cfi_cast
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:126

    Enable checks for bad casts: derived cast and unrelated cast.
    TODO(krasin): remove this, when we're ready to add these checks by default.
    https://crbug.com/626794

use_cfi_diag
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:75

    Print detailed diagnostics when Control Flow Integrity detects a violation.

use_cfi_icall
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:71

    Enable checks for indirect function calls via a function pointer.
    TODO(pcc): remove this when we're ready to add these checks by default.
    https://crbug.com/701919
   
    TODO(crbug.com/1159424): Reassess the validity of the next expression.

use_cfi_recover
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:79

    Let Control Flow Integrity continue execution instead of crashing when
    printing diagnostics (use_cfi_diag = true).

use_clang_coverage
    Current value (from the default) = false
      From //build/config/coverage/coverage.gni:17

    Enable Clang's Source-based Code Coverage.

use_clang_diagnostics_format
    Current value (from the default) = false
      From //build/config/win/BUILD.gn:42

    Set this to use clang-style diagnostics format instead of MSVC-style, which
    is useful in e.g. Emacs compilation mode.
    E.g.:
     Without this, clang emits a diagnostic message like this:
       foo/bar.cc(12,34): error: something went wrong
     and with this switch, clang emits it like this:
       foo/bar.cc:12:34: error: something went wrong

use_clang_profiling
    Current value (from the default) = false
      From //build/config/profiling/profiling.gni:10

use_clang_profiling_inside_sandbox
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:177

use_custom_libcxx
    Current value (from the default) = true
      From //build/config/c++/c++.gni:14

    Use in-tree libc++ (buildtools/third_party/libc++ and
    buildtools/third_party/libc++abi) instead of the system C++ library for C++
    standard library support.
    Don't check in changes that set this to false for more platforms; doing so
    is not supported.

use_custom_libcxx_for_host
    Current value (from the default) = false
      From //build/config/c++/c++.gni:26

    Use libc++ instead of stdlibc++ when using the host_cpu toolchain, even if
    use_custom_libcxx is false. This is useful for cross-compiles where a custom
    toolchain for the target_cpu has been set as the default toolchain, but
    use_custom_libcxx should still be true when building for the host.  The
    expected usage is to set use_custom_libcxx=false and
    use_custom_libcxx_for_host=true in the passed in buildargs.

use_cxx11
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:82

    Allow projects that wish to stay on C++11 to override Chromium's default.

use_cxx11_on_android
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:174

    C++11 may not be an option if Android test infrastructure is used.

use_dbus
    Current value (from the default) = false
      From //build/config/features.gni:31

use_debug_fission
    Current value (from the default) = "default"
      From //build/config/compiler/compiler.gni:63

    use_debug_fission: whether to use split DWARF debug info
    files. This can reduce link time significantly, but is incompatible
    with some utilities such as icecc and ccache. Requires gold and
    gcc >= 4.8 or clang.
    http://gcc.gnu.org/wiki/DebugFission
   
    This is a placeholder value indicating that the code below should set
    the default.  This is necessary to delay the evaluation of the default
    value expression until after its input values such as use_gold have
    been set, e.g. by a toolchain_args() block.

use_dummy_lastchange
    Current value (from the default) = false
      From //build/util/lastchange.gni:9

use_dwarf5
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:161

    Enable DWARF v5.

use_external_fuzzing_engine
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:89

    Compile for fuzzing with an external engine (e.g., Grammarinator).

use_full_pdb_paths
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:169

    Override this to put full paths to PDBs in Windows PE files. This helps
    windbg and Windows Performance Analyzer with finding the PDBs in some local-
    build scenarios. This is never needed for bots or official builds. Because
    this puts the output directory in the DLLs/EXEs it breaks build determinism.
    Bugs have been reported to the windbg/WPA teams and this workaround will be
    removed when they are fixed.

use_ghash
    Current value (from the default) = true
      From //build/config/compiler/BUILD.gn:112

    Turn this on to use ghash feature of lld for faster debug link on Windows.
    http://blog.llvm.org/2018/01/improving-link-time-on-windows-with.html

use_gio
    Current value (from the default) = false
      From //build/config/features.gni:33

use_glib
    Current value (from the default) = false
      From //build/config/ui.gni:45

    TODO(crbug.com/1171629): Remove is_chromeos_lacros.
    Whether we should use glib, a low level C utility library.

use_gold
    Current value (from the default) = false
      From //build/config/compiler/compiler.gni:204

    Whether to use the gold linker from binutils instead of lld or bfd.

use_goma
    Current value (from the default) = false
      From //build/toolchain/goma.gni:9

    Set to true to enable distributed compilation using Goma.

use_goma_thin_lto
    Current value (from the default) = false
      From //build/config/compiler/compiler.gni:77

    If true, use Goma for ThinLTO code generation where applicable.

use_icf
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:188

use_jacoco_coverage
    Current value (from the default) = false
      From //build/config/coverage/coverage.gni:20

    Enables JaCoCo Java code coverage.

use_java_goma
    Current value (from the default) = false
      From //build/toolchain/goma.gni:26

    TODO(crbug.com/726475): true if use_goma = true in the future.

use_libfuzzer
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:83

    Compile for fuzzing with LLVM LibFuzzer.
    See http://www.chromium.org/developers/testing/libfuzzer

use_lld
    Current value (from the default) = true
      From //build/config/compiler/compiler.gni:199

    Set to true to use lld, the LLVM linker.
    Not supported for macOS (see docs/mac_lld.md), and not functional at all for
    iOS. The default linker everywhere else.

use_locally_built_instrumented_libraries
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:50

    Use dynamic libraries instrumented by one of the sanitizers instead of the
    standard system libraries. Set this flag to build the libraries from source.

use_ozone
    Current value (from the default) = false
      From //build/config/ui.gni:27

use_rtti
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:73

    Build with C++ RTTI enabled. Chromium builds without RTTI by default,
    but some sanitizers are known to require it, like CFI diagnostics
    and UBsan variants.

use_sanitizer_configs_without_instrumentation
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:116

    When enabled, only relevant sanitizer defines are set, but compilation
    happens with no extra flags. This is useful when in component build
    enabling sanitizers only in some of the components.

use_sanitizer_coverage
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:168

use_text_section_splitting
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:144

    This argument is to control whether enabling text section splitting in the
    final binary. When enabled, the separated text sections with prefix
    '.text.hot', '.text.unlikely', '.text.startup' and '.text.exit' will not be
    merged to '.text' section. This allows us to identify the hot code section
    ('.text.hot') in the binary which may be mlocked or mapped to huge page to
    reduce TLB misses which gives performance improvement on cpu usage.
    The gold linker by default has text section splitting enabled.

use_thin_lto
    Current value (from the default) = false
      From //build/config/compiler/compiler.gni:70

    Enables support for ThinLTO, which links 3x-10x faster than full LTO. See
    also http://blog.llvm.org/2016/06/thinlto-scalable-and-incremental-lto.html
    Use it by default on official-optimized android and Chrome OS builds, but
    not ARC or linux-chromeos since it's been seen to not play nicely with
    Chrome's clang. crbug.com/1033839

use_udev
    Current value (from the default) = false
      From //build/config/features.gni:29

    libudev usage. This currently only affects the content layer.

use_x11
    Current value (from the default) = false
      From //build/config/ui.gni:32

    Indicates if the UI toolkit depends on X11.
    Enabled by default. Can be disabled if Ozone only build is required and
    vice-versa.

use_xcode_clang
    Current value (from the default) = false
      From //build/toolchain/toolchain.gni:22

    Compile with Xcode version of clang instead of hermetic version shipped
    with the build. Used to be used iOS for official builds, but is now off by
    default for all configurations.

using_mismatched_sample_profile
    Current value (from the default) = false
      From //build/config/compiler/compiler.gni:84

    Whether we're using a sample profile collected on an architecture different
    than the one we're compiling for.
   
    It's currently not possible to collect AFDO profiles on anything but
    x86{,_64}.

v8_android_log_stdout
    Current value (from the default) = false
      From //BUILD.gn:31

    Print to stdout on Android.

v8_builtins_profiling_log_file
    Current value (from the default) = ""
      From //BUILD.gn:166

    Provides the given V8 log file as an input to mksnapshot, where it can be
    used for profile-guided optimization of builtins.
   
    To do profile-guided optimizations of builtins:
    1. Build with v8_enable_builtins_profiling = true
    2. Run your chosen workload with the --turbo-profiling-log-builtins flag.
       For Chrome, the invocation might look like this:
         chrome --no-sandbox --disable-extensions
           --js-flags="--turbo-profiling-log-builtins --logfile=path/to/v8.log"
           "http://localhost/test-suite"
    3. Optionally repeat step 2 for additional workloads, and concatenate all of
       the resulting log files into a single file.
    4. Build again with v8_builtins_profiling_log_file set to the file created
       in steps 2-3.

v8_can_use_fpu_instructions
    Current value (from the default) = true
      From //BUILD.gn:186

    Similar to vfp but on MIPS.

v8_check_header_includes
    Current value (from the default) = false
      From //BUILD.gn:216

    Check that each header can be included in isolation (requires also
    setting the "check_v8_header_includes" gclient variable to run a
    specific hook).

v8_check_microtasks_scopes_consistency
    Current value (from the default) = ""
      From //BUILD.gn:200

    Temporary flag to allow embedders to update their microtasks scopes
    while rolling in a new version of V8.

v8_code_coverage
    Current value (from the default) = false
      From //gni/v8.gni:13

    Set flags for tracking code coverage. Uses gcov with gcc and sanitizer
    coverage with clang.

v8_control_flow_integrity
    Current value (from the default) = false
      From //BUILD.gn:259

    Enable control-flow integrity features, such as pointer authentication for
    ARM64.

v8_correctness_fuzzer
    Current value (from the default) = false
      From //gni/v8.gni:16

    Includes files needed for correctness fuzzing.

v8_current_cpu
    Current value (from the default) = "x64"
      From //build/config/v8_target_cpu.gni:60

    This argument is declared here so that it can be overridden in toolchains.
    It should never be explicitly set by the user.

v8_custom_deps
    Current value (from the default) = ""
      From //BUILD.gn:34

    Dynamically set an additional dependency from v8/custom_deps.

v8_deprecation_warnings
    Current value (from the default) = true
      From //BUILD.gn:56

    Enable compiler warnings when using V8_DEPRECATED apis.

v8_dict_mode_prototypes
    Current value (from the default) = false
      From //BUILD.gn:284

    Experimental feature for always keeping prototypes in dict/"slow" mode
    Sets -DV8_DICT_MODE_PROTOTYPES

v8_dict_property_const_tracking
    Current value (from the default) = false
      From //BUILD.gn:294

    Experimental feature for tracking constness of properties in non-global
    dictionaries. Enabling this also always keeps prototypes in dict mode,
    meaning that they are not switched to fast mode.
    Sets -DV8_DICT_PROPERTY_CONST_TRACKING

v8_disable_write_barriers
    Current value (from the default) = false
      From //BUILD.gn:236

    Disable write barriers when GCs are non-incremental and
    heap has single generation.

v8_embed_script
    Current value (from the default) = ""
      From //BUILD.gn:62

    Embeds the given script into the snapshot.

v8_embedder_string
    Current value (from the default) = ""
      From //BUILD.gn:65

    Allows the embedder to add a custom suffix to the version string.

v8_enable_31bit_smis_on_64bit_arch
    Current value (from the default) = false
      From //BUILD.gn:111

v8_enable_atomic_marking_state
    Current value (from the default) = ""
      From //BUILD.gn:135

    Sets -dV8_ATOMIC_MARKING_STATE

v8_enable_atomic_object_field_writes
    Current value (from the default) = ""
      From //BUILD.gn:132

    Sets -dV8_ATOMIC_OBJECT_FIELD_WRITES and turns all field write operations
    into relaxed atomic operations.

v8_enable_backtrace
    Current value (from the default) = ""
      From //gni/v8.gni:32

    Support for backtrace_symbols on linux.

v8_enable_builtins_profiling
    Current value (from the default) = false
      From //BUILD.gn:144

    Runs mksnapshot with --turbo-profiling. After building in this
    configuration, any subsequent run of d8 will output information about usage
    of basic blocks in builtins.

v8_enable_builtins_profiling_verbose
    Current value (from the default) = false
      From //BUILD.gn:150

    Runs mksnapshot with --turbo-profiling-verbose. After building in this
    configuration, any subsequent run of d8 will output information about usage
    of basic blocks in builtins, including the schedule and disassembly of all
    used builtins.

v8_enable_concurrent_marking
    Current value (from the default) = true
      From //BUILD.gn:139

    Controls the default values of v8_enable_atomic_object_field_writes and
    v8_enable_concurrent_marking_state. See the default setting code below.

v8_enable_conservative_stack_scanning
    Current value (from the default) = false
      From //gni/v8.gni:82

    Scan the call stack conservatively during garbage collection.

v8_enable_debugging_features
    Current value (from the default) = true
      From //BUILD.gn:38

    Turns on all V8 debug features. Enables running V8 in a pseudo debug mode
    within a release Chrome.

v8_enable_disassembler
    Current value (from the default) = ""
      From //BUILD.gn:68

    Sets -dENABLE_DISASSEMBLER.

v8_enable_fast_mksnapshot
    Current value (from the default) = false
      From //BUILD.gn:89

    Enable fast mksnapshot runs.

v8_enable_fast_torque
    Current value (from the default) = ""
      From //BUILD.gn:92

    Optimize code for Torque executable, even during a debug build.

v8_enable_future
    Current value (from the default) = false
      From //BUILD.gn:41

    Sets -DV8_ENABLE_FUTURE.

v8_enable_gdbjit
    Current value (from the default) = false
      From //BUILD.gn:194

v8_enable_google_benchmark
    Current value (from the default) = false
      From //gni/v8.gni:84

v8_enable_handle_zapping
    Current value (from the default) = true
      From //BUILD.gn:83

    Sets -dENABLE_HANDLE_ZAPPING.

v8_enable_heap_sandbox
    Current value (from the default) = ""
      From //BUILD.gn:276

    Enable V8 heap sandbox experimental feature.
    Sets -DV8_HEAP_SANDBOX.

v8_enable_i18n_support
    Current value (from the default) = true
      From //gni/v8.gni:47

    Enable ECMAScript Internationalization API. Enabling this feature will
    add a dependency on the ICU library.

v8_enable_lazy_source_positions
    Current value (from the default) = true
      From //BUILD.gn:223

    Enable lazy source positions by default.

v8_enable_lite_mode
    Current value (from the default) = false
      From //gni/v8.gni:70

    Lite mode disables a number of performance optimizations to reduce memory
    at the cost of performance.
    Sets -DV8_LITE_MODE.

v8_enable_minor_mc
    Current value (from the default) = true
      From //BUILD.gn:211

    Enable minor mark compact.

v8_enable_object_print
    Current value (from the default) = ""
      From //BUILD.gn:114

    Sets -dOBJECT_PRINT.

v8_enable_pointer_compression
    Current value (from the default) = ""
      From //BUILD.gn:110

    Enable pointer compression (sets -dV8_COMPRESS_POINTERS).

v8_enable_precise_zone_stats
    Current value (from the default) = false
      From //BUILD.gn:280

    Experimental feature for collecting per-class zone memory stats.
    Requires use_rtti = true

v8_enable_raw_heap_snapshots
    Current value (from the default) = false
      From //gni/v8.gni:36

    This flag is deprecated and is now available through the inspector interface
    as an argument to profiler's method `takeHeapSnapshot`.

v8_enable_regexp_interpreter_threaded_dispatch
    Current value (from the default) = true
      From //BUILD.gn:248

    Use token threaded dispatch for the regular expression interpreter.
    Use switch-based dispatch if this is false

v8_enable_shared_ro_heap
    Current value (from the default) = ""
      From //BUILD.gn:220

    Enable sharing read-only space across isolates.
    Sets -DV8_SHARED_RO_HEAP.

v8_enable_single_generation
    Current value (from the default) = ""
      From //BUILD.gn:244

    Redirect allocation in young generation so that there will be
    only one single generation.

v8_enable_slow_dchecks
    Current value (from the default) = false
      From //BUILD.gn:86

    Enable slow dchecks.

v8_enable_snapshot_code_comments
    Current value (from the default) = false
      From //BUILD.gn:98

    Enable code comments for builtins in the snapshot (impacts performance).

v8_enable_snapshot_compression
    Current value (from the default) = true
      From //BUILD.gn:255

    Disable all snapshot compression.

v8_enable_snapshot_native_code_counters
    Current value (from the default) = ""
      From //BUILD.gn:104

    Enable native counters from the snapshot (impacts performance, sets
    -dV8_SNAPSHOT_NATIVE_CODE_COUNTERS).
    This option will generate extra code in the snapshot to increment counters,
    as per the --native-code-counters flag.

v8_enable_system_instrumentation
    Current value (from the default) = false
      From //BUILD.gn:44

    Sets -DSYSTEM_INSTRUMENTATION. Enables OS-dependent event tracing

v8_enable_test_features
    Current value (from the default) = ""
      From //BUILD.gn:169

    Enables various testing features.

v8_enable_third_party_heap
    Current value (from the default) = false
      From //BUILD.gn:226

    Enable third party HEAP library

v8_enable_trace_baseline_exec
    Current value (from the default) = false
      From //BUILD.gn:125

v8_enable_trace_feedback_updates
    Current value (from the default) = false
      From //BUILD.gn:128

    Sets -dV8_TRACE_FEEDBACK_UPDATES.

v8_enable_trace_ignition
    Current value (from the default) = false
      From //BUILD.gn:124

v8_enable_trace_maps
    Current value (from the default) = ""
      From //BUILD.gn:117

    Sets -dV8_TRACE_MAPS.

v8_enable_trace_unoptimized
    Current value (from the default) = ""
      From //BUILD.gn:123

    Sets -dV8_TRACE_UNOPTIMIZED.

v8_enable_unconditional_write_barriers
    Current value (from the default) = false
      From //BUILD.gn:240

    Ensure that write barriers are always used.
    Useful for debugging purposes.

v8_enable_v8_checks
    Current value (from the default) = ""
      From //BUILD.gn:120

    Sets -dV8_ENABLE_CHECKS.

v8_enable_verify_csa
    Current value (from the default) = false
      From //BUILD.gn:107

    Enable code-generation-time checking of types in the CodeStubAssembler.

v8_enable_verify_heap
    Current value (from the default) = ""
      From //BUILD.gn:50

    Sets -DVERIFY_HEAP.

v8_enable_verify_predictable
    Current value (from the default) = false
      From //BUILD.gn:53

    Sets -DVERIFY_PREDICTABLE

v8_enable_vtunejit
    Current value (from the default) = false
      From //BUILD.gn:77

    Sets -dENABLE_VTUNE_JIT_INTERFACE.

v8_enable_vtunetracemark
    Current value (from the default) = false
      From //BUILD.gn:80

    Sets -dENABLE_VTUNE_TRACEMARK.

v8_enable_wasm_gdb_remote_debugging
    Current value (from the default) = false
      From //gni/v8.gni:65

    Enable WebAssembly debugging via GDB-remote protocol.

v8_enable_webassembly
    Current value (from the default) = ""
      From //gni/v8.gni:76

    Include support for WebAssembly. If disabled, the 'WebAssembly' global
    will not be available, and embedder APIs to generate WebAssembly modules
    will fail. Also, asm.js will not be translated to WebAssembly and will be
    executed as standard JavaScript instead.

v8_enable_zone_compression
    Current value (from the default) = ""
      From //BUILD.gn:272

    Enable V8 zone compression experimental feature.
    Sets -DV8_COMPRESS_ZONES.

v8_etw_guid
    Current value (from the default) = ""
      From //BUILD.gn:47

    Sets the GUID for the ETW provider

v8_expose_symbols
    Current value (from the default) = false
      From //gni/v8.gni:56

    Expose symbols for dynamic linking.

v8_fuzzilli
    Current value (from the default) = false
      From //gni/v8.gni:79

    Add fuzzilli fuzzer support.

v8_gcmole
    Current value (from the default) = false
      From //gni/v8.gni:26

    Indicate if gcmole was fetched as a hook to make it available on swarming.

v8_generate_external_defines_header
    Current value (from the default) = false
      From //BUILD.gn:288

    If enabled then macro definitions that are used in externally visible
    header files are placed in a separate header file v8-gn.h.

v8_has_valgrind
    Current value (from the default) = false
      From //gni/v8.gni:23

    Indicate if valgrind was fetched as a custom deps to make it available on
    swarming.

v8_imminent_deprecation_warnings
    Current value (from the default) = true
      From //BUILD.gn:59

    Enable compiler warnings when using V8_DEPRECATE_SOON apis.

v8_monolithic
    Current value (from the default) = false
      From //gni/v8.gni:53

    Enable monolithic static library for embedders.

v8_multi_arch_build
    Current value (from the default) = false
      From //gni/v8.gni:19

    Adds additional compile target for building multiple architectures at once.

v8_no_inline
    Current value (from the default) = false
      From //BUILD.gn:180

    Switches off inlining in V8.

v8_optimized_debug
    Current value (from the default) = true
      From //gni/v8.gni:29

    Turns on compiler optimizations in V8 in Debug build.

v8_os_page_size
    Current value (from the default) = "0"
      From //BUILD.gn:183

    Override OS page size when generating snapshot

v8_postmortem_support
    Current value (from the default) = false
      From //BUILD.gn:174

    With post mortem support enabled, metadata is embedded into libv8 that
    describes various parameters of the VM for use by debuggers. See
    tools/gen-postmortem-metadata.py for details.

v8_promise_internal_field_count
    Current value (from the default) = 0
      From //BUILD.gn:71

    Sets the number of internal fields on promise objects.

v8_snapshot_toolchain
    Current value (from the default) = ""
      From //gni/snapshot_toolchain.gni:34

    The v8 snapshot needs to be built by code that is compiled with a
    toolchain that matches the bit-width of the target CPU, but runs on
    the host.

v8_static_library
    Current value (from the default) = false
      From //gni/v8.gni:50

    Use static libraries instead of source_sets.

v8_symbol_level
    Current value (from the default) = 2
      From //gni/v8.gni:62

    Override global symbol level setting for v8.

v8_target_cpu
    Current value (from the default) = ""
      From //build/config/v8_target_cpu.gni:33

    This arg is used when we want to tell the JIT-generating v8 code
    that we want to have it generate for an architecture that is different
    than the architecture that v8 will actually run on; we then run the
    code under an emulator. For example, we might run v8 on x86, but
    generate arm code and run that under emulation.
   
    This arg is defined here rather than in the v8 project because we want
    some of the common architecture-specific args (like arm_float_abi or
    mips_arch_variant) to be set to their defaults either if the current_cpu
    applies *or* if the v8_current_cpu applies.
   
    As described below, you can also specify the v8_target_cpu to use
    indirectly by specifying a `custom_toolchain` that contains v8_$cpu in the
    name after the normal toolchain.
   
    For example, `gn gen --args="custom_toolchain=...:clang_x64_v8_arm64"`
    is equivalent to setting --args=`v8_target_cpu="arm64"`. Setting
    `custom_toolchain` is more verbose but makes the toolchain that is
    (effectively) being used explicit.
   
    v8_target_cpu can only be used to target one architecture in a build,
    so if you wish to build multiple copies of v8 that are targeting
    different architectures, you will need to do something more
    complicated involving multiple toolchains along the lines of
    custom_toolchain, above.

v8_third_party_heap_files
    Current value (from the default) = []
      From //BUILD.gn:232

    Source code used by third party heap

v8_third_party_heap_libs
    Current value (from the default) = []
      From //BUILD.gn:229

    Libaries used by third party heap

v8_typed_array_max_size_in_heap
    Current value (from the default) = 64
      From //BUILD.gn:192

    Controls the threshold for on-heap/off-heap Typed Arrays.

v8_untrusted_code_mitigations
    Current value (from the default) = false
      From //BUILD.gn:208

v8_use_external_startup_data
    Current value (from the default) = ""
      From //gni/v8.gni:43

    Use external files for startup data blobs:
    the JS builtins sources and the start snapshot.

v8_use_mips_abi_hardfloat
    Current value (from the default) = true
      From //BUILD.gn:189

    Similar to the ARM hard float ABI but on MIPS.

v8_use_multi_snapshots
    Current value (from the default) = false
      From //gni/v8.gni:39

    Enable several snapshots side-by-side (e.g. default and for trusted code).

v8_use_perfetto
    Current value (from the default) = false
      From //gni/v8.gni:59

    Implement tracing using Perfetto (https://perfetto.dev).

v8_use_siphash
    Current value (from the default) = false
      From //BUILD.gn:177

    Use Siphash as added protection against hash flooding attacks.

v8_verify_torque_generation_invariance
    Current value (from the default) = false
      From //BUILD.gn:252

    Enable additional targets necessary for verification of torque
    file generation

v8_win64_unwinding_info
    Current value (from the default) = true
      From //BUILD.gn:95

    Enable the registration of unwinding info for Windows x64 and ARM64.

visual_studio_path
    Current value (from the default) = ""
      From //build/config/win/visual_studio_version.gni:9

    Path to Visual Studio. If empty, the default is used which is to use the
    automatic toolchain in depot_tools. If set, you must also set the
    visual_studio_version and wdk_path.

visual_studio_version
    Current value (from the default) = ""
      From //build/config/win/visual_studio_version.gni:13

    Version of Visual Studio pointed to by the visual_studio_path.
    Currently always "2015".

wdk_path
    Current value (from the default) = ""
      From //build/config/win/visual_studio_version.gni:17

    Directory of the Windows driver kit. If visual_studio_path is empty, this
    will be auto-filled.

win_enable_cfg_guards
    Current value (from the default) = false
      From //build/config/win/control_flow_guard.gni:10

    Set this to true to enable generation of CFG indirect call dispatch
    guards.

win_linker_timing
    Current value (from the default) = false
      From //build/config/win/BUILD.gn:19

    Turn this on to have the linker output extra timing information.

windows_sdk_path
    Current value (from the default) = "C:\Program Files (x86)\Windows Kits\10"
      From //build/config/win/visual_studio_version.gni:22

    Full path to the Windows SDK, not including a backslash at the end.
    This value is the default location, override if you have a different
    installation location.

x64_arch
    Current value (from the default) = ""
      From //build/config/x64.gni:16

    The micro architecture of x64 cpu. This will be a string like "haswell" or
    "skylake". An empty string means to use the default architecture which is
    "x86-64".
    CPU options for "x86-64" in GCC can be found at
    https://gcc.gnu.org/onlinedocs/gcc/x86-Options.html
    CPU options for "x86-64" in llvm can be found at
    https://github.com/llvm/llvm-project/blob/master/llvm/include/llvm/Support/X86TargetParser.def

