{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9433bac3_c7e15a3d",
        "filename": "include/v8-context.h",
        "patchSetId": 9
      },
      "lineNbr": 192,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2023-10-11T17:50:38Z",
      "side": 1,
      "message": "Why is this changed from pure virtual? (It\u0027s okay to implement one with the other.)",
      "range": {
        "startLine": 192,
        "startChar": 17,
        "endLine": 192,
        "endChar": 51
      },
      "revId": "b4f85b36cd342e4fd64bdcef85e2533a310394db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3dae0aaf_736cd788",
        "filename": "include/v8-context.h",
        "patchSetId": 9
      },
      "lineNbr": 192,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2023-10-12T08:36:12Z",
      "side": 1,
      "message": "If any of the two is pure virtual, derived classes will need to implement it.\nFor some time, there will be old versions implementing just the old one, and new versions implementing just the new one, so one of the two kinds will not compile. I can\u0027t see how this can be solved without defining both.\n\nI\u0027m implementing the new one with the old one, and just calling the new one from api.cc. In this way, new code is faster and old code works too. The default implementation of the old one just aborts if called. If there\u0027s a simpler acceptable behaviour, we can change it.",
      "parentUuid": "9433bac3_c7e15a3d",
      "range": {
        "startLine": 192,
        "startChar": 17,
        "endLine": 192,
        "endChar": 51
      },
      "revId": "b4f85b36cd342e4fd64bdcef85e2533a310394db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8bcda6b_87b08e3c",
        "filename": "include/v8-context.h",
        "patchSetId": 9
      },
      "lineNbr": 192,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2023-10-13T08:10:22Z",
      "side": 1,
      "message": "\u003e If any of the two is pure virtual, derived classes will need to implement it.\n\u003e For some time, there will be old versions implementing just the old one, and new versions implementing just the new one, so one of the two kinds will not compile. I can\u0027t see how this can be solved without defining both.\n\u003e \n\nSg. Then I am a little confused about the `abort()` and the error case. It seems like just returning true is a valid implementation that works as a default case?\n\n\u003e I\u0027m implementing the new one with the old one, and just calling the new one from api.cc. In this way, new code is faster and old code works too. The default implementation of the old one just aborts if called. If there\u0027s a simpler acceptable behaviour, we can change it.",
      "parentUuid": "3dae0aaf_736cd788",
      "range": {
        "startLine": 192,
        "startChar": 17,
        "endLine": 192,
        "endChar": 51
      },
      "revId": "b4f85b36cd342e4fd64bdcef85e2533a310394db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "82e9b2b0_1d4d50a3",
        "filename": "include/v8-context.h",
        "patchSetId": 9
      },
      "lineNbr": 192,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2023-10-17T07:42:49Z",
      "side": 1,
      "message": "If returning `true` is an acceptable behaviour, then let\u0027s do that.\nThanks!",
      "parentUuid": "f8bcda6b_87b08e3c",
      "range": {
        "startLine": 192,
        "startChar": 17,
        "endLine": 192,
        "endChar": 51
      },
      "revId": "b4f85b36cd342e4fd64bdcef85e2533a310394db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a9fa404_c22fabc5",
        "filename": "include/v8-statistics.h",
        "patchSetId": 9
      },
      "lineNbr": 111,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2023-10-11T17:50:38Z",
      "side": 1,
      "message": "We can also put these in the `Result` struct and populate it accordingly, right? This way we don\u0027t need to maintain a `_v2` (which we rarely have on out APIs)",
      "range": {
        "startLine": 111,
        "startChar": 44,
        "endLine": 111,
        "endChar": 52
      },
      "revId": "b4f85b36cd342e4fd64bdcef85e2533a310394db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51e09bb9_cc6bbaf5",
        "filename": "include/v8-statistics.h",
        "patchSetId": 9
      },
      "lineNbr": 111,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2023-10-12T08:36:12Z",
      "side": 1,
      "message": "I don\u0027t like `_v2` either but I see two problems with just adding more fields here.\n\n1.  Old code using this looks like (line 356 in `memory-measurement.cc`):\n    ```\n    foo-\u003eMeasurementComplete(\n        {sizes, request.shared, request.wasm_code, request.wasm_metadata});\n    ```\n    This will break if more fields are introduced, so no more backwards\n    compatibility.\n\n2.  These are vector references, so it\u0027s not clear what the \"unpopulated\"\n    value would be. Plus, we need a way to determine which one is populated\n    (at run-time).",
      "parentUuid": "2a9fa404_c22fabc5",
      "range": {
        "startLine": 111,
        "startChar": 44,
        "endLine": 111,
        "endChar": 52
      },
      "revId": "b4f85b36cd342e4fd64bdcef85e2533a310394db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a03c981b_d1f87db6",
        "filename": "include/v8-statistics.h",
        "patchSetId": 9
      },
      "lineNbr": 111,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2023-10-12T15:00:32Z",
      "side": 1,
      "message": "\u003e I don\u0027t like `_v2` either but I see two problems with just adding more fields here.\n\u003e \n\u003e 1.  Old code using this looks like (line 356 in `memory-measurement.cc`):\n\u003e     ```\n\u003e     foo-\u003eMeasurementComplete(\n\u003e         {sizes, request.shared, request.wasm_code, request.wasm_metadata});\n\u003e     ```\n\u003e     This will break if more fields are introduced, so no more backwards\n\u003e     compatibility.\n\nThat\u0027s called from V8 and the embedder merely picks up the result, right? I think the caller can be easily adjusted.\n\n\u003e \n\u003e 2.  These are vector references, so it\u0027s not clear what the \"unpopulated\"\n\u003e     value would be. Plus, we need a way to determine which one is populated\n\u003e     (at run-time).\n\nIt could refer to an empty vector which could signal to look at the span.",
      "parentUuid": "51e09bb9_cc6bbaf5",
      "range": {
        "startLine": 111,
        "startChar": 44,
        "endLine": 111,
        "endChar": 52
      },
      "revId": "b4f85b36cd342e4fd64bdcef85e2533a310394db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8023de92_1e514bad",
        "filename": "include/v8-statistics.h",
        "patchSetId": 9
      },
      "lineNbr": 111,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2023-10-13T07:51:12Z",
      "side": 1,
      "message": "Thank you for this suggestion!\n\nFixed: New fields are now added to `Result` and both versions are populated consistently when calling this method. The recipient can use either (until deprecation is complete). PTAL.",
      "parentUuid": "a03c981b_d1f87db6",
      "range": {
        "startLine": 111,
        "startChar": 44,
        "endLine": 111,
        "endChar": 52
      },
      "revId": "b4f85b36cd342e4fd64bdcef85e2533a310394db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}