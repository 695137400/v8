{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "279b4f3c_a1ed25d8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1323125
      },
      "writtenOn": "2024-02-20T14:10:45Z",
      "side": 1,
      "message": "There is one more cctest failure on s390x which is fixed by this cl.\nThe only remaining spot was changed back to UintPtr by this cl https://crrev.com/c/5300796:\nhttps://source.chromium.org/chromium/chromium/src/+/main:v8/src/wasm/turboshaft-graph-interface.cc;l\u003d109",
      "revId": "c3b802f4aa3ad9ddc264e1b53990ce5f10d489cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b682584_b5558246",
        "filename": "src/compiler/turboshaft/wasm-assembler-helpers.h",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-02-20T14:19:00Z",
      "side": 1,
      "message": "Given that this is called `LOAD_TAGGED_ROOT`, the type in the load is confusing.\nCan we add a comment `// Root pointers do not get compressed, load the full pointer and return it as tagged.` to make sure we don\u0027t break it again? ðŸ˜Š\nLet\u0027s also wrap the `__ Load` in a `__ BitcastWordPtrToTagged(...)`. This makes sure if anything we load here is movable during GC (not 100 % sure if that can happen), that we track (and update) this tagged value correctly.",
      "range": {
        "startLine": 40,
        "startChar": 8,
        "endLine": 40,
        "endChar": 24
      },
      "revId": "c3b802f4aa3ad9ddc264e1b53990ce5f10d489cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7eed450d_67df7c83",
        "filename": "src/compiler/turboshaft/wasm-assembler-helpers.h",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2024-02-20T14:33:01Z",
      "side": 1,
      "message": "I wonder if we should actually get rid of `LOAD_TAGGED_ROOT`, as apparently we never load a tagged from root.\n\nI think the `__ BitcastWordPtrToTagged(...)` within a `LOAD_TAGGED_ROOT` would only be useful if it prevented us in the future from using a `LOAD_ROOT` with a `MemoryRepresentation::TaggedPointer()`, but since `LOAD_ROOT` does not have a `type` parameter, this may be unlikely to happen. Maybe there could be a comment in `LOAD_ROOT` that a `LOAD_TAGGED_ROOT` should not exist, but I\u0027m not sure anyone would see this comment when they want to introduce a `LOAD_TAGGED_ROOT`.",
      "parentUuid": "8b682584_b5558246",
      "range": {
        "startLine": 40,
        "startChar": 8,
        "endLine": 40,
        "endChar": 24
      },
      "revId": "c3b802f4aa3ad9ddc264e1b53990ce5f10d489cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcd86763_d3f26475",
        "filename": "src/compiler/turboshaft/wasm-assembler-helpers.h",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-02-20T14:46:25Z",
      "side": 1,
      "message": "@ahaas@chromium.org: Then maybe it shouldn\u0027t be called `LOAD_TAGGED_ROOT` but `LOAD_ROOT_AS_TAGGED`.\n\nThe only use case so far is:\n```\nV\u003cWeakArrayList\u003e rtts \u003d LOAD_TAGGED_ROOT(WasmCanonicalRtts);\nV\u003cTagged\u003e weak_rtt \u003d __ Load(\n    rtts, __ ChangeInt32ToIntPtr(loaded_sig),\n    LoadOp::Kind::TaggedBase(), MemoryRepresentation::TaggedPointer(),\n    WeakArrayList::kHeaderSize, kTaggedSizeLog2);\n```\nSo here we clearly expect a tagged value. (Or we\u0027d need to also adapt the load there to not use `TaggedBase()`.",
      "parentUuid": "7eed450d_67df7c83",
      "range": {
        "startLine": 40,
        "startChar": 8,
        "endLine": 40,
        "endChar": 24
      },
      "revId": "c3b802f4aa3ad9ddc264e1b53990ce5f10d489cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "feb13494_abab49ad",
        "filename": "src/compiler/turboshaft/wasm-assembler-helpers.h",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2024-02-20T15:08:57Z",
      "side": 1,
      "message": "I think it should be as follows, where the caller uses LOAD_ROOT and then bitcasts by themselves:\n\n```\nV\u003cWeakArrayList\u003e rtts \u003d __ BitcastWordPtrToTagged(LOAD_ROOT(WasmCanonicalRtts));\nV\u003cTagged\u003e weak_rtt \u003d __ Load(\n    rtts, __ ChangeInt32ToIntPtr(loaded_sig),\n    LoadOp::Kind::TaggedBase(), MemoryRepresentation::TaggedPointer(),\n    WeakArrayList::kHeaderSize, kTaggedSizeLog2);\n```",
      "parentUuid": "fcd86763_d3f26475",
      "range": {
        "startLine": 40,
        "startChar": 8,
        "endLine": 40,
        "endChar": 24
      },
      "revId": "c3b802f4aa3ad9ddc264e1b53990ce5f10d489cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18898b0b_efa66172",
        "filename": "src/compiler/turboshaft/wasm-assembler-helpers.h",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1323125
      },
      "writtenOn": "2024-02-20T15:21:34Z",
      "side": 1,
      "message": "I\u0027ve updated it to LOAD_ROOT_AS_TAGGED and added a bitcast, let me know if you like it done differently.",
      "parentUuid": "feb13494_abab49ad",
      "range": {
        "startLine": 40,
        "startChar": 8,
        "endLine": 40,
        "endChar": 24
      },
      "revId": "c3b802f4aa3ad9ddc264e1b53990ce5f10d489cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4fec263_806e5488",
        "filename": "src/compiler/turboshaft/wasm-assembler-helpers.h",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-02-20T15:37:43Z",
      "side": 1,
      "message": "After an offline discussion with Andreas, we figured out that we indeed need the bitcast to be safe as the `WasmCanonicalRtts` are movable. So this macro should always do the bitcast for safety reasons.\n\nProposal:\nLet\u0027s merge `LOAD_IMMUTABLE_ROOT` and `LOAD_TAGGED_ROOT` and `LOAD_ROOT` into:\n```\n#define LOAD_ROOT(name)                                          \\\n  V\u003ccompiler::turboshaft::RootTypes::k##name##Type\u003e::Cast(       \\\n      LoadRootHelper(Asm(), RootIndex::k##name))\n```\nand then add the following helper to this file:\n```\ntemplate \u003ctypename AssemblerT\u003e\nOpIndex LoadRootHelper(AssemblerT* asm, RootIndex index) {\n  if (RootsTable::IsImmortalImmovable(index)) {\n    return asm-\u003eLoad(asm-\u003eLoadRootRegister(), \n              LoadOp::Kind::RawAligned().Immutable(),\n              MemoryRepresentation::UintPtr(),\n              IsolateData::root_slot_offset(index)));\n  } else {\n    return asm-\u003eBitcastWordPtrToTagged(asm-\u003eLoad(asm-\u003eLoadRootRegister(), \n              LoadOp::Kind::RawAligned(),\n              MemoryRepresentation::UintPtr(),\n              IsolateData::root_slot_offset(index)));\n  }\n}\n```\n@mfarazma@redhat.com: Could you try this out? I can also take this over if you prefer (or if my proposal above doesn\u0027t work).",
      "parentUuid": "feb13494_abab49ad",
      "range": {
        "startLine": 40,
        "startChar": 8,
        "endLine": 40,
        "endChar": 24
      },
      "revId": "c3b802f4aa3ad9ddc264e1b53990ce5f10d489cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a41e4d49_c2de8c3c",
        "filename": "src/compiler/turboshaft/wasm-assembler-helpers.h",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1323125
      },
      "writtenOn": "2024-02-20T16:03:16Z",
      "side": 1,
      "message": "Not a problem, I can abandon this cl if you like to try a better approach, I can then try the patch on s390 to make sure it works.",
      "parentUuid": "c4fec263_806e5488",
      "range": {
        "startLine": 40,
        "startChar": 8,
        "endLine": 40,
        "endChar": 24
      },
      "revId": "c3b802f4aa3ad9ddc264e1b53990ce5f10d489cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}