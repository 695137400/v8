{
  "comments": [
    {
      "key": {
        "uuid": "ab143f08_e880dd55",
        "filename": "src/compilation-info.h",
        "patchSetId": 6
      },
      "lineNbr": 65,
      "author": {
        "id": 1118575
      },
      "writtenOn": "2017-08-04T08:50:15Z",
      "side": 1,
      "message": "nit: \"[...] stub compilation (or testing).\"",
      "range": {
        "startLine": 65,
        "startChar": 38,
        "endLine": 65,
        "endChar": 55
      },
      "revId": "64e8b402d72913c62e57fec20002daaaf08281b7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a91dffae_9a3cacb0",
        "filename": "src/compilation-info.h",
        "patchSetId": 6
      },
      "lineNbr": 65,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2017-08-04T09:23:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ab143f08_e880dd55",
      "range": {
        "startLine": 65,
        "startChar": 38,
        "endLine": 65,
        "endChar": 55
      },
      "revId": "64e8b402d72913c62e57fec20002daaaf08281b7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "68282782_0545d80e",
        "filename": "src/compilation-info.h",
        "patchSetId": 6
      },
      "lineNbr": 267,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2017-08-04T08:34:38Z",
      "side": 1,
      "message": "Can we add a DCHECK(IsOptimizing()) here for v8:6659?",
      "range": {
        "startLine": 267,
        "startChar": 32,
        "endLine": 267,
        "endChar": 38
      },
      "revId": "64e8b402d72913c62e57fec20002daaaf08281b7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41283e9d_90419ef8",
        "filename": "src/compilation-info.h",
        "patchSetId": 6
      },
      "lineNbr": 267,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2017-08-04T09:23:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "68282782_0545d80e",
      "range": {
        "startLine": 267,
        "startChar": 32,
        "endLine": 267,
        "endChar": 38
      },
      "revId": "64e8b402d72913c62e57fec20002daaaf08281b7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "695b3e58_b78847f5",
        "filename": "src/compiler-dispatcher/unoptimized-compile-job.cc",
        "patchSetId": 6
      },
      "lineNbr": 406,
      "author": {
        "id": 1118575
      },
      "writtenOn": "2017-08-04T08:50:15Z",
      "side": 1,
      "message": "nit: The literal seems to be set in the constructor now, can we remove this explicit setting here?",
      "range": {
        "startLine": 406,
        "startChar": 2,
        "endLine": 406,
        "endChar": 57
      },
      "revId": "64e8b402d72913c62e57fec20002daaaf08281b7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a20281a2_852ed83a",
        "filename": "src/compiler-dispatcher/unoptimized-compile-job.cc",
        "patchSetId": 6
      },
      "lineNbr": 406,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2017-08-04T09:23:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "695b3e58_b78847f5",
      "range": {
        "startLine": 406,
        "startChar": 2,
        "endLine": 406,
        "endChar": 57
      },
      "revId": "64e8b402d72913c62e57fec20002daaaf08281b7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8bd02615_166c5eea",
        "filename": "src/compiler.cc",
        "patchSetId": 6
      },
      "lineNbr": 446,
      "author": {
        "id": 1118575
      },
      "writtenOn": "2017-08-04T08:50:15Z",
      "side": 1,
      "message": "question: Maybe I am missing something, but this seems to always return the SFI being passed in on success (or empty handle on failure). Hence the caller already holds the SFI. Why no keep the return type a bool?",
      "range": {
        "startLine": 446,
        "startChar": 0,
        "endLine": 446,
        "endChar": 26
      },
      "revId": "64e8b402d72913c62e57fec20002daaaf08281b7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "409b5889_07801b02",
        "filename": "src/compiler.cc",
        "patchSetId": 6
      },
      "lineNbr": 446,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2017-08-04T09:23:09Z",
      "side": 1,
      "message": "The one time it\u0027s not is the case of CompileTopLevel where the sfi passed in is null, and it\u0027s created FinalizeUnoptimizedCompilationJob and set on the compilation_info. I agree this is not ideal and my plan is to move the code within the \"if (parse_info-\u003eis_toplevel()) out of FinalizeUnoptimizedCompilationJob and instead have it in CompileUnoptimizedCode (or possibly CompileTopLevel) once the pipeline sperates Prepare+Execute (of all CompileJobs) from Finalize, since this needs to happen between those two steps. WDYT?",
      "parentUuid": "8bd02615_166c5eea",
      "range": {
        "startLine": 446,
        "startChar": 0,
        "endLine": 446,
        "endChar": 26
      },
      "revId": "64e8b402d72913c62e57fec20002daaaf08281b7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11eb7aa7_42450152",
        "filename": "src/compiler.cc",
        "patchSetId": 6
      },
      "lineNbr": 516,
      "author": {
        "id": 1118575
      },
      "writtenOn": "2017-08-04T08:50:15Z",
      "side": 1,
      "message": "Likewise.",
      "range": {
        "startLine": 516,
        "startChar": 0,
        "endLine": 516,
        "endChar": 26
      },
      "revId": "64e8b402d72913c62e57fec20002daaaf08281b7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c855aaf_e16f2695",
        "filename": "src/compiler.cc",
        "patchSetId": 6
      },
      "lineNbr": 516,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2017-08-04T09:23:09Z",
      "side": 1,
      "message": "ditto",
      "parentUuid": "11eb7aa7_42450152",
      "range": {
        "startLine": 516,
        "startChar": 0,
        "endLine": 516,
        "endChar": 26
      },
      "revId": "64e8b402d72913c62e57fec20002daaaf08281b7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb08e61c_6cbffc54",
        "filename": "src/compiler.cc",
        "patchSetId": 6
      },
      "lineNbr": 991,
      "author": {
        "id": 1118575
      },
      "writtenOn": "2017-08-04T08:50:15Z",
      "side": 1,
      "message": "nit: This helper method is only used internally, lets be explicit at all call-sites instead of having a default argument.",
      "range": {
        "startLine": 991,
        "startChar": 8,
        "endLine": 991,
        "endChar": 42
      },
      "revId": "64e8b402d72913c62e57fec20002daaaf08281b7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4dd96d28_6c733346",
        "filename": "src/compiler.cc",
        "patchSetId": 6
      },
      "lineNbr": 991,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2017-08-04T09:23:09Z",
      "side": 1,
      "message": "Ok done (for reference, reason I did it this way is that only time it\u0027s not null is in CompileDebugCode, which should be going away with FCG so at that point I can just get rid of the argument entirely).",
      "parentUuid": "eb08e61c_6cbffc54",
      "range": {
        "startLine": 991,
        "startChar": 8,
        "endLine": 991,
        "endChar": 42
      },
      "revId": "64e8b402d72913c62e57fec20002daaaf08281b7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}