{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "500fc0de_5364a670",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2022-05-03T12:56:44Z",
      "side": 1,
      "message": "PTAL, thanks!",
      "revId": "58677ca5eb38254246d39a60f22143bd34bed5d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b2aadcdd_6611b5d4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2022-05-05T12:47:24Z",
      "side": 1,
      "message": "Pinging for review again",
      "revId": "58677ca5eb38254246d39a60f22143bd34bed5d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fd216cd3_8f7b30fb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2022-05-09T07:36:29Z",
      "side": 1,
      "message": "PTAL, thanks!",
      "revId": "58677ca5eb38254246d39a60f22143bd34bed5d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5a421dc4_b808d7df",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2022-05-11T04:42:56Z",
      "side": 1,
      "message": "adding Shu wrt to the private name semantics in the global proxies (AFAICT [from the spec](https://html.spec.whatwg.org/multipage/window-object.html#the-windowproxy-exotic-object) there are no cross-origin checks for the private names in the global proxies at this moment).",
      "revId": "58677ca5eb38254246d39a60f22143bd34bed5d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d795bba_d13ffbc6",
        "filename": "src/ic/ic.cc",
        "patchSetId": 1
      },
      "lineNbr": 1851,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2022-05-09T09:38:57Z",
      "side": 1,
      "message": "We should be able to drop this if since IsPrivateName implies IsPrivate. You could add a DCHECK(name-\u003eIsPrivate()) in the branch below though.",
      "revId": "58677ca5eb38254246d39a60f22143bd34bed5d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27053051_0c47455a",
        "filename": "src/ic/ic.cc",
        "patchSetId": 1
      },
      "lineNbr": 1851,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2022-05-09T10:12:43Z",
      "side": 1,
      "message": "I think this is here because we still need to set use_ic to false below for private symbols (that are not private names)?",
      "parentUuid": "4d795bba_d13ffbc6",
      "revId": "58677ca5eb38254246d39a60f22143bd34bed5d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "223ddd3b_0d65c7fd",
        "filename": "src/ic/ic.cc",
        "patchSetId": 1
      },
      "lineNbr": 1851,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2022-05-09T16:00:38Z",
      "side": 1,
      "message": "Ah ok, I got the nesting wrong in that case. I suppose that\u0027s alright then.",
      "parentUuid": "27053051_0c47455a",
      "revId": "58677ca5eb38254246d39a60f22143bd34bed5d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aab30ab2_416ffdca",
        "filename": "src/ic/ic.cc",
        "patchSetId": 1
      },
      "lineNbr": 1851,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2022-05-13T05:20:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "223ddd3b_0d65c7fd",
      "revId": "58677ca5eb38254246d39a60f22143bd34bed5d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bcefe65_a5c29b1e",
        "filename": "src/ic/ic.cc",
        "patchSetId": 1
      },
      "lineNbr": 1856,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2022-05-09T09:38:57Z",
      "side": 1,
      "message": "It\u0027s a little weird to support both `IsNothing` _and_ `!FromJust`. What about just returning a `bool` instead of `Maybe\u003cbool\u003e`? The one RETURN_FAILURE case can just `return false;` as well.",
      "revId": "58677ca5eb38254246d39a60f22143bd34bed5d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9617a580_49d44e0a",
        "filename": "src/ic/ic.cc",
        "patchSetId": 1
      },
      "lineNbr": 1856,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2022-05-13T05:20:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4bcefe65_a5c29b1e",
      "revId": "58677ca5eb38254246d39a60f22143bd34bed5d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08bc63bb_282d672e",
        "filename": "src/objects/js-objects.cc",
        "patchSetId": 1
      },
      "lineNbr": 211,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2022-05-09T09:38:57Z",
      "side": 1,
      "message": "I presume ACCESSOR shouldn\u0027t ever happen?",
      "revId": "58677ca5eb38254246d39a60f22143bd34bed5d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "19aed11d_f4a1064a",
        "filename": "src/objects/js-objects.cc",
        "patchSetId": 1
      },
      "lineNbr": 211,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2022-05-13T05:20:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "08bc63bb_282d672e",
      "revId": "58677ca5eb38254246d39a60f22143bd34bed5d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02df2376_fd058dcc",
        "filename": "src/objects/js-objects.cc",
        "patchSetId": 1
      },
      "lineNbr": 212,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2022-05-09T09:38:57Z",
      "side": 1,
      "message": "INTEGER_INDEXED_EXOTIC is UNREACHABLE",
      "revId": "58677ca5eb38254246d39a60f22143bd34bed5d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4dfd5846_e605c96c",
        "filename": "src/objects/js-objects.cc",
        "patchSetId": 1
      },
      "lineNbr": 212,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2022-05-13T05:20:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "02df2376_fd058dcc",
      "revId": "58677ca5eb38254246d39a60f22143bd34bed5d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ffb55a37_453cf826",
        "filename": "src/objects/lookup.cc",
        "patchSetId": 1
      },
      "lineNbr": 1267,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2022-05-09T09:38:57Z",
      "side": 1,
      "message": "Since we\u0027re changing this anyway, should we reconsider this entirely and just always do an access check? In the past we used private symbols to internally associate data with objects (which iiuc are now is_private_name), but now that this also applies to user-land private symbols, I\u0027m worried this will simply result in memory leaks. E.g.:\n\n class X extends function(o){ return o } {\n   constructor(o) { super(o) };\n   #a \u003d function() {};\n   static getX(o) { return o.#a }\n }\n new X(cross_origin_window)\n \nwill simply install a cross-origin function on the on the object, leaking its entire context...\n\nIf we exclude private names but include user-land private symbols, we probably throw away the benefit and expose the risk. This may need a spec-change though.",
      "revId": "58677ca5eb38254246d39a60f22143bd34bed5d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a600dde_52deeb22",
        "filename": "src/objects/lookup.cc",
        "patchSetId": 1
      },
      "lineNbr": 1267,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2022-05-09T10:12:43Z",
      "side": 1,
      "message": "Do you mean that we should also fail the access checks for globals that are not detached? (in addition to changing this condition to just `is_element`, because that alone doesn\u0027t forbid this leak if the object is added while the global is still attached) Then yeah that would entail a spec change, I think.\n\nSeparately, is this specific to the fields? Doesn\u0027t it also leak if one just does `cross_origin_window.a \u003d function() {}` while the `cross_origin_window` is not yet detached?",
      "parentUuid": "ffb55a37_453cf826",
      "revId": "58677ca5eb38254246d39a60f22143bd34bed5d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8880eede_4a5e60d7",
        "filename": "src/objects/lookup.cc",
        "patchSetId": 1
      },
      "lineNbr": 1267,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2022-05-09T16:00:38Z",
      "side": 1,
      "message": "What I mean is that we should just remove this condition entirely. We only check is_element because we don\u0027t (necessarily) have a name_ if we\u0027re in the is_element case. We should always return ACCESS_CHECK if it\u0027s needed.\n\nYou can\u0027t do `cross_origin_window.a \u003d function() {}`. That will throw an access violation.",
      "parentUuid": "8a600dde_52deeb22",
      "revId": "58677ca5eb38254246d39a60f22143bd34bed5d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "456dab57_8a501324",
        "filename": "src/objects/lookup.cc",
        "patchSetId": 1
      },
      "lineNbr": 1267,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2022-05-11T04:42:56Z",
      "side": 1,
      "message": "I see, to be clear, is this the semantics that you are looking for?\n\n```\nclass X extends function(o){ return o } {\n  constructor(o) { super(o) };\n  #a \u003d function() {};\n  static getX(o) { return o.#a }\n}\n\nconst realm2 \u003d Realm.create();\nconst g \u003d Realm.global(realm2);\n\ng.x \u003d function() {}  // throws\nnew X(g);  // throws\ng[%CreatePrivateSymbol(\u0027x\u0027)] \u003d 1;  // throws\n```\n\nBefore this patch, neither `new X(g)` nor `g[%CreatePrivateSymbol(\u0027x\u0027)] \u003d 1` throws. This patch makes `new X(g)` throw, but `g[%CreatePrivateSymbol(\u0027x\u0027)] \u003d 1` still passes. I think making `g[%CreatePrivateSymbol(\u0027x\u0027)] \u003d 1` throw doesn\u0027t need a spec change (because it\u0027s still going through the [[[Set]] internal method](https://html.spec.whatwg.org/multipage/window-object.html#windowproxy-set)), while `new X(g)` may need one - AFAICT it\u0027s allowed in the HTML spec at this point, since the HTML spec does not provide additional checks for the PrivateSet or PrivateGet methods from ecma262.",
      "parentUuid": "8880eede_4a5e60d7",
      "revId": "58677ca5eb38254246d39a60f22143bd34bed5d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c55045ba_512c39fb",
        "filename": "src/objects/lookup.cc",
        "patchSetId": 1
      },
      "lineNbr": 1267,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2022-05-11T09:13:39Z",
      "side": 1,
      "message": "I\u0027m not sure what internal uses of CreatePrivateSymbol are that would break. The one thing that comes to mind is that weakmaps and private symbols were seen as interchangeable. This makes that not be the case for access checked objects. I\u0027m personally fine with that ...  The alternatives I can think of don\u0027t really seem appealing. (Do we want private symbols installed from the outside to disappear as an iframe navigations? Otherwise, how do we avoid memory leaks?)\n\nIf this breaks we could use that fact though. Instead of actually installing the property we could have a weak map to keep track of such associations. That at least could help avoid memory leaks perhaps? (Store the association in the only place that can access the association)",
      "parentUuid": "456dab57_8a501324",
      "revId": "58677ca5eb38254246d39a60f22143bd34bed5d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b593a1ed_b287283d",
        "filename": "src/objects/lookup.cc",
        "patchSetId": 1
      },
      "lineNbr": 1267,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2022-05-13T05:20:23Z",
      "side": 1,
      "message": "I\u0027ve removed this condition, and added some tests for both private names and normal private symbols, personally I prefer just throwing for all of them too (IIUC that\u0027s what your preference as well).",
      "parentUuid": "c55045ba_512c39fb",
      "revId": "58677ca5eb38254246d39a60f22143bd34bed5d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80f79a74_59d89c88",
        "filename": "test/mjsunit/regress/regress-crbug-1321899.js",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2022-05-03T12:56:44Z",
      "side": 1,
      "message": "I have a question regarding this case: this currently hits HandleStoreICHandlerCase and then StoreGlobalIC_PropertyCellCase if the map of the receiver matches the cache (and didn\u0027t need access checks), though normal names in this case always go to the slow path. Is it okay to reuse the StoreGlobalIC_PropertyCellCase path here, or should we also just store the slow handler for stores that need access checks?",
      "revId": "58677ca5eb38254246d39a60f22143bd34bed5d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ffe0c4b_9c485acf",
        "filename": "test/mjsunit/regress/regress-crbug-1321899.js",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2022-05-09T09:38:57Z",
      "side": 1,
      "message": "Iiuc this is basically the case I\u0027m talking about above. I think it makes sense to throw here as well.\n\nIf we don\u0027t throw, we should probably install the property on the global proxy instead of the global object, which would change all of this. Otherwise navigating the iframe will cause the property to disappear. But I very much prefer to throw instead!",
      "parentUuid": "80f79a74_59d89c88",
      "revId": "58677ca5eb38254246d39a60f22143bd34bed5d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9778901_030b00ee",
        "filename": "test/mjsunit/regress/regress-crbug-1321899.js",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2022-05-09T10:12:43Z",
      "side": 1,
      "message": "To clarify the slow handler doesn\u0027t throw here (neither for fields nor for ordinary properties), it just loads/stores the property via a runtime call, because the access doesn\u0027t fail until the global is detached.",
      "parentUuid": "5ffe0c4b_9c485acf",
      "revId": "58677ca5eb38254246d39a60f22143bd34bed5d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e805b8c_d62885c3",
        "filename": "test/mjsunit/regress/regress-crbug-1321899.js",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2022-05-09T16:00:38Z",
      "side": 1,
      "message": "Ah I see. That\u0027s explicitly allowed because you _do_ have access. This isn\u0027t a cross-realm global because you\u0027re doing `createAllowCrossRealmAccess` above. Detach just \"navigates it away\" to one that doesn\u0027t provide access (equivalent of `Realm.create()`).\n\nAs long as the global object doesn\u0027t change it is alright to keep using the PropertyCell. It\u0027s not alright anymore after navigation/detach.",
      "parentUuid": "b9778901_030b00ee",
      "revId": "58677ca5eb38254246d39a60f22143bd34bed5d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a71c2713_c6377a41",
        "filename": "test/mjsunit/regress/regress-crbug-1321899.js",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2022-05-13T05:20:23Z",
      "side": 1,
      "message": "Added some tests for Realm.create() globals too. For realms that allowed cross realm access, detaching changes the map so it shouldn\u0027t hit the fast case again after that.",
      "parentUuid": "6e805b8c_d62885c3",
      "revId": "58677ca5eb38254246d39a60f22143bd34bed5d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}