{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6f66adcd_a22f968b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-11-12T15:42:37Z",
      "side": 1,
      "message": "Please see my comment below. I will write a CL description when we have decided which way to go.",
      "revId": "117b6d80b9347fe0d914f1aa63a510f8b19dbfdd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "108fbf05_a9bb86f8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-11-12T15:51:31Z",
      "side": 1,
      "message": "Please see my comment below. I will write a CL description when we have decided which way to go.",
      "revId": "117b6d80b9347fe0d914f1aa63a510f8b19dbfdd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bec781b3_b7d3c99d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-11-12T18:13:56Z",
      "side": 1,
      "message": "Please see my comment in the file. I will write a CL description when we have decided which way to go.",
      "revId": "117b6d80b9347fe0d914f1aa63a510f8b19dbfdd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b7131d27_e3df2a61",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2020-11-13T10:32:47Z",
      "side": 1,
      "message": "Thanks a bunch! Added a few minor comments.",
      "revId": "117b6d80b9347fe0d914f1aa63a510f8b19dbfdd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "968b7bfa_f3efe841",
        "filename": "src/compiler/js-native-context-specialization.cc",
        "patchSetId": 2
      },
      "lineNbr": 949,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-11-12T15:42:37Z",
      "side": 1,
      "message": "An alternative would be to compare the new value\u0027s map with the then-current value\u0027s map rather than with the now-current value\u0027s map. I think this would correspond to the CSA code and would perhaps be less surprising. In the case where the map is stable we could possibly take the dependency in order to avoid loading the then-current value and its map.",
      "revId": "117b6d80b9347fe0d914f1aa63a510f8b19dbfdd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92e0479d_bdd87438",
        "filename": "src/compiler/js-native-context-specialization.cc",
        "patchSetId": 2
      },
      "lineNbr": 949,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2020-11-13T10:32:47Z",
      "side": 1,
      "message": "That would be slower though due to 2 unnecessary loads; and the whole point of this code path is that they should be the same? CSA simply does the other thing because it uses less memory and the performance doesn\u0027t matter as much there.",
      "parentUuid": "968b7bfa_f3efe841",
      "revId": "117b6d80b9347fe0d914f1aa63a510f8b19dbfdd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09441ae0_6eee22a4",
        "filename": "src/compiler/js-native-context-specialization.cc",
        "patchSetId": 2
      },
      "lineNbr": 949,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-11-17T14:57:36Z",
      "side": 1,
      "message": "What should be the same?\n\nHere\u0027s an illustration of the difference between what the CL is doing now and the alternative I described:\n\nSay we compile when the property cell is ConstantType with an object of an unstable map M1. Before compilation finishes, the object in the cell transitions to map M2 (unnoticed by the compiler).\n\nIf the compiled code now wants to do the store, then:\na) With the CL, it will deopt unless the new value\u0027s map is M1.\nb) With the alternative, it will deopt unless the new value\u0027s map is M2.\n\nAre we on the same page here?\n\nMaybe your point is that both (a) and (b) would be fine, so let\u0027s take (a) because it\u0027s cheaper.",
      "parentUuid": "92e0479d_bdd87438",
      "revId": "117b6d80b9347fe0d914f1aa63a510f8b19dbfdd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}