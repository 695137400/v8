{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "131a13de_29cac115",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2023-11-20T13:49:36Z",
      "side": 1,
      "message": "Thibaud, PTAL.\nCC\u0027ed arm folks, please check if one sequence is preferred over the other.",
      "revId": "0745789acb09f98f2d31a274746aea6c5c59b21c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9003d938_82aa44af",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1183769
      },
      "writtenOn": "2023-11-20T16:02:48Z",
      "side": 1,
      "message": "Hi Clemens,\n\nFrom a performance perspective I\u0027m not 100% sure and I can ask around.\n\nHowever, from a correctness pov, discussing with Georgia, we remembered a previous unwinder issue, where it was important for the frame marker to be pushed on the stack first. Otherwise the unwinder may crash interpreting uninitialised memory as a frame marker: https://bugs.chromium.org/p/v8/issues/detail?id\u003d9907\n\nI\u0027m not sure if we fundamentally fixed this issue at the time, or if we just made less likely to occur.\n\nHope this is helpful!",
      "parentUuid": "131a13de_29cac115",
      "revId": "0745789acb09f98f2d31a274746aea6c5c59b21c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b480af1_0145fd4c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1345975
      },
      "writtenOn": "2023-11-20T16:41:17Z",
      "side": 1,
      "message": "LGTM if this looks good to arm folks. It also looks like a potential improvement wrt to that profiler issue.",
      "parentUuid": "9003d938_82aa44af",
      "revId": "0745789acb09f98f2d31a274746aea6c5c59b21c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b670a099_faf86002",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1183769
      },
      "writtenOn": "2023-11-20T16:45:13Z",
      "side": 1,
      "message": "Oh sorry I wasn\u0027t clear, I think that the new sequence may be incorrect wrt the profiler issue. As we first push the lr/fp, and only then the frame marker. I think it\u0027s safer to stick with the current sequence.",
      "parentUuid": "3b480af1_0145fd4c",
      "revId": "0745789acb09f98f2d31a274746aea6c5c59b21c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db09a070_8565443f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1345975
      },
      "writtenOn": "2023-11-20T16:52:13Z",
      "side": 1,
      "message": "Oops, my bad, I glanced over the issue too quickly. That makes sense now, removing my vote then.",
      "parentUuid": "b670a099_faf86002",
      "revId": "0745789acb09f98f2d31a274746aea6c5c59b21c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30ccc6b4_46ca8b2a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1183769
      },
      "writtenOn": "2023-11-20T17:13:29Z",
      "side": 1,
      "message": "That being said, now I\u0027m thinking about this more, I wonder if the unwinder will actually be an issue.\n\nWith the new sequence, doing two separate push pairs, if the unwinder triggers in the middle, it should not see uninitalized memory. In crbug 9907, the issue was that we allocated stack space in one step, and then wrote in another, leaving a gap where the memory (with the stack marker) was uninitialized.\n\nSo it might be OK actually! ðŸ˜Š, I admit we were quick to react to this with caution, as these kinds of profiler/unwinder bugs are flaky and hard to reproduce.\n\nFrom a performance PoV though, after a bit of discussion, we think the current sequence may be faster, sequences of `stp` with write-backs can put more pressure on the CPU, compared to a single write-back followed by stores. I\u0027m not sure if the differences would be enough to notice however, especially as this is only creating part of the frame.",
      "parentUuid": "db09a070_8565443f",
      "revId": "0745789acb09f98f2d31a274746aea6c5c59b21c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c5654513_816cb600",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2023-11-21T14:59:14Z",
      "side": 1,
      "message": "If the old sequence is preferrable from a performance perspective, then let\u0027s stick to that. I can quickly check if we can make TurboFan emit the same (better) sequence as `EnterFrame` (which is used from Liftoff).",
      "parentUuid": "30ccc6b4_46ca8b2a",
      "revId": "0745789acb09f98f2d31a274746aea6c5c59b21c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "0745789acb09f98f2d31a274746aea6c5c59b21c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "0745789acb09f98f2d31a274746aea6c5c59b21c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "0745789acb09f98f2d31a274746aea6c5c59b21c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "0745789acb09f98f2d31a274746aea6c5c59b21c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}