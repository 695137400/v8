{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d8eb6de8_4c3516be",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2024-10-02T12:41:55Z",
      "side": 1,
      "message": "LGTM",
      "revId": "c023f964861f354cc47b05c9fbee5d4944951487",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80af3699_7895da74",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-10-09T11:39:47Z",
      "side": 1,
      "message": "LGTM with high-level (design) questions about long-term maintainability/security (which are possibly better suited to an offline discussion/chat).",
      "revId": "c023f964861f354cc47b05c9fbee5d4944951487",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b976e3b9_6303eaf0",
        "filename": "src/compiler/turboshaft/assembler.h",
        "patchSetId": 1
      },
      "lineNbr": 2380,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-10-09T11:39:47Z",
      "side": 1,
      "message": "Just to double check: there are four possible combinations of `Is64()` and `V8_ENABLE_WASM_CODE_POINTER_TABLE` and they are all different from each other:\n- `Is64() \u0026\u0026 V8_ENABLE_WASM_CODE_POINTER_TABLE`: This returns a `Word32` (!) here (namely the function index), which the instruction selector relocates to an `int64_t` (still a function index, for indexing into the CPT). Is this correct? In particular, I\u0027m worried that when we write a `WasmCodePtr` here we depend on `V8_ENABLE_WASM_CODE_POINTER_TABLE`, but when we read it in the instruction selector at   \nhttps://source.chromium.org/chromium/chromium/src/+/main:v8/src/compiler/backend/instruction-selector-impl.h;l\u003d429;drc\u003d0afdaad03fc3fc271a751cb77dea8c8efb84b49f we depend on `Is64` instead.\n- `Is64() \u0026\u0026 !V8_ENABLE_WASM_CODE_POINTER_TABLE`: We write a `Word64` function index here, which the instruction selector relocates to an `int64_t` absolute address.\n- `!Is64() \u0026\u0026 V8_ENABLE_WASM_CODE_POINTER_TABLE`: We write a `Word32` function index here, which the instruction selector relocates to an `int32_t` function index into the CPT.\n- `!Is64() \u0026\u0026 !V8_ENABLE_WASM_CODE_POINTER_TABLE`: We write a `Word32` function index here, which the instruction selector relocates to an `int32_t` absolute address.\n\nIs this correct? I have a vague, uneasy feeling about this much (implicit) type/bit-width juggling happening, but I also don\u0027t know of a better solution.",
      "revId": "c023f964861f354cc47b05c9fbee5d4944951487",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecfce36c_ad2f85b7",
        "filename": "src/compiler/turboshaft/assembler.h",
        "patchSetId": 1
      },
      "lineNbr": 2380,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-10-09T11:58:41Z",
      "side": 1,
      "message": "Ah, I suppose I should have reviewed the next CL in the chain first, as it modifies exactly that relocation code.",
      "parentUuid": "b976e3b9_6303eaf0",
      "revId": "c023f964861f354cc47b05c9fbee5d4944951487",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "907c8f39_34bceb7c",
        "filename": "src/compiler/turboshaft/assembler.h",
        "patchSetId": 1
      },
      "lineNbr": 2380,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-10-10T11:49:25Z",
      "side": 1,
      "message": "After the follow-up CL and getting a bit better understanding, the four cases are as described in my first comment, except that\n- the `Is64() \u0026\u0026 V8_ENABLE_WASM_CODE_POINTER_TABLE` case will relocate to an `int32_t` CPT handle, not `int64_t`, and\n- the `V8_ENABLE_WASM_CODE_POINTER_TABLE` cases will relocate to CPT handles, not function indices as I described before (the CPT is process wide, so there is no relation between CPT handles and function indices).",
      "parentUuid": "ecfce36c_ad2f85b7",
      "revId": "c023f964861f354cc47b05c9fbee5d4944951487",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "198332ca_ca5bcb49",
        "filename": "src/compiler/turboshaft/index.h",
        "patchSetId": 1
      },
      "lineNbr": 536,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-10-09T11:39:47Z",
      "side": 1,
      "message": "Could we get rid of the `WordPtr` variant? Right now, this change makes `CallTarget` more permissive, in the sense that we will catch fewer potential errors. Is there some way we can make it stricter instead?",
      "range": {
        "startLine": 536,
        "startChar": 33,
        "endLine": 536,
        "endChar": 40
      },
      "revId": "c023f964861f354cc47b05c9fbee5d4944951487",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d75ca9f5_123747f2",
        "filename": "src/compiler/turboshaft/index.h",
        "patchSetId": 1
      },
      "lineNbr": 536,
      "author": {
        "id": 1120979
      },
      "writtenOn": "2024-10-10T08:56:17Z",
      "side": 1,
      "message": "I don\u0027t know how to make this stricter. The WordPtr is still used for direct calls.\nE.g. when we embed the address of builtin call targets in wasm:\n```\nV\u003cWordPtr\u003e builtin \u003d\n            __ RelocatableWasmBuiltinCallTarget(Builtin::kWasmStackGuard);\n```\nhttps://source.chromium.org/chromium/chromium/src/+/main:v8/src/compiler/turboshaft/stack-check-lowering-reducer.h;l\u003d127;drc\u003d8b1017f685a9cbd1abd9900a1c87ee9fe6b68fd9",
      "parentUuid": "198332ca_ca5bcb49",
      "range": {
        "startLine": 536,
        "startChar": 33,
        "endLine": 536,
        "endChar": 40
      },
      "revId": "c023f964861f354cc47b05c9fbee5d4944951487",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de437974_1908a47c",
        "filename": "src/compiler/turboshaft/index.h",
        "patchSetId": 1
      },
      "lineNbr": 536,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-10-10T11:49:25Z",
      "side": 1,
      "message": "Oh, right. LGTM then.",
      "parentUuid": "d75ca9f5_123747f2",
      "range": {
        "startLine": 536,
        "startChar": 33,
        "endLine": 536,
        "endChar": 40
      },
      "revId": "c023f964861f354cc47b05c9fbee5d4944951487",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "If the author is a V8 committer, code review is required from one other committer (see https://v8.dev/docs/become-committer). Otherwise, code review is required from two committers."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "((uploaderin:cria/project-v8-committers AND label:Code-Review\u003dMAX,user\u003dnon_uploader) OR label:Code-Review\u003dMAX,count\u003e\u003d2) AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"((uploaderin:cria/project-v8-committers AND label:Code-Review=MAX,user=non_uploader) OR label:Code-Review=MAX,count>=2) AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader","uploaderin:cria/project-v8-committers","label:Code-Review=MAX,count>=2"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "c023f964861f354cc47b05c9fbee5d4944951487",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overridden with Unresolved-Comment-Reason: \u003creason\u003e line in change message."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "message:\"^.*Unresolved-Comment-Reason:.*\""
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:unresolved"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*Unresolved-Comment-Reason:.*\""},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "c023f964861f354cc47b05c9fbee5d4944951487",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval. Using a trusted device is required, see go/gerrit-onboarding#review-enforcement."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "c023f964861f354cc47b05c9fbee5d4944951487",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "c023f964861f354cc47b05c9fbee5d4944951487",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}