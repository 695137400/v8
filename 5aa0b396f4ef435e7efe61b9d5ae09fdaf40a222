{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "149165aa_1b1069eb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1420650
      },
      "writtenOn": "2022-08-29T09:36:51Z",
      "side": 1,
      "message": "PTAL, thanks!\n\npinpoint report +1% gain to speedometer2, not sure whether it is variance.",
      "revId": "5aa0b396f4ef435e7efe61b9d5ae09fdaf40a222",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00bacc50_c9bff9fe",
        "filename": "src/ic/accessor-assembler.cc",
        "patchSetId": 4
      },
      "lineNbr": 101,
      "author": {
        "id": 1420650
      },
      "writtenOn": "2022-08-29T09:36:51Z",
      "side": 1,
      "message": "Is this field guaranteed to be a non-smi? If it is, we can do optimization as this CL.\n\nI\u0027m also wandering whether we ca do this optimization for JIT. I saw function like `BuildIsStrongReference` in `EffectControlLinearizer`, is this the correct position to do so?",
      "revId": "5aa0b396f4ef435e7efe61b9d5ae09fdaf40a222",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5aeb77c1_76580916",
        "filename": "src/ic/accessor-assembler.cc",
        "patchSetId": 4
      },
      "lineNbr": 101,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2022-08-29T16:55:10Z",
      "side": 1,
      "message": "It seems that it can be a Smi in some rare cases, but we can change the encoding if it\u0027s worth it. \nPlease add `CSA_ASSERT(this, IsSmi(feedback));` here and and a similar DCHECKs in FeedbackNexus::Get/SetFeedback().\n\nRe `BuildIsStrongReference` - it seems to be unused in TurboFan.",
      "parentUuid": "00bacc50_c9bff9fe",
      "revId": "5aa0b396f4ef435e7efe61b9d5ae09fdaf40a222",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f319ab5_6815c17d",
        "filename": "src/ic/accessor-assembler.cc",
        "patchSetId": 4
      },
      "lineNbr": 101,
      "author": {
        "id": 1420650
      },
      "writtenOn": "2022-08-30T09:25:44Z",
      "side": 1,
      "message": "I\u0027ve added some DCHECK, PTAL.\n\nIt seems that it passes all the trybot tests. So in which cases this filed can be set to a Smi? Do we need to add a test case for it?",
      "parentUuid": "5aeb77c1_76580916",
      "revId": "5aa0b396f4ef435e7efe61b9d5ae09fdaf40a222",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd3dde4a_d9a65fa4",
        "filename": "src/ic/accessor-assembler.cc",
        "patchSetId": 4
      },
      "lineNbr": 101,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2022-08-30T09:54:25Z",
      "side": 1,
      "message": "At least, `FeedbackNexus::ConfigureLexicalVarMode` and `FeedbackNexus::Clear()` set it to Smi. \nThe former is about accessing `let` and `const` variables declared on a script level.",
      "parentUuid": "3f319ab5_6815c17d",
      "revId": "5aa0b396f4ef435e7efe61b9d5ae09fdaf40a222",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b50bcdda_a364195c",
        "filename": "src/ic/accessor-assembler.cc",
        "patchSetId": 4
      },
      "lineNbr": 101,
      "author": {
        "id": 1420650
      },
      "writtenOn": "2022-08-30T11:50:15Z",
      "side": 1,
      "message": "I just checked the use side of `TryMonomorphicCase` and they are:\n\n    LoadIC_BytecodeHandler\n    LoadIC\n    LoadSuperIC\n    KeyedLoadIC\n    StoreIC\n    KeyedStoreIC\n    DefineKeyedOwnIC\n    StoreInArrayLiteralIC\n    GenerateCloneObjectIC\n    \nFor `FeedbackNexus::ConfigureLexicalVarMode`, the slot should be GlobalIC, and the slot kinds are listed below, and it seems that they are not affected by this CL.\n\n    FeedbackSlotKind::kLoadGlobalNotInsideTypeof \n    FeedbackSlotKind::kLoadGlobalInsideTypeof\n    FeedbackSlotKind::kStoreGlobalSloppy\n    FeedbackSlotKind::kStoreGlobalStrict\n    \nFor \u0027FeedbackNexus::Clear()\u0027, they are uninitialized to `UninitializedSentinel` (https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/feedback-vector.cc;l\u003d588;drc\u003d7267e612666ee78e5809dcc48253af2857989a47), which is also not a smi.\n\nDoes this means it happens that this CL only affects slots that are not set to a Smi? Otherwise it should fails the CSA_DCHECK.",
      "parentUuid": "dd3dde4a_d9a65fa4",
      "revId": "5aa0b396f4ef435e7efe61b9d5ae09fdaf40a222",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99b3a6a0_50d8ae9c",
        "filename": "src/ic/accessor-assembler.cc",
        "patchSetId": 4
      },
      "lineNbr": 101,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2022-08-30T12:30:54Z",
      "side": 1,
      "message": "I was worried about this one: https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/feedback-vector.cc;l\u003d626;drc\u003d7267e612666ee78e5809dcc48253af2857989a47",
      "parentUuid": "b50bcdda_a364195c",
      "revId": "5aa0b396f4ef435e7efe61b9d5ae09fdaf40a222",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}