{
  "comments": [
    {
      "key": {
        "uuid": "9f74a74d_a71db6e6",
        "filename": "src/asmjs/asm-parser.cc",
        "patchSetId": 5
      },
      "lineNbr": 153,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-10T14:34:05Z",
      "side": 1,
      "message": "Nit: can get rid of the ! by reversing this",
      "range": {
        "startLine": 153,
        "startChar": 14,
        "endLine": 153,
        "endChar": 56
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7455fd1e_2c6836a3",
        "filename": "src/asmjs/asm-parser.cc",
        "patchSetId": 5
      },
      "lineNbr": 162,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-10T14:34:05Z",
      "side": 1,
      "message": "When does this happen? Is this some kind of an error case?",
      "range": {
        "startLine": 162,
        "startChar": 6,
        "endLine": 162,
        "endChar": 21
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8248a294_f0d81901",
        "filename": "src/asmjs/asm-parser.cc",
        "patchSetId": 5
      },
      "lineNbr": 173,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-10T14:34:05Z",
      "side": 1,
      "message": "Ditto\n\nAlso this should probably be nullptr as above, not 0.",
      "range": {
        "startLine": 173,
        "startChar": 6,
        "endLine": 173,
        "endChar": 15
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "018e52fa_27621933",
        "filename": "src/asmjs/asm-parser.cc",
        "patchSetId": 5
      },
      "lineNbr": 181,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-10T14:34:05Z",
      "side": 1,
      "message": "Random idea: Is it possible to add some meaningful dchecks here, like, if we didn\u0027t fail, then certain stuff must have happened / some data structures have been filled in / ...?\n\n(Not sure if there\u0027s anything meaningful to check here, just a random idea.)",
      "range": {
        "startLine": 181,
        "startChar": 10,
        "endLine": 181,
        "endChar": 17
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1013726_cd830f56",
        "filename": "src/asmjs/asm-parser.cc",
        "patchSetId": 5
      },
      "lineNbr": 275,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-15T13:34:20Z",
      "side": 1,
      "message": "Is it possible to insert some checks / dchecks into this CopyCurrentIdentifierString (in Scanner or Parser) checking that we actually have an identifier (ie that the current token is an identifier)?\n\nScanner just blindly returns identifier_string_ without any checks.\n\nIn addition, could the Scanner reset identifier_string_ when it moves past the identifier?",
      "range": {
        "startLine": 275,
        "startChar": 32,
        "endLine": 275,
        "endChar": 59
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9947672_bc6e6050",
        "filename": "src/asmjs/asm-parser.cc",
        "patchSetId": 5
      },
      "lineNbr": 337,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-10T14:34:05Z",
      "side": 1,
      "message": "I still don\u0027t get why this is correct.\n\nE.g., if statements also add kRegular blocks into the stack.\n\nSo how come this is is correct in the case of:\n\nfor(...) {\n  if (...) {\n    if (...) { \u003c\u003c kRegular block here and label is kTokenNone\n      break;\n    }\n  }\n}",
      "range": {
        "startLine": 331,
        "startChar": 2,
        "endLine": 337,
        "endChar": 3
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aac4b0cc_635966a6",
        "filename": "src/asmjs/asm-parser.cc",
        "patchSetId": 5
      },
      "lineNbr": 338,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-18T11:48:46Z",
      "side": 1,
      "message": "This is using a magic -1 to signal \"not found\".\n\nA more explicit approach would be:\nbool FindBreakLabelDepth(token label, int* depth);",
      "range": {
        "startLine": 338,
        "startChar": 10,
        "endLine": 338,
        "endChar": 11
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c58faf61_b96f0d13",
        "filename": "src/asmjs/asm-parser.cc",
        "patchSetId": 5
      },
      "lineNbr": 618,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-15T13:34:20Z",
      "side": 1,
      "message": "Nit: could this be moved below ValidateFunctionTable so that they\u0027re ordered logically?",
      "range": {
        "startLine": 618,
        "startChar": 18,
        "endLine": 618,
        "endChar": 32
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc1436b5_7d060939",
        "filename": "src/asmjs/asm-parser.cc",
        "patchSetId": 5
      },
      "lineNbr": 625,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-15T13:34:20Z",
      "side": 1,
      "message": "Confused... why would it be ok to have a global here?\n\nDoes it happen when we happen to use a name of an existing global variable as a variable name here too?\n\nAnd I\u0027m confused by this !IsGlobal() \u0026\u0026 !IsLocal() since... we basically need to tell the Scanner which one to expect. And I\u0027d guess we\u0027re inside a local scope here... ah wait, so IsGlobal can only be true when we\u0027re in a local scope but the variable name is already a global variable name?\n\nLogically, isn\u0027t the name here independent of any global and local variables which might have the same name? Is it only because of the restriction of the scanner that it always check for existing names before creating new ones that this code looks like this?",
      "range": {
        "startLine": 625,
        "startChar": 11,
        "endLine": 625,
        "endChar": 30
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f035d193_0f91bfcd",
        "filename": "src/asmjs/asm-parser.cc",
        "patchSetId": 5
      },
      "lineNbr": 625,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-15T14:20:04Z",
      "side": 1,
      "message": "Offline discussion:\n\n- Here it should never be local -\u003e DCHECK\n- This check should be only if (!scanner_.IsGlobal()) { .. }",
      "parentUuid": "bc1436b5_7d060939",
      "range": {
        "startLine": 625,
        "startChar": 11,
        "endLine": 625,
        "endChar": 30
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2adf8673_87d6dfbc",
        "filename": "src/asmjs/asm-parser.cc",
        "patchSetId": 5
      },
      "lineNbr": 864,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-16T11:30:07Z",
      "side": 1,
      "message": "This is still very confusing... so we don\u0027t really \"stay\" in the local scope ever, we\u0027re just telling the scanner that the next identifier it reaches is a local, and were doing that by entering the local scope, scanning one token forward and then immediately exiting the local scope.\n\nWould an API like this be cleaer:\n\nscanner_.NextIdentifierIsLocal();\nEXPECT_TOKEN(TOK(var)); \u003c\u003c Scanner would clear the flag now as it has reached the next identifier.\n\nNextIdentifierIsLocal could also DCHECK that it\u0027s called early enough (ie we\u0027re not in a position where we have just scanned an identifier).",
      "range": {
        "startLine": 862,
        "startChar": 4,
        "endLine": 864,
        "endChar": 32
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f9622e9_e5b7c128",
        "filename": "src/asmjs/asm-parser.cc",
        "patchSetId": 5
      },
      "lineNbr": 1016,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-16T11:30:07Z",
      "side": 1,
      "message": "Here 0 is used as a special \"no token\" value. But in Scanner, it doesn\u0027t look like it\u0027s \"reserved\" for that purpose:\n\n// 0        .. 255                         :: Single char tokens\n\nWould it make sense to make it explicit in the Scanner that 0 is the \"no token\" token, and define a constant for it, and use it here (and possibly in other places)?",
      "range": {
        "startLine": 1016,
        "startChar": 2,
        "endLine": 1016,
        "endChar": 48
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51d20a2b_b362b9dd",
        "filename": "src/asmjs/asm-parser.cc",
        "patchSetId": 5
      },
      "lineNbr": 1022,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-18T11:48:46Z",
      "side": 1,
      "message": "Interesting... looks like not all loops check failed_ - should they? Or is this one superfluous?\n\nDon\u0027t EXPECT_TOKEN above and RECURSE below return if we fail, so, here failed_ can never be true, and checking it is unnecessary?",
      "range": {
        "startLine": 1022,
        "startChar": 10,
        "endLine": 1022,
        "endChar": 17
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0783fd72_ff88bae7",
        "filename": "src/asmjs/asm-parser.cc",
        "patchSetId": 5
      },
      "lineNbr": 1115,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-18T11:48:46Z",
      "side": 1,
      "message": "Why another pending_label_ here?",
      "range": {
        "startLine": 1115,
        "startChar": 2,
        "endLine": 1115,
        "endChar": 6
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "631cfe7b_4652aeb3",
        "filename": "src/asmjs/asm-parser.cc",
        "patchSetId": 5
      },
      "lineNbr": 1141,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-18T11:48:46Z",
      "side": 1,
      "message": "Why do we use pending_label_ again here?",
      "range": {
        "startLine": 1141,
        "startChar": 30,
        "endLine": 1141,
        "endChar": 44
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ab94d38_71e9b920",
        "filename": "src/asmjs/asm-parser.cc",
        "patchSetId": 5
      },
      "lineNbr": 1185,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-18T11:48:46Z",
      "side": 1,
      "message": "Nit: surprising choice of words since \"race\" means something else when talking about threads. \"Skip\"?",
      "range": {
        "startLine": 1185,
        "startChar": 5,
        "endLine": 1185,
        "endChar": 9
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40d62965_b692aa8d",
        "filename": "src/asmjs/asm-parser.cc",
        "patchSetId": 5
      },
      "lineNbr": 1248,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-18T11:48:46Z",
      "side": 1,
      "message": "It\u0027s nontrivial to see where pending_label_ is reset. Seems to be a bunch of places...\n\nBut here it should be reset anyway so can we DCHECK_EQ(pending_label_, 0); here?\n\n(And I assume it can\u0027t be reset after this RECURSE since that\u0027s too late; it needs to be reset right after it\u0027s used.)\n\nAn alternative approach would be to not have pending_label_ but pass it explicitly as a parameter. How messy would that be?",
      "range": {
        "startLine": 1248,
        "startChar": 2,
        "endLine": 1248,
        "endChar": 9
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8924d66c_3068aaa1",
        "filename": "src/asmjs/asm-parser.cc",
        "patchSetId": 5
      },
      "lineNbr": 1282,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-18T11:48:46Z",
      "side": 1,
      "message": "Ditto (here and below)",
      "range": {
        "startLine": 1282,
        "startChar": 10,
        "endLine": 1282,
        "endChar": 17
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e075cfb_ab8bad92",
        "filename": "src/asmjs/asm-parser.cc",
        "patchSetId": 5
      },
      "lineNbr": 1302,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-18T11:48:46Z",
      "side": 1,
      "message": "bool negate \u003d Check(\u0027-\u0027);",
      "range": {
        "startLine": 1299,
        "startChar": 2,
        "endLine": 1302,
        "endChar": 3
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aefbe5a5_d13cc96d",
        "filename": "src/asmjs/asm-parser.cc",
        "patchSetId": 5
      },
      "lineNbr": 1395,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-18T11:48:46Z",
      "side": 1,
      "message": "When can this happen?",
      "range": {
        "startLine": 1395,
        "startChar": 8,
        "endLine": 1395,
        "endChar": 38
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d5b9bb7_8ca149b0",
        "filename": "src/asmjs/asm-parser.cc",
        "patchSetId": 5
      },
      "lineNbr": 1433,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-29T16:02:28Z",
      "side": 1,
      "message": "It\u0027s pretty hard to follow where this is set to true and to false again.\n\nWould it make sense to add DCHECKs, like, here DCHECK(!inside_heap_assignment_)?",
      "range": {
        "startLine": 1433,
        "startChar": 4,
        "endLine": 1433,
        "endChar": 27
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4182ce33_309432f5",
        "filename": "src/asmjs/asm-parser.cc",
        "patchSetId": 5
      },
      "lineNbr": 1453,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-29T16:02:28Z",
      "side": 1,
      "message": "Can you Check here instead of Peek, since you\u0027re doing EXPECT_TOKEN right below?",
      "range": {
        "startLine": 1453,
        "startChar": 8,
        "endLine": 1453,
        "endChar": 12
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7dc9c72_ed86b859",
        "filename": "src/asmjs/asm-parser.cc",
        "patchSetId": 5
      },
      "lineNbr": 1738,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-29T16:02:28Z",
      "side": 1,
      "message": "This kind of code reoccurs really often (see above), and makes the functions long. Is it possible to move this to a helper? Maybe something that takes a and b, and a param indicating what kind of operation we\u0027re doing (here add), and which them looks up the right thing to emit in an array?",
      "range": {
        "startLine": 1728,
        "startChar": 6,
        "endLine": 1738,
        "endChar": 74
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e71365bd_bf756e6c",
        "filename": "src/asmjs/asm-parser.cc",
        "patchSetId": 5
      },
      "lineNbr": 1744,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-29T16:02:28Z",
      "side": 1,
      "message": "Why is this relevant only in this branch?",
      "range": {
        "startLine": 1741,
        "startChar": 8,
        "endLine": 1744,
        "endChar": 9
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61bcf856_1d2cb51c",
        "filename": "src/asmjs/asm-parser.cc",
        "patchSetId": 5
      },
      "lineNbr": 1851,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-29T16:02:28Z",
      "side": 1,
      "message": "Why does the switch have to be in this loop? (Maybe a comment?) I\u0027m confused! Are we handling something like a \u003d\u003d b \u003d\u003d c here?",
      "range": {
        "startLine": 1851,
        "startChar": 2,
        "endLine": 1851,
        "endChar": 12
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88a7f6f7_75b5109c",
        "filename": "src/asmjs/asm-parser.cc",
        "patchSetId": 5
      },
      "lineNbr": 1853,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-29T16:02:28Z",
      "side": 1,
      "message": "This is the same as above except that the function for getting B is different... wondering if collapsing these 2 macros would make sense... Dunno.",
      "range": {
        "startLine": 1853,
        "startChar": 8,
        "endLine": 1853,
        "endChar": 19
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "efff2dea_22ae2780",
        "filename": "src/asmjs/asm-parser.cc",
        "patchSetId": 5
      },
      "lineNbr": 1995,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-29T16:02:28Z",
      "side": 1,
      "message": "Nit: typo",
      "range": {
        "startLine": 1995,
        "startChar": 10,
        "endLine": 1995,
        "endChar": 32
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a92222d7_5d407d7f",
        "filename": "src/asmjs/asm-parser.cc",
        "patchSetId": 5
      },
      "lineNbr": 2094,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-29T16:02:28Z",
      "side": 1,
      "message": "This could be moved to a helper to make this long function (300 lines!) shorter.",
      "range": {
        "startLine": 2074,
        "startChar": 2,
        "endLine": 2094,
        "endChar": 21
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b057d458_36c9125e",
        "filename": "src/asmjs/asm-parser.cc",
        "patchSetId": 5
      },
      "lineNbr": 2164,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-29T16:02:28Z",
      "side": 1,
      "message": "Can this code be moved to a helper too?",
      "range": {
        "startLine": 2164,
        "startChar": 4,
        "endLine": 2164,
        "endChar": 64
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d402c01_6a6828a1",
        "filename": "src/asmjs/asm-parser.cc",
        "patchSetId": 5
      },
      "lineNbr": 2320,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-29T16:02:28Z",
      "side": 1,
      "message": "Is this because it here we\u0027re sure that it\u0027s indexing into the function table (even if we don\u0027t yet know what the name of the function table is ie kUnused above)? Or what is this?\n\n(Maybe needs a comment?)",
      "range": {
        "startLine": 2320,
        "startChar": 21,
        "endLine": 2320,
        "endChar": 25
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6be4d492_e1e853a5",
        "filename": "src/asmjs/asm-parser.h",
        "patchSetId": 5
      },
      "lineNbr": 11,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-10T14:34:05Z",
      "side": 1,
      "message": "#include nit: whoever includes parser shouldn\u0027t need to include scanner.\n\nAfaics it\u0027s mainly needed because of the token type... non-trivial... probably not worth fixing.",
      "range": {
        "startLine": 11,
        "startChar": 24,
        "endLine": 11,
        "endChar": 31
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ef13b37_d0fcd47c",
        "filename": "src/asmjs/asm-parser.h",
        "patchSetId": 5
      },
      "lineNbr": 34,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-10T14:34:05Z",
      "side": 1,
      "message": "If I understand correctly, AsmJsParser kicks in when we are in GenerateUnoptimizedCode. Does it mean that we have already parsed the script with the normal parser once (without any bailout)? That seems wasteful. Shouldn\u0027t we instead bail out from the normal parser if we\u0027re sure this code path will kick in later?",
      "range": {
        "startLine": 34,
        "startChar": 53,
        "endLine": 34,
        "endChar": 74
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78bdf473_1d46cf3d",
        "filename": "src/asmjs/asm-parser.h",
        "patchSetId": 5
      },
      "lineNbr": 70,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-10T14:34:05Z",
      "side": 1,
      "message": "Maybe you told me what this is but I already forgot. Maybe add a comment?",
      "range": {
        "startLine": 70,
        "startChar": 12,
        "endLine": 70,
        "endChar": 16
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7ae0cd9_58830a6b",
        "filename": "src/asmjs/asm-parser.h",
        "patchSetId": 5
      },
      "lineNbr": 107,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-10T14:34:05Z",
      "side": 1,
      "message": "This block could use a comment.",
      "range": {
        "startLine": 105,
        "startChar": 2,
        "endLine": 107,
        "endChar": 34
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1eee73f5_106e840a",
        "filename": "src/asmjs/asm-parser.h",
        "patchSetId": 5
      },
      "lineNbr": 119,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-10T14:34:05Z",
      "side": 1,
      "message": "Doesn\u0027t this belong to the Scanner?",
      "range": {
        "startLine": 119,
        "startChar": 2,
        "endLine": 119,
        "endChar": 52
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0586a104_fb206ca6",
        "filename": "src/asmjs/asm-scanner.cc",
        "patchSetId": 5
      },
      "lineNbr": 263,
      "author": {
        "id": 1115961
      },
      "writtenOn": "2017-05-15T13:34:20Z",
      "side": 1,
      "message": "Here we just crash V8. Shouldn\u0027t we just fail the validation instead?\n\nkMaxIdentifierCount is only used in these CHECKs...\n\nThis is a bit below the max string length so isn\u0027t it possible that we hit them?\n\n(Max string length is (1 \u003c\u003c 28) - 16 which is roughly 286 millions and this is 0xf000000 which is 251 millions.)",
      "range": {
        "startLine": 263,
        "startChar": 4,
        "endLine": 263,
        "endChar": 9
      },
      "revId": "f82e0362b900e34d87adf3f978d01f057ccc1ffd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}