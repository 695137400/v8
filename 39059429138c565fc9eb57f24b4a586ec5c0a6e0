{
  "comments": [
    {
      "key": {
        "uuid": "a6a0aba7_0f07b561",
        "filename": "src/builtins/internal.tq",
        "patchSetId": 6
      },
      "lineNbr": 36,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-06-16T09:46:41Z",
      "side": 1,
      "message": "Can we call this file tagged-templates.tq or something like that?",
      "revId": "39059429138c565fc9eb57f24b4a586ec5c0a6e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3130225_34f93ca1",
        "filename": "src/builtins/internal.tq",
        "patchSetId": 6
      },
      "lineNbr": 36,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-06-16T11:29:57Z",
      "side": 1,
      "message": "Do you expect other tagged-template-related code? For torque files we\u0027ve generally recommended not having one file per function, and internal.tq is consistent with runtime-internal.cc (where the corresponding runtime function is).",
      "parentUuid": "a6a0aba7_0f07b561",
      "revId": "39059429138c565fc9eb57f24b4a586ec5c0a6e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a1927f6_a93bfe01",
        "filename": "src/builtins/internal.tq",
        "patchSetId": 6
      },
      "lineNbr": 36,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-06-16T11:40:38Z",
      "side": 1,
      "message": "I have no expectations either way, I just think internal is not a helpful name. I suggested tagged-templates because that\u0027s the JS feature being implemented. I didn\u0027t realize your name corresponds to runtime-internal.cc (otoh there is src/objects/template-objects-inl.h).",
      "parentUuid": "d3130225_34f93ca1",
      "revId": "39059429138c565fc9eb57f24b4a586ec5c0a6e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb954517_754ddbd6",
        "filename": "src/builtins/internal.tq",
        "patchSetId": 6
      },
      "lineNbr": 36,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-06-16T11:45:43Z",
      "side": 1,
      "message": "I don\u0027t have strong preferences. If you don\u0027t either I\u0027ll keep this name for consistency with runtime/. (I agree \u0027internal\u0027 is very generic, imo that\u0027s fine though for a collection of one-off builtins for internal use.)",
      "parentUuid": "7a1927f6_a93bfe01",
      "revId": "39059429138c565fc9eb57f24b4a586ec5c0a6e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "00f95b64_055e70d9",
        "filename": "src/builtins/internal.tq",
        "patchSetId": 6
      },
      "lineNbr": 36,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-06-16T11:55:33Z",
      "side": 1,
      "message": "ok",
      "parentUuid": "eb954517_754ddbd6",
      "revId": "39059429138c565fc9eb57f24b4a586ec5c0a6e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "992239de_251fee16",
        "filename": "src/compiler/js-call-reducer.cc",
        "patchSetId": 6
      },
      "lineNbr": 4578,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-06-16T09:46:41Z",
      "side": 1,
      "message": "I\u0027d prefer if those cases for which we have a ReduceFoo function only call that function in the switch here. Can you move the check into ReducePromiseConstructor?",
      "revId": "39059429138c565fc9eb57f24b4a586ec5c0a6e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c599a668_5cbc4c5f",
        "filename": "src/compiler/js-generic-lowering.cc",
        "patchSetId": 6
      },
      "lineNbr": 340,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-06-16T09:46:41Z",
      "side": 1,
      "message": "Please update the comment.",
      "range": {
        "startLine": 339,
        "startChar": 42,
        "endLine": 340,
        "endChar": 30
      },
      "revId": "39059429138c565fc9eb57f24b4a586ec5c0a6e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e03c5991_7887d8d4",
        "filename": "src/compiler/js-generic-lowering.cc",
        "patchSetId": 6
      },
      "lineNbr": 340,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-06-16T11:29:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c599a668_5cbc4c5f",
      "range": {
        "startLine": 339,
        "startChar": 42,
        "endLine": 340,
        "endChar": 30
      },
      "revId": "39059429138c565fc9eb57f24b4a586ec5c0a6e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "31c41fb7_b4042c0b",
        "filename": "src/compiler/js-generic-lowering.cc",
        "patchSetId": 6
      },
      "lineNbr": 697,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-06-16T09:46:41Z",
      "side": 1,
      "message": "Nit, here and below: Constant(shared)",
      "revId": "39059429138c565fc9eb57f24b4a586ec5c0a6e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00e513b1_78460df8",
        "filename": "src/compiler/js-generic-lowering.cc",
        "patchSetId": 6
      },
      "lineNbr": 697,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-06-16T11:29:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "31c41fb7_b4042c0b",
      "revId": "39059429138c565fc9eb57f24b4a586ec5c0a6e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "687a43bf_e09c4989",
        "filename": "src/compiler/js-generic-lowering.cc",
        "patchSetId": 6
      },
      "lineNbr": 766,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-06-16T09:46:41Z",
      "side": 1,
      "message": "This input seems to be unused in general, we should remove it.",
      "revId": "39059429138c565fc9eb57f24b4a586ec5c0a6e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8cd918c8_2236c2eb",
        "filename": "src/compiler/js-generic-lowering.cc",
        "patchSetId": 6
      },
      "lineNbr": 766,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-06-16T11:29:57Z",
      "side": 1,
      "message": "Will do in a follow-up.",
      "parentUuid": "687a43bf_e09c4989",
      "revId": "39059429138c565fc9eb57f24b4a586ec5c0a6e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "59a4f659_91d55ace",
        "filename": "src/compiler/js-generic-lowering.cc",
        "patchSetId": 6
      },
      "lineNbr": 787,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-06-16T09:46:41Z",
      "side": 1,
      "message": "These runtime functions do more than allocate: they also update the context on the isolate. I\u0027m not sure we want to do that.",
      "revId": "39059429138c565fc9eb57f24b4a586ec5c0a6e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "595c6e82_3e43d961",
        "filename": "src/compiler/js-generic-lowering.cc",
        "patchSetId": 6
      },
      "lineNbr": 787,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-06-16T11:29:57Z",
      "side": 1,
      "message": "Interesting.. So bytecode handlers also call this runtime function [0] (which calls isolate-\u003eset_context), while js-create-lowering only allocates and initializes a new context without setting it on the isolate. \n\nNot sure of all the implications here although I assume staying consistent with ignition is safe. I\u0027ll ask around.\n\n[0] https://source.chromium.org/chromium/chromium/src/+/master:v8/src/interpreter/interpreter-generator.cc;l\u003d2534;drc\u003dmaster?originalUrl\u003dhttps:%2F%2Fcs.chromium.org%2F",
      "parentUuid": "59a4f659_91d55ace",
      "revId": "39059429138c565fc9eb57f24b4a586ec5c0a6e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed5e0df2_775da58e",
        "filename": "src/compiler/js-generic-lowering.cc",
        "patchSetId": 6
      },
      "lineNbr": 787,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-06-16T11:42:20Z",
      "side": 1,
      "message": "I suspect that having TF\u0027d code update the isolate on each context creation  does no harm but is unnecessary since we do it when calling into the runtime.",
      "parentUuid": "595c6e82_3e43d961",
      "revId": "39059429138c565fc9eb57f24b4a586ec5c0a6e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef0780dc_a47de4c1",
        "filename": "src/interpreter/interpreter-generator.cc",
        "patchSetId": 6
      },
      "lineNbr": 2425,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-06-15T12:20:39Z",
      "side": 1,
      "message": "Ross: we could turn this handler into a builtin call now, the caveat is extra work on the fast path. Wdyt?",
      "revId": "39059429138c565fc9eb57f24b4a586ec5c0a6e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "182205f4_d175b4d8",
        "filename": "src/interpreter/interpreter-generator.cc",
        "patchSetId": 6
      },
      "lineNbr": 2425,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2020-06-16T10:10:09Z",
      "side": 1,
      "message": "I\u0027m fine with this being a builtin, it\u0027s probably not too common a bytecode so I don\u0027t think the call overhead would cost us too much.",
      "parentUuid": "ef0780dc_a47de4c1",
      "revId": "39059429138c565fc9eb57f24b4a586ec5c0a6e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "659bad5c_7f51bebd",
        "filename": "src/interpreter/interpreter-generator.cc",
        "patchSetId": 6
      },
      "lineNbr": 2425,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-06-16T11:29:57Z",
      "side": 1,
      "message": "Note it\u0027s not only the call overhead, the handler also avoids loading description, shared, and context if feedback exists.\n\nChanged to a builtin call in the latest PS, if something regresses we can revert.",
      "parentUuid": "182205f4_d175b4d8",
      "revId": "39059429138c565fc9eb57f24b4a586ec5c0a6e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12c6ad2c_1c00800c",
        "filename": "test/mjsunit/mjsunit.status",
        "patchSetId": 6
      },
      "lineNbr": 1277,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-06-15T12:19:07Z",
      "side": 1,
      "message": "We\u0027ll need a better story here at some point. Hooking into assertOptimized mjsunit tricks would probably help shrink this list, likewise something for TurbofanStaticAssert. As long as we\u0027re still limited to the fyi bot I\u0027ll just keep updating the skip list if we start to fail.",
      "revId": "39059429138c565fc9eb57f24b4a586ec5c0a6e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}