{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "df579b82_2ee3e18a",
        "filename": "src/inspector/v8-debugger.cc",
        "patchSetId": 4
      },
      "lineNbr": 86,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2022-11-04T22:04:00Z",
      "side": 1,
      "message": "Technically not needed, the `Get` below will fail if it\u0027s empty.",
      "range": {
        "startLine": 86,
        "startChar": 0,
        "endLine": 86,
        "endChar": 60
      },
      "revId": "68e2c4aa2e4c71ca59d32fa2334f359c8388ad42",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b230d284_6d46c901",
        "filename": "src/inspector/v8-debugger.cc",
        "patchSetId": 4
      },
      "lineNbr": 86,
      "author": {
        "id": 1123071
      },
      "writtenOn": "2022-11-07T15:26:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "df579b82_2ee3e18a",
      "range": {
        "startLine": 86,
        "startChar": 0,
        "endLine": 86,
        "endChar": 60
      },
      "revId": "68e2c4aa2e4c71ca59d32fa2334f359c8388ad42",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ba00cdb_2e448fbc",
        "filename": "src/inspector/v8-debugger.cc",
        "patchSetId": 4
      },
      "lineNbr": 93,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2022-11-04T22:04:00Z",
      "side": 1,
      "message": "nit: same here\n```\nif (m_terminateExecutionCallback) {\n ...\n} else {\n  DCHECK(m_terminateExecutionCallbackContext_.IsEmpty());\n}\n```",
      "range": {
        "startLine": 93,
        "startChar": 1,
        "endLine": 93,
        "endChar": 3
      },
      "revId": "68e2c4aa2e4c71ca59d32fa2334f359c8388ad42",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "516239a3_a4ff659e",
        "filename": "src/inspector/v8-debugger.cc",
        "patchSetId": 4
      },
      "lineNbr": 93,
      "author": {
        "id": 1123071
      },
      "writtenOn": "2022-11-07T15:26:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3ba00cdb_2e448fbc",
      "range": {
        "startLine": 93,
        "startChar": 1,
        "endLine": 93,
        "endChar": 3
      },
      "revId": "68e2c4aa2e4c71ca59d32fa2334f359c8388ad42",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b69ce042_97ac5149",
        "filename": "src/inspector/v8-debugger.cc",
        "patchSetId": 4
      },
      "lineNbr": 293,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2022-11-07T06:06:11Z",
      "side": 1,
      "message": "I\u0027m wondering if this should be weak handle. How likely is it that we call \"terminateExecution\" but never get the \"CallCompletedCallback\"? In that case we would hold on strongly to the context, which in case of e.g. detached windows/iframes would leak that window/iframe.",
      "range": {
        "startLine": 293,
        "startChar": 2,
        "endLine": 293,
        "endChar": 65
      },
      "revId": "68e2c4aa2e4c71ca59d32fa2334f359c8388ad42",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae943fd8_19e56506",
        "filename": "src/inspector/v8-debugger.cc",
        "patchSetId": 4
      },
      "lineNbr": 293,
      "author": {
        "id": 1123071
      },
      "writtenOn": "2022-11-07T15:26:16Z",
      "side": 1,
      "message": "So the problem I had with it being a weak handle (and I did think about it) is that how the callback would get removed. Since Context doesn\u0027t own the microtask queue (and it could just be the default one on the isolate) if the Context goes away we might not necessarily remove the callback from the microtask queue. I wasn\u0027t certain if we could store a handle to the microtask queue instead of the Context.. Camillo?",
      "parentUuid": "b69ce042_97ac5149",
      "range": {
        "startLine": 293,
        "startChar": 2,
        "endLine": 293,
        "endChar": 65
      },
      "revId": "68e2c4aa2e4c71ca59d32fa2334f359c8388ad42",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b3a51af_32809262",
        "filename": "src/inspector/v8-debugger.cc",
        "patchSetId": 4
      },
      "lineNbr": 293,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2022-11-07T19:42:18Z",
      "side": 1,
      "message": "I thought about the following: \n`AddMicrotasksCompletedCallback` takes a data argument. you could pass along the `MicrotaskQueue` in a malloced struct with a weakref and consume it in  `V8Debugger::terminateExecution`.\n\nThat would probably not work with removing the callback in the destructor.\n\nI\u0027m also not 100% certain if the current approach works if a Context\u0027s MicrotaskQueue changes between calling terminateExecution and getting the callback on reportTermination.",
      "parentUuid": "b69ce042_97ac5149",
      "range": {
        "startLine": 293,
        "startChar": 2,
        "endLine": 293,
        "endChar": 65
      },
      "revId": "68e2c4aa2e4c71ca59d32fa2334f359c8388ad42",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bcfb84e9_aa2d68e7",
        "filename": "src/inspector/v8-debugger.cc",
        "patchSetId": 4
      },
      "lineNbr": 293,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2022-11-07T19:43:46Z",
      "side": 1,
      "message": "Come to think, if we hold a weak-ref to the MicrotaskQueue itself on the Debugger we should be fine.\nIf the weak-ref is cleared, the MicrotaskQueue is gone and subsequently no callback will be invoked. Otherwise we\u0027ll manually remove it.",
      "parentUuid": "3b3a51af_32809262",
      "range": {
        "startLine": 293,
        "startChar": 2,
        "endLine": 293,
        "endChar": 65
      },
      "revId": "68e2c4aa2e4c71ca59d32fa2334f359c8388ad42",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d03337e_ddc28ad8",
        "filename": "src/inspector/v8-debugger.cc",
        "patchSetId": 4
      },
      "lineNbr": 293,
      "author": {
        "id": 1123071
      },
      "writtenOn": "2022-11-07T20:07:46Z",
      "side": 1,
      "message": "What I didn\u0027t know was how do you hold a weak-ref to a MicrotaskQueue.. it seems like it a unique_ptr not a GC\u0027d object.",
      "parentUuid": "bcfb84e9_aa2d68e7",
      "range": {
        "startLine": 293,
        "startChar": 2,
        "endLine": 293,
        "endChar": 65
      },
      "revId": "68e2c4aa2e4c71ca59d32fa2334f359c8388ad42",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee520bbe_9fb792c1",
        "filename": "src/inspector/v8-debugger.cc",
        "patchSetId": 4
      },
      "lineNbr": 293,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2022-11-08T09:13:49Z",
      "side": 1,
      "message": "Ah you\u0027re right, in that case you\u0027d only be able to hold a raw pointer to the MicrotaskQueue.",
      "parentUuid": "3d03337e_ddc28ad8",
      "range": {
        "startLine": 293,
        "startChar": 2,
        "endLine": 293,
        "endChar": 65
      },
      "revId": "68e2c4aa2e4c71ca59d32fa2334f359c8388ad42",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4202b06_31003a03",
        "filename": "src/inspector/v8-debugger.cc",
        "patchSetId": 4
      },
      "lineNbr": 293,
      "author": {
        "id": 1123071
      },
      "writtenOn": "2022-11-08T22:39:40Z",
      "side": 1,
      "message": "Ok. Switched to a Weak handle (as per offline discussion with Camillo). We also added removing the callback always (by passing in the microtask queue as the data member of the callback). This protects us against if the microtask queue changes on the Context or if the Context is destroyed before the microtask callback completes.",
      "parentUuid": "ee520bbe_9fb792c1",
      "range": {
        "startLine": 293,
        "startChar": 2,
        "endLine": 293,
        "endChar": 65
      },
      "revId": "68e2c4aa2e4c71ca59d32fa2334f359c8388ad42",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39d620ab_9bfba23b",
        "filename": "src/inspector/v8-debugger.cc",
        "patchSetId": 4
      },
      "lineNbr": 293,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2022-11-09T06:44:31Z",
      "side": 1,
      "message": "Thanks! lgtm, but please also wait for Camillos lgtm.",
      "parentUuid": "f4202b06_31003a03",
      "range": {
        "startLine": 293,
        "startChar": 2,
        "endLine": 293,
        "endChar": 65
      },
      "revId": "68e2c4aa2e4c71ca59d32fa2334f359c8388ad42",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02aadf05_4aa6b681",
        "filename": "src/inspector/v8-debugger.cc",
        "patchSetId": 4
      },
      "lineNbr": 303,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2022-11-04T22:04:00Z",
      "side": 1,
      "message": "As in the destructor this is not needed since we read the value and deref it in this branch.",
      "range": {
        "startLine": 303,
        "startChar": 0,
        "endLine": 303,
        "endChar": 58
      },
      "revId": "68e2c4aa2e4c71ca59d32fa2334f359c8388ad42",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b60ebe3_7051cf08",
        "filename": "src/inspector/v8-debugger.cc",
        "patchSetId": 4
      },
      "lineNbr": 303,
      "author": {
        "id": 1123071
      },
      "writtenOn": "2022-11-07T15:26:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "02aadf05_4aa6b681",
      "range": {
        "startLine": 303,
        "startChar": 0,
        "endLine": 303,
        "endChar": 58
      },
      "revId": "68e2c4aa2e4c71ca59d32fa2334f359c8388ad42",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef172bfb_f7ad8b09",
        "filename": "src/inspector/v8-debugger.h",
        "patchSetId": 4
      },
      "lineNbr": 297,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2022-11-07T06:06:11Z",
      "side": 1,
      "message": "nit: Remove the underscore. The V8 inspector still uses the old convention from when it was imported. Let\u0027s stay consistent inside the inspector files.",
      "range": {
        "startLine": 297,
        "startChar": 61,
        "endLine": 297,
        "endChar": 62
      },
      "revId": "68e2c4aa2e4c71ca59d32fa2334f359c8388ad42",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "88f91f5b_47e81b03",
        "filename": "src/inspector/v8-debugger.h",
        "patchSetId": 4
      },
      "lineNbr": 297,
      "author": {
        "id": 1123071
      },
      "writtenOn": "2022-11-07T15:26:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ef172bfb_f7ad8b09",
      "range": {
        "startLine": 297,
        "startChar": 61,
        "endLine": 297,
        "endChar": 62
      },
      "revId": "68e2c4aa2e4c71ca59d32fa2334f359c8388ad42",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}