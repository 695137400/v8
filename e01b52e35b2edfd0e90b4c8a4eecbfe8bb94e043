{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e3bbd00a_1ddbd77c",
        "filename": "src/builtins/builtins-atomics-synchronization.cc",
        "patchSetId": 51
      },
      "lineNbr": 24,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-04-30T23:59:25Z",
      "side": 1,
      "message": "Naming nit: I think `UnlockAsyncLockedMutexFromPromiseHandler` is clearer than `FromHandlerContext`.",
      "range": {
        "startLine": 24,
        "startChar": 51,
        "endLine": 24,
        "endChar": 58
      },
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af274a73_b33f3387",
        "filename": "src/builtins/builtins-atomics-synchronization.cc",
        "patchSetId": 51
      },
      "lineNbr": 24,
      "author": {
        "id": 1506979
      },
      "writtenOn": "2024-05-01T13:18:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e3bbd00a_1ddbd77c",
      "range": {
        "startLine": 24,
        "startChar": 51,
        "endLine": 24,
        "endChar": 58
      },
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63e999bb_239e8d41",
        "filename": "src/builtins/builtins-atomics-synchronization.cc",
        "patchSetId": 51
      },
      "lineNbr": 30,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-04-30T23:59:25Z",
      "side": 1,
      "message": "Typo: obk",
      "range": {
        "startLine": 30,
        "startChar": 32,
        "endLine": 30,
        "endChar": 35
      },
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "85a463d8_d0b7045c",
        "filename": "src/builtins/builtins-atomics-synchronization.cc",
        "patchSetId": 51
      },
      "lineNbr": 30,
      "author": {
        "id": 1506979
      },
      "writtenOn": "2024-05-01T13:18:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "63e999bb_239e8d41",
      "range": {
        "startLine": 30,
        "startChar": 32,
        "endLine": 30,
        "endChar": 35
      },
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e7842ac_a71edb4b",
        "filename": "src/builtins/builtins-atomics-synchronization.cc",
        "patchSetId": 51
      },
      "lineNbr": 383,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-04-30T23:59:25Z",
      "side": 1,
      "message": "GetLock is a confusing name, since it sounds like a getter for an underlying `lock`. `AcquireLock`?",
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "840a7956_c6722ffd",
        "filename": "src/builtins/builtins-atomics-synchronization.cc",
        "patchSetId": 51
      },
      "lineNbr": 383,
      "author": {
        "id": 1506979
      },
      "writtenOn": "2024-05-01T13:18:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0e7842ac_a71edb4b",
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9175c975_cfb4d55c",
        "filename": "src/objects/js-atomics-synchronization.cc",
        "patchSetId": 51
      },
      "lineNbr": 25,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-04-30T23:59:25Z",
      "side": 1,
      "message": "As a follow up, let\u0027s move this to a static method `JSPromise::PerformThen` so that the other callsites like the module one can also use it.",
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d8dbe98b_5e8e85ca",
        "filename": "src/objects/js-atomics-synchronization.cc",
        "patchSetId": 51
      },
      "lineNbr": 25,
      "author": {
        "id": 1506979
      },
      "writtenOn": "2024-05-01T13:18:38Z",
      "side": 1,
      "message": "Added a TODO.",
      "parentUuid": "9175c975_cfb4d55c",
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a50350f5_080c4509",
        "filename": "src/objects/js-atomics-synchronization.cc",
        "patchSetId": 51
      },
      "lineNbr": 43,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-04-30T23:59:25Z",
      "side": 1,
      "message": "These promises should get clearer names since the semantics here are complicated. See comment below about using consistent names for these promises.",
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dd31d767_1fd18f8d",
        "filename": "src/objects/js-atomics-synchronization.cc",
        "patchSetId": 51
      },
      "lineNbr": 43,
      "author": {
        "id": 1506979
      },
      "writtenOn": "2024-05-01T13:18:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a50350f5_080c4509",
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "137bd346_b728b4e8",
        "filename": "src/objects/js-atomics-synchronization.cc",
        "patchSetId": 51
      },
      "lineNbr": 53,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-04-30T23:59:25Z",
      "side": 1,
      "message": "Please elaborate a bit more that using the shared table is unnecessary here (rather than incorrect, which I read this comment to imply).",
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "60765029_d9900fde",
        "filename": "src/objects/js-atomics-synchronization.cc",
        "patchSetId": 51
      },
      "lineNbr": 53,
      "author": {
        "id": 1506979
      },
      "writtenOn": "2024-05-01T13:18:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "137bd346_b728b4e8",
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ace45eb2_4c088aab",
        "filename": "src/objects/js-atomics-synchronization.cc",
        "patchSetId": 51
      },
      "lineNbr": 269,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-04-30T23:59:25Z",
      "side": 1,
      "message": "`NewUnlockedWaiterInIsolate` is a confusing name even if we end consolidate the two isolate lists. It contains both waiters that are waiting for a mutex to be locked and for a condition variable to be notified, right?",
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ea1b82e_c8d32e39",
        "filename": "src/objects/js-atomics-synchronization.cc",
        "patchSetId": 51
      },
      "lineNbr": 269,
      "author": {
        "id": 1506979
      },
      "writtenOn": "2024-05-01T13:18:38Z",
      "side": 1,
      "message": "Renamed to `NewAsyncWaiterStoredInIsolate`.",
      "parentUuid": "ace45eb2_4c088aab",
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dc363a8e_a37e92f3",
        "filename": "src/objects/js-atomics-synchronization.cc",
        "patchSetId": 51
      },
      "lineNbr": 269,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-05-01T17:33:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6ea1b82e_c8d32e39",
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7e062bd_0dd22dd0",
        "filename": "src/objects/js-atomics-synchronization.cc",
        "patchSetId": 51
      },
      "lineNbr": 272,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-04-30T23:59:25Z",
      "side": 1,
      "message": "Ditto here on consistent promise naming.",
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "11208efe_8de697e8",
        "filename": "src/objects/js-atomics-synchronization.cc",
        "patchSetId": 51
      },
      "lineNbr": 272,
      "author": {
        "id": 1506979
      },
      "writtenOn": "2024-05-01T13:18:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d7e062bd_0dd22dd0",
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e49a531a_1d045e3f",
        "filename": "src/objects/js-atomics-synchronization.cc",
        "patchSetId": 51
      },
      "lineNbr": 558,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-04-30T23:59:25Z",
      "side": 1,
      "message": "I\u0027m not understanding the cleanup logic. Why are there two loops? `SynchronizationPrimitive::CleanupAsyncWaiterLists` loops through all waiter nodes, and then there\u0027s another loop here on the mutex\u0027s waiter list.\n\nThat is, what\u0027s the situation where there are async waiter nodes that need to be cleaned up that aren\u0027t already in the isolate-wide list?",
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43c4c281_c6d40c50",
        "filename": "src/objects/js-atomics-synchronization.cc",
        "patchSetId": 51
      },
      "lineNbr": 558,
      "author": {
        "id": 1506979
      },
      "writtenOn": "2024-05-01T13:18:38Z",
      "side": 1,
      "message": "All the nodes in the isolate-wide list need to be removed from the regular shared waiter queue list. This logic eagerly removes them from the shared waiter queue list and mark them as ready for async cleanup, this way the subsequent nodes are deleted from the isolate\u0027s list without taking the waiter queue lock multiple times, potentially slowing other threads that are not being terminated.",
      "parentUuid": "e49a531a_1d045e3f",
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18d78957_4ef21ca3",
        "filename": "src/objects/js-atomics-synchronization.cc",
        "patchSetId": 51
      },
      "lineNbr": 558,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-05-01T17:33:21Z",
      "side": 1,
      "message": "Got it. Would be good to add a comment about the optimization.",
      "parentUuid": "43c4c281_c6d40c50",
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "578bedde_d65d8a7b",
        "filename": "src/objects/js-atomics-synchronization.cc",
        "patchSetId": 51
      },
      "lineNbr": 558,
      "author": {
        "id": 1506979
      },
      "writtenOn": "2024-05-01T18:07:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "18d78957_4ef21ca3",
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89d71ac8_66995fbb",
        "filename": "src/objects/js-atomics-synchronization.cc",
        "patchSetId": 51
      },
      "lineNbr": 810,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-04-30T23:59:25Z",
      "side": 1,
      "message": "I think clearer promise names help a lot with understanding the promises here. We should define them clearly in this comment, and use them consistently everywhere (here, in the parameter names for `SetAsyncUnlockHandlers`, and the context slots). \n\nWDYT about the following definitions, which mirrors the \"waiting promise\" and \"released promise\" naming from the Web Locks spec.\n\n`internal_locked_promise`: A promise that settles when the mutex is locked. When this promise is resolved, the callback is run. Not exposed to user code.\n`waiting_for_callback_promise`: A promise that settles when the callback completes. When this promise settles, the mutex is unlocked.\n`unlocked_promise`: A promise that settles when the mutex is unlocked, either explicitly or by timeout. Returned by `lockAsync`.",
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b345f5ee_1580ee3b",
        "filename": "src/objects/js-atomics-synchronization.cc",
        "patchSetId": 51
      },
      "lineNbr": 810,
      "author": {
        "id": 1506979
      },
      "writtenOn": "2024-05-01T13:18:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "89d71ac8_66995fbb",
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc70754c_7465b5b6",
        "filename": "src/objects/js-atomics-synchronization.cc",
        "patchSetId": 51
      },
      "lineNbr": 923,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-04-30T23:59:25Z",
      "side": 1,
      "message": "```suggestion\n  return !MaybeEnqueueNode(isolate, mutex, state, waiter);\n```",
      "range": {
        "startLine": 919,
        "startChar": 0,
        "endLine": 923,
        "endChar": 15
      },
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da6edd27_72485eaa",
        "filename": "src/objects/js-atomics-synchronization.cc",
        "patchSetId": 51
      },
      "lineNbr": 923,
      "author": {
        "id": 1506979
      },
      "writtenOn": "2024-05-01T13:18:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fc70754c_7465b5b6",
      "range": {
        "startLine": 919,
        "startChar": 0,
        "endLine": 923,
        "endChar": 15
      },
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2aeff94e_48bc6603",
        "filename": "src/objects/js-atomics-synchronization.cc",
        "patchSetId": 51
      },
      "lineNbr": 1022,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-04-30T23:59:25Z",
      "side": 1,
      "message": "Should this be `if (waiter-\u003ewaiting_promise_.IsEmpty())`?",
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9315c81e_5139bbda",
        "filename": "src/objects/js-atomics-synchronization.cc",
        "patchSetId": 51
      },
      "lineNbr": 1022,
      "author": {
        "id": 1506979
      },
      "writtenOn": "2024-05-01T13:18:38Z",
      "side": 1,
      "message": "No. What I meant with this comment is that we don\u0027t explicitly remove the promise from the map because it was already removed with the native context. But the synchronization primitive might or might not be alive because the waiter node only holds a weak handle. If it\u0027s still alive we must notify the next node in the waiter queue.",
      "parentUuid": "2aeff94e_48bc6603",
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80db856b_38d0458f",
        "filename": "src/objects/js-atomics-synchronization.cc",
        "patchSetId": 51
      },
      "lineNbr": 1022,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-05-01T17:33:21Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "9315c81e_5139bbda",
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90329d33_e98a324d",
        "filename": "src/objects/js-atomics-synchronization.cc",
        "patchSetId": 51
      },
      "lineNbr": 1028,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-04-30T23:59:25Z",
      "side": 1,
      "message": "Typo: release",
      "range": {
        "startLine": 1028,
        "startChar": 31,
        "endLine": 1028,
        "endChar": 39
      },
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "715c8859_c39af5cd",
        "filename": "src/objects/js-atomics-synchronization.cc",
        "patchSetId": 51
      },
      "lineNbr": 1028,
      "author": {
        "id": 1506979
      },
      "writtenOn": "2024-05-01T13:18:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "90329d33_e98a324d",
      "range": {
        "startLine": 1028,
        "startChar": 31,
        "endLine": 1028,
        "endChar": 39
      },
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38842df4_a4d0a4bd",
        "filename": "src/objects/js-atomics-synchronization.cc",
        "patchSetId": 51
      },
      "lineNbr": 1259,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-04-30T23:59:25Z",
      "side": 1,
      "message": "Wrong comment here.",
      "range": {
        "startLine": 1257,
        "startChar": 0,
        "endLine": 1259,
        "endChar": 41
      },
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "67d169e2_64d7f0a0",
        "filename": "src/objects/js-atomics-synchronization.cc",
        "patchSetId": 51
      },
      "lineNbr": 1259,
      "author": {
        "id": 1506979
      },
      "writtenOn": "2024-05-01T13:18:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "38842df4_a4d0a4bd",
      "range": {
        "startLine": 1257,
        "startChar": 0,
        "endLine": 1259,
        "endChar": 41
      },
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1587099b_980e6fb4",
        "filename": "src/objects/js-atomics-synchronization.h",
        "patchSetId": 51
      },
      "lineNbr": 230,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-04-30T23:59:25Z",
      "side": 1,
      "message": "Please add a comment above `LockAsync` describing what it does.",
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0f64bf46_76e0d723",
        "filename": "src/objects/js-atomics-synchronization.h",
        "patchSetId": 51
      },
      "lineNbr": 230,
      "author": {
        "id": 1506979
      },
      "writtenOn": "2024-05-01T13:18:38Z",
      "side": 1,
      "message": "Added it in the `.h` file.",
      "parentUuid": "1587099b_980e6fb4",
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb14f60f_402e51e9",
        "filename": "test/mjsunit/shared-memory/async-synchronization-workers-terminated.js",
        "patchSetId": 51
      },
      "lineNbr": 37,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-04-30T23:59:25Z",
      "side": 1,
      "message": "`let count` seems unused.",
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "325bbbc3_612a3ab8",
        "filename": "test/mjsunit/shared-memory/async-synchronization-workers-terminated.js",
        "patchSetId": 51
      },
      "lineNbr": 37,
      "author": {
        "id": 1506979
      },
      "writtenOn": "2024-05-01T13:18:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fb14f60f_402e51e9",
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d609acfd_43da5182",
        "filename": "test/mjsunit/shared-memory/async-synchronization-workers-terminated.js",
        "patchSetId": 51
      },
      "lineNbr": 87,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-04-30T23:59:25Z",
      "side": 1,
      "message": "To check my understanding, the 12 is 2 blocking waits in `workerWait1` and `workerWait2`, plus 10 async waits in `workerAsync`.",
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a17fb0e6_9f6a3e01",
        "filename": "test/mjsunit/shared-memory/async-synchronization-workers-terminated.js",
        "patchSetId": 51
      },
      "lineNbr": 87,
      "author": {
        "id": 1506979
      },
      "writtenOn": "2024-05-01T13:18:38Z",
      "side": 1,
      "message": "Yes.",
      "parentUuid": "d609acfd_43da5182",
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e466afd3_8239ba8e",
        "filename": "test/mjsunit/shared-memory/async-synchronization-workers-terminated.js",
        "patchSetId": 51
      },
      "lineNbr": 87,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2024-05-01T17:33:21Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "a17fb0e6_9f6a3e01",
      "revId": "e01b52e35b2edfd0e90b4c8a4eecbfe8bb94e043",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}