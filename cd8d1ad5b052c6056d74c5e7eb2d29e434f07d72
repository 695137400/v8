{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4b117443_6d2f7e98",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2020-11-10T18:52:27Z",
      "side": 1,
      "message": "Santiago, PTAL thanks.",
      "revId": "cd8d1ad5b052c6056d74c5e7eb2d29e434f07d72",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa1c14e5_bc69e270",
        "filename": "src/builtins/builtins-sharedarraybuffer-gen.cc",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2020-11-10T18:52:27Z",
      "side": 1,
      "message": "I\u0027m not super keen on having to have these two functions passed, would be interested in any thoughts you might have to avoid it?",
      "revId": "cd8d1ad5b052c6056d74c5e7eb2d29e434f07d72",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0798a7a_21356b4f",
        "filename": "src/builtins/builtins-sharedarraybuffer-gen.cc",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2020-11-11T10:17:34Z",
      "side": 1,
      "message": "Those two because they are a template you mean? We have the same issue with AssemblerFunction (i.e. the 32 bits one). I don\u0027t think we can avoid it since AtomicBinopBuiltinCommon does the dispatch and it needs the three method options.\n\nIn the AtomicLoad CL we have the same, except we know the name of the methods. Over here we can\u0027t because it is used for many binary ops.\n\nThe only solution I can think about is making AtomicBinopBuiltinCommon a macro and then we could call CodeAssembler::Atomic##op instead of passing it around.",
      "parentUuid": "fa1c14e5_bc69e270",
      "revId": "cd8d1ad5b052c6056d74c5e7eb2d29e434f07d72",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "787d3fc4_1c5b064a",
        "filename": "src/builtins/builtins-sharedarraybuffer-gen.cc",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2020-11-11T10:22:56Z",
      "side": 1,
      "message": "On second thought. \"Type\" is not used for these AssemblerFunction64 functions. We only use it to UncheckCast at the end. Then we can do \n  Unchecked_cast\u003cAtomicInt64\u003e(AtomicExchange64(...))\nhere instead of passing AtomicInt64 and AtomicUint64 around. That would get rid of one of those functions.\n\nWe can do the same in the CompareExchange follow-up CL since Type is not used there as well",
      "parentUuid": "a0798a7a_21356b4f",
      "revId": "cd8d1ad5b052c6056d74c5e7eb2d29e434f07d72",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06407e90_d81d7227",
        "filename": "src/builtins/builtins-sharedarraybuffer-gen.cc",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2020-11-11T11:27:12Z",
      "side": 1,
      "message": "As discussed, I\u0027d like for us to have TNode APIs for public code-assembler methods, so I think we still need to do the UncheckedCast in the AtomicExchange64. I think we need to keep this as-is.",
      "parentUuid": "787d3fc4_1c5b064a",
      "revId": "cd8d1ad5b052c6056d74c5e7eb2d29e434f07d72",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}