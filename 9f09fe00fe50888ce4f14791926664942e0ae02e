{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e3dec392_f02a7246",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 44
      },
      "lineNbr": 0,
      "author": {
        "id": 1472029
      },
      "writtenOn": "2024-07-23T14:10:10Z",
      "side": 1,
      "message": "Ready to merge as soon as it is ok for you! :)",
      "revId": "9f09fe00fe50888ce4f14791926664942e0ae02e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f894e37f_9d9cb6cb",
        "filename": "src/trap-handler/handler-inside.cc",
        "patchSetId": 44
      },
      "lineNbr": 63,
      "author": {
        "id": 1000264
      },
      "writtenOn": "2024-07-24T06:41:53Z",
      "side": 1,
      "message": "One thing to consider for a later change:\n\nIt\u0027s not great that the interpreter does not benefit from this check by the trap handler.  IIRC, one of the benefits of the interpreter is that it is potentially more secure, so it is unfortunate to weaken this check, which was intended to be a security check.\n\nIt should be relatively easy to get this check back by changing the code generation code in src/wasm/interpreter/x64/interpreter-builtins-x64.cc and the arm64 equivalent to record the offsets of the instructions that are expected to trap.  For example, test/unittests/wasm/trap-handler-native-unittest.cc does that by calling pc_offset() to get the offsets.  You\u0027d probably just need to pass around an extra std::vector to record the offsets.\n\nThis might be worth doing in a later CL.  I don\u0027t mean to suggest that you change it in this CL!  I realise that you just got the go-ahead for landing it.\n\n(I meant to mention this earlier, nearer my first review pass, but I was on holiday at the time and I lost track of where I\u0027d got to in looking at this.  Sorry about that!)",
      "revId": "9f09fe00fe50888ce4f14791926664942e0ae02e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "763d6d4d_61cb923f",
        "filename": "src/trap-handler/handler-inside.cc",
        "patchSetId": 44
      },
      "lineNbr": 63,
      "author": {
        "id": 1472029
      },
      "writtenOn": "2024-07-24T07:01:08Z",
      "side": 1,
      "message": "Absolutely, I will work on this on a separate CL. Thanks for your review!",
      "parentUuid": "f894e37f_9d9cb6cb",
      "revId": "9f09fe00fe50888ce4f14791926664942e0ae02e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "If the author is a V8 committer, code review is required from one other committer (see https://v8.dev/docs/become-committer). Otherwise, code review is required from two committers."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "((uploaderin:cria/project-v8-committers AND label:Code-Review\u003dMAX,user\u003dnon_uploader) OR label:Code-Review\u003dMAX,count\u003e\u003d2) AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"((uploaderin:cria/project-v8-committers AND label:Code-Review=MAX,user=non_uploader) OR label:Code-Review=MAX,count>=2) AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MAX,count>=2"],"failingAtoms":["label:Code-Review=MIN","uploaderin:cria/project-v8-committers"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "9f09fe00fe50888ce4f14791926664942e0ae02e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "9f09fe00fe50888ce4f14791926664942e0ae02e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "9f09fe00fe50888ce4f14791926664942e0ae02e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}