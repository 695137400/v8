{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f671101b_6d34dc30",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-11-04T10:54:03Z",
      "side": 1,
      "message": "looks good modulo concerns regarding using std::allocator\u003cT\u003e.",
      "revId": "aa90a5b4f2cd8d0c952dc1473e70f1b9f155173c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cbaf3ac5_8fe96c13",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-11-04T11:54:51Z",
      "side": 1,
      "message": "lgtm",
      "revId": "aa90a5b4f2cd8d0c952dc1473e70f1b9f155173c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0df78968_6109c4f6",
        "filename": "src/base/small-vector.h",
        "patchSetId": 6
      },
      "lineNbr": 20,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-11-04T10:54:03Z",
      "side": 1,
      "message": "This doesn\u0027t seem like an equivalent change since allocations will no longer be routed via base::Malloc() which is defined differently for V8_OS_STARBOARD (Cobalt). I\u0027m not sure what does it do with other usages of malloc/free though.\n\nAnyway, there\u0027s an alternative non-STL AllocationPolicy approach used in src/base/hashmap.h. See DefaultAllocationPolicy, it routes allocations via base::Malloc/Free.",
      "range": {
        "startLine": 20,
        "startChar": 57,
        "endLine": 20,
        "endChar": 74
      },
      "revId": "aa90a5b4f2cd8d0c952dc1473e70f1b9f155173c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81ba87ba_c5c8b7e5",
        "filename": "src/base/small-vector.h",
        "patchSetId": 6
      },
      "lineNbr": 20,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-11-04T11:33:10Z",
      "side": 1,
      "message": "wrt starboard: all STL data structures use std::allocator\u003cT\u003e so I guess this works fine on starboard?\n\nwrt policies: interesting, I wasn\u0027t aware of those. I don\u0027t really see why we need them as a competing concept with c++\u0027s Allocator. Wdyt about replacing the AllocationPolicy concept with Allocators (instead of spreading the Policy concept to further places)? Allocators seem superior since they\u0027re compatible with the STL.",
      "parentUuid": "0df78968_6109c4f6",
      "range": {
        "startLine": 20,
        "startChar": 57,
        "endLine": 20,
        "endChar": 74
      },
      "revId": "aa90a5b4f2cd8d0c952dc1473e70f1b9f155173c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb5a718d_251f237d",
        "filename": "src/base/small-vector.h",
        "patchSetId": 6
      },
      "lineNbr": 20,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-11-04T11:54:51Z",
      "side": 1,
      "message": "Wrt starboard: the tracking issue (crbug.com/v8/10927) says that they are replacing C++ new/delete. So, using std::allocator\u003c\u003e is fine indeed.\n\nWrt policies: Given that we already have ZoneAllocator\u003cT\u003e I think we could switch to std::allocator\u003cT\u003e but that will come with a certain amount of mess since AllocationPolicy doesn\u0027t require a template argument while std::allocator does.",
      "parentUuid": "81ba87ba_c5c8b7e5",
      "range": {
        "startLine": 20,
        "startChar": 57,
        "endLine": 20,
        "endChar": 74
      },
      "revId": "aa90a5b4f2cd8d0c952dc1473e70f1b9f155173c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fad24b99_483611b7",
        "filename": "src/base/small-vector.h",
        "patchSetId": 6
      },
      "lineNbr": 146,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-11-04T10:54:03Z",
      "side": 1,
      "message": "Suggestion: it\u0027d be nice if you could utilize empty base optimization to let the compiler optimize away this field if the class is stateless.",
      "revId": "aa90a5b4f2cd8d0c952dc1473e70f1b9f155173c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4185010_17cfe4fd",
        "filename": "src/base/small-vector.h",
        "patchSetId": 6
      },
      "lineNbr": 146,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-11-04T11:33:10Z",
      "side": 1,
      "message": "Yep that was Leszek\u0027s suggestion (see an earlier comment) and I still plan to do that. (But I also doubt the additional 8 bytes in a stack-allocated data structure matter much.)",
      "parentUuid": "fad24b99_483611b7",
      "revId": "aa90a5b4f2cd8d0c952dc1473e70f1b9f155173c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "42024053_7348cd05",
        "filename": "src/base/small-vector.h",
        "patchSetId": 6
      },
      "lineNbr": 146,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-11-04T11:54:51Z",
      "side": 1,
      "message": "Ack.",
      "parentUuid": "f4185010_17cfe4fd",
      "revId": "aa90a5b4f2cd8d0c952dc1473e70f1b9f155173c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}