{
  "comments": [
    {
      "key": {
        "uuid": "06cf3602_d293b762",
        "filename": "src/builtins/builtins.cc",
        "patchSetId": 1
      },
      "lineNbr": 322,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-30T07:05:05Z",
      "side": 1,
      "message": "I remember having this discussion with Tobias recently, and jump tables were disabled for builtins specifically. Found the switch here: https://cs.chromium.org/chromium/src/v8/src/optimized-compilation-info.cc?l\u003d64\u0026rcl\u003d19afaa1436ef38c86f7ea9a73a6ae9e43ec71ad1\n\nThe more robust check (at the link above) would be Builtins::IsBuiltinId(builtin_index) if we can get it from somewhere. The OptimizedCompilationInfo ctor just below in L74 has access to it. Anyway, if you add the bytecode handler kind there then all should be well :)",
      "revId": "dec771c5a7095855995b9212c3f078c570837ab7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83901635_5b611e4d",
        "filename": "src/builtins/builtins.cc",
        "patchSetId": 1
      },
      "lineNbr": 322,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2018-08-30T07:10:20Z",
      "side": 1,
      "message": "We explicitly use a jump table in InvokeIntrinsic to decode the intrinsic I\u0027d, doing it as an if/else would probably be a fair bit slower. Is there any way we could recode this as offsets, or relocate the absolute addresses on embedding?",
      "parentUuid": "06cf3602_d293b762",
      "revId": "dec771c5a7095855995b9212c3f078c570837ab7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "911d08f1_a36349fe",
        "filename": "src/builtins/builtins.cc",
        "patchSetId": 1
      },
      "lineNbr": 322,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-30T07:19:42Z",
      "side": 1,
      "message": "\u003e We explicitly use a jump table in InvokeIntrinsic to decode the intrinsic I\u0027d, doing it as an if/else would probably be a fair bit slower. \n\nBy \u0027explicitly\u0027, do you mean the Switch in IntrinsicsGenerator::InvokeIntrinsic? \n\nIf we flip the flag in the link above, the jump table would turn into a binary search sequence of if/elses. So 5 jumps in the worst case since there\u0027s currently 25 entries in the intrinsics list. That doesn\u0027t sound *too* bad to me, although I don\u0027t know how perf-critical this is.\n\n\u003e Is there any way we could recode this as offsets, or relocate the absolute addresses on embedding?\n\nI don\u0027t see why Code-internal jump tables shouldn\u0027t work as a pc-relative jump table (a sequence of \u0027jmp pc+offset\u0027 instructions), possibly with more complexity due to offset limits and offset calculation. Tobias will know more though.",
      "parentUuid": "83901635_5b611e4d",
      "revId": "dec771c5a7095855995b9212c3f078c570837ab7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05611336_97354ba6",
        "filename": "src/builtins/builtins.cc",
        "patchSetId": 1
      },
      "lineNbr": 322,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2018-08-30T08:52:37Z",
      "side": 1,
      "message": "\u003eBy \u0027explicitly\u0027, do you mean the Switch in IntrinsicsGenerator::InvokeIntrinsic?  \n\nYes.\n\n\u003e If we flip the flag in the link above, the jump table would turn into a binary search sequence of if/elses. So 5 jumps in the worst case since there\u0027s currently 25 entries in the intrinsics list. That doesn\u0027t sound *too* bad to me, although I don\u0027t know how perf-critical this is.\n\nI didn\u0027t realize it was binary search. I guess it might be fine. Let\u0027s do this (in a seperate CL) and see what the perf impact is.",
      "parentUuid": "911d08f1_a36349fe",
      "revId": "dec771c5a7095855995b9212c3f078c570837ab7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}