{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e4e5bff1_22335f76",
        "filename": "src/compiler/heap-refs.cc",
        "patchSetId": 17
      },
      "lineNbr": 1195,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-07-19T12:54:45Z",
      "side": 1,
      "message": "Aren\u0027t these three immutable? You can use DCHECKs instead.",
      "revId": "bc696735678d216f75ec88aed5b8970de05f8034",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60f27b98_dd070af6",
        "filename": "src/compiler/heap-refs.cc",
        "patchSetId": 17
      },
      "lineNbr": 1195,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-07-19T13:07:43Z",
      "side": 1,
      "message": "The context apparently not: https://source.chromium.org/chromium/chromium/src/+/main:v8/src/execution/execution.cc;l\u003d312;drc\u003d919fa26613ca2a464a90e4a64e305d8412252ff0\n\nNativeContext/SFI: Done.",
      "parentUuid": "e4e5bff1_22335f76",
      "revId": "bc696735678d216f75ec88aed5b8970de05f8034",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5e7d58cd_123f0b13",
        "filename": "src/compiler/heap-refs.cc",
        "patchSetId": 17
      },
      "lineNbr": 1195,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-07-19T13:08:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "60f27b98_dd070af6",
      "revId": "bc696735678d216f75ec88aed5b8970de05f8034",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "676b7d1a_7c1aba71",
        "filename": "src/compiler/heap-refs.cc",
        "patchSetId": 17
      },
      "lineNbr": 1195,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-07-19T13:45:01Z",
      "side": 1,
      "message": "Hmm this will probably have already happened when we see the function. If you make this a CHECK, does it ever fail? If context can really change on a function visible by the compiler, then I\u0027m wondering how context specialization can be correct.",
      "parentUuid": "5e7d58cd_123f0b13",
      "revId": "bc696735678d216f75ec88aed5b8970de05f8034",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "418900fd_f7bb9a50",
        "filename": "src/compiler/heap-refs.cc",
        "patchSetId": 17
      },
      "lineNbr": 3893,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-07-19T12:54:45Z",
      "side": 1,
      "message": "Why is it needed now?",
      "revId": "bc696735678d216f75ec88aed5b8970de05f8034",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60c75b9c_521c1838",
        "filename": "src/compiler/heap-refs.cc",
        "patchSetId": 17
      },
      "lineNbr": 3893,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-07-19T13:07:43Z",
      "side": 1,
      "message": "Using the JSFunctionRef during dep validation.",
      "parentUuid": "418900fd_f7bb9a50",
      "revId": "bc696735678d216f75ec88aed5b8970de05f8034",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c19b377b_baf41fd6",
        "filename": "src/compiler/heap-refs.h",
        "patchSetId": 17
      },
      "lineNbr": 412,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-07-19T12:54:45Z",
      "side": 1,
      "message": "Please update or remove.",
      "revId": "bc696735678d216f75ec88aed5b8970de05f8034",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "62bdda0b_043bce09",
        "filename": "src/compiler/heap-refs.h",
        "patchSetId": 17
      },
      "lineNbr": 412,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-07-19T13:07:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c19b377b_baf41fd6",
      "revId": "bc696735678d216f75ec88aed5b8970de05f8034",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be95697c_48ea6a23",
        "filename": "src/compiler/js-heap-broker.h",
        "patchSetId": 17
      },
      "lineNbr": 526,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-07-19T12:54:45Z",
      "side": 1,
      "message": "As a follow-up you can move CompilationDependencies into JSHeapBroker and remove it from PipelineData.",
      "revId": "bc696735678d216f75ec88aed5b8970de05f8034",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6588a5f9_e0616944",
        "filename": "src/compiler/js-heap-broker.h",
        "patchSetId": 17
      },
      "lineNbr": 526,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-07-19T13:07:43Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "be95697c_48ea6a23",
      "revId": "bc696735678d216f75ec88aed5b8970de05f8034",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34da4176_45722804",
        "filename": "test/cctest/compiler/test-concurrent-shared-function-info.cc",
        "patchSetId": 17
      },
      "lineNbr": 195,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-07-19T12:54:45Z",
      "side": 1,
      "message": "Maybe do FinalizeJob anyways and have SUCCEEDED + has_bytecode_array as one option, and ... something else ... as other option.",
      "revId": "bc696735678d216f75ec88aed5b8970de05f8034",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fc3b8d73_21ddbf40",
        "filename": "test/cctest/compiler/test-concurrent-shared-function-info.cc",
        "patchSetId": 17
      },
      "lineNbr": 195,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-07-19T13:07:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "34da4176_45722804",
      "revId": "bc696735678d216f75ec88aed5b8970de05f8034",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3296d4c5_00b2067b",
        "filename": "test/mjsunit/mjsunit.status",
        "patchSetId": 17
      },
      "lineNbr": 205,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-07-19T12:54:45Z",
      "side": 1,
      "message": "Why does never-optimize fail with this CL? This may suggest that the JSFunction consistency dependency approach is too strict.",
      "revId": "bc696735678d216f75ec88aed5b8970de05f8034",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20405721_0890ef70",
        "filename": "test/mjsunit/mjsunit.status",
        "patchSetId": 17
      },
      "lineNbr": 205,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-07-19T13:07:43Z",
      "side": 1,
      "message": "I believe due to timing issues. The test checks assertOptimized without %OptimizeFunctionOnNextCall.",
      "parentUuid": "3296d4c5_00b2067b",
      "revId": "bc696735678d216f75ec88aed5b8970de05f8034",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b25f2227_6550c75f",
        "filename": "test/mjsunit/mjsunit.status",
        "patchSetId": 17
      },
      "lineNbr": 205,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-07-19T13:18:15Z",
      "side": 1,
      "message": "Since it didn\u0027t fail before the CL, I suspect that it\u0027s failing now because of JSFunctionData inconsistency. In that case it would be good to know which part became inconsistent. Perhaps these inconsistencies arise more often than assumed.",
      "parentUuid": "20405721_0890ef70",
      "revId": "bc696735678d216f75ec88aed5b8970de05f8034",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8405a521_021259ed",
        "filename": "test/mjsunit/mjsunit.status",
        "patchSetId": 17
      },
      "lineNbr": 205,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-07-19T13:44:33Z",
      "side": 1,
      "message": "As discussed offline: back when I was able to repro this I did not see any validation failures (they\u0027d would have shown up in heap broker tracing). I suspect it was just changed timing that caused these tests to fail. We should make them more robust by flushing the dispatcher queues before checking assertOptimized, that\u0027s tracked in the linked bug.",
      "parentUuid": "b25f2227_6550c75f",
      "revId": "bc696735678d216f75ec88aed5b8970de05f8034",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}