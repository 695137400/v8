{
  "comments": [
    {
      "key": {
        "uuid": "432a737e_1e0f5eec",
        "filename": "src/compiler/arm/code-generator-arm.cc",
        "patchSetId": 12
      },
      "lineNbr": 610,
      "author": {
        "id": 1001213
      },
      "writtenOn": "2018-09-17T16:10:26Z",
      "side": 1,
      "message": "I guess my earlier comment suggested this approach. I would prefer the DCHECKs be inline, so if/when they fail, we get the line number. Otherwise, the AssembleArchInstruction will be on the stack but we won\u0027t know which opcode is failing.",
      "range": {
        "startLine": 610,
        "startChar": 0,
        "endLine": 610,
        "endChar": 1
      },
      "revId": "ccc5cd3037752a63378a75530360328250fdf119",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3195ade_78ddbfe3",
        "filename": "src/compiler/arm/code-generator-arm.cc",
        "patchSetId": 12
      },
      "lineNbr": 610,
      "author": {
        "id": 1122079
      },
      "writtenOn": "2018-09-17T22:23:36Z",
      "side": 1,
      "message": "I\u0027ve modified this to return true/false, so that the DCHECK failure will point to the right instruction.",
      "parentUuid": "432a737e_1e0f5eec",
      "range": {
        "startLine": 610,
        "startChar": 0,
        "endLine": 610,
        "endChar": 1
      },
      "revId": "ccc5cd3037752a63378a75530360328250fdf119",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42c40bf9_775e7654",
        "filename": "src/compiler/arm/instruction-selector-arm.cc",
        "patchSetId": 12
      },
      "lineNbr": 435,
      "author": {
        "id": 1119499
      },
      "writtenOn": "2018-09-17T08:55:32Z",
      "side": 1,
      "message": "If both projections are dead, doesn\u0027t that mean that (both) results are unused? You could as well skip emitting any code at all.",
      "revId": "ccc5cd3037752a63378a75530360328250fdf119",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2f5fd6d_83c4b4d3",
        "filename": "src/compiler/arm/instruction-selector-arm.cc",
        "patchSetId": 12
      },
      "lineNbr": 435,
      "author": {
        "id": 1122079
      },
      "writtenOn": "2018-09-17T16:56:42Z",
      "side": 1,
      "message": "Can\u0027t skip emitting code in this case because the outputs are not results of the binary operation, they only return the previous value in memory. Correct me if I\u0027m wrong - my understanding of how the RMW operations is that the output being optimized shouldn\u0027t affect the values in memory being correct, so the 64-bit operation needs to be reflected in memory, but the outputs could be unused. For example, for the drop tests - https://chromium-review.googlesource.com/c/v8/v8/+/1195910/12/test/cctest/wasm/test-run-wasm-atomics64.cc#376, the read memory should return the result of the RMW operation.",
      "parentUuid": "42c40bf9_775e7654",
      "revId": "ccc5cd3037752a63378a75530360328250fdf119",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8bec5a5_8071ed2c",
        "filename": "src/compiler/ia32/instruction-selector-ia32.cc",
        "patchSetId": 12
      },
      "lineNbr": 1357,
      "author": {
        "id": 1119499
      },
      "writtenOn": "2018-09-14T11:03:43Z",
      "side": 1,
      "message": "You should just assume that any of the four combinations of null/nonnull for the two projections can happen. (e.g. it can be the case that projection1 is nonnull but projection0 is null, because a 64-bit shift by 32 is lowered to just a use of the upper half).",
      "revId": "ccc5cd3037752a63378a75530360328250fdf119",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df3d7433_3edc1dff",
        "filename": "src/compiler/ia32/instruction-selector-ia32.cc",
        "patchSetId": 12
      },
      "lineNbr": 1357,
      "author": {
        "id": 1122079
      },
      "writtenOn": "2018-09-17T08:32:03Z",
      "side": 1,
      "message": "In the case of 64-bit shifts, it should be optimized but that\u0027s currently not the case. There\u0027s a TODO for this to be implemented. As far as I can see, there are no other node replacements that only null the lower half of the output. \nhttps://cs.chromium.org/chromium/src/v8/src/compiler/int64-lowering.cc?q\u003dint64-loweri\u0026sq\u003dpackage:chromium\u0026g\u003d0\u0026l\u003d503\n\nI have a follow-up CL that partially implements the shift optimization, and fixes the case here as well, but I\u0027d like to keep that separate as this needs to be merged to M70.",
      "parentUuid": "b8bec5a5_8071ed2c",
      "revId": "ccc5cd3037752a63378a75530360328250fdf119",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f87b709f_db740c28",
        "filename": "src/compiler/ia32/instruction-selector-ia32.cc",
        "patchSetId": 12
      },
      "lineNbr": 1357,
      "author": {
        "id": 1119499
      },
      "writtenOn": "2018-09-17T08:55:32Z",
      "side": 1,
      "message": "Ok, I thought we were already doing this, but alas it was in my other compiler :-)",
      "parentUuid": "df3d7433_3edc1dff",
      "revId": "ccc5cd3037752a63378a75530360328250fdf119",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8090e1fa_7ddd566e",
        "filename": "src/compiler/ia32/instruction-selector-ia32.cc",
        "patchSetId": 12
      },
      "lineNbr": 1357,
      "author": {
        "id": 1122079
      },
      "writtenOn": "2018-09-17T16:56:42Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f87b709f_db740c28",
      "revId": "ccc5cd3037752a63378a75530360328250fdf119",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}