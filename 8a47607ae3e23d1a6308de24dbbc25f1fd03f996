{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c1f39cbd_142f41f2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-01-20T13:31:15Z",
      "side": 1,
      "message": "LG with some comments.",
      "revId": "8a47607ae3e23d1a6308de24dbbc25f1fd03f996",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c38066c_294db67a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1468500
      },
      "writtenOn": "2021-01-20T14:06:09Z",
      "side": 1,
      "message": "Thanks for your feedback, Ross!\nSorry I added even more questions to your comments.",
      "revId": "8a47607ae3e23d1a6308de24dbbc25f1fd03f996",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "38afc5a0_6df641d2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-01-22T14:20:47Z",
      "side": 1,
      "message": "lgtm with nits",
      "revId": "8a47607ae3e23d1a6308de24dbbc25f1fd03f996",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0670fcf7_ae9ef1d3",
        "filename": "src/builtins/x64/builtins-x64.cc",
        "patchSetId": 15
      },
      "lineNbr": 625,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-01-22T14:20:47Z",
      "side": 1,
      "message": "This code is supposed to stay here, right? Then I\u0027d suggest to consider keeping movq here and changing loop condition to \"greater\" instead. Such a code might be smaller.",
      "revId": "8a47607ae3e23d1a6308de24dbbc25f1fd03f996",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7f93195_ac6f5ec3",
        "filename": "src/builtins/x64/builtins-x64.cc",
        "patchSetId": 15
      },
      "lineNbr": 625,
      "author": {
        "id": 1468500
      },
      "writtenOn": "2021-01-25T09:24:07Z",
      "side": 1,
      "message": "rcx is also used as index in the operand (line 631 below).\nWe could preserve correct behaviour by adding a displacement of -kSystemPointerSize to the Operand in line 631.\nTo be honest I have no idea how big the performance penalty of having a displacement in the address is.\nBut I would guess that having the displacement in a loop is a bigger penalty than a lea instead of a mov outside the loop?",
      "parentUuid": "0670fcf7_ae9ef1d3",
      "revId": "8a47607ae3e23d1a6308de24dbbc25f1fd03f996",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba3eacee_c43fb9db",
        "filename": "src/codegen/x64/macro-assembler-x64.cc",
        "patchSetId": 15
      },
      "lineNbr": 2584,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-01-22T14:20:47Z",
      "side": 1,
      "message": "Maybe also \n  \u0026\u0026 kArgcAdditionForReceiver",
      "revId": "8a47607ae3e23d1a6308de24dbbc25f1fd03f996",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ac4ed4a1_181e27db",
        "filename": "src/codegen/x64/macro-assembler-x64.cc",
        "patchSetId": 15
      },
      "lineNbr": 2584,
      "author": {
        "id": 1468500
      },
      "writtenOn": "2021-01-25T09:24:07Z",
      "side": 1,
      "message": "Good Point for this CL!\nBut in the next CL of this chain we already assert kArgcAdditionForReceiver \u003d\u003d 1.\nSo it doesn\u0027t make a lot of sense to add it here as we land the CLs together.\nBut will keep the feedback in my mind for future work.",
      "parentUuid": "ba3eacee_c43fb9db",
      "revId": "8a47607ae3e23d1a6308de24dbbc25f1fd03f996",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "feffd009_83e90843",
        "filename": "src/interpreter/interpreter-assembler.cc",
        "patchSetId": 15
      },
      "lineNbr": 812,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-01-20T13:31:15Z",
      "side": 1,
      "message": "I guess this is actually meaning kArgcAdditionForReceiver is 1 or 0. Could we make this explicit",
      "revId": "8a47607ae3e23d1a6308de24dbbc25f1fd03f996",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ccf7fbd8_7bb488b5",
        "filename": "src/interpreter/interpreter-assembler.cc",
        "patchSetId": 15
      },
      "lineNbr": 812,
      "author": {
        "id": 1468500
      },
      "writtenOn": "2021-01-20T14:06:09Z",
      "side": 1,
      "message": "Yes that is the intended meaning. So you would prefer DCHECK(kArgcAdditionForReceiver \u003d\u003d 0 || kArgcAdditionForReceiver \u003d\u003d 1)?",
      "parentUuid": "feffd009_83e90843",
      "revId": "8a47607ae3e23d1a6308de24dbbc25f1fd03f996",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f131f589_dcf07228",
        "filename": "src/interpreter/interpreter-assembler.cc",
        "patchSetId": 15
      },
      "lineNbr": 812,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-01-20T16:05:17Z",
      "side": 1,
      "message": "Yes please, thanks.",
      "parentUuid": "ccf7fbd8_7bb488b5",
      "revId": "8a47607ae3e23d1a6308de24dbbc25f1fd03f996",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bf56d131_edd477cf",
        "filename": "src/interpreter/interpreter-assembler.cc",
        "patchSetId": 15
      },
      "lineNbr": 812,
      "author": {
        "id": 1468500
      },
      "writtenOn": "2021-01-25T09:24:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f131f589_dcf07228",
      "revId": "8a47607ae3e23d1a6308de24dbbc25f1fd03f996",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f749b475_87c09f91",
        "filename": "src/interpreter/interpreter-assembler.cc",
        "patchSetId": 15
      },
      "lineNbr": 820,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-01-20T13:31:15Z",
      "side": 1,
      "message": "Is kArgcAdditionForReciever going away once the temporary flag is gone? I\u0027d prefer we just did the following:\n\n Node\u003cWord32T\u003e args_count \u003d args.reg_count();\n #ifndef V8_INCLUDE_RECEIVER_IN_ARGC\n   TNode\u003cInt32T\u003e receiver_count \u003d Int32Constant(1);\n   args_count \u003d Int32Sub(args_count, receiver_count);\n #endif\n\nSo that it\u0027s clear what we need to remove once the temporary flag goes away.",
      "range": {
        "startLine": 820,
        "startChar": 51,
        "endLine": 820,
        "endChar": 75
      },
      "revId": "8a47607ae3e23d1a6308de24dbbc25f1fd03f996",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8c8dd54_2cfe5fc6",
        "filename": "src/interpreter/interpreter-assembler.cc",
        "patchSetId": 15
      },
      "lineNbr": 820,
      "author": {
        "id": 1468500
      },
      "writtenOn": "2021-01-20T14:06:09Z",
      "side": 1,
      "message": "The current plan is to rename the constant (probably to kReceiverArgc), set it unconditionally, and keep it around everywhere we need to +1/-1 when handling with the receiver in the argument count.\nIMO having \"+ kReceiverArgc\" is cleaner than having e.g. \"+1 // add the receiver\". \nBut if you disagree and prefer numerical constants with comments, than it seems like I am the only one preferring named constants and will change my mind ;)\n\nRegarding being clear what we need to remove once the flag goes away I totally agree. Thank you for pointing out this location, where I didn\u0027t add a TODO.\nI don\u0027t really like ifdefs over TODOs, when there is no performance impact. And in this case I am pretty sure that TF will optimize the subtraction away if kArgcAdditionToReceiver \u003d\u003d 1.\n\nLooking forward to read your opinion on this.",
      "parentUuid": "f749b475_87c09f91",
      "range": {
        "startLine": 820,
        "startChar": 51,
        "endLine": 820,
        "endChar": 75
      },
      "revId": "8a47607ae3e23d1a6308de24dbbc25f1fd03f996",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d587269_f72862d0",
        "filename": "src/interpreter/interpreter-assembler.cc",
        "patchSetId": 15
      },
      "lineNbr": 820,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-01-27T17:06:27Z",
      "side": 1,
      "message": "Ack - adding a TODO is fine but please do it everywhere we want to remove this logic (see above).",
      "parentUuid": "a8c8dd54_2cfe5fc6",
      "range": {
        "startLine": 820,
        "startChar": 51,
        "endLine": 820,
        "endChar": 75
      },
      "revId": "8a47607ae3e23d1a6308de24dbbc25f1fd03f996",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}