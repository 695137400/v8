{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "033466ae_81a4a3c5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 3439269
      },
      "writtenOn": "2024-07-29T04:16:32Z",
      "side": 1,
      "message": "Pinging for further review. Thanks.",
      "revId": "a6c342b2d24e1ed774f834e33092fe70d24de83f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c3c36602_d079671e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2024-07-29T16:06:38Z",
      "side": 1,
      "message": "Thanks for pinging.",
      "parentUuid": "033466ae_81a4a3c5",
      "revId": "a6c342b2d24e1ed774f834e33092fe70d24de83f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "525cffa2_81eb23e5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2024-07-29T16:06:38Z",
      "side": 1,
      "message": "+mlippautz for fyi",
      "revId": "a6c342b2d24e1ed774f834e33092fe70d24de83f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "300193ed_cf038119",
        "filename": "include/v8-profiler.h",
        "patchSetId": 12
      },
      "lineNbr": 1116,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2024-07-29T17:32:15Z",
      "side": 1,
      "message": "This method can be implemented on top of the existing heap snapshot on the user side as we do set the detached bit for nodes.\n\nWhy is there a need for a V8 API that needs to be maintained?",
      "range": {
        "startLine": 1116,
        "startChar": 36,
        "endLine": 1116,
        "endChar": 63
      },
      "revId": "a6c342b2d24e1ed774f834e33092fe70d24de83f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e41df17_16dfed8b",
        "filename": "include/v8-profiler.h",
        "patchSetId": 12
      },
      "lineNbr": 1116,
      "author": {
        "id": 3439269
      },
      "writtenOn": "2024-07-29T20:13:57Z",
      "side": 1,
      "message": "If I understand your suggestion correctly, you mean to take a full heap snapshot, and extract the dom nodes from that snapshot? I believe this would work, but would be much slower. The motivation for this API is due to heap snapshots being slow, and the goal is to make a faster and minimal operation for obtaining the detached nodes",
      "parentUuid": "300193ed_cf038119",
      "range": {
        "startLine": 1116,
        "startChar": 36,
        "endLine": 1116,
        "endChar": 63
      },
      "revId": "a6c342b2d24e1ed774f834e33092fe70d24de83f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15fc717e_b338cb9d",
        "filename": "include/v8-profiler.h",
        "patchSetId": 12
      },
      "lineNbr": 1116,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2024-07-30T08:24:44Z",
      "side": 1,
      "message": "The API calls `CollectAllAvailableGarbage()` which are synchronous last-resort GCs that are very expensive on their own. The API performs up to 7 GCs back to back. Any performance is already gone at this point.\n\nIIUC your use case then users would merely presses a button in some form of debugging interface (DevTools). I don\u0027t think it matters whether the user waits 1, 2, or 3 sec here.\n\nThe API as proposed below hooks into a GC remembered set directly which limits our flexibility in future as we need to drag this API along.",
      "parentUuid": "3e41df17_16dfed8b",
      "range": {
        "startLine": 1116,
        "startChar": 36,
        "endLine": 1116,
        "endChar": 63
      },
      "revId": "a6c342b2d24e1ed774f834e33092fe70d24de83f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a36806af_62c978bc",
        "filename": "include/v8-profiler.h",
        "patchSetId": 12
      },
      "lineNbr": 1116,
      "author": {
        "id": 1329477
      },
      "writtenOn": "2024-07-30T22:21:19Z",
      "side": 1,
      "message": "Giovanni has considered whether it would be beneficial to remove the GC call here. What I can point out is that, for our target customers who want this, a full heap snapshot is in the 30-60 second range for gathering, and this is in the ~2-second range for gathering. If we\u0027re talking an order of magnitude improvement, I\u0027d suggest not letting the perfect be the enemy of the good.\n\nStill, if we want to make the CollectAllAvailableGarbage call be made independently, I\u0027m sure we can make that change.",
      "parentUuid": "15fc717e_b338cb9d",
      "range": {
        "startLine": 1116,
        "startChar": 36,
        "endLine": 1116,
        "endChar": 63
      },
      "revId": "a6c342b2d24e1ed774f834e33092fe70d24de83f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "861c5a68_14c4b947",
        "filename": "include/v8-profiler.h",
        "patchSetId": 12
      },
      "lineNbr": 1116,
      "author": {
        "id": 3439269
      },
      "writtenOn": "2024-07-30T23:18:35Z",
      "side": 1,
      "message": "The user would be waiting more than a few seconds. On Microsoft Teams, I ran a few benchmarks on release build of heap snapshots and this V8 API to see the performance difference.\n\nTaking heap snapshots averaged about 22,000 ms (22s)\nThis `CollectAllAvailableGarbage()` call averaged about 500 ms (0.5s)\nIterating the traced handles averaged 1.0 ms (0.001s)\n\nRob\u0027s numbers may vary based on hardware of course :)\n\nTaking a full heap snapshot, and then iterating over them would lose substantial performance compared to this V8 API. I think there is still value to this API to deliver a fast user experience.\n\nI understand maintenance concerns.\nThe garbage collection may not be necessary. That can be handled elsewhere, and this API can focus on its part to retrieve detached js wrappers. In the front end, the user can call garbage collection should they feel it necessary. This garbage collection could be removed entirely, in the interest of performance of this API. Thoughts on this?",
      "parentUuid": "15fc717e_b338cb9d",
      "range": {
        "startLine": 1116,
        "startChar": 36,
        "endLine": 1116,
        "endChar": 63
      },
      "revId": "a6c342b2d24e1ed774f834e33092fe70d24de83f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5d35c09_e427bd9d",
        "filename": "include/v8-profiler.h",
        "patchSetId": 12
      },
      "lineNbr": 1116,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2024-07-31T09:11:27Z",
      "side": 1,
      "message": "The issue is the call to `v8isolate-\u003etraced_handles()-\u003eIterate(\u0026enumerator)` which an implementation detail we want to get rid of. Essentially this is a remembered set that we should not need in a better world. \n\nThe first patch set was iterating the heap which we will always be able to do after GC, so moving back to that version would be future proof (but a little slower).\n\nWhat\u0027s the UX story here though: In order to actually work with detached wrappers, you\u0027d very likely need the retaining path which pulls in a heap snapshot again.",
      "parentUuid": "861c5a68_14c4b947",
      "range": {
        "startLine": 1116,
        "startChar": 36,
        "endLine": 1116,
        "endChar": 63
      },
      "revId": "a6c342b2d24e1ed774f834e33092fe70d24de83f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "535d12de_c4c58833",
        "filename": "include/v8-profiler.h",
        "patchSetId": 12
      },
      "lineNbr": 1116,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2024-07-31T09:28:55Z",
      "side": 1,
      "message": "(The move from heap iteration to `v8isolate-\u003etraced_handles()-\u003eIterate(\u0026enumerator)` was due to my suggestion but I didn\u0027t realize there are plans/hopes to get rid of it; sorry)",
      "parentUuid": "e5d35c09_e427bd9d",
      "range": {
        "startLine": 1116,
        "startChar": 36,
        "endLine": 1116,
        "endChar": 63
      },
      "revId": "a6c342b2d24e1ed774f834e33092fe70d24de83f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a27de1df_62f39f61",
        "filename": "src/profiler/heap-profiler.cc",
        "patchSetId": 12
      },
      "lineNbr": 77,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2024-07-29T16:06:38Z",
      "side": 1,
      "message": "Isn\u0027t this check covered by the `IsJSApiWrapperObject` check below? I don\u0027t think we need both.",
      "range": {
        "startLine": 77,
        "startChar": 11,
        "endLine": 77,
        "endChar": 21
      },
      "revId": "a6c342b2d24e1ed774f834e33092fe70d24de83f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f844bfa4_d9fe5fcf",
        "filename": "src/profiler/heap-profiler.cc",
        "patchSetId": 12
      },
      "lineNbr": 77,
      "author": {
        "id": 3439269
      },
      "writtenOn": "2024-07-29T20:13:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a27de1df_62f39f61",
      "range": {
        "startLine": 77,
        "startChar": 11,
        "endLine": 77,
        "endChar": 21
      },
      "revId": "a6c342b2d24e1ed774f834e33092fe70d24de83f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83426629_35bd1ca8",
        "filename": "src/profiler/heap-profiler.cc",
        "patchSetId": 12
      },
      "lineNbr": 78,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2024-07-29T16:06:38Z",
      "side": 1,
      "message": "This one can be a DCHECK. It should imo never be true.",
      "range": {
        "startLine": 78,
        "startChar": 10,
        "endLine": 78,
        "endChar": 27
      },
      "revId": "a6c342b2d24e1ed774f834e33092fe70d24de83f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "120bddda_bb5a9635",
        "filename": "src/profiler/heap-profiler.cc",
        "patchSetId": 12
      },
      "lineNbr": 78,
      "author": {
        "id": 3439269
      },
      "writtenOn": "2024-07-29T20:13:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "83426629_35bd1ca8",
      "range": {
        "startLine": 78,
        "startChar": 10,
        "endLine": 78,
        "endChar": 27
      },
      "revId": "a6c342b2d24e1ed774f834e33092fe70d24de83f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}