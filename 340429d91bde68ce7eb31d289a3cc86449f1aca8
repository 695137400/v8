{
  "comments": [
    {
      "key": {
        "uuid": "4117bc7d_a734954e",
        "filename": "src/code-reference.h",
        "patchSetId": 4
      },
      "lineNbr": 39,
      "author": {
        "id": 1118575
      },
      "writtenOn": "2018-06-04T12:00:07Z",
      "side": 1,
      "message": "nit: Instead of returning an empty handle we should DCHECK_EQ(JS, kind_) instead.",
      "range": {
        "startLine": 39,
        "startChar": 11,
        "endLine": 39,
        "endChar": 22
      },
      "revId": "340429d91bde68ce7eb31d289a3cc86449f1aca8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5de2d79_ab28f088",
        "filename": "src/code-reference.h",
        "patchSetId": 4
      },
      "lineNbr": 39,
      "author": {
        "id": 1265497
      },
      "writtenOn": "2018-06-04T12:49:58Z",
      "side": 1,
      "message": "As discussed offline, made it a CHECK to fail early.",
      "parentUuid": "4117bc7d_a734954e",
      "range": {
        "startLine": 39,
        "startChar": 11,
        "endLine": 39,
        "endChar": 22
      },
      "revId": "340429d91bde68ce7eb31d289a3cc86449f1aca8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a961cfa3_e2b163b8",
        "filename": "src/code-reference.h",
        "patchSetId": 4
      },
      "lineNbr": 39,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2018-06-05T11:10:15Z",
      "side": 1,
      "message": "May I ask what the reason for that decision was?",
      "parentUuid": "c5de2d79_ab28f088",
      "range": {
        "startLine": 39,
        "startChar": 11,
        "endLine": 39,
        "endChar": 22
      },
      "revId": "340429d91bde68ce7eb31d289a3cc86449f1aca8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8410d503_6d4be1b6",
        "filename": "src/code-reference.h",
        "patchSetId": 4
      },
      "lineNbr": 39,
      "author": {
        "id": 1265497
      },
      "writtenOn": "2018-06-05T11:38:31Z",
      "side": 1,
      "message": "The rationale was that we currently always know statically which kind of code is encapsulated and hence will never call the wrong getter. If we change the use of code-reference to also being used where we need to dynamically check which kind of code is contained, we should revisit the design and make that a conscious decision. Using CHECK ensures that this will happen.\n\nI don\u0027t mind postponing the design decision until first use and agree that the CHECK is a good way to remember.",
      "parentUuid": "a961cfa3_e2b163b8",
      "range": {
        "startLine": 39,
        "startChar": 11,
        "endLine": 39,
        "endChar": 22
      },
      "revId": "340429d91bde68ce7eb31d289a3cc86449f1aca8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6061afa3_74157599",
        "filename": "src/code-reference.h",
        "patchSetId": 4
      },
      "lineNbr": 39,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2018-06-05T11:49:47Z",
      "side": 1,
      "message": "Sure, I agree with that. My question should have been more precise, sorry. I was wondering why we use a CHECK and not a DCHECK. This looks like a typical use case for a DCHECK.",
      "parentUuid": "8410d503_6d4be1b6",
      "range": {
        "startLine": 39,
        "startChar": 11,
        "endLine": 39,
        "endChar": 22
      },
      "revId": "340429d91bde68ce7eb31d289a3cc86449f1aca8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c2857b46_9d421cee",
        "filename": "src/code-reference.h",
        "patchSetId": 4
      },
      "lineNbr": 39,
      "author": {
        "id": 1265497
      },
      "writtenOn": "2018-06-05T13:18:06Z",
      "side": 1,
      "message": "Because I feel nervous about this ever failing in production if the return value is not sanitized. If we use this wrong and the wrong use gets unnoticed in debug builds, it would allow to return malformed pointers to code. Hopefully it would crash, the CHECK makes sure it always does.",
      "parentUuid": "6061afa3_74157599",
      "range": {
        "startLine": 39,
        "startChar": 11,
        "endLine": 39,
        "endChar": 22
      },
      "revId": "340429d91bde68ce7eb31d289a3cc86449f1aca8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f0e294e_8db41757",
        "filename": "src/code-reference.h",
        "patchSetId": 4
      },
      "lineNbr": 39,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2018-06-05T14:38:35Z",
      "side": 1,
      "message": "I see. But the same reasoning holds for a good portion (almost all?) of the DCHECK in the system. Clusterfuzz treats DCHECK failures as security bugs by default. Whenever we cast some HeapObject to a more specific type, we only DCHECK that this cast is actually valid, even though hell breaks loose if it would not be.\nMaybe we should discuss this in one of our next code walkthroughs to get a common understanding of this. IMO DCHECKs should be the default, such that these accessors are just field accesses in release builds and can easily be inlined. CHECKs might be used if the code is barely tested or testable (i.e. we don\u0027t trust our tests and fuzzers).",
      "parentUuid": "c2857b46_9d421cee",
      "range": {
        "startLine": 39,
        "startChar": 11,
        "endLine": 39,
        "endChar": 22
      },
      "revId": "340429d91bde68ce7eb31d289a3cc86449f1aca8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6cdc975_af9bb78c",
        "filename": "src/code-reference.h",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1118575
      },
      "writtenOn": "2018-06-04T12:00:07Z",
      "side": 1,
      "message": "nit: Instead of returning {nullptr} we should DCHECK_EQ(WASM, kind_) instead.",
      "range": {
        "startLine": 43,
        "startChar": 11,
        "endLine": 43,
        "endChar": 24
      },
      "revId": "340429d91bde68ce7eb31d289a3cc86449f1aca8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a7334a7_d1da6e18",
        "filename": "src/code-reference.h",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1265497
      },
      "writtenOn": "2018-06-04T12:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f6cdc975_af9bb78c",
      "range": {
        "startLine": 43,
        "startChar": 11,
        "endLine": 43,
        "endChar": 24
      },
      "revId": "340429d91bde68ce7eb31d289a3cc86449f1aca8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}