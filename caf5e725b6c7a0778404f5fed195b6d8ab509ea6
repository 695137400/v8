{
  "comments": [
    {
      "key": {
        "uuid": "f4adeb38_3b4ebb6a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2020-09-10T10:45:57Z",
      "side": 1,
      "message": "Cool, thanks, I like the approach of this CL.\nHowever, there is stil an issue with removing the first addition, see inline comment.",
      "revId": "caf5e725b6c7a0778404f5fed195b6d8ab509ea6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "565d2cc7_c43f97ef",
        "filename": "src/compiler/simplified-operator-reducer.cc",
        "patchSetId": 13
      },
      "lineNbr": 241,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2020-09-10T10:45:57Z",
      "side": 1,
      "message": "This doesn\u0027t quite work as intended: If (x+a) has more users, then they will keep using a node that\u0027s no longer on the effect chain. What should happen, possibly separately, is that we realize that (x+a) no longer has any value uses and remove it from the effect chain.\nI\u0027m not aware of a phase that does this (except for SimplifiedLowering, which is too early, and the instruction selector, which is too late).\nI think it would potentially be easy to integrate such an optimization into the scheduler or EffectControlLinearizer. In fact, the EffectControlLinearizer already removes some nodes from the effect chain, like BeginRegion/EndRegion. And that would be still early enough to avoid baking in the deopts.\nIn fact, I once tried to such an optimization, as part of the GraphTrimmer:\nhttps://chromium-review.googlesource.com/c/v8/v8/+/863886 (Reverted due to JIT-time performance regressions)\nhttps://chromium-review.googlesource.com/c/v8/v8/+/880963 (Follow-up performance improvement that never landed)",
      "range": {
        "startLine": 241,
        "startChar": 14,
        "endLine": 241,
        "endChar": 79
      },
      "revId": "caf5e725b6c7a0778404f5fed195b6d8ab509ea6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7fe454dd_846b7a51",
        "filename": "src/compiler/simplified-operator-reducer.cc",
        "patchSetId": 13
      },
      "lineNbr": 241,
      "author": {
        "id": 1322305
      },
      "writtenOn": "2020-09-10T20:30:11Z",
      "side": 1,
      "message": "Thanks for your detailed suggestion! Please see PS15, thanks ðŸ˜Š",
      "parentUuid": "565d2cc7_c43f97ef",
      "range": {
        "startLine": 241,
        "startChar": 14,
        "endLine": 241,
        "endChar": 79
      },
      "revId": "caf5e725b6c7a0778404f5fed195b6d8ab509ea6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e07e84f_5a7090c7",
        "filename": "src/compiler/simplified-operator-reducer.cc",
        "patchSetId": 13
      },
      "lineNbr": 241,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2020-09-14T17:30:39Z",
      "side": 1,
      "message": "I\u0027m very sorry, but after looking into this for a bit more, I fear what I sugggested is unsound. We do rely on deoptimizing checks really deopting, and just removing them could easily lead to a type system violation. We have code that ensures that if a node ends up having type None (for example, because it always overflows), then the code after it should indeed be unreachable. This stuff is really increadibly intricate, beause it\u0027s a hidden contract between the typer and the rest of the compiler pipeline.\nSo I fear for this optimization to work, we\u0027ll have to do the less nice solution of detecting that the first checked addition will overflow less than the second one, so it is fine to remove it as soon as it has no value or overflow-bit uses anymore.",
      "parentUuid": "7fe454dd_846b7a51",
      "range": {
        "startLine": 241,
        "startChar": 14,
        "endLine": 241,
        "endChar": 79
      },
      "revId": "caf5e725b6c7a0778404f5fed195b6d8ab509ea6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cec78d1b_2e77f655",
        "filename": "src/compiler/simplified-operator-reducer.cc",
        "patchSetId": 13
      },
      "lineNbr": 241,
      "author": {
        "id": 1322305
      },
      "writtenOn": "2020-09-14T17:50:45Z",
      "side": 1,
      "message": "Hi Tobias, thanks for your feedback. Where should we put this logic?",
      "parentUuid": "8e07e84f_5a7090c7",
      "range": {
        "startLine": 241,
        "startChar": 14,
        "endLine": 241,
        "endChar": 79
      },
      "revId": "caf5e725b6c7a0778404f5fed195b6d8ab509ea6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fcdcd112_952aa497",
        "filename": "src/compiler/simplified-operator-reducer.cc",
        "patchSetId": 13
      },
      "lineNbr": 241,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2020-09-15T10:43:14Z",
      "side": 1,
      "message": "I\u0027d recommend to do everything in SimplifiedOperatorReducer:\nWalk the uses of the second CheckedInt32Add and only do the reduction if it has no other value uses, and then to do RelaxEffectsAndControls on it after performing the reduction to remove it from the effect chain. Just be sure to create a new node for the addition of the two constants and don\u0027t reuse the old one to avoid nodes changing meaning.",
      "parentUuid": "cec78d1b_2e77f655",
      "range": {
        "startLine": 241,
        "startChar": 14,
        "endLine": 241,
        "endChar": 79
      },
      "revId": "caf5e725b6c7a0778404f5fed195b6d8ab509ea6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2cb5b9ac_6f62d9e0",
        "filename": "src/compiler/simplified-operator-reducer.cc",
        "patchSetId": 13
      },
      "lineNbr": 241,
      "author": {
        "id": 1322305
      },
      "writtenOn": "2020-09-19T00:27:31Z",
      "side": 1,
      "message": "Please see PS19 ðŸ˜Š",
      "parentUuid": "fcdcd112_952aa497",
      "range": {
        "startLine": 241,
        "startChar": 14,
        "endLine": 241,
        "endChar": 79
      },
      "revId": "caf5e725b6c7a0778404f5fed195b6d8ab509ea6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}