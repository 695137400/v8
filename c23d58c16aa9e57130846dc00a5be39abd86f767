{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c80a9e6b_87a36177",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-05-10T07:24:49Z",
      "side": 1,
      "message": "PTAL :)",
      "revId": "c23d58c16aa9e57130846dc00a5be39abd86f767",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d359e70_7410c288",
        "filename": "src/maglev/maglev-interpreter-frame-state.cc",
        "patchSetId": 4
      },
      "lineNbr": 468,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2023-05-10T14:37:12Z",
      "side": 1,
      "message": "Instead of just using `TryGetInfoFor`, we should also look for `StaticTypeForNode` if the former isn\u0027t present.",
      "revId": "c23d58c16aa9e57130846dc00a5be39abd86f767",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e14ffbf2_2fd1f72d",
        "filename": "src/maglev/maglev-interpreter-frame-state.cc",
        "patchSetId": 4
      },
      "lineNbr": 468,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-05-10T15:28:14Z",
      "side": 1,
      "message": "Good idea, done :)",
      "parentUuid": "4d359e70_7410c288",
      "revId": "c23d58c16aa9e57130846dc00a5be39abd86f767",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5a3d459_12e94260",
        "filename": "src/maglev/maglev-interpreter-frame-state.cc",
        "patchSetId": 4
      },
      "lineNbr": 475,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2023-05-10T14:37:12Z",
      "side": 1,
      "message": "This type will be wrong for loop phis right, given that we don\u0027t know the back-edge type? What about only using the loop phi type post-loop? That way we don\u0027t need 2 types of phis (but need to ignore it until after the loop).",
      "revId": "c23d58c16aa9e57130846dc00a5be39abd86f767",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76a73b05_d48ba6cb",
        "filename": "src/maglev/maglev-interpreter-frame-state.cc",
        "patchSetId": 4
      },
      "lineNbr": 475,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-05-10T15:28:14Z",
      "side": 1,
      "message": "(thinking about it :) (in principle, sounds good, in practice, I\u0027m wondering if it really simplifies things or not))",
      "parentUuid": "a5a3d459_12e94260",
      "revId": "c23d58c16aa9e57130846dc00a5be39abd86f767",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c99b5ea_50796d55",
        "filename": "src/maglev/maglev-interpreter-frame-state.cc",
        "patchSetId": 4
      },
      "lineNbr": 475,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2023-05-10T16:26:15Z",
      "side": 1,
      "message": "Ok I just misunderstood the code. A small comment would be helpful (and I think you\u0027re already breaking OSR before it\u0027s landed :)). Basically what you\u0027re saying is that all loop phis start with a phi without any predecessors; and in that case we\u0027ll set the _type_ to Unknown, so none of the merges will make it more specific. Did I get that right?",
      "parentUuid": "76a73b05_d48ba6cb",
      "revId": "c23d58c16aa9e57130846dc00a5be39abd86f767",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e5da3db_db258a20",
        "filename": "src/maglev/maglev-interpreter-frame-state.cc",
        "patchSetId": 4
      },
      "lineNbr": 475,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-05-11T06:48:02Z",
      "side": 1,
      "message": "Yes correct. The `type` of loop phis will always be kUnknown (until the backedge is bound), and we use `post_loop_type` to keep track of the more \"precise\" type (but it isn\u0027t valid until we\u0027ve set the backedge). Once we\u0027ve set the backedge, we move `post_loop_type` to `type`.",
      "parentUuid": "8c99b5ea_50796d55",
      "revId": "c23d58c16aa9e57130846dc00a5be39abd86f767",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "258fa133_d5e724b6",
        "filename": "src/maglev/maglev-interpreter-frame-state.cc",
        "patchSetId": 4
      },
      "lineNbr": 527,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2023-05-10T14:37:12Z",
      "side": 1,
      "message": "The type of untagged nodes is always `Number`?",
      "revId": "c23d58c16aa9e57130846dc00a5be39abd86f767",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71991eb5_e4eb14bf",
        "filename": "src/maglev/maglev-interpreter-frame-state.cc",
        "patchSetId": 4
      },
      "lineNbr": 527,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-05-10T15:28:14Z",
      "side": 1,
      "message": "Not necessarily, I think that it could be kSmi as well.\nNot sure if this was your point, but I\u0027ve changed a bit the code to look first at the untagged type, and only look at the alternative\u0027s type if the untagged type is kUnknown.",
      "parentUuid": "258fa133_d5e724b6",
      "revId": "c23d58c16aa9e57130846dc00a5be39abd86f767",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d67787d0_7a42d815",
        "filename": "src/maglev/maglev-interpreter-frame-state.cc",
        "patchSetId": 4
      },
      "lineNbr": 540,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2023-05-10T14:37:12Z",
      "side": 1,
      "message": "StaticType I suppose should mostly not be unknown. If you introduce a helper you to check both you could call that one here.",
      "revId": "c23d58c16aa9e57130846dc00a5be39abd86f767",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "efc36c6f_3f61b85f",
        "filename": "src/maglev/maglev-interpreter-frame-state.cc",
        "patchSetId": 4
      },
      "lineNbr": 540,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-05-10T15:28:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d67787d0_7a42d815",
      "revId": "c23d58c16aa9e57130846dc00a5be39abd86f767",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce01f919_e37ba3af",
        "filename": "src/maglev/maglev-interpreter-frame-state.cc",
        "patchSetId": 4
      },
      "lineNbr": 542,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2023-05-10T14:37:12Z",
      "side": 1,
      "message": "merge_type",
      "revId": "c23d58c16aa9e57130846dc00a5be39abd86f767",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb913f05_7a774a6e",
        "filename": "src/maglev/maglev-interpreter-frame-state.cc",
        "patchSetId": 4
      },
      "lineNbr": 542,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-05-10T15:28:14Z",
      "side": 1,
      "message": "No, if we reach this point, `result` is a freshly allocated Phi.",
      "parentUuid": "ce01f919_e37ba3af",
      "revId": "c23d58c16aa9e57130846dc00a5be39abd86f767",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5afbf31a_cb14e440",
        "filename": "src/maglev/maglev-interpreter-frame-state.cc",
        "patchSetId": 4
      },
      "lineNbr": 542,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2023-05-10T16:26:15Z",
      "side": 1,
      "message": "oops.",
      "parentUuid": "eb913f05_7a774a6e",
      "revId": "c23d58c16aa9e57130846dc00a5be39abd86f767",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "768fe904_dfdb1b17",
        "filename": "src/maglev/maglev-interpreter-frame-state.h",
        "patchSetId": 4
      },
      "lineNbr": 173,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2023-05-10T14:37:12Z",
      "side": 1,
      "message": "Instead of priming the node info with the phi type, can\u0027t we consider this \"the static type\" for the phi, updating the `StaticTypeForNode` function instead? That would avoid creating NodeInfo unnecessarily and more nicely fits with how we look at special nodes elsewhere.",
      "revId": "c23d58c16aa9e57130846dc00a5be39abd86f767",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3016d12_674de642",
        "filename": "src/maglev/maglev-interpreter-frame-state.h",
        "patchSetId": 4
      },
      "lineNbr": 173,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-05-10T15:28:14Z",
      "side": 1,
      "message": "Unfortunately, I think that this would prevent Phis from having dynamic types valid in only some control paths, because when a node has a StaticType, we don\u0027t check its NodeInfo dynamic type.",
      "parentUuid": "768fe904_dfdb1b17",
      "revId": "c23d58c16aa9e57130846dc00a5be39abd86f767",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb0a4961_ad33e616",
        "filename": "src/maglev/maglev-interpreter-frame-state.h",
        "patchSetId": 4
      },
      "lineNbr": 173,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2023-05-10T16:26:15Z",
      "side": 1,
      "message": "That\u0027s not true, we check both. If we `CheckType(...)` for some type, we\u0027ll simply first check if the static type already satisfies it. If it doesn\u0027t, we\u0027ll check if the refined dynamic type does.",
      "parentUuid": "f3016d12_674de642",
      "revId": "c23d58c16aa9e57130846dc00a5be39abd86f767",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3ab8b08_0c4f2f9d",
        "filename": "src/maglev/maglev-interpreter-frame-state.h",
        "patchSetId": 4
      },
      "lineNbr": 173,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-05-11T06:48:02Z",
      "side": 1,
      "message": "Oh right, good point! Then yea, sounds good, I\u0027ll do that! :)",
      "parentUuid": "fb0a4961_ad33e616",
      "revId": "c23d58c16aa9e57130846dc00a5be39abd86f767",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}