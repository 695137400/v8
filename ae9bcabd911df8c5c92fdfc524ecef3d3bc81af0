{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8d322120_a6b4785a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2021-04-16T12:39:26Z",
      "side": 1,
      "message": "lgtm! I like how it composes with the shared cage.",
      "revId": "ae9bcabd911df8c5c92fdfc524ecef3d3bc81af0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98b98933_9a7ca775",
        "filename": "src/common/globals.h",
        "patchSetId": 11
      },
      "lineNbr": 225,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2021-04-16T12:39:26Z",
      "side": 1,
      "message": "This looks redundant since both branches have the same value. Let\u0027s remove the constant until we decide to use large code ranges for the shared cage?",
      "range": {
        "startLine": 225,
        "startChar": 41,
        "endLine": 225,
        "endChar": 42
      },
      "revId": "ae9bcabd911df8c5c92fdfc524ecef3d3bc81af0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "77139f0a_95b2b5d5",
        "filename": "src/common/globals.h",
        "patchSetId": 11
      },
      "lineNbr": 225,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2021-04-27T01:51:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "98b98933_9a7ca775",
      "range": {
        "startLine": 225,
        "startChar": 41,
        "endLine": 225,
        "endChar": 42
      },
      "revId": "ae9bcabd911df8c5c92fdfc524ecef3d3bc81af0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f5e63d5_b212f75d",
        "filename": "src/heap/code-range.cc",
        "patchSetId": 11
      },
      "lineNbr": 81,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2021-04-16T12:39:26Z",
      "side": 1,
      "message": "We also need to prevent page_allocator() from allocating in this area in the future. The the old code did: base +\u003d reserved_area here.\nHere we can use page_allocator()-\u003eAllocatePageSize() similar to how RemapEmbeddedBuiltins does it.",
      "range": {
        "startLine": 78,
        "startChar": 3,
        "endLine": 81,
        "endChar": 5
      },
      "revId": "ae9bcabd911df8c5c92fdfc524ecef3d3bc81af0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eee74025_30e037c0",
        "filename": "src/heap/code-range.cc",
        "patchSetId": 11
      },
      "lineNbr": 81,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2021-04-16T14:39:11Z",
      "side": 1,
      "message": "This part is actually done in VirtualMemoryCage::InitReservation. The newest patchset of that is sufficiently generic to support both this \"reserved page\" case and the per-Isolate cage\u0027s \"bias\" case.\n\nI don\u0027t know how to link to a line in a CL, but take a look at L329 and L330 in https://chromium-review.googlesource.com/c/v8/v8/+/2824098.\n\nThat change came after you had already taken a look, and I\u0027ve asked Igor to re-review, but please free to take a look as well. It was to fix a mis-factoring I did for the pointer cage that mishandled the IsolateRoot bias on systems that had it.",
      "parentUuid": "5f5e63d5_b212f75d",
      "range": {
        "startLine": 78,
        "startChar": 3,
        "endLine": 81,
        "endChar": 5
      },
      "revId": "ae9bcabd911df8c5c92fdfc524ecef3d3bc81af0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c4e19858_38c9271c",
        "filename": "src/heap/code-range.cc",
        "patchSetId": 11
      },
      "lineNbr": 81,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2021-04-19T10:11:15Z",
      "side": 1,
      "message": "I see, thanks! The new version of the function look good.",
      "parentUuid": "eee74025_30e037c0",
      "range": {
        "startLine": 78,
        "startChar": 3,
        "endLine": 81,
        "endChar": 5
      },
      "revId": "ae9bcabd911df8c5c92fdfc524ecef3d3bc81af0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6f02357_bdea1800",
        "filename": "src/heap/code-range.cc",
        "patchSetId": 11
      },
      "lineNbr": 151,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2021-04-16T12:39:26Z",
      "side": 1,
      "message": "Can we use Isolate::RequiresCodeRange() here instead of duplicating it?",
      "range": {
        "startLine": 150,
        "startChar": 50,
        "endLine": 151,
        "endChar": 23
      },
      "revId": "ae9bcabd911df8c5c92fdfc524ecef3d3bc81af0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87d93ab1_e1708326",
        "filename": "src/heap/code-range.cc",
        "patchSetId": 11
      },
      "lineNbr": 151,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2021-04-16T14:39:11Z",
      "side": 1,
      "message": "So Isolate::RequiresCodeRange consults the per-instance jitless_ field instead of FLAG_jitless. During construction time, jitless_ gets the value of FLAG_jitless. I guess it\u0027s to be threadsafe? Though I don\u0027t see why we would ever support the use case of modifying FLAG_ globals concurrently with execution...\n\nHappy to refactor to something that makes sense here, like making Isolate::RequiresCodeRange() static and consult FLAG_jitless. Do you know why it uses a jitless_ field to begin with?",
      "parentUuid": "b6f02357_bdea1800",
      "range": {
        "startLine": 150,
        "startChar": 50,
        "endLine": 151,
        "endChar": 23
      },
      "revId": "ae9bcabd911df8c5c92fdfc524ecef3d3bc81af0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64711297_9ad182ef",
        "filename": "src/heap/code-range.cc",
        "patchSetId": 11
      },
      "lineNbr": 151,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-04-16T15:24:48Z",
      "side": 1,
      "message": "It seems it was done mostly for cctesting of jitless mode.\n\nBTW, re this method - maybe it should be decided outside of the CodeRange machinery whether the ProcessWideCodeRange should be created?",
      "parentUuid": "87d93ab1_e1708326",
      "range": {
        "startLine": 150,
        "startChar": 50,
        "endLine": 151,
        "endChar": 23
      },
      "revId": "ae9bcabd911df8c5c92fdfc524ecef3d3bc81af0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5ac04b8_fa609bdb",
        "filename": "src/heap/code-range.cc",
        "patchSetId": 11
      },
      "lineNbr": 151,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2021-04-16T18:37:27Z",
      "side": 1,
      "message": "Yeah, it\u0027s workable to move it to the outside. The original reason for it being inside is that it\u0027s needed inside InitializeOncePerProcess, and the pattern is to call InitializeOncePerProcess methods unconditionally.",
      "parentUuid": "64711297_9ad182ef",
      "range": {
        "startLine": 150,
        "startChar": 50,
        "endLine": 151,
        "endChar": 23
      },
      "revId": "ae9bcabd911df8c5c92fdfc524ecef3d3bc81af0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43178817_50812752",
        "filename": "src/heap/code-range.cc",
        "patchSetId": 11
      },
      "lineNbr": 151,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2021-04-19T10:11:15Z",
      "side": 1,
      "message": "+1 to moving this outside and initializing lazily in Heap::SetUp using CallOnce.\nThis would also solve the TODO about using code_range_size API parameter.",
      "parentUuid": "c5ac04b8_fa609bdb",
      "range": {
        "startLine": 150,
        "startChar": 50,
        "endLine": 151,
        "endChar": 23
      },
      "revId": "ae9bcabd911df8c5c92fdfc524ecef3d3bc81af0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67c514a1_14be1e01",
        "filename": "src/heap/code-range.cc",
        "patchSetId": 11
      },
      "lineNbr": 151,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2021-04-27T01:51:28Z",
      "side": 1,
      "message": "Moved it out.\n\nI had to extend CallOnce a little bit to support passing a second argument that\u0027s not a pointer. We should move to absl\u0027s CallOnce whenever the absl thing happens, so I tried to keep the CallOnce extension here minimal instead of making CallOnce more modern with perfect forwarding.",
      "parentUuid": "43178817_50812752",
      "range": {
        "startLine": 150,
        "startChar": 50,
        "endLine": 151,
        "endChar": 23
      },
      "revId": "ae9bcabd911df8c5c92fdfc524ecef3d3bc81af0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06496a0a_4a3a9cc6",
        "filename": "src/heap/code-range.cc",
        "patchSetId": 11
      },
      "lineNbr": 170,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2021-04-16T12:39:26Z",
      "side": 1,
      "message": "Should this be a DCHECK?",
      "range": {
        "startLine": 170,
        "startChar": 9,
        "endLine": 170,
        "endChar": 39
      },
      "revId": "ae9bcabd911df8c5c92fdfc524ecef3d3bc81af0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "37bc22f8_dc41d7ff",
        "filename": "src/heap/code-range.cc",
        "patchSetId": 11
      },
      "lineNbr": 170,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2021-04-27T01:51:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "06496a0a_4a3a9cc6",
      "range": {
        "startLine": 170,
        "startChar": 9,
        "endLine": 170,
        "endChar": 39
      },
      "revId": "ae9bcabd911df8c5c92fdfc524ecef3d3bc81af0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}