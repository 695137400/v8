{
  "comments": [
    {
      "key": {
        "uuid": "975def15_dad9c4e4",
        "filename": "src/compiler/access-info.cc",
        "patchSetId": 1
      },
      "lineNbr": 567,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2020-06-25T09:43:40Z",
      "side": 1,
      "message": "Is the issue that IsJSObject will load a map? i.e it would be equivalent to\n  if (!map-\u003eprototype().synchronized_map().IsJSObjectMap()) {\nor similar?",
      "range": {
        "startLine": 567,
        "startChar": 26,
        "endLine": 567,
        "endChar": 36
      },
      "revId": "4a7f4f0bdb2a533b363178c98e8ab8efad880aed",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "636a2eb5_c2b16fed",
        "filename": "src/compiler/access-info.cc",
        "patchSetId": 1
      },
      "lineNbr": 567,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-06-25T09:45:55Z",
      "side": 1,
      "message": "Yes, the issue is that each time we do an IsFoo check, we load potentially a different map.",
      "parentUuid": "975def15_dad9c4e4",
      "range": {
        "startLine": 567,
        "startChar": 26,
        "endLine": 567,
        "endChar": 36
      },
      "revId": "4a7f4f0bdb2a533b363178c98e8ab8efad880aed",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d64a791_5c522fc3",
        "filename": "src/compiler/access-info.cc",
        "patchSetId": 1
      },
      "lineNbr": 567,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2020-06-25T09:51:10Z",
      "side": 1,
      "message": "Pasting this from the other CL\n\nIf\n\n  map-\u003eprototype().IsJSObject();\nhas a problem then\n  prototype_map \u003d map-\u003eprototype()-\u003esynchronized_map()-\u003eIsJSObjectMap();\nhas the same issue.\nIt could happen that BG thread does map-\u003eprototype(), goes to sleep due to scheduling, main thread changes the prototype, and then BG thread does -\u003esynchronized_map() and sees \"the wrong\" map.\n\n\nI think we might need a lock.",
      "parentUuid": "636a2eb5_c2b16fed",
      "range": {
        "startLine": 567,
        "startChar": 26,
        "endLine": 567,
        "endChar": 36
      },
      "revId": "4a7f4f0bdb2a533b363178c98e8ab8efad880aed",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8818c95_087b2adc",
        "filename": "src/compiler/access-info.cc",
        "patchSetId": 1
      },
      "lineNbr": 567,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-06-25T09:56:31Z",
      "side": 1,
      "message": "I don\u0027t understand the example, it doesn\u0027t type-check. We should read the prototype only once, and from that we should read the map only once.\n\n\u003e It could happen that BG thread does map-\u003eprototype(), goes to sleep due to scheduling, main thread changes the prototype,\n\nWe concluded earlier that the prototype is immutable, right? It can only change by replacing the entire map. In that case we continue working with the old map and probably abort optimization at the end when we notice the inconsistency.",
      "parentUuid": "0d64a791_5c522fc3",
      "range": {
        "startLine": 567,
        "startChar": 26,
        "endLine": 567,
        "endChar": 36
      },
      "revId": "4a7f4f0bdb2a533b363178c98e8ab8efad880aed",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0355ae4_ec6edd09",
        "filename": "src/compiler/access-info.cc",
        "patchSetId": 1
      },
      "lineNbr": 567,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-06-25T10:02:52Z",
      "side": 1,
      "message": "\"map_prototype-\u003esynchronized_map().IsJSObjectMap()\" would be sufficient to resolve the data race I mentioned in the other CL.\n\nI think Georg wants additionally to ensure that map_prototype-\u003esynchronized_map() stays the same throughout the whole code. For that we would need to save the map:\n\"Handle\u003cMap\u003e map_of_map_prototype \u003d handle(map_prototype-\u003esynchronized_map(), isolate())\" and then work with the map_of_map_prototype. \n\nThat would be also good for performance as it would avoid fences.",
      "parentUuid": "f8818c95_087b2adc",
      "range": {
        "startLine": 567,
        "startChar": 26,
        "endLine": 567,
        "endChar": 36
      },
      "revId": "4a7f4f0bdb2a533b363178c98e8ab8efad880aed",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40168fa9_46529566",
        "filename": "src/compiler/access-info.cc",
        "patchSetId": 1
      },
      "lineNbr": 567,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-06-25T10:07:24Z",
      "side": 1,
      "message": "Right, thanks for pointing out that this second property is not about a data race.",
      "parentUuid": "b0355ae4_ec6edd09",
      "range": {
        "startLine": 567,
        "startChar": 26,
        "endLine": 567,
        "endChar": 36
      },
      "revId": "4a7f4f0bdb2a533b363178c98e8ab8efad880aed",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "926829be_ce6b9afc",
        "filename": "src/compiler/access-info.cc",
        "patchSetId": 1
      },
      "lineNbr": 567,
      "author": {
        "id": 1327869
      },
      "writtenOn": "2020-06-25T10:07:46Z",
      "side": 1,
      "message": "\u003e We should read the prototype only once, and from that we should read the map only once\n\nThat was what the previous CL was doing (https://chromium-review.googlesource.com/c/v8/v8/+/2210233) and we said it was unsafe because the prototype might transition.\n\n\u003e I don\u0027t understand the example\n\nMy point is that this chain \"map-\u003eprototype().synchronized_map().IsJSObjectMap()\" is not atomic. It could happen that \"map-\u003eprototype()\" happens, then the prototype transitions, and then we do \".synchronized_map().IsJSObjectMap()\". We are still in the same place as before.",
      "parentUuid": "f8818c95_087b2adc",
      "range": {
        "startLine": 567,
        "startChar": 26,
        "endLine": 567,
        "endChar": 36
      },
      "revId": "4a7f4f0bdb2a533b363178c98e8ab8efad880aed",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}