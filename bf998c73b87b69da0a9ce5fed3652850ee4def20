{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e3fe7368_1e6592ef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2022-09-07T09:56:30Z",
      "side": 1,
      "message": "lgtm",
      "revId": "bf998c73b87b69da0a9ce5fed3652850ee4def20",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7cfaa6ef_2f0631d0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2022-09-07T13:10:09Z",
      "side": 1,
      "message": "Nico, PTAL @ compiler (Tobias is OOO)",
      "revId": "bf998c73b87b69da0a9ce5fed3652850ee4def20",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f125efd7_0a235109",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2022-09-08T07:22:50Z",
      "side": 1,
      "message": "src/compiler LGTM, I think the concept of `HeapObjectReference` is new, isn\u0027t it? Maybe a short comment about what that is would be good.",
      "revId": "bf998c73b87b69da0a9ce5fed3652850ee4def20",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a5d223f5_d675c067",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1420650
      },
      "writtenOn": "2022-09-08T07:55:35Z",
      "side": 1,
      "message": "I think it is already defined in `objects/maybe-object.cc` and there is already comment explain what it is.\nhttps://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/maybe-object.h;l\u003d43\n\nHeapObjectReference can be a strong reference/weak reference/cleared weak reference to HeapObject.",
      "parentUuid": "f125efd7_0a235109",
      "revId": "bf998c73b87b69da0a9ce5fed3652850ee4def20",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f7a600b7_9d797dc7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2022-09-08T08:08:34Z",
      "side": 1,
      "message": "Ah thanks! I think I\u0027ve never encountered that.",
      "parentUuid": "a5d223f5_d675c067",
      "revId": "bf998c73b87b69da0a9ce5fed3652850ee4def20",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "636854e5_1127a8c9",
        "filename": "src/ic/accessor-assembler.cc",
        "patchSetId": 16
      },
      "lineNbr": 87,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2022-09-09T08:32:01Z",
      "side": 1,
      "message": "Could you please also try to locally measure if replacing this CAST with ReinterpretCast\u003cHeapObjectReference\u003e() improves time spent running the `benchmarks/kraken/stanford-crypto-aes` benchmark in x64.optdebug mode.",
      "range": {
        "startLine": 87,
        "startChar": 40,
        "endLine": 87,
        "endChar": 44
      },
      "revId": "bf998c73b87b69da0a9ce5fed3652850ee4def20",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "215f978b_c9ce1409",
        "filename": "src/ic/accessor-assembler.cc",
        "patchSetId": 16
      },
      "lineNbr": 87,
      "author": {
        "id": 1420650
      },
      "writtenOn": "2022-09-13T07:03:44Z",
      "side": 1,
      "message": "Sorry for the late. I\u0027ve run this benchmark locally and the result shows that doing this can improve the performance of `benchmarks/kraken/stanford-crypto-aes` by 3.1%. \n\nHere\u0027s the detail:\n\n                                benchmark:    score |  master_ |      % |\n    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d+\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d+\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d+\n                            ai-astar-orig:    182.5 |    186.6 |    2.2 |\n                audio-beat-detection-orig:    269.0 S    278.7 S    3.6 |\n                           audio-dft-orig:    121.9 S    135.2 S   10.9 |\n                           audio-fft-orig:     86.9 |     90.9 |    4.6 |\n                    audio-oscillator-orig:    120.2 |    123.6 S    2.8 |\n               imaging-gaussian-blur-orig:    182.8 |    186.3 |    1.9 |\n                    imaging-darkroom-orig:    175.6 |    178.9 S    1.9 |\n                  imaging-desaturate-orig:     64.3 |     67.4 S    4.8 |\n                json-parse-financial-orig:    122.2 |    124.8 S    2.1 |\n            json-stringify-tinderbox-orig:     64.4 |     65.8 S    2.2 |\n                 stanford-crypto-aes-orig:    238.4 |    245.7 S    3.1 |\n                 stanford-crypto-ccm-orig:    496.8 |    509.8 |    2.6 |\n              stanford-crypto-pbkdf2-orig:    244.8 |    249.3 S    1.8 |\n    stanford-crypto-sha256-iterative-orig:    119.4 |    122.2 S    2.3 |\n                                   Kraken:   2489.2 |   2565.3 S    3.1 |\n    ------------------------------------------------+----------+--------+",
      "parentUuid": "636854e5_1127a8c9",
      "range": {
        "startLine": 87,
        "startChar": 40,
        "endLine": 87,
        "endChar": 44
      },
      "revId": "bf998c73b87b69da0a9ce5fed3652850ee4def20",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eeef1730_9837c819",
        "filename": "src/objects/feedback-vector-inl.h",
        "patchSetId": 16
      },
      "lineNbr": 441,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2022-09-08T10:40:26Z",
      "side": 1,
      "message": "I\u0027m not sure why does `v8_linux64_dbg_ng` bot still timeout. I don\u0027t see how the extended CheckObjectType can result in such a regression. On the other hand, other CLs are not even close to the time limit when they run benchmarks on the `v8_linux64_dbg_ng` bot.\n\nLet\u0027s try to reverse this DCHECK, rebase on ToT and try again:\n`DCHECK_IMPLIES(pair.first.IsSmi(), !IsICSlotKind(kind()));`",
      "revId": "bf998c73b87b69da0a9ce5fed3652850ee4def20",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24d6192b_cfb4b160",
        "filename": "src/objects/feedback-vector-inl.h",
        "patchSetId": 16
      },
      "lineNbr": 441,
      "author": {
        "id": 1420650
      },
      "writtenOn": "2022-09-09T05:26:50Z",
      "side": 1,
      "message": "I tried this in patchset 17 (https://chromium-review.googlesource.com/c/v8/v8/+/3861310/17) but it seems that we still encounter the TIMEOUT issue.\n\nAfter some investigations with `perf`, I found that the root cause is that we put the declaration of `std::stringstream` ahead (https://chromium-review.googlesource.com/c/v8/v8/+/3861310/17/src/objects/object-type.cc#20) so it has to be initialized every time this function is called. So in patchset 18 my solution is to move the declaration right before `FATAL`, in this case we only initialize it when `FATAL` is reached. This pass the tryjobs, PTAL.",
      "parentUuid": "eeef1730_9837c819",
      "revId": "bf998c73b87b69da0a9ce5fed3652850ee4def20",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8b3dbd7_4e508a16",
        "filename": "src/objects/feedback-vector-inl.h",
        "patchSetId": 16
      },
      "lineNbr": 441,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2022-09-09T08:32:01Z",
      "side": 1,
      "message": "Nice catch! Thanks! But I think it still makes sense to reverse the DCHECK.",
      "parentUuid": "24d6192b_cfb4b160",
      "revId": "bf998c73b87b69da0a9ce5fed3652850ee4def20",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a76ebd8_56b07e6a",
        "filename": "src/objects/feedback-vector-inl.h",
        "patchSetId": 16
      },
      "lineNbr": 441,
      "author": {
        "id": 1420650
      },
      "writtenOn": "2022-09-13T07:03:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b8b3dbd7_4e508a16",
      "revId": "bf998c73b87b69da0a9ce5fed3652850ee4def20",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28a1620f_8eee12f1",
        "filename": "src/objects/feedback-vector-inl.h",
        "patchSetId": 16
      },
      "lineNbr": 494,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2022-09-08T10:40:26Z",
      "side": 1,
      "message": "Ditto.",
      "revId": "bf998c73b87b69da0a9ce5fed3652850ee4def20",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d18f0aba_73b612a2",
        "filename": "src/objects/feedback-vector-inl.h",
        "patchSetId": 16
      },
      "lineNbr": 494,
      "author": {
        "id": 1420650
      },
      "writtenOn": "2022-09-13T07:03:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "28a1620f_8eee12f1",
      "revId": "bf998c73b87b69da0a9ce5fed3652850ee4def20",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}