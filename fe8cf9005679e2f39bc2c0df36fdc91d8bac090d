{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "71fdca0a_c062414f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1115956
      },
      "writtenOn": "2024-02-23T09:54:20Z",
      "side": 1,
      "message": "PTAL",
      "revId": "fe8cf9005679e2f39bc2c0df36fdc91d8bac090d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e2c146c0_94749130",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-02-23T10:16:16Z",
      "side": 1,
      "message": "Nice, LGTM with one suggestion.",
      "revId": "fe8cf9005679e2f39bc2c0df36fdc91d8bac090d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a07b67c9_a32b3519",
        "filename": "src/flags/flags.cc",
        "patchSetId": 3
      },
      "lineNbr": 290,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-02-23T10:16:16Z",
      "side": 1,
      "message": "A bit nicer: `base::Vector\u003cconst Flag\u003e Flags() { return base::ArrayVector(flags); }`, and then use `Flags().begin()` and `Flags().end()` in the tests.",
      "range": {
        "startLine": 288,
        "startChar": 0,
        "endLine": 290,
        "endChar": 51
      },
      "revId": "fe8cf9005679e2f39bc2c0df36fdc91d8bac090d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2318223f_003b7fa4",
        "filename": "src/flags/flags.cc",
        "patchSetId": 3
      },
      "lineNbr": 290,
      "author": {
        "id": 1115956
      },
      "writtenOn": "2024-02-23T13:24:39Z",
      "side": 1,
      "message": "Nice! Even nicer is that I now can iterate the C++11 way with:\n  for (const Flag\u0026 flag : Flags()) {\n    CHECK_EQ(\u0026flag, FindFlagByName(flag.name()));\n  }",
      "parentUuid": "a07b67c9_a32b3519",
      "range": {
        "startLine": 288,
        "startChar": 0,
        "endLine": 290,
        "endChar": 51
      },
      "revId": "fe8cf9005679e2f39bc2c0df36fdc91d8bac090d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b025eb65_9c4e7142",
        "filename": "src/flags/flags.cc",
        "patchSetId": 3
      },
      "lineNbr": 290,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-02-23T13:30:28Z",
      "side": 1,
      "message": "üëç",
      "parentUuid": "2318223f_003b7fa4",
      "range": {
        "startLine": 288,
        "startChar": 0,
        "endLine": 290,
        "endChar": 51
      },
      "revId": "fe8cf9005679e2f39bc2c0df36fdc91d8bac090d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f3d222a4_2e732af8",
        "filename": "test/unittests/flags/flag-definitions-unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 343,
      "author": {
        "id": 1115956
      },
      "writtenOn": "2024-02-23T09:54:20Z",
      "side": 1,
      "message": "Checked that these tests are fast.",
      "revId": "fe8cf9005679e2f39bc2c0df36fdc91d8bac090d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}