{
  "comments": [
    {
      "key": {
        "uuid": "d1cc33b0_1fece2e9",
        "filename": "src/flag-definitions.h",
        "patchSetId": 3
      },
      "lineNbr": 1097,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2019-01-09T14:29:18Z",
      "side": 1,
      "message": "Could you remove this comment, we don\u0027t have design docs for other flags and it will probably bitrot in time.",
      "range": {
        "startLine": 1097,
        "startChar": 0,
        "endLine": 1097,
        "endChar": 41
      },
      "revId": "9da758f65cf907a35d68b38fe03905512bb1449d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8990e060_3c693e23",
        "filename": "src/flag-definitions.h",
        "patchSetId": 3
      },
      "lineNbr": 1097,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-01-09T14:39:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d1cc33b0_1fece2e9",
      "range": {
        "startLine": 1097,
        "startChar": 0,
        "endLine": 1097,
        "endChar": 41
      },
      "revId": "9da758f65cf907a35d68b38fe03905512bb1449d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b3832227_67f4a9da",
        "filename": "src/flag-definitions.h",
        "patchSetId": 3
      },
      "lineNbr": 1099,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2019-01-02T09:34:17Z",
      "side": 1,
      "message": "I guess you don\u0027t actually want to land this change :).",
      "range": {
        "startLine": 1099,
        "startChar": 21,
        "endLine": 1099,
        "endChar": 25
      },
      "revId": "9da758f65cf907a35d68b38fe03905512bb1449d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b548f27_25d762c0",
        "filename": "src/flag-definitions.h",
        "patchSetId": 3
      },
      "lineNbr": 1099,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-01-07T15:59:39Z",
      "side": 1,
      "message": "That was the intention - the jitless build-time flag implies the --jitless runtime flag. Currently this would affect only v8 lite bots, and there we agreed to test the jitless config, right?",
      "parentUuid": "b3832227_67f4a9da",
      "range": {
        "startLine": 1099,
        "startChar": 21,
        "endLine": 1099,
        "endChar": 25
      },
      "revId": "9da758f65cf907a35d68b38fe03905512bb1449d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43ea2c62_b66722c3",
        "filename": "src/flag-definitions.h",
        "patchSetId": 3
      },
      "lineNbr": 1099,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2019-01-07T16:18:11Z",
      "side": 1,
      "message": "Ahh sorry missed the ifdef / else. Given the plan is to remove the V8_JITLESS_MODE define, could we just move this down to the \"// Flags only available in non-Lite modes\" and rely on the V8_LITE_MODE define to make this read-only / enabled by default?",
      "parentUuid": "2b548f27_25d762c0",
      "range": {
        "startLine": 1099,
        "startChar": 21,
        "endLine": 1099,
        "endChar": 25
      },
      "revId": "9da758f65cf907a35d68b38fe03905512bb1449d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01c9dc54_3aba14fc",
        "filename": "src/flag-definitions.h",
        "patchSetId": 3
      },
      "lineNbr": 1099,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-01-09T13:28:46Z",
      "side": 1,
      "message": "Sure, I moved this down to just above the \u0027only available in non-Lite modes\u0027 section. Didn\u0027t move into it because --jitless should be mutable in lite mode, read-only otherwise. Sound good?",
      "parentUuid": "43ea2c62_b66722c3",
      "range": {
        "startLine": 1099,
        "startChar": 21,
        "endLine": 1099,
        "endChar": 25
      },
      "revId": "9da758f65cf907a35d68b38fe03905512bb1449d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ae46b59f_2b14a053",
        "filename": "src/flag-definitions.h",
        "patchSetId": 3
      },
      "lineNbr": 1099,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2019-01-09T13:47:41Z",
      "side": 1,
      "message": "Wait, why are we making it mutable in lite mode and readonly otherwise? Surely it should be the other way round so you can turn it on at runtime in default built for testing but it is forced on by default in lite mode?",
      "parentUuid": "01c9dc54_3aba14fc",
      "range": {
        "startLine": 1099,
        "startChar": 21,
        "endLine": 1099,
        "endChar": 25
      },
      "revId": "9da758f65cf907a35d68b38fe03905512bb1449d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba22e16b_89e440fc",
        "filename": "src/flag-definitions.h",
        "patchSetId": 3
      },
      "lineNbr": 1099,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-01-09T14:15:29Z",
      "side": 1,
      "message": "In V8_JITLESS_MODE (\u003d build-time enabled), it is mutable to give us the option to run lite mode without jitless mode. It is true by default so it\u0027ll be enabled on bots. We can also make it read-only here if you prefer, I don\u0027t think it matters too much.\n\nWithout V8_JITLESS_MODE, --jitless is not supported at all, that\u0027s why the flag is read-only and false.\n\nOnce the V8_JITLESS_MODE build-time config is removed, it\u0027d make sense to have similar behavior as for the other V8_LITE_MODE flags, i.e. read-only true in lite mode, and mutable with default false otherwise.",
      "parentUuid": "ae46b59f_2b14a053",
      "range": {
        "startLine": 1099,
        "startChar": 21,
        "endLine": 1099,
        "endChar": 25
      },
      "revId": "9da758f65cf907a35d68b38fe03905512bb1449d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea735f4a_d511bb46",
        "filename": "src/flag-definitions.h",
        "patchSetId": 3
      },
      "lineNbr": 1099,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2019-01-09T14:29:18Z",
      "side": 1,
      "message": "But the V8_JITLESS_MODE doesn\u0027t actually do anything yet. Do you have changes that will require a build time flag? If there isn\u0027t anything could we just make this like the other lite mode flags (and remove the V8_JITLESS_MODE define until we need it). If not, can we make it always readonly.",
      "parentUuid": "ba22e16b_89e440fc",
      "range": {
        "startLine": 1099,
        "startChar": 21,
        "endLine": 1099,
        "endChar": 25
      },
      "revId": "9da758f65cf907a35d68b38fe03905512bb1449d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69d9278e_23a0b23e",
        "filename": "src/flag-definitions.h",
        "patchSetId": 3
      },
      "lineNbr": 1099,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-01-09T14:39:59Z",
      "side": 1,
      "message": "Huh. An earlier version of this CL had deps on the build-time flag, but you\u0027re right the current version doesn\u0027t. Moved into the LITE section as you suggested.",
      "parentUuid": "ea735f4a_d511bb46",
      "range": {
        "startLine": 1099,
        "startChar": 21,
        "endLine": 1099,
        "endChar": 25
      },
      "revId": "9da758f65cf907a35d68b38fe03905512bb1449d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f03c339e_e6ccdb41",
        "filename": "src/heap/spaces.cc",
        "patchSetId": 3
      },
      "lineNbr": 681,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2019-01-02T09:34:17Z",
      "side": 1,
      "message": "Why do we ever get here with jitless mode? I was asuming we would never be allocating code memory in jitless. If we allocate it but mark it as non-exec surely that is just going to cause a failure down the road if we ever try and use it?",
      "revId": "9da758f65cf907a35d68b38fe03905512bb1449d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8e47d59_170864f4",
        "filename": "src/heap/spaces.cc",
        "patchSetId": 3
      },
      "lineNbr": 681,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-01-07T15:59:39Z",
      "side": 1,
      "message": "In the current design we still allocate Code heap objects in CODE_SPACE, but CODE_SPACE is non-executable. Code heap objects are only used as metadata containers and are never executed (their code area actually contains int3).",
      "parentUuid": "f03c339e_e6ccdb41",
      "revId": "9da758f65cf907a35d68b38fe03905512bb1449d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0be7a6cd_e68b22b5",
        "filename": "src/heap/spaces.cc",
        "patchSetId": 3
      },
      "lineNbr": 681,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2019-01-07T16:18:11Z",
      "side": 1,
      "message": "How about allocating the code objects in the old space instead?",
      "parentUuid": "b8e47d59_170864f4",
      "revId": "9da758f65cf907a35d68b38fe03905512bb1449d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9034330_6dbe6bdf",
        "filename": "src/heap/spaces.cc",
        "patchSetId": 3
      },
      "lineNbr": 681,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-01-08T08:00:06Z",
      "side": 1,
      "message": "I considered that and it\u0027s also a valid approach. \n\nThere\u0027s a few advantages to preserving CODE_SPACE though: 1. consistency with non-jitless modes, 2. less invasive changes (|changing permissions| \u003c |changing space|), 3. iirc some spots expect Code objects to be in CODE_SPACE. There\u0027s little downsides since the allocated code space page is trimmed after deserialization.",
      "parentUuid": "0be7a6cd_e68b22b5",
      "revId": "9da758f65cf907a35d68b38fe03905512bb1449d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "adbe475e_a863bf75",
        "filename": "src/heap/spaces.cc",
        "patchSetId": 3
      },
      "lineNbr": 681,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2019-01-08T12:05:32Z",
      "side": 1,
      "message": "Regarding 2, is this really less invasive, I would have thought it would be as simple as changing this line if the jitless flag is enabled: \nhttps://cs.chromium.org/chromium/src/v8/src/heap/factory.cc?q\u003dNewCode\u0026sq\u003dpackage:chromium\u0026g\u003d0\u0026l\u003d2787\n\nThat way we wouldn\u0027t have to deal with the RW/RX permission changes that happen on the code space.\n\n#3 might be a reason to keep this in the code space, but I\u0027m not sure on the details. I won\u0027t block on this if Ulan is happy though, since hopefully we can avoid allocating code object trampolines in the future so this shouldn\u0027t be an issue.",
      "parentUuid": "b9034330_6dbe6bdf",
      "revId": "9da758f65cf907a35d68b38fe03905512bb1449d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69d5fd22_fa333de7",
        "filename": "src/heap/spaces.cc",
        "patchSetId": 3
      },
      "lineNbr": 681,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-01-09T12:28:37Z",
      "side": 1,
      "message": "\u003e Regarding 2, is this really less invasive, I would have thought it would be as simple as changing this line if the jitless flag is enabled: \n\u003e https://cs.chromium.org/chromium/src/v8/src/heap/factory.cc?q\u003dNewCode\u0026sq\u003dpackage:chromium\u0026g\u003d0\u0026l\u003d2787\n\u003e \n\u003e That way we wouldn\u0027t have to deal with the RW/RX permission changes that happen on the code space.\n\u003e \n\u003e #3 might be a reason to keep this in the code space, but I\u0027m not sure on the details. I won\u0027t block on this if Ulan is happy though, since hopefully we can avoid allocating code object trampolines in the future so this shouldn\u0027t be an issue.\n\nHere\u0027s one spot for the \u0027Code object -\u003e CODE_SPACE\u0027 assumption, just as an example:\n\nhttps://cs.chromium.org/chromium/src/v8/src/heap/spaces-inl.h?l\u003d86\u0026rcl\u003dda16260fa6ae1c2ebd7fd3e48703c5c0d812772e\n\nThere\u0027s also a few other spots e.g. related to serialization. Ofc we could update them to handle Code in OLD_SPACE. \n\nI actually think the current approach is pretty elegant though :) It\u0027s called \u0027CODE_SPACE\u0027 (not \u0027EXECUTABLE_SPACE\u0027) so we don\u0027t create any awkward naming discrepancies. Everything else stays as-is, except we never set executable permissions.",
      "parentUuid": "adbe475e_a863bf75",
      "revId": "9da758f65cf907a35d68b38fe03905512bb1449d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1eb7894_36c1263d",
        "filename": "src/heap/spaces.cc",
        "patchSetId": 3
      },
      "lineNbr": 681,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2019-01-09T13:47:41Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "69d5fd22_fa333de7",
      "revId": "9da758f65cf907a35d68b38fe03905512bb1449d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9d075e03_a7aafc60",
        "filename": "test/mjsunit/mjsunit.status",
        "patchSetId": 3
      },
      "lineNbr": 357,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2019-01-02T09:34:17Z",
      "side": 1,
      "message": "None of the tests which \"require\" optimized code should need to be skipped, since we already deal with them for lite mode (either skipping during runtime or dealing with lack of optimization). Could you re-generate this list to only disable WASM tests?  Also it would be great if we could solve the WASM problem before landing this - can\u0027t we just enable the interpreter in JITLess?",
      "range": {
        "startLine": 357,
        "startChar": 36,
        "endLine": 357,
        "endChar": 52
      },
      "revId": "9da758f65cf907a35d68b38fe03905512bb1449d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f286c60_6a22e8f7",
        "filename": "test/mjsunit/mjsunit.status",
        "patchSetId": 3
      },
      "lineNbr": 357,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-01-07T15:59:39Z",
      "side": 1,
      "message": "It\u0027s not just optimized code, but any test that generates code (e.g. CodeStubAssembler tests). Sure I can make another pass and ensure we don\u0027t skip tests that already pass due to lite skips.\n\nWasm isn\u0027t part of the first jitless v8 version - back when I chatted about this with Michi, he estimated around a month of work to get interpreter-only wasm working (without allocating executable memory).\n\nAn alternative would be to put these jitless-specific test skips in a \u0027jitless_mode\u0027 block. That\u0027s what I had originally.",
      "parentUuid": "9d075e03_a7aafc60",
      "range": {
        "startLine": 357,
        "startChar": 36,
        "endLine": 357,
        "endChar": 52
      },
      "revId": "9da758f65cf907a35d68b38fe03905512bb1449d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab03895e_665072b7",
        "filename": "test/mjsunit/mjsunit.status",
        "patchSetId": 3
      },
      "lineNbr": 357,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2019-01-07T16:18:11Z",
      "side": 1,
      "message": "Re WASM, that sounds fine. \n\nRe optimized code, let\u0027s do another pass and try and remove those that now work in lite mode, and remove the comment on optimized code from above. \n\nHopefully we can get this down to just those tests which explicitly generate assembly once the wasm issue is fixed (of which I don\u0027t think there should be any in mjsunit since we can\u0027t directly generate assembly code from js anyway).",
      "parentUuid": "7f286c60_6a22e8f7",
      "range": {
        "startLine": 357,
        "startChar": 36,
        "endLine": 357,
        "endChar": 52
      },
      "revId": "9da758f65cf907a35d68b38fe03905512bb1449d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75ebb2da_e3b7ddb1",
        "filename": "test/mjsunit/mjsunit.status",
        "patchSetId": 3
      },
      "lineNbr": 357,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-01-09T13:28:46Z",
      "side": 1,
      "message": "Done, removed quite a lot of skips in the second pass. The remaining skips involve either wasm or codegen.",
      "parentUuid": "ab03895e_665072b7",
      "range": {
        "startLine": 357,
        "startChar": 36,
        "endLine": 357,
        "endChar": 52
      },
      "revId": "9da758f65cf907a35d68b38fe03905512bb1449d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}