{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "76aba24e_822c9d3b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2022-07-07T22:59:04Z",
      "side": 1,
      "message": "Tests missing, but let\u0027s see if you like the general idea.",
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f9202070_05eca78f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2022-07-08T07:20:30Z",
      "side": 1,
      "message": "+Igor for external code space question",
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e05d0ec3_76b022ca",
        "filename": "src/heap/marking.cc",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2022-07-08T08:44:48Z",
      "side": 1,
      "message": "nit: Can we get the chunk from maybe_inner_ptr since we anyway assume chunk is not a large page?",
      "range": {
        "startLine": 144,
        "startChar": 23,
        "endLine": 144,
        "endChar": 28
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7214c799_d80f225b",
        "filename": "src/heap/marking.cc",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2022-07-08T08:45:45Z",
      "side": 1,
      "message": "nit: Also, since we assume chunk is a normal page, shouldn\u0027t we just use Page instead of MemoryChunk?",
      "parentUuid": "e05d0ec3_76b022ca",
      "range": {
        "startLine": 144,
        "startChar": 23,
        "endLine": 144,
        "endChar": 28
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff30e8cc_102ef9e6",
        "filename": "src/heap/marking.cc",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2022-07-08T09:54:12Z",
      "side": 1,
      "message": "In a different direction, `chunk` is only used to convert from addresses to markbit indices and back, and `maybe_inner_ptr` is only used to calculate the starting markbit index. How about we change this method take a markbit index as a parameter and return a markbit index?",
      "parentUuid": "7214c799_d80f225b",
      "range": {
        "startLine": 144,
        "startChar": 23,
        "endLine": 144,
        "endChar": 28
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1f8560a_661f3551",
        "filename": "src/heap/marking.cc",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2022-07-08T10:24:10Z",
      "side": 1,
      "message": "I\u0027m personally not a fan of that idea because I think it will just introduce a bunch of boilerplate code whenever we call this method.",
      "parentUuid": "ff30e8cc_102ef9e6",
      "range": {
        "startLine": 144,
        "startChar": 23,
        "endLine": 144,
        "endChar": 28
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79a4125f_8c703df2",
        "filename": "src/heap/marking.cc",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2022-07-08T10:34:17Z",
      "side": 1,
      "message": "If the caller already has a chunk, it should pass it to avoid another lookup.",
      "parentUuid": "b1f8560a_661f3551",
      "range": {
        "startLine": 144,
        "startChar": 23,
        "endLine": 144,
        "endChar": 28
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9aa01004_7103e7e1",
        "filename": "src/heap/marking.cc",
        "patchSetId": 1
      },
      "lineNbr": 151,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2022-07-08T08:44:48Z",
      "side": 1,
      "message": "I understand why we return null here in terms of how we use this, but it doesn\u0027t match the method name. Specifically, if the object is marked, I\u0027d expect FindPreviousMarkedObject to return it.\nSince the implementation is closely tied to how we plan to use it, maybe it should live as a method of the bitmap but instead go back to be a helper of the using method?",
      "range": {
        "startLine": 151,
        "startChar": 33,
        "endLine": 151,
        "endChar": 45
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "160855b9_924e37e3",
        "filename": "src/heap/marking.cc",
        "patchSetId": 1
      },
      "lineNbr": 151,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2022-07-08T09:54:12Z",
      "side": 1,
      "message": "I agree, we can return the same pointer or index.",
      "parentUuid": "9aa01004_7103e7e1",
      "range": {
        "startLine": 151,
        "startChar": 33,
        "endLine": 151,
        "endChar": 45
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1022e619_3bcae052",
        "filename": "src/heap/marking.cc",
        "patchSetId": 1
      },
      "lineNbr": 151,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2022-07-08T10:24:10Z",
      "side": 1,
      "message": "If you later try to convert the pointer to a HeapObject, then returning the same pointer or index wouldn\u0027t work since it might be an inner pointer within a black allocation area.\nI think it would be better to keep this method coupled to the usage and not generalize it.",
      "parentUuid": "160855b9_924e37e3",
      "range": {
        "startLine": 151,
        "startChar": 33,
        "endLine": 151,
        "endChar": 45
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70a2c45a_3470429b",
        "filename": "src/heap/marking.cc",
        "patchSetId": 1
      },
      "lineNbr": 162,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2022-07-08T08:44:48Z",
      "side": 1,
      "message": "DCHECK_EQ(0, cell_index)?\n(and below)",
      "range": {
        "startLine": 162,
        "startChar": 44,
        "endLine": 162,
        "endChar": 77
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b87309d_b2caeaf0",
        "filename": "src/heap/marking.cc",
        "patchSetId": 1
      },
      "lineNbr": 162,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2022-07-08T09:54:12Z",
      "side": 1,
      "message": "Done. `cell_index` is unsigned, and we\u0027re out of the `while` loop, so it\u0027s certain that it\u0027s equal to zero, that\u0027s why I had no `DCHECK`.",
      "parentUuid": "70a2c45a_3470429b",
      "range": {
        "startLine": 162,
        "startChar": 44,
        "endLine": 162,
        "endChar": 77
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f01a6982_7a61b46e",
        "filename": "src/heap/marking.cc",
        "patchSetId": 1
      },
      "lineNbr": 164,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2022-07-08T08:44:48Z",
      "side": 1,
      "message": "nit: You can return in the if branch above instead of having an else here.",
      "range": {
        "startLine": 164,
        "startChar": 4,
        "endLine": 164,
        "endChar": 8
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cf4a0fed_91bdba4f",
        "filename": "src/heap/marking.cc",
        "patchSetId": 1
      },
      "lineNbr": 164,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2022-07-08T09:54:12Z",
      "side": 1,
      "message": "Done. I refactored all the if/else below and removed `object_index` entirely.",
      "parentUuid": "f01a6982_7a61b46e",
      "range": {
        "startLine": 164,
        "startChar": 4,
        "endLine": 164,
        "endChar": 8
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c60a356e_4fa7025d",
        "filename": "src/heap/memory-chunk-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2022-07-08T07:20:30Z",
      "side": 1,
      "message": "Where do we need this ctor?",
      "range": {
        "startLine": 47,
        "startChar": 23,
        "endLine": 47,
        "endChar": 31
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a4be5f02_264f9b08",
        "filename": "src/heap/memory-chunk-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2022-07-08T09:54:12Z",
      "side": 1,
      "message": "According to the C++ spec, forward iterators need to be default constructible.\nOther than that, it\u0027s used in line 37 of:\nhttps://chromium-review.googlesource.com/c/v8/v8/+/3749207/1/src/heap/paged-spaces.cc",
      "parentUuid": "c60a356e_4fa7025d",
      "range": {
        "startLine": 47,
        "startChar": 23,
        "endLine": 47,
        "endChar": 31
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01b6cb4c_6fb56b2e",
        "filename": "src/heap/memory-chunk-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2022-07-08T08:44:48Z",
      "side": 1,
      "message": "Do we need some guarantee that ptr is the start of an object?\nWe could take a HeapObject instead of an address (which probably means that FindPreviousMarkedObject should also return an object instead of an address).",
      "range": {
        "startLine": 56,
        "startChar": 66,
        "endLine": 56,
        "endChar": 69
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ea76796_738a486e",
        "filename": "src/heap/memory-chunk-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2022-07-08T09:54:12Z",
      "side": 1,
      "message": "This is meant to be a low-level iterator so I thought it\u0027s OK to work with addresses. If we combine it with Michael\u0027s idea, we\u0027ll have a low-level PageObjectIterator to be used only when we know it\u0027s safe. This could again take an address as parameter. It could also take a HeapObject, but each conversion adds a pointer tagging/detagging.",
      "parentUuid": "01b6cb4c_6fb56b2e",
      "range": {
        "startLine": 56,
        "startChar": 66,
        "endLine": 56,
        "endChar": 69
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23269baf_9c7a4226",
        "filename": "src/heap/memory-chunk-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2022-07-08T07:20:30Z",
      "side": 1,
      "message": "This won\u0027t work if the page is part of external code space.\n\nI guess we should at least DCHECK that we never use it there but really this is what I meant with providing something that looks general but doesn\u0027t cover all our cases.\n\nIgor, can we DCHECK that we are not in external code space somehow?",
      "range": {
        "startLine": 60,
        "startChar": 17,
        "endLine": 60,
        "endChar": 41
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3c6a855_8591bb58",
        "filename": "src/heap/memory-chunk-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2022-07-08T08:35:04Z",
      "side": 1,
      "message": "AFAICT the cage_base is used only for reading the map (via HeapObject::Size()), so using the main cage is correct and works for both external code space and other spaces.\n\nRe DCHECK, it doesn\u0027t seem necessary in this case but it would look like this:\n  DCHECK_IMPLIES(V8_EXTERNAL_CODE_SPACE_BOOL, !chunk-\u003eInCodeSpace());",
      "parentUuid": "23269baf_9c7a4226",
      "range": {
        "startLine": 60,
        "startChar": 17,
        "endLine": 60,
        "endChar": 41
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "282a0edf_cf82ae98",
        "filename": "src/heap/memory-chunk-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2022-07-08T08:44:44Z",
      "side": 1,
      "message": "Great!",
      "parentUuid": "f3c6a855_8591bb58",
      "range": {
        "startLine": 60,
        "startChar": 17,
        "endLine": 60,
        "endChar": 41
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54fd0b96_c8068213",
        "filename": "src/heap/memory-chunk-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2022-07-08T08:44:48Z",
      "side": 1,
      "message": "Would it makes to just always get the cage_bage_ as a parameter to the ctor?",
      "range": {
        "startLine": 60,
        "startChar": 6,
        "endLine": 60,
        "endChar": 16
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4efcd28_6598e894",
        "filename": "src/heap/memory-chunk-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2022-07-08T09:54:12Z",
      "side": 1,
      "message": "Yes, calculating the cage base is the only reason why we\u0027re passing the chunk pointer. Depending on how we proceed with Michael\u0027s idea, we can do that.",
      "parentUuid": "54fd0b96_c8068213",
      "range": {
        "startLine": 60,
        "startChar": 6,
        "endLine": 60,
        "endChar": 16
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e92d5894_6295a289",
        "filename": "src/heap/memory-chunk-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2022-07-08T10:16:39Z",
      "side": 1,
      "message": "It\u0027s a good idea because MemoryChunk::heap_ field is nullptr for read only space pages.",
      "parentUuid": "b4efcd28_6598e894",
      "range": {
        "startLine": 60,
        "startChar": 6,
        "endLine": 60,
        "endChar": 16
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1d99501_92b98327",
        "filename": "src/heap/memory-chunk-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2022-07-08T10:34:17Z",
      "side": 1,
      "message": "(I\u0027d prefer a separate parameter)",
      "parentUuid": "e92d5894_6295a289",
      "range": {
        "startLine": 60,
        "startChar": 6,
        "endLine": 60,
        "endChar": 16
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f110b5bf_ed85e1fe",
        "filename": "src/heap/memory-chunk-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2022-07-08T10:56:33Z",
      "side": 1,
      "message": "I meant to +1 Omer\u0027s suggestion - a separate cage_base parameter.",
      "parentUuid": "c1d99501_92b98327",
      "range": {
        "startLine": 60,
        "startChar": 6,
        "endLine": 60,
        "endChar": 16
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2982000a_bf2ae7f2",
        "filename": "src/heap/memory-chunk.h",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2022-07-08T08:44:44Z",
      "side": 1,
      "message": "Suggestion: Since the iteration doesn\u0027t necessarily always work, I\u0027d move this out of the class and just have something like\n\n```\nclass PageObjectIterator {\n class iterator {};\n void iterator begin();\n void iterator end();\n};\n```\n\nThe usage would then be\n```\nfor (auto obj : PageObjectIterator(page)) {}\n```",
      "range": {
        "startLine": 223,
        "startChar": 8,
        "endLine": 223,
        "endChar": 16
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c527c68_6940facc",
        "filename": "src/heap/memory-chunk.h",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2022-07-08T09:54:12Z",
      "side": 1,
      "message": "Yes, I like this. The new class would state the conditions under which it can be used.\n\nI\u0027m not sure however if this should be tied to a `Page`, as it could be used for all containers of heap objects. E.g., ReadOnlyHeapObjectIterator and ReadOnlySpaceObjectIterator use the same pattern for traversing read-only pages, which are under `BasicMemoryChunk`.",
      "parentUuid": "2982000a_bf2ae7f2",
      "range": {
        "startLine": 223,
        "startChar": 8,
        "endLine": 223,
        "endChar": 16
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e20dd560_7596cf27",
        "filename": "src/heap/memory-chunk.h",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2022-07-08T10:34:17Z",
      "side": 1,
      "message": "Yeah, let\u0027s use whatever intermediate class fits.",
      "parentUuid": "6c527c68_6940facc",
      "range": {
        "startLine": 223,
        "startChar": 8,
        "endLine": 223,
        "endChar": 16
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}