{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "76aba24e_822c9d3b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2022-07-07T22:59:04Z",
      "side": 1,
      "message": "Tests missing, but let\u0027s see if you like the general idea.",
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f9202070_05eca78f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2022-07-08T07:20:30Z",
      "side": 1,
      "message": "+Igor for external code space question",
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e05d0ec3_76b022ca",
        "filename": "src/heap/marking.cc",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2022-07-08T08:44:48Z",
      "side": 1,
      "message": "nit: Can we get the chunk from maybe_inner_ptr since we anyway assume chunk is not a large page?",
      "range": {
        "startLine": 144,
        "startChar": 23,
        "endLine": 144,
        "endChar": 28
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9aa01004_7103e7e1",
        "filename": "src/heap/marking.cc",
        "patchSetId": 1
      },
      "lineNbr": 151,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2022-07-08T08:44:48Z",
      "side": 1,
      "message": "I understand why we return null here in terms of how we use this, but it doesn\u0027t match the method name. Specifically, if the object is marked, I\u0027d expect FindPreviousMarkedObject to return it.\nSince the implementation is closely tied to how we plan to use it, maybe it should live as a method of the bitmap but instead go back to be a helper of the using method?",
      "range": {
        "startLine": 151,
        "startChar": 33,
        "endLine": 151,
        "endChar": 45
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70a2c45a_3470429b",
        "filename": "src/heap/marking.cc",
        "patchSetId": 1
      },
      "lineNbr": 162,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2022-07-08T08:44:48Z",
      "side": 1,
      "message": "DCHECK_EQ(0, cell_index)?\n(and below)",
      "range": {
        "startLine": 162,
        "startChar": 44,
        "endLine": 162,
        "endChar": 77
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f01a6982_7a61b46e",
        "filename": "src/heap/marking.cc",
        "patchSetId": 1
      },
      "lineNbr": 164,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2022-07-08T08:44:48Z",
      "side": 1,
      "message": "nit: You can return in the if branch above instead of having an else here.",
      "range": {
        "startLine": 164,
        "startChar": 4,
        "endLine": 164,
        "endChar": 8
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c60a356e_4fa7025d",
        "filename": "src/heap/memory-chunk-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2022-07-08T07:20:30Z",
      "side": 1,
      "message": "Where do we need this ctor?",
      "range": {
        "startLine": 47,
        "startChar": 23,
        "endLine": 47,
        "endChar": 31
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01b6cb4c_6fb56b2e",
        "filename": "src/heap/memory-chunk-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2022-07-08T08:44:48Z",
      "side": 1,
      "message": "Do we need some guarantee that ptr is the start of an object?\nWe could take a HeapObject instead of an address (which probably means that FindPreviousMarkedObject should also return an object instead of an address).",
      "range": {
        "startLine": 56,
        "startChar": 66,
        "endLine": 56,
        "endChar": 69
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23269baf_9c7a4226",
        "filename": "src/heap/memory-chunk-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2022-07-08T07:20:30Z",
      "side": 1,
      "message": "This won\u0027t work if the page is part of external code space.\n\nI guess we should at least DCHECK that we never use it there but really this is what I meant with providing something that looks general but doesn\u0027t cover all our cases.\n\nIgor, can we DCHECK that we are not in external code space somehow?",
      "range": {
        "startLine": 60,
        "startChar": 17,
        "endLine": 60,
        "endChar": 41
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3c6a855_8591bb58",
        "filename": "src/heap/memory-chunk-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2022-07-08T08:35:04Z",
      "side": 1,
      "message": "AFAICT the cage_base is used only for reading the map (via HeapObject::Size()), so using the main cage is correct and works for both external code space and other spaces.\n\nRe DCHECK, it doesn\u0027t seem necessary in this case but it would look like this:\n  DCHECK_IMPLIES(V8_EXTERNAL_CODE_SPACE_BOOL, !chunk-\u003eInCodeSpace());",
      "parentUuid": "23269baf_9c7a4226",
      "range": {
        "startLine": 60,
        "startChar": 17,
        "endLine": 60,
        "endChar": 41
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "282a0edf_cf82ae98",
        "filename": "src/heap/memory-chunk-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2022-07-08T08:44:44Z",
      "side": 1,
      "message": "Great!",
      "parentUuid": "f3c6a855_8591bb58",
      "range": {
        "startLine": 60,
        "startChar": 17,
        "endLine": 60,
        "endChar": 41
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54fd0b96_c8068213",
        "filename": "src/heap/memory-chunk-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2022-07-08T08:44:48Z",
      "side": 1,
      "message": "Would it makes to just always get the cage_bage_ as a parameter to the ctor?",
      "range": {
        "startLine": 60,
        "startChar": 6,
        "endLine": 60,
        "endChar": 16
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2982000a_bf2ae7f2",
        "filename": "src/heap/memory-chunk.h",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2022-07-08T08:44:44Z",
      "side": 1,
      "message": "Suggestion: Since the iteration doesn\u0027t necessarily always work, I\u0027d move this out of the class and just have something like\n\n```\nclass PageObjectIterator {\n class iterator {};\n void iterator begin();\n void iterator end();\n};\n```\n\nThe usage would then be\n```\nfor (auto obj : PageObjectIterator(page)) {}\n```",
      "range": {
        "startLine": 223,
        "startChar": 8,
        "endLine": 223,
        "endChar": 16
      },
      "revId": "728600bfd1f521214adea8fa15ff6137071a41f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}