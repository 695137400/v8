{
  "comments": [
    {
      "key": {
        "uuid": "bb49fae8_35af6f16",
        "filename": "src/api.cc",
        "patchSetId": 5
      },
      "lineNbr": 9857,
      "author": {
        "id": 1118373
      },
      "writtenOn": "2018-02-08T19:39:24Z",
      "side": 1,
      "message": "Out of scope for this CL, but... it would be awesome if we could have EvaluateLocal like this too so that we don\u0027t have to go through the debug context (which we want to get rid of).",
      "range": {
        "startLine": 9857,
        "startChar": 29,
        "endLine": 9857,
        "endChar": 43
      },
      "revId": "9dac8aed47758ad2294886392fc44f1a562367bf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da349e03_6a904a5f",
        "filename": "src/api.cc",
        "patchSetId": 5
      },
      "lineNbr": 9857,
      "author": {
        "id": 1125920
      },
      "writtenOn": "2018-02-08T21:43:03Z",
      "side": 1,
      "message": "I believe that it is already done. We use [1] in inspector.\nWe do not use debug context in inspector. I can remove it if cloud is ready. WDYT?\n\n[1] https://cs.chromium.org/chromium/src/v8/src/debug/debug-stack-trace-iterator.cc?rcl\u003d90cba65ee41675cf0d3186d76506031dcaea757b\u0026l\u003d171",
      "parentUuid": "bb49fae8_35af6f16",
      "range": {
        "startLine": 9857,
        "startChar": 29,
        "endLine": 9857,
        "endChar": 43
      },
      "revId": "9dac8aed47758ad2294886392fc44f1a562367bf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cdc19599_36f789ef",
        "filename": "src/api.cc",
        "patchSetId": 5
      },
      "lineNbr": 9857,
      "author": {
        "id": 1118373
      },
      "writtenOn": "2018-02-09T06:32:05Z",
      "side": 1,
      "message": "I see!\n\nLet\u0027s remove it when I deprecate v8-debug.h :)",
      "parentUuid": "da349e03_6a904a5f",
      "range": {
        "startLine": 9857,
        "startChar": 29,
        "endLine": 9857,
        "endChar": 43
      },
      "revId": "9dac8aed47758ad2294886392fc44f1a562367bf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c0bfb96_74cb490d",
        "filename": "src/debug/debug-evaluate.cc",
        "patchSetId": 5
      },
      "lineNbr": 27,
      "author": {
        "id": 1118373
      },
      "writtenOn": "2018-02-08T19:39:24Z",
      "side": 1,
      "message": "I think the comment is outdated and also not necessary.",
      "range": {
        "startLine": 26,
        "startChar": 5,
        "endLine": 27,
        "endChar": 26
      },
      "revId": "9dac8aed47758ad2294886392fc44f1a562367bf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2be0a5b2_949dfd3d",
        "filename": "src/debug/debug-evaluate.cc",
        "patchSetId": 5
      },
      "lineNbr": 27,
      "author": {
        "id": 1125920
      },
      "writtenOn": "2018-02-08T21:43:03Z",
      "side": 1,
      "message": "We can pass context from inspector (otherwise we indirectly set it using Context::Scope) but I am not sure how Execution::Call works, does this method expect that current context is set to correct one?",
      "parentUuid": "3c0bfb96_74cb490d",
      "range": {
        "startLine": 26,
        "startChar": 5,
        "endLine": 27,
        "endChar": 26
      },
      "revId": "9dac8aed47758ad2294886392fc44f1a562367bf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eace7d25_76b9839a",
        "filename": "src/debug/debug-evaluate.cc",
        "patchSetId": 5
      },
      "lineNbr": 27,
      "author": {
        "id": 1118373
      },
      "writtenOn": "2018-02-09T06:32:05Z",
      "side": 1,
      "message": "What I\u0027m saying is that the comment no longer makes sense. If you are setting it via Context::Scope, we should already be doing the right thing. This context here is just used to compile and instantiate the function.",
      "parentUuid": "2be0a5b2_949dfd3d",
      "range": {
        "startLine": 26,
        "startChar": 5,
        "endLine": 27,
        "endChar": 26
      },
      "revId": "9dac8aed47758ad2294886392fc44f1a562367bf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dca0f7eb_62f08192",
        "filename": "src/debug/debug-evaluate.cc",
        "patchSetId": 5
      },
      "lineNbr": 27,
      "author": {
        "id": 1230559
      },
      "writtenOn": "2018-02-10T00:04:40Z",
      "side": 1,
      "message": "\u003e comment no longer makes sense\nDone, removed, since the context-restoration logic was removed.\n\n\u003e does this method expect that current context is set to correct one?\nExecution::Call seems to expect the function we pass it to hold the correct context (function created by `NewFunctionFromSharedFunctionInfo(shared_info, correct_context)`).  So it\u0027s fine if we assume that we are in a good context when we call EvaluateGlobal().\n\n\u003e we should already be doing the right thing\nInspector already sets a InjectedScript::ContextScope\n\nIt appears that the \"restore context before debugger\" walking logic was essential to one failing test [1].  The test calls our mirror evaluateGlobal() when paused, and fails to evaluate a variable outside the current context.  Since the test goes through mirrors, I believe the closest C++ location where we could try to set the context is [2], which shouldn\u0027t know about evaluateGlobal()\u0027s assumption.\n\nSince the point of the test is to ensure that evaluate local/global still work when allow_code_gen_from_strings \u003d\u003d false, I\u0027ve changed the test to call evaluateGlobal() with input that doesn\u0027t depend on its global logic.  Wdyt?\n\n[1] https://cs.chromium.org/chromium/src/v8/test/cctest/test-debug.cc?l\u003d2400\n[2] https://cs.chromium.org/chromium/src/v8/src/runtime/runtime-debug.cc?type\u003dcs\u0026q\u003dDebugEvaluateGlobal\u0026l\u003d1251",
      "parentUuid": "eace7d25_76b9839a",
      "range": {
        "startLine": 26,
        "startChar": 5,
        "endLine": 27,
        "endChar": 26
      },
      "revId": "9dac8aed47758ad2294886392fc44f1a562367bf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ac09fe8a_b3c4a7d1",
        "filename": "src/debug/debug-evaluate.cc",
        "patchSetId": 5
      },
      "lineNbr": 33,
      "author": {
        "id": 1118373
      },
      "writtenOn": "2018-02-09T06:32:05Z",
      "side": 1,
      "message": "This could be replaced by `context`",
      "range": {
        "startLine": 33,
        "startChar": 33,
        "endLine": 33,
        "endChar": 58
      },
      "revId": "9dac8aed47758ad2294886392fc44f1a562367bf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c7fed57_4bae73b6",
        "filename": "src/debug/debug-evaluate.cc",
        "patchSetId": 5
      },
      "lineNbr": 33,
      "author": {
        "id": 1230559
      },
      "writtenOn": "2018-02-10T00:04:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ac09fe8a_b3c4a7d1",
      "range": {
        "startLine": 33,
        "startChar": 33,
        "endLine": 33,
        "endChar": 58
      },
      "revId": "9dac8aed47758ad2294886392fc44f1a562367bf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}