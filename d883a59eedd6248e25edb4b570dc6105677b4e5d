{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a9c66938_7a0717bb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1418022
      },
      "writtenOn": "2020-10-28T21:04:51Z",
      "side": 1,
      "message": "I started turning the V8Provider into a derived class of Recorder. In doing so, I changed V8Provider from being a global into a shared_ptr that lives in the Isolate and is initialized from within Isolate::Initialize. I also added a sample logging event (the Compile event) so we can have an idea of what add events looks like in the source code. Here are some notes (don\u0027t know if I should include this in the Issue, so I\u0027ll do both):\n  - The Isolate already had a SetMetricsRecorder member, so I used that to initialize the recorder. However, this implies that an Isolate can ever only have one recorder, and I can imagine scenarios where we would want more than one. For example, we may want to turn on both ETW and v8.log logging.\n  - I don\u0027t understand the difference between V8::Isolate and V8::internal::Isolate. On the one hand, I see them being used differently (see src/api/api.cc, Isolate::Initialize), where some things are initialized on the V8::Isolate and some things are initialized on the internal one. On the other hand, I also see them being cast back and forth (see src/logging/metrics.cc, Recorder::SetRecorder and the function that calls it, src/api/api.cc Isolate::SetMetricsRecorder).\n  - This kind of follows up from the previous point, but when we call AddMainThreadEvent from src/compiler/compile.cc, we\u0027re doing a lot of work before we actually do the function call: grabbing the context ID, creating the event, etc. I\u0027m open to ideas for how to make this part of the code more streamlined.",
      "revId": "d883a59eedd6248e25edb4b570dc6105677b4e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a557f510_2b6d955c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2020-10-29T09:39:53Z",
      "side": 1,
      "message": "Some initial comments, more to follow",
      "revId": "d883a59eedd6248e25edb4b570dc6105677b4e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3fa57f50_f8fa8916",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2020-10-29T09:39:53Z",
      "side": 1,
      "message": "# Re SetMetricsRecorder:\nYes currently we only support one recorder at the time (I think we should eventually add a group-recorder which dispatches to multiple recorders)\n\n# Re Isolate:\nv8:internal is the namespace for the \"internal\" V8 components, v8:* is the public interface. The naming is a bit confusing at times. Outside of V8 (as an API owner) you only have only access to v8::Isolate, within the API (in api.cc) you can cross over to v8::internal::Isolate. (I hope this helps!) (Feel free to follow-up via email or schedule a VC)\n\n# Re compile.cc:\nPretty sure this can benefit from some optimizations since the code is quite new. I will have a look at it as well.",
      "parentUuid": "a9c66938_7a0717bb",
      "revId": "d883a59eedd6248e25edb4b570dc6105677b4e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1b20330_e81684f8",
        "filename": "include/v8-metrics.h",
        "patchSetId": 15
      },
      "lineNbr": 13,
      "author": {
        "id": 1418022
      },
      "writtenOn": "2020-10-28T21:17:36Z",
      "side": 1,
      "message": "I cribbed these events from a v8_trace.json that used the \"v8.compile\" category group. But I don\u0027t know if I\u0027m missing any other events.",
      "revId": "d883a59eedd6248e25edb4b570dc6105677b4e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c900d882_5a96f97c",
        "filename": "include/v8-metrics.h",
        "patchSetId": 15
      },
      "lineNbr": 13,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2020-10-29T14:44:06Z",
      "side": 1,
      "message": "I think we can clean up a few metrics here and divide them generally into Compile and Parse, the rest should then be properties on the structs themselves.\n\n\nAs a rough outline (we have to iterate on this):\n\n Compile {\n   int script_id,\n   bool is_toplevel, \n   bool is_module\n   type \u003d kScript, kModule\n   thread \u003d kMain | kBackground\n   int64_t duration_us\n }\n Parse { ... }\n Deoptimize { ... }\n Execute { ... }\n\n\nLet\u0027s start with a single one and make it work well, then we can expand.",
      "parentUuid": "a1b20330_e81684f8",
      "revId": "d883a59eedd6248e25edb4b570dc6105677b4e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8ed02e61_7a58801a",
        "filename": "include/v8-metrics.h",
        "patchSetId": 15
      },
      "lineNbr": 13,
      "author": {
        "id": 1418022
      },
      "writtenOn": "2020-11-02T23:13:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c900d882_5a96f97c",
      "revId": "d883a59eedd6248e25edb4b570dc6105677b4e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee81afd0_8f64862c",
        "filename": "include/v8-metrics.h",
        "patchSetId": 15
      },
      "lineNbr": 81,
      "author": {
        "id": 1418022
      },
      "writtenOn": "2020-10-28T21:17:36Z",
      "side": 1,
      "message": "I don\u0027t know which events should be MAIN_THREAD and which should be THREAD_SAFE. So I put them all under MAIN_THREAD ðŸ˜Š",
      "revId": "d883a59eedd6248e25edb4b570dc6105677b4e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e38b6ad8_318e755f",
        "filename": "include/v8-metrics.h",
        "patchSetId": 15
      },
      "lineNbr": 81,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2020-10-29T14:44:06Z",
      "side": 1,
      "message": "Any compilation related events can happen on the background thread (we do streaming parsing and compilation), so they are fine here.",
      "parentUuid": "ee81afd0_8f64862c",
      "revId": "d883a59eedd6248e25edb4b570dc6105677b4e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab0d75a5_9c1ddb20",
        "filename": "include/v8-metrics.h",
        "patchSetId": 15
      },
      "lineNbr": 81,
      "author": {
        "id": 1418022
      },
      "writtenOn": "2020-11-02T23:13:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e38b6ad8_318e755f",
      "revId": "d883a59eedd6248e25edb4b570dc6105677b4e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e38b95ff_985a3bc1",
        "filename": "src/codegen/compiler.cc",
        "patchSetId": 15
      },
      "lineNbr": 1312,
      "author": {
        "id": 1418022
      },
      "writtenOn": "2020-10-28T21:17:36Z",
      "side": 1,
      "message": "This is a lot of code just to add one event. I\u0027m open to ideas for how to streamline this into a single line or two, similar to the TRACE_EVENT macro above.\n\nAlso I don\u0027t understand why some things live in V8::Isolate and some things live in V8::internal::Isolate",
      "revId": "d883a59eedd6248e25edb4b570dc6105677b4e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e45fbdb1_7115a637",
        "filename": "src/codegen/compiler.cc",
        "patchSetId": 15
      },
      "lineNbr": 1312,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2020-10-29T09:39:53Z",
      "side": 1,
      "message": "The compiler is living in v8::internal this code should not use external API. (more comments will follow)",
      "parentUuid": "e38b95ff_985a3bc1",
      "revId": "d883a59eedd6248e25edb4b570dc6105677b4e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23c04654_223f4a6e",
        "filename": "src/codegen/compiler.cc",
        "patchSetId": 15
      },
      "lineNbr": 1312,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2020-10-29T14:44:06Z",
      "side": 1,
      "message": "We should probably extend the metrics::TimedScope and take a recorder as parameter. The current TimedScope is not that nice to use.\n\nExample that is currently quite tricky to accomplish:\n\n  metrics::TimedScope\u003cv8::metrics::Compile\u003e timed_scope(\n      isolate-\u003erecorder());\n  ...\n  if (condition) return result;\n  ...\n  return result;\n\n\nBasically we would have to manually stop the timed_scope on every return, something that is easy forgotten.\n\nInstead I propose the following:\n\n- TimedScope would contain the metric as a member\n- The constructor starts the timer if recorder!\u003dnullptr\n- The destructor stops the timer and does AddMainThreadEvent(\u0026metric) if recorder!\u003dnullptr\n\nI hope this is somewhat understandable.",
      "parentUuid": "e45fbdb1_7115a637",
      "revId": "d883a59eedd6248e25edb4b570dc6105677b4e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68da27ce_ad6e7878",
        "filename": "src/codegen/compiler.cc",
        "patchSetId": 15
      },
      "lineNbr": 1312,
      "author": {
        "id": 1418022
      },
      "writtenOn": "2020-11-02T23:13:49Z",
      "side": 1,
      "message": "I understand what you want to do with TimedScope, I gave it my best shot ðŸ˜Š. One thing to note is that TimedScope (and the Recorder interface) is currently being used by src\\wasm\\[module-decoder.cc|module-instantiate.cc] and I don\u0027t want to break their integration.\n\nIt also ended up cutting down the set-up code in compiler.cc, so that\u0027s promising.",
      "parentUuid": "23c04654_223f4a6e",
      "revId": "d883a59eedd6248e25edb4b570dc6105677b4e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a9ec8aa_395e6234",
        "filename": "src/codegen/compiler.cc",
        "patchSetId": 15
      },
      "lineNbr": 1312,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2020-11-03T11:07:09Z",
      "side": 1,
      "message": "I\u0027m fine with changing that code as well, since they just implemented the minimal interface necessary for them.\n\nThe most important part for me are:\n1) make sure we have only the most minimal overhead if the timer\u0027s are not active\n2) Make sure we have low additional overhead if they are active\n3) Make a very reasonable default interface (like for instance, I\u0027m not too much a fan that we have to manually pass in an additional reference to where we want to store the time, I prefer just using a templatized default {duration_us} which works for 90% of the cases.",
      "parentUuid": "68da27ce_ad6e7878",
      "revId": "d883a59eedd6248e25edb4b570dc6105677b4e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89e24a53_f88616b2",
        "filename": "src/codegen/compiler.cc",
        "patchSetId": 15
      },
      "lineNbr": 1312,
      "author": {
        "id": 1418022
      },
      "writtenOn": "2020-11-03T22:35:34Z",
      "side": 1,
      "message": "I haven\u0027t landed on a unified way to use TimedScope yet, mostly because I haven\u0027t figured out when is the best time to populate the fields in each event.\n\nFor example, in the case for Compile, I believe I can populate the event before we start the timer. So the order of operations looks like:\n  - Declare event\n  - Populate event\n  - Start timer\n  - Stop timer\n  - Add event\n\nBut for wasm things, it looks like there are fields that are known only after the function has finished running. So the order of operations looks like:\n  - Declare event\n  - Start timer\n  - Stop timer\n  - Populate event\n  - Add event\n\nWhich means in the wasm case, we can\u0027t use ~TimedScope to stop the timer + add the event, because there is an in-between step of populating the event.",
      "parentUuid": "4a9ec8aa_395e6234",
      "revId": "d883a59eedd6248e25edb4b570dc6105677b4e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f345345c_56b2c10a",
        "filename": "src/codegen/compiler.cc",
        "patchSetId": 15
      },
      "lineNbr": 1312,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2020-11-04T09:59:55Z",
      "side": 1,
      "message": "Thanks for the investigation. \n\nI think in the WASM case the TimedScope doesn\u0027t add much benefit over a manual timer since there are no exit points in-between.",
      "parentUuid": "89e24a53_f88616b2",
      "revId": "d883a59eedd6248e25edb4b570dc6105677b4e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9edd95ac_be86293e",
        "filename": "src/codegen/compiler.cc",
        "patchSetId": 15
      },
      "lineNbr": 1312,
      "author": {
        "id": 1418022
      },
      "writtenOn": "2020-11-04T18:43:33Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f345345c_56b2c10a",
      "revId": "d883a59eedd6248e25edb4b570dc6105677b4e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c87938d6_2c8b49c6",
        "filename": "src/d8/d8.cc",
        "patchSetId": 15
      },
      "lineNbr": 4181,
      "author": {
        "id": 1418022
      },
      "writtenOn": "2020-10-28T21:17:36Z",
      "side": 1,
      "message": "Currently, only one metrics_recorder can be instantiated per isolate. I\u0027m not sure if that\u0027s going to be the intention moving forward, considering how we may want multiple Recorders working simultaneously. (e.g. the logger that outputs v8.log runs at the same time as V8Provider)",
      "revId": "d883a59eedd6248e25edb4b570dc6105677b4e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3d772cf_f3e71abb",
        "filename": "src/d8/d8.cc",
        "patchSetId": 15
      },
      "lineNbr": 4181,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2020-10-29T09:39:53Z",
      "side": 1,
      "message": "We probably need a group-recorder that dispatches internally to multiple recorders. For now this is probably good enough.",
      "parentUuid": "c87938d6_2c8b49c6",
      "revId": "d883a59eedd6248e25edb4b570dc6105677b4e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e4295748_ee776f08",
        "filename": "src/d8/d8.cc",
        "patchSetId": 15
      },
      "lineNbr": 4181,
      "author": {
        "id": 1418022
      },
      "writtenOn": "2020-11-02T23:13:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a3d772cf_f3e71abb",
      "revId": "d883a59eedd6248e25edb4b570dc6105677b4e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7cc68ac0_e387e13d",
        "filename": "src/init/v8.cc",
        "patchSetId": 15
      },
      "lineNbr": 22,
      "author": {
        "id": 1418022
      },
      "writtenOn": "2020-10-28T21:17:36Z",
      "side": 1,
      "message": "nit: get rid of this",
      "revId": "d883a59eedd6248e25edb4b570dc6105677b4e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8aef75f_87d6a572",
        "filename": "src/instrumentation/v8-provider-win.cc",
        "patchSetId": 15
      },
      "lineNbr": 53,
      "author": {
        "id": 1418022
      },
      "writtenOn": "2020-10-28T21:17:36Z",
      "side": 1,
      "message": "I couldn\u0027t find a good place to call RegisterProvider, so I moved the functionality to within the constructor. Good idea? Bad idea?",
      "revId": "d883a59eedd6248e25edb4b570dc6105677b4e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f093b163_8911c699",
        "filename": "src/instrumentation/v8-provider-win.cc",
        "patchSetId": 15
      },
      "lineNbr": 55,
      "author": {
        "id": 1418022
      },
      "writtenOn": "2020-10-28T21:17:36Z",
      "side": 1,
      "message": "This used to be called in V8::InitializePlatform, but not anymore because (I don\u0027t think) the isolate is alive at this point in the code?\n\nI don\u0027t know where to call it anymore (perhaps in the V8Provider destructor?), or if I even need to.",
      "revId": "d883a59eedd6248e25edb4b570dc6105677b4e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ae3c29d_18fa79da",
        "filename": "src/instrumentation/v8-provider-win.cc",
        "patchSetId": 15
      },
      "lineNbr": 72,
      "author": {
        "id": 1418022
      },
      "writtenOn": "2020-10-28T21:17:36Z",
      "side": 1,
      "message": "nit: uncomment this. But also I don\u0027t understand what it\u0027s doing. Just copying the impl from test-api.cc",
      "revId": "d883a59eedd6248e25edb4b570dc6105677b4e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d005ff4d_d1126f0f",
        "filename": "src/instrumentation/v8-provider-win.cc",
        "patchSetId": 15
      },
      "lineNbr": 72,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2020-10-29T14:47:52Z",
      "side": 1,
      "message": "You will only need the context_id if you somehow have to distinguish based on the native context. \n\nA V8 Isolate can contain multiple native contexts (that would correspond to an iFrame for isntance).",
      "parentUuid": "2ae3c29d_18fa79da",
      "revId": "d883a59eedd6248e25edb4b570dc6105677b4e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f89065e8_f5cb7bbd",
        "filename": "src/instrumentation/v8-provider-win.cc",
        "patchSetId": 15
      },
      "lineNbr": 72,
      "author": {
        "id": 1418022
      },
      "writtenOn": "2020-11-02T23:13:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d005ff4d_d1126f0f",
      "revId": "d883a59eedd6248e25edb4b570dc6105677b4e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4eef0a33_7db50e42",
        "filename": "src/instrumentation/v8-provider.h",
        "patchSetId": 15
      },
      "lineNbr": 16,
      "author": {
        "id": 1418022
      },
      "writtenOn": "2020-10-28T21:17:36Z",
      "side": 1,
      "message": "Not sure if V8_EXPORT is the right macro to use here: without it we run into linker errors in the Windows DLL bc V8Provider is being instantiated in d8.cc",
      "revId": "d883a59eedd6248e25edb4b570dc6105677b4e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98a400f0_0db2143d",
        "filename": "src/instrumentation/v8-provider.h",
        "patchSetId": 15
      },
      "lineNbr": 16,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2020-10-29T09:39:53Z",
      "side": 1,
      "message": "If it\u0027s not visible externally (via the API) you can just use V8_EXPORT_PRIVATE.",
      "parentUuid": "4eef0a33_7db50e42",
      "revId": "d883a59eedd6248e25edb4b570dc6105677b4e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8801ec81_9f3c95af",
        "filename": "src/instrumentation/v8-provider.h",
        "patchSetId": 15
      },
      "lineNbr": 16,
      "author": {
        "id": 1418022
      },
      "writtenOn": "2020-11-02T23:13:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "98a400f0_0db2143d",
      "revId": "d883a59eedd6248e25edb4b570dc6105677b4e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}