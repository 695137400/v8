Checks that exceptions in framework code have correct stopping behavior.

Running test: testCase
> Running scenario userFinallyMethod, breaking on caught exceptions:
console: finally in user code
Uncaught exception: Uncaught Error
-- <empty> --
throwUncaughtError (framework.js:10:8)
uncaughtAsync (framework.js:32:2)
-- setTimeout --
(anonymous) (framework.js:36:32)
delay (framework.js:36:9)
uncaughtAsync (framework.js:31:8)
userFinallyMethod (user.js:114:9)
runWithResolution (framework.js:53:12)
-- setTimeout --
(anonymous) (framework.js:62:31)
testWrapper (framework.js:62:8)
(anonymous) (test_framework.js:0:0)
Exception revoked for reason: Handler added to rejected promise
Uncaught exception: Uncaught Error
-- <empty> --
throwUncaughtError (framework.js:10:8)
uncaughtAsync (framework.js:32:2)
-- setTimeout --
(anonymous) (framework.js:62:31)
testWrapper (framework.js:62:8)
(anonymous) (test_framework.js:0:0)

Running test: testCase
> Running scenario userFinallyMethod, breaking on uncaught exceptions:
Paused
throwUncaughtError (framework.js:10:2)
uncaughtAsync (framework.js:32:2)
-- await --
userFinallyMethod (user.js:114:9)
runWithResolution (framework.js:53:12)
-- setTimeout --
(anonymous) (framework.js:62:31)
testWrapper (framework.js:62:8)
(anonymous) (test_framework.js:0:0)

console: finally in user code
Uncaught exception: Uncaught Error
-- <empty> --
throwUncaughtError (framework.js:10:8)
uncaughtAsync (framework.js:32:2)
-- setTimeout --
(anonymous) (framework.js:36:32)
delay (framework.js:36:9)
uncaughtAsync (framework.js:31:8)
userFinallyMethod (user.js:114:9)
runWithResolution (framework.js:53:12)
-- setTimeout --
(anonymous) (framework.js:62:31)
testWrapper (framework.js:62:8)
(anonymous) (test_framework.js:0:0)
Exception revoked for reason: Handler added to rejected promise
Uncaught exception: Uncaught Error
-- <empty> --
throwUncaughtError (framework.js:10:8)
uncaughtAsync (framework.js:32:2)
-- setTimeout --
(anonymous) (framework.js:62:31)
testWrapper (framework.js:62:8)
(anonymous) (test_framework.js:0:0)
