// Copyright 2024 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

let createWasmStruct = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
    0x00, 0x61, 0x73, 0x6d,  // wasm magic
    0x01, 0x00, 0x00, 0x00,  // wasm version

    0x01,                    // section kind: Type
    0x0b,                    // section length 11
    0x02,                    // types count 2
    0x50, 0x00,              //  subtype extensible, supertype count 0
    0x5f, 0x01, 0x7f, 0x01,  //  kind: struct, field count 1:  i32 mutable
    0x60,                    //  kind: func
    0x00,                    // param count 0
    0x01, 0x6e,              // return count 1:  anyref

    0x03,                    // section kind: Function
    0x02,                    // section length 2
    0x01, 0x01,              // functions count 1: 0 $s (result anyref)

    0x07,                    // section kind: Export
    0x05,                    // section length 5
    0x01,                    // exports count 1: export # 0
    0x01,                    // field name length: 1
    0x73,                    // field name: s
    0x00, 0x00,              // kind: function index: 0

    0x0a,                    // section kind: Code
    0x09,                    // section length 9
    0x01,                    // functions count 1
                             // function #0 $s
    0x07,                    // body size 7
    0x00,                    // 0 entries in locals list
    0x41, 0x2a,              // i32.const 42
    0xfb, 0x00, 0x00,        // struct.new $type0
    0x0b,                    // end
  ]))).exports.s;

let createWasmArray = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
    0x00, 0x61, 0x73, 0x6d,  // wasm magic
    0x01, 0x00, 0x00, 0x00,  // wasm version

    0x01,                    // section kind: Type
    0x0a,                    // section length 10
    0x02,                    // types count 2
    0x50, 0x00,              //  subtype extensible, supertype count 0
    0x5e, 0x7f, 0x01,        //  kind: array i32 mutable
    0x60,                    //  kind: func
    0x00,                    // param count 0
    0x01, 0x6e,              // return count 1:  anyref

    0x03,                    // section kind: Function
    0x02,                    // section length 2
    0x01, 0x01,              // functions count 1: 0 $a (result anyref)

    0x07,                    // section kind: Export
    0x05,                    // section length 5
    0x01,                    // exports count 1: export # 0
    0x01,                    // field name length: 1
    0x61,                    // field name: a
    0x00, 0x00,              // kind: function index: 0

    0x0a,                    // section kind: Code
    0x0a,                    // section length 10
    0x01,                    // functions count 1
                             // function #0 $a
    0x08,                    // body size 8
    0x00,                    // 0 entries in locals list
    0x41, 0x2a,              // i32.const 42
    0xfb, 0x08, 0x00, 0x01,  // array.new_fixed $type0 1
    0x0b,                    // end
  ]))).exports.a;

// Verify :)
let array = createWasmArray();
let struct = createWasmStruct();
d8.file.execute('test/mjsunit/wasm/wasm-module-builder.js');
  let builder = new WasmModuleBuilder();
  builder.addFunction('isStruct', makeSig([kWasmAnyRef], [kWasmI32]))
  .exportFunc().addBody([
    kExprLocalGet, 0,
    kGCPrefix, kExprRefTest, kStructRefCode,
  ]);
  builder.addFunction('isArray', makeSig([kWasmAnyRef], [kWasmI32]))
  .exportFunc().addBody([
    kExprLocalGet, 0,
    kGCPrefix, kExprRefTest, kArrayRefCode,
  ]);
  let instance = builder.instantiate();
assertEquals(1, instance.exports.isStruct(struct));
assertEquals(1, instance.exports.isArray(array));
assertEquals(0, instance.exports.isStruct(array));
assertEquals(0, instance.exports.isArray(struct));
