// Copyright 2021 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --harmony_intl_best_fit_matcher

// NOT INTEND FOR CHECK IN

const intl_objects = [
  Intl.Collator,
  Intl.DateTimeFormat,
  Intl.DisplayNames,
  Intl.ListFormat,
  Intl.NumberFormat,
  Intl.PluralRules,
  Intl.RelativeTimeFormat,
  Intl.Segmenter,
];

let languages = [
// cat third_party/icu/source/data/lang/*.txt |egrep " [a-z]{2,3}{"|cut -d'{' -f1|sort -u| tr -d ' '|sed -e 's/^/"/'|sed -e 's/$/",/'
"aa",
"ab",
"ace",
"ach",
"ada",
"ady",
"ae",
"aeb",
"af",
"afh",
"agq",
"ain",
"ak",
"akk",
"akz",
"ale",
"all",
"aln",
"alt",
"am",
"an",
"ang",
"anp",
"ar",
"arc",
"arn",
"aro",
"arp",
"arq",
"ars",
"arw",
"ary",
"arz",
"as",
"asa",
"ase",
"ast",
"av",
"avk",
"awa",
"ay",
"az",
"ba",
"bal",
"ban",
"bar",
"bas",
"bax",
"bbc",
"bbj",
"be",
"bej",
"bem",
"bew",
"bez",
"bfd",
"bfq",
"bg",
"bgn",
"bgn",
"bho",
"bi",
"bik",
"bin",
"bjn",
"bkm",
"bla",
"bm",
"bn",
"bo",
"bpy",
"bqi",
"br",
"bra",
"brh",
"brx",
"bs",
"bss",
"bua",
"bug",
"bum",
"byn",
"byv",
"ca",
"cad",
"car",
"cay",
"cch",
"ccp",
"ce",
"ceb",
"cf",
"cgg",
"ch",
"chb",
"chg",
"chk",
"chm",
"chn",
"cho",
"chp",
"chr",
"chy",
"cic",
"ckb",
"co",
"cop",
"cps",
"cr",
"crh",
"crs",
"cs",
"csb",
"css",
"cu",
"cv",
"cy",
"da",
"dak",
"dar",
"dav",
"de",
"del",
"den",
"dgr",
"din",
"din",
"dje",
"doi",
"dsb",
"dtp",
"dua",
"dum",
"dv",
"dx",
"dyo",
"dyu",
"dz",
"dzg",
"ebu",
"ee",
"efi",
"egl",
"egy",
"eka",
"el",
"elx",
"em",
"en",
"enm",
"eo",
"eor",
"es",
"esu",
"et",
"eu",
"ewo",
"ext",
"fa",
"fan",
"fat",
"fcc",
"fcd",
"few",
"ff",
"fi",
"fil",
"fit",
"fj",
"fo",
"fon",
"fr",
"frc",
"fri",
"frm",
"fro",
"frp",
"frr",
"frs",
"fur",
"fw",
"fy",
"ga",
"gaa",
"gag",
"gan",
"gay",
"gba",
"gbz",
"gd",
"gez",
"gil",
"gl",
"glk",
"gmh",
"gn",
"goh",
"gom",
"gon",
"gor",
"got",
"grb",
"grc",
"gsw",
"gu",
"guc",
"gur",
"guz",
"gv",
"gwi",
"ha",
"hai",
"hak",
"haw",
"hc",
"he",
"hex",
"hi",
"hif",
"hil",
"hit",
"hmn",
"ho",
"hr",
"hsb",
"hsn",
"ht",
"hu",
"hup",
"hy",
"hz",
"ia",
"iba",
"ibb",
"id",
"ie",
"ig",
"ii",
"ik",
"ilo",
"inh",
"io",
"is",
"iso",
"it",
"iu",
"izh",
"ja",
"jam",
"jbo",
"jgo",
"jmc",
"jpr",
"jrb",
"jut",
"jv",
"ka",
"kaa",
"kab",
"kac",
"kaj",
"kam",
"kaw",
"kbd",
"kbl",
"kcg",
"kde",
"kea",
"ken",
"kfo",
"kg",
"kgp",
"kha",
"kho",
"khq",
"khw",
"ki",
"kiu",
"kj",
"kk",
"kkj",
"kl",
"kln",
"km",
"kmb",
"kn",
"ko",
"koi",
"kok",
"kos",
"kpe",
"kr",
"krc",
"kri",
"krj",
"krl",
"kru",
"ks",
"ksb",
"ksf",
"ksh",
"ku",
"kum",
"kut",
"kv",
"kw",
"ky",
"la",
"lad",
"lag",
"lah",
"lam",
"lb",
"lez",
"lfn",
"lg",
"li",
"lij",
"liv",
"lkt",
"lmo",
"ln",
"lo",
"lol",
"lou",
"loz",
"lrc",
"lt",
"ltg",
"lu",
"lua",
"lui",
"lun",
"luo",
"lus",
"luy",
"lv",
"lw",
"lzh",
"lzz",
"mad",
"maf",
"mag",
"mai",
"mak",
"man",
"mas",
"mde",
"mdf",
"mdr",
"men",
"mer",
"mfe",
"mg",
"mga",
"mgh",
"mgo",
"mh",
"mi",
"mic",
"min",
"mk",
"ml",
"mn",
"mnc",
"mni",
"mns",
"moh",
"mon",
"mos",
"mr",
"mrj",
"ms",
"mt",
"mua",
"mul",
"mus",
"mwl",
"mwr",
"mwv",
"my",
"mye",
"myv",
"mzn",
"na",
"nan",
"nap",
"naq",
"nb",
"nd",
"nds",
"ne",
"new",
"nfc",
"nfd",
"ng",
"nia",
"niu",
"njo",
"nl",
"nmg",
"nn",
"nnh",
"no",
"no",
"nog",
"non",
"nov",
"nqo",
"nr",
"nso",
"nus",
"nv",
"nwc",
"ny",
"nym",
"nyn",
"nyo",
"nzi",
"oc",
"oj",
"om",
"one",
"or",
"os",
"osa",
"osx",
"ota",
"pa",
"pag",
"pal",
"pam",
"pap",
"pau",
"pcd",
"pcm",
"pdc",
"pdt",
"peo",
"pfl",
"phn",
"pi",
"pl",
"pms",
"pnt",
"pon",
"prg",
"pro",
"ps",
"pt",
"qu",
"quc",
"qug",
"raj",
"rap",
"rar",
"rg",
"rgn",
"rif",
"rm",
"rn",
"ro",
"roc",
"rof",
"rom",
"rtm",
"ru",
"rue",
"rug",
"rup",
"rw",
"rwk",
"sa",
"sad",
"sah",
"sam",
"saq",
"sas",
"sat",
"sat",
"saz",
"sba",
"sbp",
"sc",
"scn",
"sco",
"sd",
"sdc",
"sdh",
"se",
"see",
"seh",
"sei",
"sel",
"ses",
"sg",
"sga",
"sgs",
"sh",
"shi",
"shn",
"shu",
"si",
"sid",
"sk",
"sl",
"sli",
"sly",
"sm",
"sma",
"smj",
"smn",
"sms",
"sn",
"snk",
"so",
"sog",
"sq",
"sr",
"srn",
"srr",
"ss",
"ssy",
"st",
"stq",
"su",
"suk",
"sun",
"sus",
"sux",
"sv",
"sw",
"swb",
"syc",
"syr",
"szl",
"ta",
"tcy",
"te",
"tem",
"teo",
"ter",
"tet",
"tg",
"th",
"thu",
"ti",
"tig",
"tiv",
"tk",
"tkl",
"tkr",
"tl",
"tlh",
"tli",
"tly",
"tmh",
"tn",
"to",
"tog",
"tpi",
"tr",
"tru",
"trv",
"ts",
"tsd",
"tsi",
"tt",
"ttt",
"tue",
"tum",
"tvl",
"tw",
"two",
"twq",
"ty",
"tyv",
"tzm",
"udm",
"ug",
"uga",
"uk",
"umb",
"und",
"und",
"ur",
"uz",
"va",
"vai",
"var",
"ve",
"vec",
"vep",
"vi",
"vls",
"vmf",
"vo",
"vot",
"vro",
"vun",
"wa",
"wae",
"wal",
"war",
"was",
"wbp",
"wed",
"wo",
"wuu",
"xal",
"xh",
"xmf",
"xml",
"xog",
"yao",
"yap",
"yav",
"ybb",
"yes",
"yi",
"yo",
"yrl",
"yue",
"za",
"zap",
"zbl",
"zea",
"zen",
"zgh",
"zh",
"zu",
"zun",
"zxx",
"zza",
];

let scripts = [
  "",
// cat third_party/icu/source/data/lang/*.txt |egrep " [A-Z][a-z]{3}{"|cut -d'{' -f1|sort -u| tr -d ' '|sed -e 's/^/"-/'|sed -e 's/$/",/'
"-Adlm",
"-Afak",
"-Aghb",
"-Ahom",
"-Arab",
"-Aran",
"-Armi",
"-Armn",
"-Avst",
"-Bali",
"-Bamu",
"-Bass",
"-Batk",
"-Beng",
"-Bhks",
"-Blis",
"-Bopo",
"-Brah",
"-Brai",
"-Bugi",
"-Buhd",
"-Cakm",
"-Cans",
"-Cari",
"-Cham",
"-Cher",
"-Chrs",
"-Cirt",
"-Copt",
"-Cprt",
"-Cyrl",
"-Cyrs",
"-Deva",
"-Diak",
"-Dogr",
"-Dsrt",
"-Dupl",
"-Egyd",
"-Egyh",
"-Egyp",
"-Elba",
"-Elym",
"-Ethi",
"-Geok",
"-Geor",
"-Glag",
"-Gong",
"-Gonm",
"-Goth",
"-Gran",
"-Grek",
"-Gujr",
"-Guru",
"-Hanb",
"-Hang",
"-Hani",
"-Hano",
"-Hans",
"-Hant",
"-Hatr",
"-Hebr",
"-Hira",
"-Hluw",
"-Hmng",
"-Hmnp",
"-Hrkt",
"-Hung",
"-Inds",
"-Ital",
"-Jamo",
"-Java",
"-Jpan",
"-Jurc",
"-Kali",
"-Kana",
"-Keys",
"-Khar",
"-Khmr",
"-Khoj",
"-Kits",
"-Knda",
"-Kore",
"-Kpel",
"-Kthi",
"-Lana",
"-Laoo",
"-Latf",
"-Latg",
"-Latn",
"-Lepc",
"-Limb",
"-Lina",
"-Linb",
"-Lisu",
"-Loma",
"-Lyci",
"-Lydi",
"-Mahj",
"-Maka",
"-Mand",
"-Mani",
"-Marc",
"-Maya",
"-Medf",
"-Mend",
"-Merc",
"-Mero",
"-Mlym",
"-Modi",
"-Mong",
"-Moon",
"-Mroo",
"-Mtei",
"-Mult",
"-Mymr",
"-Nand",
"-Narb",
"-Nbat",
"-Newa",
"-Nkgb",
"-Nkoo",
"-Nshu",
"-Ogam",
"-Olck",
"-Orkh",
"-Orya",
"-Osge",
"-Osma",
"-Palm",
"-Pauc",
"-Perm",
"-Phag",
"-Phli",
"-Phlp",
"-Phlv",
"-Phnx",
"-Plrd",
"-Prti",
"-Qaag",
"-Rjng",
"-Rohg",
"-Roro",
"-Runr",
"-Samr",
"-Sara",
"-Sarb",
"-Saur",
"-Sgnw",
"-Shaw",
"-Shrd",
"-Sidd",
"-Sind",
"-Sinh",
"-Sogd",
"-Sogo",
"-Sora",
"-Soyo",
"-Sund",
"-Sylo",
"-Syrc",
"-Syre",
"-Syrj",
"-Syrn",
"-Tagb",
"-Takr",
"-Tale",
"-Talu",
"-Taml",
"-Tang",
"-Tavt",
"-Telu",
"-Teng",
"-Tfng",
"-Tglg",
"-Thaa",
"-Thai",
"-Tibt",
"-Tirh",
"-Ugar",
"-Vaii",
"-Visp",
"-Wara",
"-Wcho",
"-Wole",
"-Xpeo",
"-Xsux",
"-Yezi",
"-Yiii",
"-Zanb",
"-Zinh",
"-Zmth",
"-Zsye",
"-Zsym",
"-Zxxx",
"-Zyyy",
"-Zzzz",
];

let regions = [
"",
// cat third_party/icu/source/data/region/*.txt |egrep " ([0-9]{3}|[A-Z]{2}){"|cut -d'{' -f1|sort -u| tr -d ' '|sed -e 's/^/"-/'|sed -e 's/$/",/'
"-001",
"-002",
"-003",
"-005",
"-009",
"-011",
"-013",
"-014",
"-015",
"-017",
"-018",
"-019",
"-021",
"-029",
"-030",
"-034",
"-035",
"-039",
"-053",
"-054",
"-057",
"-061",
"-142",
"-143",
"-145",
"-150",
"-151",
"-154",
"-155",
"-202",
"-419",
"-AC",
"-AD",
"-AE",
"-AF",
"-AG",
"-AI",
"-AL",
"-AM",
"-AO",
"-AQ",
"-AR",
"-AS",
"-AT",
"-AU",
"-AW",
"-AX",
"-AZ",
"-BA",
"-BB",
"-BD",
"-BE",
"-BF",
"-BG",
"-BH",
"-BI",
"-BJ",
"-BL",
"-BM",
"-BN",
"-BO",
"-BQ",
"-BR",
"-BS",
"-BT",
"-BV",
"-BW",
"-BY",
"-BZ",
"-CA",
"-CC",
"-CD",
"-CF",
"-CG",
"-CH",
"-CI",
"-CK",
"-CL",
"-CM",
"-CN",
"-CO",
"-CP",
"-CR",
"-CU",
"-CV",
"-CW",
"-CX",
"-CY",
"-CZ",
"-DE",
"-DG",
"-DJ",
"-DK",
"-DM",
"-DO",
"-DZ",
"-EA",
"-EC",
"-EE",
"-EG",
"-EH",
"-ER",
"-ES",
"-ET",
"-EU",
"-EZ",
"-FI",
"-FJ",
"-FK",
"-FM",
"-FO",
"-FR",
"-GA",
"-GB",
"-GD",
"-GE",
"-GF",
"-GG",
"-GH",
"-GI",
"-GL",
"-GM",
"-GN",
"-GP",
"-GQ",
"-GR",
"-GS",
"-GT",
"-GU",
"-GW",
"-GY",
"-HK",
"-HM",
"-HN",
"-HR",
"-HT",
"-HU",
"-IC",
"-ID",
"-IE",
"-IL",
"-IM",
"-IN",
"-IO",
"-IQ",
"-IR",
"-IS",
"-IT",
"-JE",
"-JM",
"-JO",
"-JP",
"-KE",
"-KG",
"-KH",
"-KI",
"-KM",
"-KN",
"-KP",
"-KR",
"-KW",
"-KY",
"-KZ",
"-LA",
"-LB",
"-LC",
"-LI",
"-LK",
"-LR",
"-LS",
"-LT",
"-LU",
"-LV",
"-LY",
"-MA",
"-MC",
"-MD",
"-ME",
"-MF",
"-MG",
"-MH",
"-MK",
"-ML",
"-MM",
"-MN",
"-MO",
"-MP",
"-MQ",
"-MR",
"-MS",
"-MT",
"-MU",
"-MV",
"-MW",
"-MX",
"-MY",
"-MZ",
"-NA",
"-NC",
"-NE",
"-NF",
"-NG",
"-NI",
"-NL",
"-NO",
"-NP",
"-NR",
"-NU",
"-NZ",
"-OM",
"-PA",
"-PE",
"-PF",
"-PG",
"-PH",
"-PK",
"-PL",
"-PM",
"-PN",
"-PR",
"-PS",
"-PT",
"-PW",
"-PY",
"-QA",
"-QO",
"-RE",
"-RO",
"-RS",
"-RU",
"-RW",
"-SA",
"-SB",
"-SC",
"-SD",
"-SE",
"-SG",
"-SH",
"-SI",
"-SJ",
"-SK",
"-SL",
"-SM",
"-SN",
"-SO",
"-SR",
"-SS",
"-ST",
"-SV",
"-SX",
"-SY",
"-SZ",
"-TA",
"-TC",
"-TD",
"-TF",
"-TG",
"-TH",
"-TJ",
"-TK",
"-TL",
"-TM",
"-TN",
"-TO",
"-TR",
"-TT",
"-TV",
"-TW",
"-TZ",
"-UA",
"-UG",
"-UM",
"-UN",
"-US",
"-UY",
"-UZ",
"-VA",
"-VC",
"-VE",
"-VG",
"-VI",
"-VN",
"-VU",
"-WF",
"-WS",
"-XA",
"-XB",
"-XK",
"-YE",
"-YT",
"-ZA",
"-ZM",
"-ZW",
"-ZZ",
];
let extensions = [
  "",
  "-u-sd-usak",
];

print("Total " + languages.length + " languages")
print("Total " + scripts.length + " script")
print("Total " + regions.length + " regions")

lookupOptions = {localeMatcher: "lookup"};
lookupDisplayOptions = {localeMatcher: "lookup", type: "language"};
displayOptions = {type: "language"};
function dummy(l) {}
function testLocale(l) {
  //print(l);
  let req = ["en", l];
  intl_objects.forEach(f => {
    let name = f.prototype[Symbol.toStringTag];
    let bestFit=  f.supportedLocalesOf(req).toString();
    let lookup = f.supportedLocalesOf(req, lookupOptions).toString();

    if (bestFit != lookup) {
      print("Diff " + name + ".supportedLocalesOf(['en','" + l + "']): bestFit=" + bestFit + " vs lookup=" + lookup )
    }

    if (f == Intl.DisplayNames) {
      bestFitL = (new f(l, displayOptions)).resolvedOptions().locale;
      lookupL = (new f(l, lookupDisplayOptions)).resolvedOptions().locale;
    } else {
      bestFitL = (new f(l)).resolvedOptions().locale;
      lookupL = (new f(l, lookupOptions)).resolvedOptions().locale;
    }

    if (bestFitL != lookupL) {
      print("Diff (new " + name + "('" + l + "')).resolvedOptions().locale: bestFit=" + bestFitL + " vs lookup=" + lookupL )
    }
  })
}

extensions.map(ext => {
  regions.map(region => {
    print("Start region='" + region + " ext='" + ext + "':");
    let start = (new Date).getTime();
    scripts.map(script => {
      languages.map(lang => {
          l = lang + script + region + ext;
          testLocale(l);
      });
    });
    print(script + ext + " took " + (((new Date).getTime() - start) / 1000) + " seconds");
  });
});

end  // force error
