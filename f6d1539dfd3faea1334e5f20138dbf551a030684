{
  "comments": [
    {
      "key": {
        "uuid": "e2d24aef_d7e22256",
        "filename": "include/v8.h",
        "patchSetId": 9
      },
      "lineNbr": 7808,
      "author": {
        "id": 1118373
      },
      "writtenOn": "2017-08-04T05:43:52Z",
      "side": 1,
      "message": "We should have renamed this to SerializeEmbedderFieldsCallback like we have done in other places. See for example kEmbedderFieldsInWeakCallback;",
      "range": {
        "startLine": 7808,
        "startChar": 6,
        "endLine": 7808,
        "endChar": 37
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "944a47a0_3427d62a",
        "filename": "include/v8.h",
        "patchSetId": 9
      },
      "lineNbr": 7808,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2017-08-08T14:59:15Z",
      "side": 1,
      "message": "There is a typedef for it: https://cs.chromium.org/chromium/src/v8/include/v8.h\n\nBut it looks like *internal is still used in the API and *embedder everywhere else. WDYT?",
      "parentUuid": "e2d24aef_d7e22256",
      "range": {
        "startLine": 7808,
        "startChar": 6,
        "endLine": 7808,
        "endChar": 37
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3aae130e_60139e2e",
        "filename": "include/v8.h",
        "patchSetId": 9
      },
      "lineNbr": 7808,
      "author": {
        "id": 1118373
      },
      "writtenOn": "2017-08-09T07:15:34Z",
      "side": 1,
      "message": "We should swap the typedef and after some time remove the *internal version. In a follow up maybe.",
      "parentUuid": "944a47a0_3427d62a",
      "range": {
        "startLine": 7808,
        "startChar": 6,
        "endLine": 7808,
        "endChar": 37
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70593ce7_c7fb747f",
        "filename": "include/v8.h",
        "patchSetId": 9
      },
      "lineNbr": 7808,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2017-08-09T09:11:37Z",
      "side": 1,
      "message": "OK, let\u0027s patch chromium to use the *embedder naming and then totally remove *internal naming in a later CL.",
      "parentUuid": "3aae130e_60139e2e",
      "range": {
        "startLine": 7808,
        "startChar": 6,
        "endLine": 7808,
        "endChar": 37
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7db1213b_6b48d9ab",
        "filename": "include/v8.h",
        "patchSetId": 9
      },
      "lineNbr": 7808,
      "author": {
        "id": 1118373
      },
      "writtenOn": "2017-08-10T06:30:25Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "70593ce7_c7fb747f",
      "range": {
        "startLine": 7808,
        "startChar": 6,
        "endLine": 7808,
        "endChar": 37
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3c48f5a3_0c86316d",
        "filename": "include/v8.h",
        "patchSetId": 9
      },
      "lineNbr": 8219,
      "author": {
        "id": 1118373
      },
      "writtenOn": "2017-08-04T05:43:52Z",
      "side": 1,
      "message": "Can we move this to SetDefaultContext? Each context gets its own callback for serialization, so it would be more consistent to put it there.",
      "range": {
        "startLine": 8219,
        "startChar": 25,
        "endLine": 8219,
        "endChar": 65
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "119df96d_cbaf1a5a",
        "filename": "include/v8.h",
        "patchSetId": 9
      },
      "lineNbr": 8219,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2017-08-08T14:59:15Z",
      "side": 1,
      "message": "Yes that makes sense to me, as AddContext has a callback as a param, so we would be mirroring that.",
      "parentUuid": "3c48f5a3_0c86316d",
      "range": {
        "startLine": 8219,
        "startChar": 25,
        "endLine": 8219,
        "endChar": 65
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "301f3826_cebed385",
        "filename": "src/address-map.h",
        "patchSetId": 9
      },
      "lineNbr": 177,
      "author": {
        "id": 1118373
      },
      "writtenOn": "2017-08-04T05:43:52Z",
      "side": 1,
      "message": "I would add a line above to make it not look like this is another kind of attached reference.",
      "range": {
        "startLine": 177,
        "startChar": 9,
        "endLine": 177,
        "endChar": 26
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80094973_dc283a8d",
        "filename": "src/address-map.h",
        "patchSetId": 9
      },
      "lineNbr": 177,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2017-08-08T14:59:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "301f3826_cebed385",
      "range": {
        "startLine": 177,
        "startChar": 9,
        "endLine": 177,
        "endChar": 26
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8ccb083_5c981bda",
        "filename": "src/snapshot/deserializer.cc",
        "patchSetId": 9
      },
      "lineNbr": 420,
      "author": {
        "id": 1118373
      },
      "writtenOn": "2017-08-04T05:43:52Z",
      "side": 1,
      "message": "Just making sure, FixedTypedArrays do not need to be registered with the heap?",
      "range": {
        "startLine": 420,
        "startChar": 11,
        "endLine": 420,
        "endChar": 31
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0decded_46fc7205",
        "filename": "src/snapshot/deserializer.cc",
        "patchSetId": 9
      },
      "lineNbr": 420,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2017-08-08T14:59:15Z",
      "side": 1,
      "message": "Correct, in the off-heap case, there will always be a JSArrayBuffer that is registered, and in the on-heap case, there is no external allocation to manage so that doesn\u0027t cause any problems.",
      "parentUuid": "b8ccb083_5c981bda",
      "range": {
        "startLine": 420,
        "startChar": 11,
        "endLine": 420,
        "endChar": 31
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7514e639_644cd9aa",
        "filename": "src/snapshot/deserializer.cc",
        "patchSetId": 9
      },
      "lineNbr": 901,
      "author": {
        "id": 1118373
      },
      "writtenOn": "2017-08-04T05:43:52Z",
      "side": 1,
      "message": "Let\u0027s make this a CHECK_NOT_NULL. UNREACHABLE only works in debug mode.",
      "range": {
        "startLine": 901,
        "startChar": 12,
        "endLine": 901,
        "endChar": 25
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75fc49da_7ac85baa",
        "filename": "src/snapshot/deserializer.cc",
        "patchSetId": 9
      },
      "lineNbr": 901,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2017-08-08T14:59:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7514e639_644cd9aa",
      "range": {
        "startLine": 901,
        "startChar": 12,
        "endLine": 901,
        "endChar": 25
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab384ece_45a60a7d",
        "filename": "src/snapshot/deserializer.h",
        "patchSetId": 9
      },
      "lineNbr": 153,
      "author": {
        "id": 1118373
      },
      "writtenOn": "2017-08-04T05:43:52Z",
      "side": 1,
      "message": "Can we also, in a follow-up, migrate all of these lists to std::vector?",
      "range": {
        "startLine": 153,
        "startChar": 2,
        "endLine": 153,
        "endChar": 6
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c94a4879_2848eafa",
        "filename": "src/snapshot/deserializer.h",
        "patchSetId": 9
      },
      "lineNbr": 153,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2017-08-08T14:59:15Z",
      "side": 1,
      "message": "Yes, SGTM",
      "parentUuid": "ab384ece_45a60a7d",
      "range": {
        "startLine": 153,
        "startChar": 2,
        "endLine": 153,
        "endChar": 6
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5421cc11_0666b4ac",
        "filename": "src/snapshot/partial-serializer.cc",
        "patchSetId": 9
      },
      "lineNbr": 147,
      "author": {
        "id": 1118373
      },
      "writtenOn": "2017-08-16T06:19:40Z",
      "side": 1,
      "message": "Do you still remember why this is necessary? This breaks serialization of blink contexts because they indeed do have nullptr embedder fields.",
      "range": {
        "startLine": 147,
        "startChar": 15,
        "endLine": 147,
        "endChar": 31
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5b5ea3c_ed081bf6",
        "filename": "src/snapshot/partial-serializer.cc",
        "patchSetId": 9
      },
      "lineNbr": 147,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2017-08-16T08:31:28Z",
      "side": 1,
      "message": "It was basically because the handler we specified in tests would assume the pointer was real and try to memcpy with the pointer",
      "parentUuid": "5421cc11_0666b4ac",
      "range": {
        "startLine": 147,
        "startChar": 15,
        "endLine": 147,
        "endChar": 31
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e5a12e9e_297ab241",
        "filename": "src/snapshot/serializer.cc",
        "patchSetId": 9
      },
      "lineNbr": 285,
      "author": {
        "id": 1118373
      },
      "writtenOn": "2017-08-04T05:43:52Z",
      "side": 1,
      "message": "Let\u0027s do a DCHECK_NE(0, seen_backing_stores_index_) here.",
      "range": {
        "startLine": 285,
        "startChar": 32,
        "endLine": 285,
        "endChar": 59
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d41c4a2_aad3c371",
        "filename": "src/snapshot/serializer.cc",
        "patchSetId": 9
      },
      "lineNbr": 285,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2017-08-08T14:59:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e5a12e9e_297ab241",
      "range": {
        "startLine": 285,
        "startChar": 32,
        "endLine": 285,
        "endChar": 59
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9ef9307_ce345d73",
        "filename": "src/snapshot/serializer.cc",
        "patchSetId": 9
      },
      "lineNbr": 440,
      "author": {
        "id": 1118373
      },
      "writtenOn": "2017-08-04T05:43:52Z",
      "side": 1,
      "message": "\"larger\"",
      "range": {
        "startLine": 440,
        "startChar": 43,
        "endLine": 440,
        "endChar": 48
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff20db42_0628ddc8",
        "filename": "src/snapshot/serializer.cc",
        "patchSetId": 9
      },
      "lineNbr": 440,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2017-08-08T14:59:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b9ef9307_ce345d73",
      "range": {
        "startLine": 440,
        "startChar": 43,
        "endLine": 440,
        "endChar": 48
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f3224a2f_42fa1f2b",
        "filename": "src/snapshot/serializer.cc",
        "patchSetId": 9
      },
      "lineNbr": 441,
      "author": {
        "id": 1118373
      },
      "writtenOn": "2017-08-04T05:43:52Z",
      "side": 1,
      "message": "In fact, we can only really serialize integers up to 1\u003c\u003c30. On 64-bit architectures this is less than Smi range.\n\nI think we can drop this DCHECK since PutInt already has a DCHECK for this.",
      "range": {
        "startLine": 441,
        "startChar": 9,
        "endLine": 441,
        "endChar": 39
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f449e56_6b68c607",
        "filename": "src/snapshot/serializer.cc",
        "patchSetId": 9
      },
      "lineNbr": 441,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2017-08-08T14:59:15Z",
      "side": 1,
      "message": "The DCHECK was more about making sure NumberToInt32() doesn\u0027t result in overflow or some weird conversion - I guess it would be better to use a checked conversion of some kind but I\u0027m not sure where that would be, any ideas?",
      "parentUuid": "f3224a2f_42fa1f2b",
      "range": {
        "startLine": 441,
        "startChar": 9,
        "endLine": 441,
        "endChar": 39
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f99df7a0_ce472db6",
        "filename": "src/snapshot/serializer.cc",
        "patchSetId": 9
      },
      "lineNbr": 441,
      "author": {
        "id": 1118373
      },
      "writtenOn": "2017-08-09T07:15:34Z",
      "side": 1,
      "message": "I see. Let\u0027s make this a CHECK and add a comment.",
      "parentUuid": "8f449e56_6b68c607",
      "range": {
        "startLine": 441,
        "startChar": 9,
        "endLine": 441,
        "endChar": 39
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b905afec_fdbfa8ce",
        "filename": "src/snapshot/serializer.cc",
        "patchSetId": 9
      },
      "lineNbr": 441,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2017-08-09T09:11:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f99df7a0_ce472db6",
      "range": {
        "startLine": 441,
        "startChar": 9,
        "endLine": 441,
        "endChar": 39
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fe3f7c70_2694e1d9",
        "filename": "src/snapshot/serializer.cc",
        "patchSetId": 9
      },
      "lineNbr": 443,
      "author": {
        "id": 1118373
      },
      "writtenOn": "2017-08-04T05:43:52Z",
      "side": 1,
      "message": "Can we have a comment here? Does byte_length \u003d\u003d 0 mean that we have on-heap backing store, or is the TypedArray neutered?\n\nYou could also remove this code and change the condition below to\n\nif (byte_length !\u003d 0 \u0026\u0026 backing_store !\u003d nullptr) ...",
      "range": {
        "startLine": 443,
        "startChar": 6,
        "endLine": 443,
        "endChar": 17
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92d59ed4_16ba8d89",
        "filename": "src/snapshot/serializer.cc",
        "patchSetId": 9
      },
      "lineNbr": 443,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2017-08-08T14:59:15Z",
      "side": 1,
      "message": "Actually we don\u0027t need this check, a neutered JSArrayBuffer will have backing_store \u003d\u003d nullptr and byte_length \u003d\u003d 0, and an on-heap TypedArray will have backing_store \u003d\u003d nullptr, but either way we have no backing store to serialize so there is nothing to do but serialize the JSArrayBuffer as is.",
      "parentUuid": "fe3f7c70_2694e1d9",
      "range": {
        "startLine": 443,
        "startChar": 6,
        "endLine": 443,
        "endChar": 17
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2bbede54_9709d25e",
        "filename": "src/snapshot/serializer.cc",
        "patchSetId": 9
      },
      "lineNbr": 443,
      "author": {
        "id": 1118373
      },
      "writtenOn": "2017-08-09T07:15:34Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "92d59ed4_16ba8d89",
      "range": {
        "startLine": 443,
        "startChar": 6,
        "endLine": 443,
        "endChar": 17
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62676ed5_1a6dcc10",
        "filename": "src/snapshot/serializer.cc",
        "patchSetId": 9
      },
      "lineNbr": 459,
      "author": {
        "id": 1118373
      },
      "writtenOn": "2017-08-04T05:43:52Z",
      "side": 1,
      "message": "\"larger\"",
      "range": {
        "startLine": 459,
        "startChar": 43,
        "endLine": 459,
        "endChar": 48
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02cdd1f6_a3060746",
        "filename": "src/snapshot/serializer.cc",
        "patchSetId": 9
      },
      "lineNbr": 459,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2017-08-08T14:59:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "62676ed5_1a6dcc10",
      "range": {
        "startLine": 459,
        "startChar": 43,
        "endLine": 459,
        "endChar": 48
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f55302ee_e212271e",
        "filename": "src/snapshot/serializer.cc",
        "patchSetId": 9
      },
      "lineNbr": 462,
      "author": {
        "id": 1118373
      },
      "writtenOn": "2017-08-04T05:43:52Z",
      "side": 1,
      "message": "Same thing as above.",
      "range": {
        "startLine": 462,
        "startChar": 6,
        "endLine": 462,
        "endChar": 17
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1721d2f0_0719308d",
        "filename": "src/snapshot/serializer.cc",
        "patchSetId": 9
      },
      "lineNbr": 462,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2017-08-08T14:59:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f55302ee_e212271e",
      "range": {
        "startLine": 462,
        "startChar": 6,
        "endLine": 462,
        "endChar": 17
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f952edf4_648ad998",
        "filename": "src/snapshot/serializer.h",
        "patchSetId": 9
      },
      "lineNbr": 345,
      "author": {
        "id": 1118373
      },
      "writtenOn": "2017-08-04T05:43:52Z",
      "side": 1,
      "message": "Do we need this anywhere?",
      "range": {
        "startLine": 345,
        "startChar": 2,
        "endLine": 345,
        "endChar": 39
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "570a0248_e9efd516",
        "filename": "src/snapshot/serializer.h",
        "patchSetId": 9
      },
      "lineNbr": 345,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2017-08-08T14:59:15Z",
      "side": 1,
      "message": "oops, no we don\u0027t.",
      "parentUuid": "f952edf4_648ad998",
      "range": {
        "startLine": 345,
        "startChar": 2,
        "endLine": 345,
        "endChar": 39
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "46113cb6_2c062b08",
        "filename": "test/cctest/test-serialize.cc",
        "patchSetId": 9
      },
      "lineNbr": 645,
      "author": {
        "id": 1118373
      },
      "writtenOn": "2017-08-04T05:43:52Z",
      "side": 1,
      "message": "Let\u0027s just move the definition up instead.",
      "range": {
        "startLine": 645,
        "startChar": 16,
        "endLine": 645,
        "endChar": 39
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "268b6304_5fddacf8",
        "filename": "test/cctest/test-serialize.cc",
        "patchSetId": 9
      },
      "lineNbr": 645,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2017-08-08T14:59:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "46113cb6_2c062b08",
      "range": {
        "startLine": 645,
        "startChar": 16,
        "endLine": 645,
        "endChar": 39
      },
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "80a48b95_eeb550f0",
        "filename": "test/cctest/test-serialize.cc",
        "patchSetId": 9
      },
      "lineNbr": 650,
      "author": {
        "id": 1118373
      },
      "writtenOn": "2017-08-04T05:43:52Z",
      "side": 1,
      "message": "Can we somehow check that awe are really dealing with on-heap TypedArrays here, and below that they are indeed off-heap? These tests may become useless if we change our rules when to allocate where.\n\nCan we also have tests with neutered typed arrays, DataView, TypedArrays with shared buffer, etc.?",
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12e85579_0914f47a",
        "filename": "test/cctest/test-serialize.cc",
        "patchSetId": 9
      },
      "lineNbr": 650,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2017-08-08T14:59:15Z",
      "side": 1,
      "message": "Good idea, I\u0027ve added a helper too :)",
      "parentUuid": "80a48b95_eeb550f0",
      "revId": "f6d1539dfd3faea1334e5f20138dbf551a030684",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}