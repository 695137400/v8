{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a8ad8dcf_8dbb7b44",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1500921
      },
      "writtenOn": "2023-11-16T13:33:22Z",
      "side": 1,
      "message": "Hi!\n\nJust to note that I\u0027ve found FlagContinuations really hard to work with, and then pairing them with CanCover has been a mini nightmare :) We\u0027re now skipping a CanCover check in two places in the arm64 backend, that we know of, and this combination actually results in tests passing in a release build but fail when validating the SSA in debug mode. So, I was wondering whether there are any plans to give V8 a more robust instruction selection framework..?",
      "revId": "6749bf1a0c14128fa6b3d87fe40725e1f01027cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4840929e_f33b2d20",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-11-21T12:41:58Z",
      "side": 1,
      "message": "This optimization looks very similar to what BranchConditionDuplicationReducer (https://source.chromium.org/chromium/chromium/src/+/main:v8/src/compiler/turboshaft/branch-condition-duplication-reducer.h) tries to do. I think that it would make more sense to add a `REDUCE(Select)` to BranchConditionDuplicationReducer so that 1) it benefits other architectures as well, and 2) it\u0027s applied a bit more selectively (BranchConditionDuplicationReducer doesn\u0027t duplicate expensive operations like multiplications and divisions, and tries to only do it if it wouldn\u0027t increase register pressure too much, although that\u0027s not super precise).",
      "revId": "6749bf1a0c14128fa6b3d87fe40725e1f01027cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90aab33e_bd0fe67c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1500921
      },
      "writtenOn": "2023-11-22T10:43:45Z",
      "side": 1,
      "message": "Okay, thanks, that looks like exactly what I\u0027m trying to achieve, doing it an the IR level also removes my CanCover worries too.",
      "parentUuid": "4840929e_f33b2d20",
      "revId": "6749bf1a0c14128fa6b3d87fe40725e1f01027cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "512fea91_fd215e98",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1500921
      },
      "writtenOn": "2023-11-22T12:38:36Z",
      "side": 1,
      "message": "I see that no tests were added when branch-condition-duplication-reducer was added. Is there anyway of testing the reducers?",
      "parentUuid": "90aab33e_bd0fe67c",
      "revId": "6749bf1a0c14128fa6b3d87fe40725e1f01027cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a589cb2_e1e5b34a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-11-22T12:57:38Z",
      "side": 1,
      "message": "Yea, I agree that FlagContinuations are definitely not the most intuitive thing of V8. However, changing the instruction selector anytime soon is not a priority (ie, we definitely won\u0027t do it 2024). The short-mid term plan for the instruction selector is to adapt it to work with Turboshaft, then remove the Turbofan parts, and then we can think about changing how things work.",
      "parentUuid": "a8ad8dcf_8dbb7b44",
      "revId": "6749bf1a0c14128fa6b3d87fe40725e1f01027cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d601c41e_2ce3dbe8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-11-22T12:57:38Z",
      "side": 1,
      "message": "Unfortunately, we haven\u0027t built much testing infrastructure for Turboshaft, and in particular we don\u0027t have a way to easily create graphs for testing.\nThat being said, generating Turboshaft graph is not very hard (you just need to allocate a graph and create an Assembler), so it shouldn\u0027t be too hard to implement a \"testing framework\" of some kind.\n(I\u0027m not sure I\u0027ll have time to do it anytime soon though)",
      "parentUuid": "512fea91_fd215e98",
      "revId": "6749bf1a0c14128fa6b3d87fe40725e1f01027cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}