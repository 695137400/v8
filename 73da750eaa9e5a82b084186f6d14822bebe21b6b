{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c8242533_1b931250",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-22T16:06:43Z",
      "side": 1,
      "message": "@mlippautz@chromium.org: Was something like this what you had in mind?\n@clemensb@chromium.org, @leszeks@chromium.org: Adding you as you were involved in the previous CL, especially interested in @clemensb@chromium.org\u0027s thoughts on this for wasm.\n\nI\u0027m not very convinced that this CL is an improvement but maybe I also misunderstood what the \"public setters\" were about.",
      "revId": "73da750eaa9e5a82b084186f6d14822bebe21b6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ecb2cdda_1de8693f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2024-08-23T08:28:44Z",
      "side": 1,
      "message": "Yeah this is what I meant. I do think it is an improvement and we have been trying to get runtime code out of heap where possible over the years.",
      "parentUuid": "c8242533_1b931250",
      "revId": "73da750eaa9e5a82b084186f6d14822bebe21b6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4076b043_c73fae99",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2024-08-23T08:28:44Z",
      "side": 1,
      "message": "IMHO this is better. Happy to hear other thoughts.",
      "revId": "73da750eaa9e5a82b084186f6d14822bebe21b6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "055bb82c_d756a69f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-23T12:03:52Z",
      "side": 1,
      "message": "If this is what you had in mind, happy to land it if people agree and +1 it. (I don\u0027t have a strong opinion as I\u0027m not very familiar with the whole `src/heap` directory. ðŸ˜Š",
      "parentUuid": "ecb2cdda_1de8693f",
      "revId": "73da750eaa9e5a82b084186f6d14822bebe21b6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8dfc9079_5d04bf6e",
        "filename": "src/heap/heap.h",
        "patchSetId": 1
      },
      "lineNbr": 884,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-08-26T09:48:36Z",
      "side": 1,
      "message": "As those two are always updated together, should we have a single setter which sets both?",
      "range": {
        "startLine": 883,
        "startChar": 0,
        "endLine": 884,
        "endChar": 66
      },
      "revId": "73da750eaa9e5a82b084186f6d14822bebe21b6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e91b981c_31d90d2a",
        "filename": "src/heap/heap.h",
        "patchSetId": 1
      },
      "lineNbr": 884,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-29T09:36:07Z",
      "side": 1,
      "message": "I don\u0027t know, that sounds like we\u0027re going from \"let\u0027s move all the domain specific logic out of src/heap\" to \"let\u0027s move almost all the logic out of src/heap\".",
      "parentUuid": "8dfc9079_5d04bf6e",
      "range": {
        "startLine": 883,
        "startChar": 0,
        "endLine": 884,
        "endChar": 66
      },
      "revId": "73da750eaa9e5a82b084186f6d14822bebe21b6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c0b1832_36f0dcc1",
        "filename": "src/heap/heap.h",
        "patchSetId": 1
      },
      "lineNbr": 884,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2024-08-30T12:45:03Z",
      "side": 1,
      "message": "+1 to setting together when that is what is supposed to happen though.",
      "parentUuid": "e91b981c_31d90d2a",
      "range": {
        "startLine": 883,
        "startChar": 0,
        "endLine": 884,
        "endChar": 66
      },
      "revId": "73da750eaa9e5a82b084186f6d14822bebe21b6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0ea67f6_cbff869b",
        "filename": "src/heap/heap.h",
        "patchSetId": 1
      },
      "lineNbr": 884,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T13:03:23Z",
      "side": 1,
      "message": "Happy to do that if I don\u0027t forget after my vacation. ðŸ˜Š",
      "parentUuid": "5c0b1832_36f0dcc1",
      "range": {
        "startLine": 883,
        "startChar": 0,
        "endLine": 884,
        "endChar": 66
      },
      "revId": "73da750eaa9e5a82b084186f6d14822bebe21b6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9c1a596_06f55c1a",
        "filename": "src/wasm/wasm-engine.cc",
        "patchSetId": 1
      },
      "lineNbr": 2000,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-08-26T09:48:36Z",
      "side": 1,
      "message": "Can this actually happen, or should we instead (in the beginning of the method) `CHECK_EQ(current_rtts-\u003elength() * 2, current_wrappers-\u003elength());`?",
      "revId": "73da750eaa9e5a82b084186f6d14822bebe21b6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "07528db8_e0f7aaff",
        "filename": "src/wasm/wasm-engine.cc",
        "patchSetId": 1
      },
      "lineNbr": 2000,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-29T09:36:07Z",
      "side": 1,
      "message": "The `CHECK` wouldn\u0027t work at the beginning, the `js_to_wasm_wrappers` start empty, so the invariant should be invalidated on the first call.\nIt probably(?) shouldn\u0027t happen after line 1989 but I\u0027m not very sure about that, this code is very unfamiliar to me and I\u0027m not sure if I want to risk that for this refactoring.",
      "parentUuid": "e9c1a596_06f55c1a",
      "revId": "73da750eaa9e5a82b084186f6d14822bebe21b6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da7a8eec_ca9b3dbe",
        "filename": "src/wasm/wasm-engine.cc",
        "patchSetId": 1
      },
      "lineNbr": 2000,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-08-29T15:23:50Z",
      "side": 1,
      "message": "Don\u0027t both start empty, and then they always grow together (via this method)? Or is there another path that I am missing?",
      "parentUuid": "07528db8_e0f7aaff",
      "revId": "73da750eaa9e5a82b084186f6d14822bebe21b6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b07c065a_fb9a087c",
        "filename": "src/wasm/wasm-engine.cc",
        "patchSetId": 1
      },
      "lineNbr": 2000,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T08:18:44Z",
      "side": 1,
      "message": "I think I misread your `CHECK`, it makes sense in all cases. ðŸ˜Š\nDone.",
      "parentUuid": "da7a8eec_ca9b3dbe",
      "revId": "73da750eaa9e5a82b084186f6d14822bebe21b6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b64ebca8_833af18a",
        "filename": "src/wasm/wasm-engine.h",
        "patchSetId": 1
      },
      "lineNbr": 414,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-08-26T09:48:36Z",
      "side": 1,
      "message": "Two comments:\n1) This is not only about canonical rtts any more, so we should look for a better name.\n2) Can we find a \"less global\" place where to put it? I am worried that we pollute the WasmEngine with more and more unrelated little helpers which could instead be free-floating functions declared and defined where we need them. I am not sure about the right place in this case though. Maybe \"module-compiler.h\" since creating new canonical type IDs happens when compiling wrappers or modules with new types?",
      "range": {
        "startLine": 413,
        "startChar": 0,
        "endLine": 414,
        "endChar": 65
      },
      "revId": "73da750eaa9e5a82b084186f6d14822bebe21b6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "201e4ec8_7f818d14",
        "filename": "src/wasm/wasm-engine.h",
        "patchSetId": 1
      },
      "lineNbr": 414,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-29T09:36:07Z",
      "side": 1,
      "message": "1) Done by you.\n2) I share your concern about polluting the `WasmEngine` but I\u0027m also concerned of hiding this in the module-compiler. We use it e.g. when instantiating a JSToWasmWrapper in `WasmInternalFunction::GetOrCreateExternal` which I think can happen lazily e.g. when storing a funcref in a table? What about the `TypeCanonicalizer`? Looking at e.g. `wasm-fuzzer-common.cc`:\n```\n  GetTypeCanonicalizer()-\u003eEmptyStorageForTesting();\n  WasmEngine::ClearWasmCanonicalTypesForTesting(i_isolate);\n ```\nThe isolate and the `TypeCanonicalizer` have to be in sync, so I guess, it would make sense to put it there. WDYT?",
      "parentUuid": "b64ebca8_833af18a",
      "range": {
        "startLine": 413,
        "startChar": 0,
        "endLine": 414,
        "endChar": 65
      },
      "revId": "73da750eaa9e5a82b084186f6d14822bebe21b6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92c5de7c_5270c5c5",
        "filename": "src/wasm/wasm-engine.h",
        "patchSetId": 1
      },
      "lineNbr": 414,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-08-29T15:23:50Z",
      "side": 1,
      "message": "Yes, type canonalizer would also work for me.",
      "parentUuid": "201e4ec8_7f818d14",
      "range": {
        "startLine": 413,
        "startChar": 0,
        "endLine": 414,
        "endChar": 65
      },
      "revId": "73da750eaa9e5a82b084186f6d14822bebe21b6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05affebb_fc9d2970",
        "filename": "src/wasm/wasm-engine.h",
        "patchSetId": 1
      },
      "lineNbr": 414,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-30T08:18:44Z",
      "side": 1,
      "message": "Great, done.",
      "parentUuid": "92c5de7c_5270c5c5",
      "range": {
        "startLine": 413,
        "startChar": 0,
        "endLine": 414,
        "endChar": 65
      },
      "revId": "73da750eaa9e5a82b084186f6d14822bebe21b6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eae35182_193544e1",
        "filename": "src/wasm/wasm-objects.cc",
        "patchSetId": 1
      },
      "lineNbr": 1756,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-22T16:06:43Z",
      "side": 1,
      "message": "This is where I feel this gets hard to grasp: `wasm::WasmEngine::EnsureWasmCanonicalRttsSize` will grow `js_to_wasm_wrappers()` that we access here. I\u0027d never guess that there would be any connection between these two statements. That wasn\u0027t obvious previously either, but it still had the `heap` as a common denominator.",
      "revId": "73da750eaa9e5a82b084186f6d14822bebe21b6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5bd486c0_70e06aed",
        "filename": "src/wasm/wasm-objects.cc",
        "patchSetId": 1
      },
      "lineNbr": 1756,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2024-08-23T08:28:44Z",
      "side": 1,
      "message": "I am not sure having `Heap` as the dumping ground makes this any better. If anything it suggests that there\u0027s something in common when there isnt.",
      "parentUuid": "eae35182_193544e1",
      "revId": "73da750eaa9e5a82b084186f6d14822bebe21b6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d5e87e2_4f73e73b",
        "filename": "src/wasm/wasm-objects.cc",
        "patchSetId": 1
      },
      "lineNbr": 1756,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2024-08-26T08:25:41Z",
      "side": 1,
      "message": "you could make it look more related by a) making this return the `js_to_wasm_wrappers` (maybe even `js_to_wasm_wrappers()-\u003eGet(wrapper_index)`), or b) having a WasmEngine helper to get the wrapper which is somehow named to include the relation to rtt length.",
      "parentUuid": "5bd486c0_70e06aed",
      "revId": "73da750eaa9e5a82b084186f6d14822bebe21b6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52f0d45b_c6e7bb41",
        "filename": "src/wasm/wasm-objects.cc",
        "patchSetId": 1
      },
      "lineNbr": 1756,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-08-26T09:48:36Z",
      "side": 1,
      "message": "As mentioned above, I think this can be fixed by renaming `EnsureWasmCanonicalRttsSize` to something that describes better what this method does. Something like `PrepareForCanonicalTypeId` or something in that direction.",
      "parentUuid": "7d5e87e2_4f73e73b",
      "revId": "73da750eaa9e5a82b084186f6d14822bebe21b6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a46e60ee_2d89f39b",
        "filename": "src/wasm/wasm-objects.cc",
        "patchSetId": 1
      },
      "lineNbr": 1756,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-29T09:36:07Z",
      "side": 1,
      "message": "Done, thanks for the suggested name! ðŸ˜Š\nI\u0027ll also change the semantics though by doing the `+ 1` inside the implementation and changing the parameter from `length` to `id` then as it might otherwise be confusing and a future off-by-one error.",
      "parentUuid": "52f0d45b_c6e7bb41",
      "revId": "73da750eaa9e5a82b084186f6d14822bebe21b6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}