{
  "comments": [
    {
      "key": {
        "uuid": "167e078d_fc181a47",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1357035
      },
      "writtenOn": "2020-07-24T17:58:17Z",
      "side": 1,
      "message": "PTAL",
      "revId": "9c54f9775785739f4dbadc86ed863390ef5abc37",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "383b0132_f8b4dcc8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-07-24T18:05:10Z",
      "side": 1,
      "message": "lgtm!",
      "revId": "9c54f9775785739f4dbadc86ed863390ef5abc37",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "06bbcb3e_e1a0ab57",
        "filename": "src/heap/allocation-observer.cc",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-07-24T18:05:10Z",
      "side": 1,
      "message": "I think DCHECK_LE(allocated, next_counter_ - current_counter_) would work here.",
      "range": {
        "startLine": 39,
        "startChar": 2,
        "endLine": 42,
        "endChar": 64
      },
      "revId": "9c54f9775785739f4dbadc86ed863390ef5abc37",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "443b7d7b_b5822d58",
        "filename": "src/heap/allocation-observer.cc",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-07-24T18:05:10Z",
      "side": 1,
      "message": "DCHECK_GT(object_size, next_counter - current_counter_);",
      "range": {
        "startLine": 52,
        "startChar": 2,
        "endLine": 52,
        "endChar": 3
      },
      "revId": "9c54f9775785739f4dbadc86ed863390ef5abc37",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f016178_6e554364",
        "filename": "src/heap/allocation-observer.cc",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1357035
      },
      "writtenOn": "2020-07-24T18:38:28Z",
      "side": 1,
      "message": "I guess this depends whether we want to invoke NotifyObject for recalculating next_counter_ as well. E.g. call it after AddAllocationObserver or ResumeAllocationObservers. What do you think?",
      "parentUuid": "443b7d7b_b5822d58",
      "range": {
        "startLine": 52,
        "startChar": 2,
        "endLine": 52,
        "endChar": 3
      },
      "revId": "9c54f9775785739f4dbadc86ed863390ef5abc37",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e604f7bf_4aa652b1",
        "filename": "src/heap/allocation-observer.cc",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-07-24T18:47:01Z",
      "side": 1,
      "message": "At that point we don\u0027t have an object to report, right?\n\nSo it seems there should be separate functions to recompute the next_counter_.\n\nWhen we add a new allocation observer, then we need to take into account its bytes_to_next_step:\nnext_counter_ \u003d current_counter_ + std::max(next_counter_ - current_counter_, new_observer-\u003ebytes_to_next_step());\n\nWhen we resume allocation observers then we don\u0027t have to query their bytes_to_next_step at all because we now how many bytes were left until the next_counter_ when we pause the observers.",
      "parentUuid": "8f016178_6e554364",
      "range": {
        "startLine": 52,
        "startChar": 2,
        "endLine": 52,
        "endChar": 3
      },
      "revId": "9c54f9775785739f4dbadc86ed863390ef5abc37",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "001278db_aaed7988",
        "filename": "src/heap/allocation-observer.cc",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1357035
      },
      "writtenOn": "2020-07-24T19:07:20Z",
      "side": 1,
      "message": "Right there is no object to report, the old allocation observer simply reports null in those casse. Agreed, separate functions seem clearer. We could then have DCHECK_NOT_NULL(soon_object) in NotifyObject as well.",
      "parentUuid": "e604f7bf_4aa652b1",
      "range": {
        "startLine": 52,
        "startChar": 2,
        "endLine": 52,
        "endChar": 3
      },
      "revId": "9c54f9775785739f4dbadc86ed863390ef5abc37",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}