{
  "comments": [
    {
      "key": {
        "uuid": "98891d5c_fd6b9449",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 22,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-09-02T06:14:18Z",
      "side": 1,
      "message": "Wow.. Out of curiosity where does this pattern occur?",
      "revId": "77749fdf6928d6ad2f3289a602d7a73529ce00f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0684906c_8ed038e7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 22,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2020-09-02T16:10:30Z",
      "side": 1,
      "message": "I haven\u0027t looked at the source code, but here\u0027s a very rough and simplified approximation:\n\n  uint32_t index \u003d 0;\n  if (something) {\n    index \u003d some_storage[some_location];\n  }\n  while (true) {\n    uint16_t opcode \u003d instructions[index];\n    switch (opcode) {\n      case 0:\n        // Handle the op...\n        index +\u003d 2;\n        break;\n      case 1:\n        // Handle the op...\n        index +\u003d 3;\n        break;\n      // etc...\n    }\n  }\n\nPretty much what you\u0027d imagine for a loop-and-switch interpreter. It might start at zero, or it might start at some value fetched from memory, and in the loop we adjust it with simple 32-bit arithmetic.\n\nThe schedule for instructions[index] looks like this:\n\n  2312: ChangeUint32ToUint64(247)\n  265: ProtectedLoad[kRepWord16|kTypeUint32](253, 2312, 263, 261)\n\nI might guess that the ChangeUint32ToUint64 node came from WasmGraphBuilder::BoundsCheckMem, which does:\n\n  index \u003d Uint32ToUintptr(index);\n\nHowever, I must be missing something, because the output of node 2312 is not just used on the next line; it\u0027s used all over. Here\u0027s an example, where we add some offsets to load operand data for the bytecode:\n\n  20051: Int64Add(253, 950)\n  19748: Int64Add(253, 24)\n  1012: ProtectedLoad[kRepWord32|kTypeInt32](19748, 2312, 265, 284)\n  1016: ProtectedLoad[kRepWord16|kTypeUint32](20051, 2312, 1012, 284)\n\nPerhaps there is some code de-duplicating nodes for pure operators, but I can\u0027t immediately see how it works. The end result is that we have equivalent values from nodes 247 and 2312 which are both live for pretty much the whole loop, which is an increase in register pressure and causes an extra spill in the hot part of the function.",
      "parentUuid": "98891d5c_fd6b9449",
      "revId": "77749fdf6928d6ad2f3289a602d7a73529ce00f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e742d0a7_b67079ff",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 22,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2020-09-02T17:16:56Z",
      "side": 1,
      "message": "Correction: this causes an extra two spill moves in the hot part of the function: one to make a register available for the output of node 2312, and a second one to save it away for later.",
      "parentUuid": "0684906c_8ed038e7",
      "revId": "77749fdf6928d6ad2f3289a602d7a73529ce00f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "81e0e6e9_96ecbb90",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2020-08-31T22:19:28Z",
      "side": 1,
      "message": "Hello, could you please take a look at this change? Thanks!",
      "revId": "77749fdf6928d6ad2f3289a602d7a73529ce00f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1950a80b_43fcfb58",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1249724
      },
      "writtenOn": "2020-08-31T22:44:55Z",
      "side": 1,
      "message": "\u003e Patch Set 7:\n\u003e \n\u003e (3 comments)\n\u003e \n\u003e This change is ready for review.\n\nThanks for this patch Seth, I am not an expert in the instruction-selector area at all, so I will defer to Bill on this.\n\nBill, can you help with reviewing this patch please?",
      "revId": "77749fdf6928d6ad2f3289a602d7a73529ce00f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "49350d57_d924531d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1001213
      },
      "writtenOn": "2020-09-01T21:49:55Z",
      "side": 1,
      "message": "Adding Tobias and Jakob, since the computation for Phis is substantial, for their take on whether this will pay off. ",
      "revId": "77749fdf6928d6ad2f3289a602d7a73529ce00f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a0b7619_75ca4bd2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-09-02T06:14:18Z",
      "side": 1,
      "message": "A couple of comments, Tobias ptal as well.",
      "revId": "77749fdf6928d6ad2f3289a602d7a73529ce00f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52d5d34f_4ae196a6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2020-09-02T16:10:30Z",
      "side": 1,
      "message": "Thanks, Bill. My impression so far is that this optimization is roughly zero-cost: it makes the instruction scheduler work harder so that the register allocator can do less work. I\u0027m not super familiar with using --runtime-call-stats and I don\u0027t have a great deal of faith in my data, but I collected data from a bunch of Octane runs with and without this change. At the median, the time spent in OptimizeBackgroundSelectInstructions increased about 1% (3 ms), and the time spent in OptimizeBackgroundAllocateGeneralRegisters decreased about 0.5% (also 3 ms).",
      "parentUuid": "49350d57_d924531d",
      "revId": "77749fdf6928d6ad2f3289a602d7a73529ce00f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0b0a9c2_562c5e7a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2020-09-02T16:10:30Z",
      "side": 1,
      "message": "Thanks for reviewing!",
      "revId": "77749fdf6928d6ad2f3289a602d7a73529ce00f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7e6832e9_6fa8aedc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2020-09-02T17:03:31Z",
      "side": 1,
      "message": "By the way, I also see in the Octane data that Crypto likes this change; it improves by about 7%.",
      "parentUuid": "52d5d34f_4ae196a6",
      "revId": "77749fdf6928d6ad2f3289a602d7a73529ce00f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb9ab9fb_4d614bd3",
        "filename": "src/compiler/backend/instruction-selector.cc",
        "patchSetId": 7
      },
      "lineNbr": 3139,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-09-02T06:14:18Z",
      "side": 1,
      "message": "q: Instead of UNIMPLEMENTED for 32-bit archs, could we actually leave it unimplemented (\u0026 undeclared)?",
      "revId": "77749fdf6928d6ad2f3289a602d7a73529ce00f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb644d25_de068880",
        "filename": "src/compiler/backend/instruction-selector.cc",
        "patchSetId": 7
      },
      "lineNbr": 3139,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2020-09-02T16:10:30Z",
      "side": 1,
      "message": "Sure, good idea.",
      "parentUuid": "eb9ab9fb_4d614bd3",
      "revId": "77749fdf6928d6ad2f3289a602d7a73529ce00f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd9a6edd_c9cdedfd",
        "filename": "src/compiler/backend/instruction-selector.cc",
        "patchSetId": 7
      },
      "lineNbr": 3139,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2020-09-02T17:03:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bb644d25_de068880",
      "revId": "77749fdf6928d6ad2f3289a602d7a73529ce00f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f38eca9_1dc1ae28",
        "filename": "src/compiler/backend/instruction-selector.cc",
        "patchSetId": 7
      },
      "lineNbr": 3141,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2020-08-31T22:19:28Z",
      "side": 1,
      "message": "The recursive implementation in patchset 4 was much more readable, but I assume we\u0027d rather not run the risk of stack overflow when somebody decides to compile an obnoxiously large function. The maximum stack depth in Octane is 72, as a point of reference.",
      "revId": "77749fdf6928d6ad2f3289a602d7a73529ce00f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77dda563_465127f7",
        "filename": "src/compiler/backend/instruction-selector.cc",
        "patchSetId": 7
      },
      "lineNbr": 3141,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-09-02T06:14:18Z",
      "side": 1,
      "message": "Would \"the recursive solution + passing a recursion depth + a bailout to a safe value when max depth is exceeded\" be a good compromise between readability and robustness?\n\nThe impl below does read a bit complex, considering what it wants to achieve is actually pretty simple.",
      "parentUuid": "9f38eca9_1dc1ae28",
      "revId": "77749fdf6928d6ad2f3289a602d7a73529ce00f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4806406e_415f269a",
        "filename": "src/compiler/backend/instruction-selector.cc",
        "patchSetId": 7
      },
      "lineNbr": 3141,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2020-09-02T16:10:30Z",
      "side": 1,
      "message": "I like that idea, thanks.",
      "parentUuid": "77dda563_465127f7",
      "revId": "77749fdf6928d6ad2f3289a602d7a73529ce00f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc946561_8be5f670",
        "filename": "src/compiler/backend/instruction-selector.cc",
        "patchSetId": 7
      },
      "lineNbr": 3141,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2020-09-02T17:03:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4806406e_415f269a",
      "revId": "77749fdf6928d6ad2f3289a602d7a73529ce00f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ffa534b_7e298344",
        "filename": "src/compiler/backend/instruction-selector.cc",
        "patchSetId": 7
      },
      "lineNbr": 3142,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-09-02T06:14:18Z",
      "side": 1,
      "message": "There\u0027s enough going on in this function for a high-level description to be useful here as a comment.",
      "revId": "77749fdf6928d6ad2f3289a602d7a73529ce00f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32d23165_7b280c4c",
        "filename": "src/compiler/backend/instruction-selector.cc",
        "patchSetId": 7
      },
      "lineNbr": 3142,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2020-09-02T17:03:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8ffa534b_7e298344",
      "revId": "77749fdf6928d6ad2f3289a602d7a73529ce00f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8ea2cad_c086dc76",
        "filename": "src/compiler/backend/instruction-selector.h",
        "patchSetId": 7
      },
      "lineNbr": 716,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-09-02T06:14:18Z",
      "side": 1,
      "message": "Short comment how this is used please.",
      "revId": "77749fdf6928d6ad2f3289a602d7a73529ce00f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2816d522_3e5d44de",
        "filename": "src/compiler/backend/instruction-selector.h",
        "patchSetId": 7
      },
      "lineNbr": 716,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2020-09-02T17:03:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d8ea2cad_c086dc76",
      "revId": "77749fdf6928d6ad2f3289a602d7a73529ce00f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "569bb28d_3bedee0f",
        "filename": "src/compiler/backend/x64/instruction-selector-x64.cc",
        "patchSetId": 7
      },
      "lineNbr": 51,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2020-08-31T22:19:28Z",
      "side": 1,
      "message": "Drive-by fix: I\u0027m not aware of any actual problems caused by this code, but I thought it was strange that this check didn\u0027t match the cases in CanBeImmediate.",
      "revId": "77749fdf6928d6ad2f3289a602d7a73529ce00f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fd6671bd_36169336",
        "filename": "src/compiler/backend/x64/instruction-selector-x64.cc",
        "patchSetId": 7
      },
      "lineNbr": 51,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-09-02T06:14:18Z",
      "side": 1,
      "message": "I had to look up what kRelocatableInt32Constant (relocatable / constant sound a bit like opposites to me). Apparently it is a mechanism used by wasm in which values are patched in after codegen.\n\nIn that case, I\u0027m not sure it\u0027s valid to turn it into an immediate(?) Don\u0027t know enough about this codepath to be certain.",
      "parentUuid": "569bb28d_3bedee0f",
      "revId": "77749fdf6928d6ad2f3289a602d7a73529ce00f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4557446_736ed8fc",
        "filename": "src/compiler/backend/x64/instruction-selector-x64.cc",
        "patchSetId": 7
      },
      "lineNbr": 51,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2020-09-02T16:10:30Z",
      "side": 1,
      "message": "Good point, I\u0027ll undo that. I incorrectly assumed that GetImmediateIntegerValue was meant to be safe for any node that returns true from CanBeImmediate based on its usage elsewhere in this file.",
      "parentUuid": "fd6671bd_36169336",
      "revId": "77749fdf6928d6ad2f3289a602d7a73529ce00f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5457e311_8aa4f92f",
        "filename": "src/compiler/backend/x64/instruction-selector-x64.cc",
        "patchSetId": 7
      },
      "lineNbr": 51,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2020-09-02T17:03:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c4557446_736ed8fc",
      "revId": "77749fdf6928d6ad2f3289a602d7a73529ce00f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2323d34_ea20238a",
        "filename": "src/compiler/backend/x64/instruction-selector-x64.cc",
        "patchSetId": 7
      },
      "lineNbr": 55,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-09-02T06:14:18Z",
      "side": 1,
      "message": "NumberConstant contains a double parameter, and we are casting to int64_t below. Is that the intent?",
      "revId": "77749fdf6928d6ad2f3289a602d7a73529ce00f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "613ad5fc_89b7d5a1",
        "filename": "src/compiler/backend/x64/instruction-selector-x64.cc",
        "patchSetId": 7
      },
      "lineNbr": 55,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2020-09-02T16:10:30Z",
      "side": 1,
      "message": "Undoing this, thanks.",
      "parentUuid": "a2323d34_ea20238a",
      "revId": "77749fdf6928d6ad2f3289a602d7a73529ce00f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3035035_0ac5c8d5",
        "filename": "src/compiler/backend/x64/instruction-selector-x64.cc",
        "patchSetId": 7
      },
      "lineNbr": 55,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2020-09-02T17:03:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "613ad5fc_89b7d5a1",
      "revId": "77749fdf6928d6ad2f3289a602d7a73529ce00f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "78bf9871_f0332fd9",
        "filename": "src/compiler/backend/x64/instruction-selector-x64.cc",
        "patchSetId": 7
      },
      "lineNbr": 1358,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-09-02T06:14:18Z",
      "side": 1,
      "message": "q: Why not list opcodes in switch cases as above? Is this a pattern used elsewhere?",
      "revId": "77749fdf6928d6ad2f3289a602d7a73529ce00f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5f719a9_2e17cd74",
        "filename": "src/compiler/backend/x64/instruction-selector-x64.cc",
        "patchSetId": 7
      },
      "lineNbr": 1358,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2020-09-02T16:10:30Z",
      "side": 1,
      "message": "I\u0027ll update to include switch cases, thanks.",
      "parentUuid": "78bf9871_f0332fd9",
      "revId": "77749fdf6928d6ad2f3289a602d7a73529ce00f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba18567d_0cf09b54",
        "filename": "src/compiler/backend/x64/instruction-selector-x64.cc",
        "patchSetId": 7
      },
      "lineNbr": 1358,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2020-09-02T17:03:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b5f719a9_2e17cd74",
      "revId": "77749fdf6928d6ad2f3289a602d7a73529ce00f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0bbd20cf_265941dd",
        "filename": "src/compiler/backend/x64/instruction-selector-x64.cc",
        "patchSetId": 7
      },
      "lineNbr": 1362,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-09-02T06:14:18Z",
      "side": 1,
      "message": "nit: inline into the return statement",
      "revId": "77749fdf6928d6ad2f3289a602d7a73529ce00f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed73dad1_837e6248",
        "filename": "src/compiler/backend/x64/instruction-selector-x64.cc",
        "patchSetId": 7
      },
      "lineNbr": 1362,
      "author": {
        "id": 1325508
      },
      "writtenOn": "2020-09-02T17:03:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0bbd20cf_265941dd",
      "revId": "77749fdf6928d6ad2f3289a602d7a73529ce00f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}