{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1da3fcd0_f425d959",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2024-07-24T14:39:01Z",
      "side": 1,
      "message": "PTAL! :)",
      "revId": "c6e36a8106ed35e6ab6a8e5c5e09672fcb88f9d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e3fccdbd_aa4420b7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-07-24T14:44:22Z",
      "side": 1,
      "message": "I don\u0027t know how many times side-effects in stack checks have hurt us already (both in wasm and js)... ðŸ˜ž",
      "revId": "c6e36a8106ed35e6ab6a8e5c5e09672fcb88f9d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa586f33_f8b92308",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2024-07-24T14:48:33Z",
      "side": 1,
      "message": "Yea, Wasm stack checks currently have CanCallAnything effects, which feels like somebody said \"fuck it, too many bugs, let\u0027s say that stack checks have all side effects possible\" ðŸ˜„\n\nI\u0027m planning to rework loop stack checks a bit later to prevent GCs. To do this, I need to force lazy deopt on debugger interrupts, which I don\u0027t know how to do yet, hence this simpler CL (which should be a reasonable fix in the meantime).\n\nUnfortunately, that won\u0027t work for Wasm though... Well, with deopt support, this might work :)",
      "parentUuid": "e3fccdbd_aa4420b7",
      "revId": "c6e36a8106ed35e6ab6a8e5c5e09672fcb88f9d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "41f9c0a1_259c4869",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-07-24T15:19:11Z",
      "side": 1,
      "message": "\u003e Wasm stack checks currently have CanCallAnything effects\n\nWait what?\nSeems like this was the effects for all stack checks prior to your refactoring here? https://chromium-review.googlesource.com/c/v8/v8/+/5621891\n\nThanks for the pointers, this could potentially have effects on load elimination and other things. Given that the deopt nodes should enable more aggressive optimizations, getting rid of the `CanCallAnything` on each loop iteration could increase the performance improvements for wasm-deopts.\nAlso, this might heavily reduce the benefits from loop peeling, doesn\u0027t it?",
      "parentUuid": "aa586f33_f8b92308",
      "revId": "c6e36a8106ed35e6ab6a8e5c5e09672fcb88f9d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e6cb67b2_7b2c3007",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-07-24T16:52:13Z",
      "side": 1,
      "message": "Hm, so at least playing around with a small test case the `WasmStackCheck` doesn\u0027t seem to prevent loads from wasm struct or loads from wasm array to be eliminated, so maybe it isn\u0027t as bad as I just thought. ðŸ˜Š",
      "parentUuid": "41f9c0a1_259c4869",
      "revId": "c6e36a8106ed35e6ab6a8e5c5e09672fcb88f9d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "If the author is a V8 committer, code review is required from one other committer (see https://v8.dev/docs/become-committer). Otherwise, code review is required from two committers."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "((uploaderin:cria/project-v8-committers AND label:Code-Review\u003dMAX,user\u003dnon_uploader) OR label:Code-Review\u003dMAX,count\u003e\u003d2) AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"((uploaderin:cria/project-v8-committers AND label:Code-Review=MAX,user=non_uploader) OR label:Code-Review=MAX,count>=2) AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader","uploaderin:cria/project-v8-committers"],"failingAtoms":["label:Code-Review=MIN","label:Code-Review=MAX,count>=2"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "c6e36a8106ed35e6ab6a8e5c5e09672fcb88f9d5",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "c6e36a8106ed35e6ab6a8e5c5e09672fcb88f9d5",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "c6e36a8106ed35e6ab6a8e5c5e09672fcb88f9d5",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}