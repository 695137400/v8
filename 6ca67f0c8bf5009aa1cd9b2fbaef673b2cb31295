{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "725e1149_b23f7cd6",
        "filename": "include/v8-inspector.h",
        "patchSetId": 23
      },
      "lineNbr": 263,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2023-06-05T04:53:20Z",
      "side": 1,
      "message": "IMO it might also be worth looking into implementing `operator\u003c` for `StringBuffer`. It\u0027s implemented for the underlying String16 type. If we do that we could pass a const ref `std::map\u003cStringBuffer, StringBuffer\u003e` instead.",
      "range": {
        "startLine": 263,
        "startChar": 12,
        "endLine": 263,
        "endChar": 58
      },
      "revId": "6ca67f0c8bf5009aa1cd9b2fbaef673b2cb31295",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2afedf17_2283556e",
        "filename": "include/v8-inspector.h",
        "patchSetId": 23
      },
      "lineNbr": 263,
      "author": {
        "id": 1440373
      },
      "writtenOn": "2023-06-05T09:54:09Z",
      "side": 1,
      "message": "As discussed offline, `StringBuffer` can be either `StringBuffer16`, `StringBuffer8` or `EmptyStringBuffer`, and comparison is be non-trivial. \n\nLeaving as-is.",
      "parentUuid": "725e1149_b23f7cd6",
      "range": {
        "startLine": 263,
        "startChar": 12,
        "endLine": 263,
        "endChar": 58
      },
      "revId": "6ca67f0c8bf5009aa1cd9b2fbaef673b2cb31295",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1aa7dba_5ffe7b5c",
        "filename": "src/inspector/v8-runtime-agent-impl.cc",
        "patchSetId": 23
      },
      "lineNbr": 245,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2023-06-05T04:53:20Z",
      "side": 1,
      "message": "just `std::map\u003cString16, String16\u003e result;` is enough to call the default constructor",
      "range": {
        "startLine": 245,
        "startChar": 2,
        "endLine": 245,
        "endChar": 71
      },
      "revId": "6ca67f0c8bf5009aa1cd9b2fbaef673b2cb31295",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ddd3f437_8f9cef23",
        "filename": "src/inspector/v8-runtime-agent-impl.cc",
        "patchSetId": 23
      },
      "lineNbr": 245,
      "author": {
        "id": 1440373
      },
      "writtenOn": "2023-06-05T09:54:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f1aa7dba_5ffe7b5c",
      "range": {
        "startLine": 245,
        "startChar": 2,
        "endLine": 245,
        "endChar": 71
      },
      "revId": "6ca67f0c8bf5009aa1cd9b2fbaef673b2cb31295",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54938410_c57b0f54",
        "filename": "src/inspector/v8-runtime-agent-impl.cc",
        "patchSetId": 23
      },
      "lineNbr": 267,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2023-06-05T04:53:20Z",
      "side": 1,
      "message": "The standard way of doing this is in the V8 inspector is to return a `Response` object instead, and return a `Response::ServerError`. We wanna fail the CDP call, not crash the client.\n\nThis means the map is passed via an \"out\" parameter as a std::unique_ptr. That is fine, you can then move it into the \"normal\" map in the caller. This also requires changing `getWrapOptions`.\n\nFor easier reviewability and revertabilty I suggest to split this CL into 3 changes:\n  1) Change `WrapOptions` to std::unique_ptr + const ref for clearer ownership\n  2) Change `getWrapOptions` to return a Response instead and return the result via out paramter\n  3) This CL.",
      "range": {
        "startLine": 265,
        "startChar": 0,
        "endLine": 267,
        "endChar": 20
      },
      "revId": "6ca67f0c8bf5009aa1cd9b2fbaef673b2cb31295",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1f6c3da4_391e8356",
        "filename": "src/inspector/v8-runtime-agent-impl.cc",
        "patchSetId": 23
      },
      "lineNbr": 267,
      "author": {
        "id": 1440373
      },
      "writtenOn": "2023-06-05T09:54:09Z",
      "side": 1,
      "message": "1. crrev.com/c/4584219\n2. crrev.com/c/4584220\n3. crrev.com/c/4582552",
      "parentUuid": "54938410_c57b0f54",
      "range": {
        "startLine": 265,
        "startChar": 0,
        "endLine": 267,
        "endChar": 20
      },
      "revId": "6ca67f0c8bf5009aa1cd9b2fbaef673b2cb31295",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:approval_code-owners"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "6ca67f0c8bf5009aa1cd9b2fbaef673b2cb31295",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "6ca67f0c8bf5009aa1cd9b2fbaef673b2cb31295",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6ca67f0c8bf5009aa1cd9b2fbaef673b2cb31295",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6ca67f0c8bf5009aa1cd9b2fbaef673b2cb31295",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}