{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e3bb22ae_ccd3e339",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2021-04-01T16:48:09Z",
      "side": 1,
      "message": "this should be \"v8:11373\".",
      "range": {
        "startLine": 12,
        "startChar": 5,
        "endLine": 12,
        "endChar": 10
      },
      "revId": "066991dc0319648f8307a0b0e2b7161cce073782",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "97e7cbef_07434923",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1249724
      },
      "writtenOn": "2021-04-01T16:38:02Z",
      "side": 1,
      "message": "Daan, this looks really good! Thanks for the cleanups along the way.\n+clemensb for review and OWNERS, I looked at these changes and they look fine. Not sure if I missed something subtle about isolate-independent stuff here, so please keep an eye out. Thanks!",
      "revId": "066991dc0319648f8307a0b0e2b7161cce073782",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "96857610_a28ad151",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2021-04-01T16:48:09Z",
      "side": 1,
      "message": "Added some minor comments. This generally looks good, but I am also no expert in this area.\nJakob, maybe?",
      "revId": "066991dc0319648f8307a0b0e2b7161cce073782",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a0c524a_5e35cd3f",
        "filename": "src/codegen/external-reference-encoder.cc",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2021-04-01T16:48:09Z",
      "side": 1,
      "message": "Isn\u0027t this a memory leak?",
      "revId": "066991dc0319648f8307a0b0e2b7161cce073782",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a7d1bc0_36d7d2a7",
        "filename": "src/codegen/external-reference-encoder.cc",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-04-06T10:49:35Z",
      "side": 1,
      "message": "+1. In fact I\u0027d suggest approaching this a bit differently. It\u0027d be nice to avoid adding a new ExternalReferenceTable variant that only contains a subset of extrefs.\n\nAll you need is a method that takes an address and returns a name, right? It doesn\u0027t have to be fast since it\u0027s used only for wasm disassembly.\n\nWhat about a static method on ExternalReferenceTable that uses the ref_name_ table (https://source.chromium.org/chromium/chromium/src/+/master:v8/src/codegen/external-reference-table.cc;l\u003d35;drc\u003dba681fdb939007147cdb5ad339be9a5264daa2d3)? The address-index-name translation could happen either through a generated switch using  EXTERNAL_REFERENCE_LIST or one could optimize.",
      "parentUuid": "0a0c524a_5e35cd3f",
      "revId": "066991dc0319648f8307a0b0e2b7161cce073782",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19a4be11_1ca8c63c",
        "filename": "src/codegen/external-reference-table.cc",
        "patchSetId": 1
      },
      "lineNbr": 86,
      "author": {
        "id": 1249724
      },
      "writtenOn": "2021-04-01T16:38:02Z",
      "side": 1,
      "message": "Not sure if we want to call AddBuiltins etc. here too (the ones that don\u0027t need an isolate)",
      "range": {
        "startLine": 86,
        "startChar": 2,
        "endLine": 86,
        "endChar": 24
      },
      "revId": "066991dc0319648f8307a0b0e2b7161cce073782",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f7ba5d6_b8d5800b",
        "filename": "src/codegen/external-reference.h",
        "patchSetId": 1
      },
      "lineNbr": 353,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2021-04-01T16:48:09Z",
      "side": 1,
      "message": "This undef\u0027s the wrong macro. I would actually prefer just using COUNT_EXTERNAL_REFERENCE for both constants, and only undef\u0027ing it here.",
      "revId": "066991dc0319648f8307a0b0e2b7161cce073782",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}