{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5958c7b7_6e707e72",
        "filename": "src/heap/local-heap.cc",
        "patchSetId": 2
      },
      "lineNbr": 375,
      "author": {
        "id": 1357035
      },
      "writtenOn": "2022-11-16T10:01:18Z",
      "side": 1,
      "message": "I think it\u0027s safer to do this before setting the Parked state above. Otherwise there is no guarantee that the thread that requests the safepoint sees the most up-to-date context after seeing that this thread is Parked.",
      "revId": "4afb216a5cf3ad73b0227cc307de67c84a35436f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "61a8e33c_3b4a2b9a",
        "filename": "src/heap/local-heap.cc",
        "patchSetId": 2
      },
      "lineNbr": 375,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2022-11-16T11:25:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5958c7b7_6e707e72",
      "revId": "4afb216a5cf3ad73b0227cc307de67c84a35436f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c74b24b_6029f002",
        "filename": "src/heap/local-heap.cc",
        "patchSetId": 2
      },
      "lineNbr": 376,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2022-11-16T08:26:22Z",
      "side": 1,
      "message": "Why only main thread?",
      "range": {
        "startLine": 376,
        "startChar": 8,
        "endLine": 376,
        "endChar": 22
      },
      "revId": "4afb216a5cf3ad73b0227cc307de67c84a35436f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aac13ea9_53151045",
        "filename": "src/heap/local-heap.cc",
        "patchSetId": 2
      },
      "lineNbr": 376,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2022-11-16T09:31:46Z",
      "side": 1,
      "message": "Initially we had said that we don\u0027t care about background threads, as they do not contain interesting pointers for CSS. I\u0027m adding Dominik for discussing this again.",
      "parentUuid": "6c74b24b_6029f002",
      "range": {
        "startLine": 376,
        "startChar": 8,
        "endLine": 376,
        "endChar": 22
      },
      "revId": "4afb216a5cf3ad73b0227cc307de67c84a35436f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f45fe447_a79d2c2f",
        "filename": "src/heap/parked-scope.h",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1357035
      },
      "writtenOn": "2022-11-16T10:01:18Z",
      "side": 1,
      "message": "Would be nice if we could do this as part of Park(). In most cases we invoke Park() from ParkedScope but I know of a manual Unpark() as well, so it would feel more future-proof to me when ParkedScope would only invoke Park()/Unpark() without doing anything else.",
      "revId": "4afb216a5cf3ad73b0227cc307de67c84a35436f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4e73d71_0afecb5a",
        "filename": "src/heap/parked-scope.h",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2022-11-16T11:25:45Z",
      "side": 1,
      "message": "The main reason it\u0027s in the constructor of `ParkedScope` (which is inlined) is that this will set the marker inside the frame that contains the `ParkedScope` object (assuming such objects are stack-allocated). If we move it to `ParkSlowPath`, this will return and unroll the stack after we set the marker. I don\u0027t think we want that. We could explicitly pass the intended value of the marker as a parameter, for the case of manual `Park`.\n\nAlternatively, for the time being, there are no manual `Park/Unpark` invocations, just from `ParkedScope` and `UnparkedScope`. Given that the methods are private, we could probably add a comment saying that a `SaveStackContextScope` should be used around `Park/Unpark`, if they are ever used manually.",
      "parentUuid": "f45fe447_a79d2c2f",
      "revId": "4afb216a5cf3ad73b0227cc307de67c84a35436f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f153d8f_127a821a",
        "filename": "src/heap/parked-scope.h",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1357035
      },
      "writtenOn": "2022-11-16T13:45:34Z",
      "side": 1,
      "message": "When it\u0027s need, I think having that argument would be nice in order to not forget about that in the future.",
      "parentUuid": "b4e73d71_0afecb5a",
      "revId": "4afb216a5cf3ad73b0227cc307de67c84a35436f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c900e16b_94f2f2e9",
        "filename": "src/heap/parked-scope.h",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2022-11-16T13:56:13Z",
      "side": 1,
      "message": "I\u0027m copying here Omer\u0027s comment from crrev.com/c/4017512.\nI think he\u0027s right and possibly the solution is what Dominik already suggested.\n\n\u003e I think this implementation needs revising. Specifically, I think you need to maintain a stack of contexts, such that each call to SaveContext pushes a new context to the stack, and calling ClearContext restores the previous context.\n\u003e\n\u003e Assume the following scenario: Thread A enters a ParkedScope and saves a context. It then enters an UnparkedScope and is allowed to touch the heap again. While thread A is in the UnparkedScope, thread B triggers a shared GC and forces thread A into a safepoint.\n\u003e In the current implementation, CSS would miss anything written to stack after thread A entered the UnparkedScope.",
      "parentUuid": "2f153d8f_127a821a",
      "revId": "4afb216a5cf3ad73b0227cc307de67c84a35436f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ed06e70_c92b7665",
        "filename": "src/heap/parked-scope.h",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2022-11-16T14:47:38Z",
      "side": 1,
      "message": "The solution is not just to move the call to SaveContext into Park. Instead of keeping a single context (without updating it on nested calls to SaveContext) you need to maintain a stack of contexts, push a new one on SaveContext and restore the previous one on ClearContext. A single context would not suffice imo.\nCSS can always use the top context in that stack.",
      "parentUuid": "c900e16b_94f2f2e9",
      "revId": "4afb216a5cf3ad73b0227cc307de67c84a35436f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79bc8299_31036c25",
        "filename": "src/heap/parked-scope.h",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2022-11-16T15:29:45Z",
      "side": 1,
      "message": "`ParkedScope` and `UnparkedScope` are implemented by calling `Park` and `Unpark`; their nesting is not important. If the former saves the context and the latter clears it, I think we\u0027re good.\n\nIn your scenario:\n1. A enters a `ParkedScope`, saves the context and parks.\n2. A enters an `UnparkedScope`, unparks and clears the context.\n3. B triggers a shared GC.\n4. A is forced into a safepoint and saves the context.\n\nCSS will see the second saved context, which is the right one.\nThe first one is obsolete anyway and will never be needed.\n\nI don\u0027t think we need a stack.",
      "parentUuid": "0ed06e70_c92b7665",
      "revId": "4afb216a5cf3ad73b0227cc307de67c84a35436f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}