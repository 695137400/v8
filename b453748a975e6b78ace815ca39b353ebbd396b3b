{
  "comments": [
    {
      "key": {
        "uuid": "33b22b93_dcc0fd50",
        "filename": "src/ast/scopes.h",
        "patchSetId": 17
      },
      "lineNbr": 1092,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2019-09-17T14:38:55Z",
      "side": 1,
      "message": "From reading this function it wasn\u0027t clear to me why we Force context allocation on the receiver when UsesSuperCallReference (CallsSuper? HasSuperCall?). See it\u0027s probably my fault because of the UsesThis() above.\n\nWhat about adding a helper\n\nvoid ContextAllocateReceiver() {\n  DCHECK_NE(this, GetReceiverScope());\n  GetReceiverScope()-\u003ereceiver()-\u003eForceContextAllocation();\n}\n\nremoving UsesThis() and replacing its call with set_has_this_reference() and ContextAllocateReceiver(); and replacing UsesSuperCallReference also with ContextAllocateReceiver();\n\nBasically it\u0027s confusing since you here lose the context that this is really only there for ArrowHeads.",
      "revId": "b453748a975e6b78ace815ca39b353ebbd396b3b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "568e6cd7_66f74d7e",
        "filename": "src/ast/scopes.h",
        "patchSetId": 17
      },
      "lineNbr": 1092,
      "author": {
        "id": 1358537
      },
      "writtenOn": "2019-09-19T08:02:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "33b22b93_dcc0fd50",
      "revId": "b453748a975e6b78ace815ca39b353ebbd396b3b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55358468_49ced01b",
        "filename": "src/parsing/parser-base.h",
        "patchSetId": 17
      },
      "lineNbr": 992,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2019-09-17T14:38:55Z",
      "side": 1,
      "message": "Do we need an additional bit beyond receiver_scope-\u003ereceiver()-\u003eis_used()?",
      "revId": "b453748a975e6b78ace815ca39b353ebbd396b3b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5151bab8_40d93e71",
        "filename": "src/parsing/parser-base.h",
        "patchSetId": 17
      },
      "lineNbr": 992,
      "author": {
        "id": 1358537
      },
      "writtenOn": "2019-09-19T08:02:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "55358468_49ced01b",
      "revId": "b453748a975e6b78ace815ca39b353ebbd396b3b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4dc96ea_5f617268",
        "filename": "src/parsing/parser-base.h",
        "patchSetId": 17
      },
      "lineNbr": 4745,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2019-09-17T14:38:55Z",
      "side": 1,
      "message": "I\u0027m a little worried that this will impact the performance of any statement list, which is somewhat performance critical. What about templatizing it with StatementListType and having a kDerivedConstructorTopLevel where we do the check below? (In that case we can even drop the \"use strict\" scanning since we\u0027re already string ... :))",
      "revId": "b453748a975e6b78ace815ca39b353ebbd396b3b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "04760c25_52426aa1",
        "filename": "src/parsing/parser-base.h",
        "patchSetId": 17
      },
      "lineNbr": 4745,
      "author": {
        "id": 1358537
      },
      "writtenOn": "2019-09-19T08:02:19Z",
      "side": 1,
      "message": "I just made a regular function. Please let me know if you would prefer something templated.",
      "parentUuid": "a4dc96ea_5f617268",
      "revId": "b453748a975e6b78ace815ca39b353ebbd396b3b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0996b716_3d12b66f",
        "filename": "src/parsing/parser-base.h",
        "patchSetId": 17
      },
      "lineNbr": 4801,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2019-09-17T14:38:55Z",
      "side": 1,
      "message": "Won\u0027t you already fully support doing this for any statement in the list rather than the first, since you simply don\u0027t want to see a \"this\" use before the super statement?\n\nI guess doing a precheck supporting only the first statement is faster, but possibly unexpected. No strong opinions though.",
      "revId": "b453748a975e6b78ace815ca39b353ebbd396b3b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff25686e_26d247d4",
        "filename": "src/parsing/parser-base.h",
        "patchSetId": 17
      },
      "lineNbr": 4801,
      "author": {
        "id": 1358537
      },
      "writtenOn": "2019-09-19T08:02:19Z",
      "side": 1,
      "message": "I was worried about performance impact, but now that we only do this for top level statements in a derived constructor it definitely makes sense to check more frequently.",
      "parentUuid": "0996b716_3d12b66f",
      "revId": "b453748a975e6b78ace815ca39b353ebbd396b3b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ab26cac_d1a62cc8",
        "filename": "src/parsing/parser-base.h",
        "patchSetId": 17
      },
      "lineNbr": 4807,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2019-09-17T09:11:12Z",
      "side": 1,
      "message": "ParseSuperExpression?",
      "range": {
        "startLine": 4807,
        "startChar": 25,
        "endLine": 4807,
        "endChar": 40
      },
      "revId": "b453748a975e6b78ace815ca39b353ebbd396b3b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b25a262_657a068b",
        "filename": "src/parsing/parser-base.h",
        "patchSetId": 17
      },
      "lineNbr": 4807,
      "author": {
        "id": 1358537
      },
      "writtenOn": "2019-09-17T11:28:28Z",
      "side": 1,
      "message": "I am not sure I can? ParseSuperExpression actually just parses the \u0027super\u0027 keyword I think? I would still need to handle the (...). Am I missing something?",
      "parentUuid": "5ab26cac_d1a62cc8",
      "range": {
        "startLine": 4807,
        "startChar": 25,
        "endLine": 4807,
        "endChar": 40
      },
      "revId": "b453748a975e6b78ace815ca39b353ebbd396b3b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d389e44b_b10c7dcb",
        "filename": "src/parsing/parser-base.h",
        "patchSetId": 17
      },
      "lineNbr": 4807,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2019-09-19T08:40:47Z",
      "side": 1,
      "message": "You\u0027re not missing anything, I am :)",
      "parentUuid": "6b25a262_657a068b",
      "range": {
        "startLine": 4807,
        "startChar": 25,
        "endLine": 4807,
        "endChar": 40
      },
      "revId": "b453748a975e6b78ace815ca39b353ebbd396b3b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}