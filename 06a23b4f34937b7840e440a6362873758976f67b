{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0cb8f8b2_46a92434",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 25
      },
      "lineNbr": 0,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-06-11T10:40:15Z",
      "side": 1,
      "message": "Looking great generally, thanks for adding all these tests.\n\nThere are some issues still around bounds checks, seems like we also miss test coverage on that. Plus a few minur comments.",
      "revId": "06a23b4f34937b7840e440a6362873758976f67b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a02e183_aca45248",
        "filename": "src/builtins/wasm.tq",
        "patchSetId": 25
      },
      "lineNbr": 275,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-06-11T10:40:15Z",
      "side": 1,
      "message": "I think this check is semantically incorrect. If you first convert the `intptr` to `uint32` and then do the bounds-check on the `uint32`, you lose the upper word on 64-bit architectures. Can you add a test which uses and index of `1\u003c\u003c32`? That would be truncated to `0`, and the check would pass even though it shouldn\u0027t.\n\nYou would instead need to convert the `entriesCount` to `intptr` and then compare that against `index`.\n\nSame for the other builtins below.",
      "revId": "06a23b4f34937b7840e440a6362873758976f67b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a81e34f_8a602fa8",
        "filename": "src/compiler/wasm-compiler.cc",
        "patchSetId": 25
      },
      "lineNbr": 2975,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-06-11T10:40:15Z",
      "side": 1,
      "message": "This will sign-extend, we should zero-extend instead, so use `ChangeUint32ToUint64`. It does not make a difference in practice because the table size is bounded to 10 million, but it would be cleaner to work with unsigned values consistently.",
      "range": {
        "startLine": 2975,
        "startChar": 47,
        "endLine": 2975,
        "endChar": 65
      },
      "revId": "06a23b4f34937b7840e440a6362873758976f67b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b66c6e36_6ec870d6",
        "filename": "src/compiler/wasm-compiler.cc",
        "patchSetId": 25
      },
      "lineNbr": 5424,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-06-11T10:40:15Z",
      "side": 1,
      "message": "Ideally, we would emit a single `TableTypeToUintPtrOrOOBTrap` call. That would result in smaller graphs because we would have a single `TrapIf` node that uses the combined high words of dst, src, and size.\nAs this is TurboFan only, and will be removed soon again, I think it\u0027s enough to add a TODO to merge the three if possible. That\u0027s a TODO which will probably never be addressed, it just documents that this could be done better.",
      "revId": "06a23b4f34937b7840e440a6362873758976f67b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d4ab81c_3f266b5c",
        "filename": "src/compiler/wasm-compiler.cc",
        "patchSetId": 25
      },
      "lineNbr": 5469,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-06-11T10:40:15Z",
      "side": 1,
      "message": "These two can be trivally combined by just passing `{\u0026start, \u0026count}` as second argument.",
      "range": {
        "startLine": 5468,
        "startChar": 0,
        "endLine": 5469,
        "endChar": 68
      },
      "revId": "06a23b4f34937b7840e440a6362873758976f67b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2bcf2ba8_07e750a5",
        "filename": "src/compiler/wasm-compiler.h",
        "patchSetId": 25
      },
      "lineNbr": 765,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-06-11T10:40:15Z",
      "side": 1,
      "message": "This should be `is_table64`.",
      "range": {
        "startLine": 765,
        "startChar": 40,
        "endLine": 765,
        "endChar": 51
      },
      "revId": "06a23b4f34937b7840e440a6362873758976f67b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "283e57bc_35affd9b",
        "filename": "src/wasm/baseline/liftoff-compiler.cc",
        "patchSetId": 25
      },
      "lineNbr": 5818,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-06-11T10:40:15Z",
      "side": 1,
      "message": "You mean `PopIndexToVarState()` here.",
      "revId": "06a23b4f34937b7840e440a6362873758976f67b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcc136fa_a9f4a0b8",
        "filename": "src/wasm/baseline/liftoff-compiler.cc",
        "patchSetId": 25
      },
      "lineNbr": 5825,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-06-11T10:40:15Z",
      "side": 1,
      "message": "Registers are passed by value. They are a single machine word.",
      "revId": "06a23b4f34937b7840e440a6362873758976f67b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5af66d70_23cef91d",
        "filename": "src/wasm/baseline/liftoff-compiler.cc",
        "patchSetId": 25
      },
      "lineNbr": 5827,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-06-11T10:40:15Z",
      "side": 1,
      "message": "Let\u0027s write this such that the compiler can infer that this is a no-op on 64-bit. This would also avoid the check for `no_reg` before each call.\n\nLike:\n\n    if constexpr (Is64()) {\n      DCHECK_EQ(no_reg, high_word \u003d\u003d no_reg);\n      return;\n    }\n    if (high_word \u003d\u003d no_reg) return;\n...",
      "revId": "06a23b4f34937b7840e440a6362873758976f67b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23a98e39_dee0f900",
        "filename": "src/wasm/baseline/liftoff-compiler.cc",
        "patchSetId": 25
      },
      "lineNbr": 5833,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-06-11T10:40:15Z",
      "side": 1,
      "message": "Clearing pinned registers is dangerous, because of register aliasing. In this case it is fine though as the `high_word` is always a previously-unpinned and otherwise unused register.\nLet\u0027s add a little comment:\n\n    // Clearing `high_word` is safe because this never aliases with another in-use register, see `PopIndexToVarState`.",
      "revId": "06a23b4f34937b7840e440a6362873758976f67b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2148323_5d423a48",
        "filename": "src/wasm/baseline/liftoff-compiler.cc",
        "patchSetId": 25
      },
      "lineNbr": 5917,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-06-11T10:40:15Z",
      "side": 1,
      "message": "There\u0027s a type (\"reflected\"), and lets be more clear with the wording and the purpose, like\n\n   // TODO(crbug.com/41480344): The stack state in the OOL code should reflect the state before popping any values (for a better debugging experience).",
      "revId": "06a23b4f34937b7840e440a6362873758976f67b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2d30eb8_26299f1e",
        "filename": "src/wasm/baseline/liftoff-compiler.cc",
        "patchSetId": 25
      },
      "lineNbr": 5986,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-06-11T10:40:15Z",
      "side": 1,
      "message": "Same here.",
      "revId": "06a23b4f34937b7840e440a6362873758976f67b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "baf88cf6_608fe7a5",
        "filename": "src/wasm/baseline/liftoff-compiler.cc",
        "patchSetId": 25
      },
      "lineNbr": 6031,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-06-11T10:40:15Z",
      "side": 1,
      "message": "And here.",
      "revId": "06a23b4f34937b7840e440a6362873758976f67b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb062a07_bcb6c077",
        "filename": "src/wasm/baseline/liftoff-compiler.cc",
        "patchSetId": 25
      },
      "lineNbr": 6187,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-06-11T10:40:15Z",
      "side": 1,
      "message": "We are after the builtin call, so the `pinned` set is irrelevant here. As all registers are free at this point, you can just do `result64 \u003d LiftoffRegister::ForPair(kReturnRegister0, kReturnRegister1);`.",
      "revId": "06a23b4f34937b7840e440a6362873758976f67b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f3fd015_8c7903fc",
        "filename": "src/wasm/baseline/liftoff-compiler.cc",
        "patchSetId": 25
      },
      "lineNbr": 6222,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-06-11T10:40:15Z",
      "side": 1,
      "message": "Similar here. We should just take the existing scratch register for the low word, and get a new one for the high word. I.e. `result64 \u003d LiftoffRegister::ForPair(result.gp(), __ GetUnusedRegister(kGpReg, pinned));`.",
      "revId": "06a23b4f34937b7840e440a6362873758976f67b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0233c90f_08a08f32",
        "filename": "src/wasm/baseline/liftoff-compiler.cc",
        "patchSetId": 25
      },
      "lineNbr": 8167,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-06-11T10:40:15Z",
      "side": 1,
      "message": "Don\u0027t you like ternary operations? This looks semantically identical to the code before the change, or do I miss something?",
      "range": {
        "startLine": 8164,
        "startChar": 0,
        "endLine": 8167,
        "endChar": 5
      },
      "revId": "06a23b4f34937b7840e440a6362873758976f67b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0cab760_26a3b188",
        "filename": "src/wasm/baseline/liftoff-compiler.cc",
        "patchSetId": 25
      },
      "lineNbr": 8414,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-06-11T10:40:15Z",
      "side": 1,
      "message": "This does not work if `kIntPtrKind` is not equal to `kI32`. We might not have test coverage for this as it\u0027s currently being developed. I think the `vectorIndex` argument to `CallIndirectIC` can just stay an int32, as it\u0027s bounded by the maximum function body size.",
      "revId": "06a23b4f34937b7840e440a6362873758976f67b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec1df6d4_b8fe71db",
        "filename": "src/wasm/module-instantiate.cc",
        "patchSetId": 25
      },
      "lineNbr": 3109,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-06-11T10:40:15Z",
      "side": 1,
      "message": "Please refactor the code to avoid this duplication. Up to the `to_value(result)` call, it\u0027s exactly the same as above except for the `kWasmI32` vs `kWasmI64` difference in the argument.",
      "range": {
        "startLine": 3105,
        "startChar": 0,
        "endLine": 3109,
        "endChar": 46
      },
      "revId": "06a23b4f34937b7840e440a6362873758976f67b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "309b4787_16e7c2b1",
        "filename": "src/wasm/turboshaft-graph-interface.cc",
        "patchSetId": 25
      },
      "lineNbr": 3928,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-06-11T10:40:15Z",
      "side": 1,
      "message": "nit: `DCHECK_GE`.",
      "revId": "06a23b4f34937b7840e440a6362873758976f67b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3fc247a5_3149088f",
        "filename": "src/wasm/turboshaft-graph-interface.cc",
        "patchSetId": 25
      },
      "lineNbr": 3977,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-06-11T10:40:15Z",
      "side": 1,
      "message": "What\u0027s the purpose of this DCHECK? (also: `DCHECK_GE` is we want to keep it).",
      "revId": "06a23b4f34937b7840e440a6362873758976f67b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f9e6e23_69ad406a",
        "filename": "src/wasm/turboshaft-graph-interface.cc",
        "patchSetId": 25
      },
      "lineNbr": 4023,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-06-11T10:40:15Z",
      "side": 1,
      "message": "We should add a DCHECK so we do not forget to update this code once we allow copying between different table types: `DCHECK_EQ(table_src-\u003eis_table64, table_dst-\u003eis_table64);`.",
      "revId": "06a23b4f34937b7840e440a6362873758976f67b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec4f8e9b_704ccd2a",
        "filename": "src/wasm/turboshaft-graph-interface.cc",
        "patchSetId": 25
      },
      "lineNbr": 4027,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-06-11T10:40:15Z",
      "side": 1,
      "message": "Same question.",
      "revId": "06a23b4f34937b7840e440a6362873758976f67b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39b0e84b_55ef987f",
        "filename": "src/wasm/turboshaft-graph-interface.cc",
        "patchSetId": 25
      },
      "lineNbr": 4044,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-06-11T10:40:15Z",
      "side": 1,
      "message": "Here the DCHECK makes sense because we `UntagSmi` the result of the builtin call below. But please use `DCHECK_GE`.",
      "revId": "06a23b4f34937b7840e440a6362873758976f67b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fa6ac72_db09383d",
        "filename": "src/wasm/turboshaft-graph-interface.cc",
        "patchSetId": 25
      },
      "lineNbr": 4054,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-06-11T10:40:15Z",
      "side": 1,
      "message": "Another perfect example for a ternary operator.",
      "range": {
        "startLine": 4050,
        "startChar": 0,
        "endLine": 4054,
        "endChar": 5
      },
      "revId": "06a23b4f34937b7840e440a6362873758976f67b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7472c7bf_4c725653",
        "filename": "src/wasm/turboshaft-graph-interface.cc",
        "patchSetId": 25
      },
      "lineNbr": 4064,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-06-11T10:40:15Z",
      "side": 1,
      "message": "Seems irrelevant here.",
      "revId": "06a23b4f34937b7840e440a6362873758976f67b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d97ba81b_f0e0235a",
        "filename": "src/wasm/turboshaft-graph-interface.cc",
        "patchSetId": 25
      },
      "lineNbr": 4093,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-06-11T10:40:15Z",
      "side": 1,
      "message": "ternary operator?",
      "range": {
        "startLine": 4089,
        "startChar": 0,
        "endLine": 4093,
        "endChar": 5
      },
      "revId": "06a23b4f34937b7840e440a6362873758976f67b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3b625e2_75c1c213",
        "filename": "src/wasm/turboshaft-graph-interface.cc",
        "patchSetId": 25
      },
      "lineNbr": 6964,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-06-11T10:40:15Z",
      "side": 1,
      "message": "This comment does not fix the code any more.",
      "range": {
        "startLine": 6963,
        "startChar": 0,
        "endLine": 6964,
        "endChar": 73
      },
      "revId": "06a23b4f34937b7840e440a6362873758976f67b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87a96574_8a556bf9",
        "filename": "src/wasm/turboshaft-graph-interface.cc",
        "patchSetId": 25
      },
      "lineNbr": 6966,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-06-11T10:40:15Z",
      "side": 1,
      "message": "Won\u0027t this truncate the upper bits? If so, please add a test for this which fails (by passing the bounds check), then fix.",
      "revId": "06a23b4f34937b7840e440a6362873758976f67b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcce1bc1_1c53713e",
        "filename": "src/wasm/turboshaft-graph-interface.cc",
        "patchSetId": 25
      },
      "lineNbr": 7441,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-06-11T10:40:15Z",
      "side": 1,
      "message": "Please use `if constexpr (Is64())` here to make this clear to any future reader.",
      "revId": "06a23b4f34937b7840e440a6362873758976f67b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae554cdb_ef911e15",
        "filename": "test/mjsunit/wasm/table64-callindirect.js",
        "patchSetId": 25
      },
      "lineNbr": 9,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-06-11T10:40:15Z",
      "side": 1,
      "message": "should this be `is_tail_call`?",
      "range": {
        "startLine": 9,
        "startChar": 69,
        "endLine": 9,
        "endChar": 81
      },
      "revId": "06a23b4f34937b7840e440a6362873758976f67b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0d60b03_e9940a92",
        "filename": "test/mjsunit/wasm/table64-copy.js",
        "patchSetId": 25
      },
      "lineNbr": 43,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-06-11T10:40:15Z",
      "side": 1,
      "message": "nit: missing `let`",
      "revId": "06a23b4f34937b7840e440a6362873758976f67b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0cc8c7e1_fe58b0e5",
        "filename": "test/mjsunit/wasm/table64-fill.js",
        "patchSetId": 25
      },
      "lineNbr": 31,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-06-11T10:40:15Z",
      "side": 1,
      "message": "nit: missing `let`",
      "revId": "06a23b4f34937b7840e440a6362873758976f67b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c94feca_7eb4b518",
        "filename": "test/mjsunit/wasm/table64-set.js",
        "patchSetId": 25
      },
      "lineNbr": 46,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-06-11T10:40:15Z",
      "side": 1,
      "message": "From this point on the indentation is two spaces too much.",
      "revId": "06a23b4f34937b7840e440a6362873758976f67b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5c7efbc_913a88e3",
        "filename": "test/mjsunit/wasm/table64-size.js",
        "patchSetId": 25
      },
      "lineNbr": 0,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-06-11T10:40:15Z",
      "side": 1,
      "message": "This seems tested enough in `table64-grow` already. Should we just drop this test?",
      "revId": "06a23b4f34937b7840e440a6362873758976f67b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}