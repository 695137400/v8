{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "eb975834_cc8fc143",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-03-25T14:01:09Z",
      "side": 1,
      "message": "With some inspiration of Nico (CCed) I refactored this now to avoid the nesting and instead provide the mix-in classes as a list.\n\nThis looks a lot better at the use sites, but requires some more boilerplate for the mix-in definitions.\nIt\u0027s better overall I think. Comments?",
      "revId": "79d0a625c2c36891c07c7101b4c99f563ea5a40a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "62ebf92f_ae940e3d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-03-25T16:24:11Z",
      "side": 1,
      "message": "Resolving previous comments...",
      "revId": "79d0a625c2c36891c07c7101b4c99f563ea5a40a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0580556f_554a22f3",
        "filename": "src/wasm/wasm-objects.h",
        "patchSetId": 3
      },
      "lineNbr": 930,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-03-26T17:37:27Z",
      "side": 1,
      "message": "To re-iterate my point: I think this is nice compared to the previous implementation as the members and the \"Please add something here, otherwise GC will break your objects\" `BodyDescriptor` implementation are much closer together.\n\nI\u0027m a bit concerned on compile time as this is in a header that is basically included everywhere (probably hundreds of compile units?) and defines somewhat deeply nested templates.\n\nGiven my limited understanding of templates I assume the whole `IterateBody` functions are going to be cheap as we only instantiate the class but in most cases are not going to use (and therefore instantiate) the instance function. So it probably isn\u0027t that bad?",
      "revId": "79d0a625c2c36891c07c7101b4c99f563ea5a40a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5102815_659d01db",
        "filename": "src/wasm/wasm-objects.h",
        "patchSetId": 3
      },
      "lineNbr": 930,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-03-27T16:10:22Z",
      "side": 1,
      "message": "Yeah, good point that the class hierarchy will be created for every compilation of this header, but the templatized method will not be instantiated.\n\nI think we pretty much gave up on trying to minimize includes and/or compile time of headers, so I am not considering this as a factor any more when doing refactorings.\n\nWaiting a few more days for more input. If there is none, I\u0027ll go ahead and land this next week.",
      "parentUuid": "0580556f_554a22f3",
      "revId": "79d0a625c2c36891c07c7101b4c99f563ea5a40a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c096f8fb_5fbb4429",
        "filename": "src/wasm/wasm-objects.h",
        "patchSetId": 3
      },
      "lineNbr": 930,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-04-03T10:33:20Z",
      "side": 1,
      "message": "Landing this as-is then.",
      "parentUuid": "b5102815_659d01db",
      "revId": "79d0a625c2c36891c07c7101b4c99f563ea5a40a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "79d0a625c2c36891c07c7101b4c99f563ea5a40a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "79d0a625c2c36891c07c7101b4c99f563ea5a40a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "79d0a625c2c36891c07c7101b4c99f563ea5a40a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}