{
  "comments": [
    {
      "key": {
        "uuid": "0e1588de_8feb44f6",
        "filename": "src/wasm/wasm-interpreter.h",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1118575
      },
      "writtenOn": "2019-02-05T14:37:35Z",
      "side": 1,
      "message": "Note that I am not 100% sure we should allow this new state transition directly. Alternatively we could make {HandleException} transition to {PAUSED} instead and maintain the invariant that {Run} can only transition from {PAUSED} and {STOPPED}. Let me know which one you think is better.",
      "range": {
        "startLine": 88,
        "startChar": 28,
        "endLine": 88,
        "endChar": 67
      },
      "revId": "d1c05ff93fb99e803383ab2e4f0472eebd3fbf5b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "571e9993_7b1b7a1d",
        "filename": "src/wasm/wasm-interpreter.h",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2019-02-05T16:47:29Z",
      "side": 1,
      "message": "Let\u0027s discuss this tomorrow. I would prefer TRAPPED to stay a terminal state. If the trap is handled internally, we should call {HandleException} instead of stopping in the TRAPPED state.",
      "parentUuid": "0e1588de_8feb44f6",
      "range": {
        "startLine": 88,
        "startChar": 28,
        "endLine": 88,
        "endChar": 67
      },
      "revId": "d1c05ff93fb99e803383ab2e4f0472eebd3fbf5b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19a6d8d0_218486a5",
        "filename": "src/wasm/wasm-interpreter.h",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1118575
      },
      "writtenOn": "2019-02-06T10:40:09Z",
      "side": 1,
      "message": "Ack. I see your point. There is an alternative implementation I tried where the call to {Throw} is moved into the interpreter itself. That one has the potential to be cleaner in the long run. Let me polish that up and upload it.",
      "parentUuid": "571e9993_7b1b7a1d",
      "range": {
        "startLine": 88,
        "startChar": 28,
        "endLine": 88,
        "endChar": 67
      },
      "revId": "d1c05ff93fb99e803383ab2e4f0472eebd3fbf5b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "580be915_219eb76c",
        "filename": "src/wasm/wasm-interpreter.h",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1118575
      },
      "writtenOn": "2019-02-06T15:22:34Z",
      "side": 1,
      "message": "I have uploaded the patch set with the alternative approach. Unfortunately it reveals that there is the special case for testing (where we are running without an activation) which implements traps via program-abort instead of via exceptions. I think this shows that the old approach gives us more freedom because it allows the embedder (in this case wasm-debug.cc versus cctest) to decide how trap are being modeled. This freedom is good because it is still not fully clear how the final spec will look with regards to the interaction between traps and exception handling.\n\nI do however see your point of this implicit state transition via {Run} being brittle. As discussed offline, I will try to make this transition explicit in a dedicated methods that wasm-debug.cc can use to \"restart\" the interpreter loop at the handler position.",
      "parentUuid": "19a6d8d0_218486a5",
      "range": {
        "startLine": 88,
        "startChar": 28,
        "endLine": 88,
        "endChar": 67
      },
      "revId": "d1c05ff93fb99e803383ab2e4f0472eebd3fbf5b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}