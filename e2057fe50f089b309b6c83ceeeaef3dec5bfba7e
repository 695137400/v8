{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8d8abdb7_e14f302e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1468500
      },
      "writtenOn": "2022-12-08T14:26:56Z",
      "side": 1,
      "message": "Victor, PTAL\n\nAnton: My template magic isn\u0027t very strong. Could you please take a look specifically at maglev-assembler.h and maglev-assembler-arm64-inl.h to check if template magic can be improved?",
      "revId": "e2057fe50f089b309b6c83ceeeaef3dec5bfba7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "782e542c_5d1d02cf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1368302
      },
      "writtenOn": "2022-12-08T14:50:22Z",
      "side": 1,
      "message": "Impressive use of template voodoo! I\u0027ll let Anton review that! ðŸ˜Š\nLGTM % a small question...",
      "revId": "e2057fe50f089b309b6c83ceeeaef3dec5bfba7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9eb9829b_1ebc5498",
        "filename": "src/maglev/arm64/maglev-assembler-arm64-inl.h",
        "patchSetId": 7
      },
      "lineNbr": 91,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2022-12-09T00:12:17Z",
      "side": 1,
      "message": "is this correct? This is pushing the padding register as the _last_ value. Shouldn\u0027t it push it as the _first_ value? See PushAll in baseline-assembler-arm64",
      "range": {
        "startLine": 91,
        "startChar": 6,
        "endLine": 91,
        "endChar": 30
      },
      "revId": "e2057fe50f089b309b6c83ceeeaef3dec5bfba7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "84f86d37_b9396490",
        "filename": "src/maglev/arm64/maglev-assembler-arm64-inl.h",
        "patchSetId": 7
      },
      "lineNbr": 91,
      "author": {
        "id": 1468500
      },
      "writtenOn": "2022-12-13T15:51:54Z",
      "side": 1,
      "message": "`PushArguments` should be similar to `PushReverse` in baseline-assembler. Due to memory override while context switching, the push operations were not all carried out in reverse though. Fixed now.",
      "parentUuid": "9eb9829b_1ebc5498",
      "range": {
        "startLine": 91,
        "startChar": 6,
        "endLine": 91,
        "endChar": 30
      },
      "revId": "e2057fe50f089b309b6c83ceeeaef3dec5bfba7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9be34094_1e58dd59",
        "filename": "src/maglev/maglev-assembler.h",
        "patchSetId": 7
      },
      "lineNbr": 478,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2022-12-09T00:12:17Z",
      "side": 1,
      "message": "optional: a \"repeat\" is really just a kind of iteration, so you could implement this in terms of `PushArgumentsIterator/Range` and a custom repeating iterator, e.g. something like\n\n```\ntemplate\u003ctypename T\u003e\nclass RepeatIterator {\n public:\n  T operator*() { return val_; }\n  RepeatIterator\u0026 operator++() { ++i_; return *this; }\n  bool operator!\u003d(RepeatIterator\u003cT\u003e\u0026 that) { return i_ !\u003d  that-\u003ei_; }\n  T val_\n  int i_;\n};\n\ntemplate\u003ctypename T\u003e\nPushArgumentsIterator repeat(T val, int count) {\n  return PushArgumentsIterator(RepeatIterator(val, 0), RepeatIterator(val, count));\n}\n```\n\nThen you could get rid of the PushArgumentRepeat specializations.",
      "range": {
        "startLine": 478,
        "startChar": 6,
        "endLine": 478,
        "endChar": 24
      },
      "revId": "e2057fe50f089b309b6c83ceeeaef3dec5bfba7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e606eda3_10d8790e",
        "filename": "src/maglev/maglev-assembler.h",
        "patchSetId": 7
      },
      "lineNbr": 478,
      "author": {
        "id": 1468500
      },
      "writtenOn": "2022-12-13T15:51:54Z",
      "side": 1,
      "message": "That\u0027s a very nice idea!\nMaybe even worth providing this `RepeatIterator` in base for other uses? WDYT?",
      "parentUuid": "9be34094_1e58dd59",
      "range": {
        "startLine": 478,
        "startChar": 6,
        "endLine": 478,
        "endChar": 24
      },
      "revId": "e2057fe50f089b309b6c83ceeeaef3dec5bfba7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "073ef0e6_a689e493",
        "filename": "src/maglev/maglev-assembler.h",
        "patchSetId": 7
      },
      "lineNbr": 478,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2022-12-14T10:28:59Z",
      "side": 1,
      "message": "That would make sense, maybe in a followup?",
      "parentUuid": "e606eda3_10d8790e",
      "range": {
        "startLine": 478,
        "startChar": 6,
        "endLine": 478,
        "endChar": 24
      },
      "revId": "e2057fe50f089b309b6c83ceeeaef3dec5bfba7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "159db1e6_90382d66",
        "filename": "src/maglev/maglev-assembler.h",
        "patchSetId": 7
      },
      "lineNbr": 478,
      "author": {
        "id": 1468500
      },
      "writtenOn": "2022-12-14T10:55:21Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "073ef0e6_a689e493",
      "range": {
        "startLine": 478,
        "startChar": 6,
        "endLine": 478,
        "endChar": 24
      },
      "revId": "e2057fe50f089b309b6c83ceeeaef3dec5bfba7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "adfc6b4d_6aef57c0",
        "filename": "src/maglev/maglev-assembler.h",
        "patchSetId": 7
      },
      "lineNbr": 495,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2022-12-09T00:12:17Z",
      "side": 1,
      "message": "nit: in C++ parlance a pair of iterators should be \"Range\", not \"Iterator\".\n\nAlso, maybe this is useful for normal Push too? Doesn\u0027t need to be restricted to PushArguments.",
      "range": {
        "startLine": 495,
        "startChar": 6,
        "endLine": 495,
        "endChar": 27
      },
      "revId": "e2057fe50f089b309b6c83ceeeaef3dec5bfba7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2357444b_d2d55672",
        "filename": "src/maglev/maglev-assembler.h",
        "patchSetId": 7
      },
      "lineNbr": 495,
      "author": {
        "id": 1468500
      },
      "writtenOn": "2022-12-13T15:51:54Z",
      "side": 1,
      "message": "Renamed and also adapted `Push()`",
      "parentUuid": "adfc6b4d_6aef57c0",
      "range": {
        "startLine": 495,
        "startChar": 6,
        "endLine": 495,
        "endChar": 27
      },
      "revId": "e2057fe50f089b309b6c83ceeeaef3dec5bfba7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7edbedc0_42882501",
        "filename": "src/maglev/maglev-assembler.h",
        "patchSetId": 7
      },
      "lineNbr": 503,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2022-12-09T00:12:17Z",
      "side": 1,
      "message": "I think it would be preferable for the range to be immutable, and to iterate over it just using begin/end -- you can support the `Arg2` usecase in arm64 by adding a `pop` method (or similar) that returns a new range of `[begin+1,end]`",
      "range": {
        "startLine": 502,
        "startChar": 0,
        "endLine": 503,
        "endChar": 57
      },
      "revId": "e2057fe50f089b309b6c83ceeeaef3dec5bfba7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14b70014_74c3277b",
        "filename": "src/maglev/maglev-assembler.h",
        "patchSetId": 7
      },
      "lineNbr": 503,
      "author": {
        "id": 1468500
      },
      "writtenOn": "2022-12-13T15:51:54Z",
      "side": 1,
      "message": "Removed.\n`PushArgumentsRange` now provides `rbegin()` + `rend()` instead.",
      "parentUuid": "7edbedc0_42882501",
      "range": {
        "startLine": 502,
        "startChar": 0,
        "endLine": 503,
        "endChar": 57
      },
      "revId": "e2057fe50f089b309b6c83ceeeaef3dec5bfba7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22ebbe79_1118a71b",
        "filename": "src/maglev/maglev-ir.cc",
        "patchSetId": 7
      },
      "lineNbr": 1327,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2022-12-09T00:12:17Z",
      "side": 1,
      "message": "you shouldn\u0027t need to specify this, C++17 has type deduction from constructor arguments",
      "range": {
        "startLine": 1327,
        "startChar": 29,
        "endLine": 1327,
        "endChar": 37
      },
      "revId": "e2057fe50f089b309b6c83ceeeaef3dec5bfba7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d904e887_98e3da7d",
        "filename": "src/maglev/maglev-ir.cc",
        "patchSetId": 7
      },
      "lineNbr": 1327,
      "author": {
        "id": 1468500
      },
      "writtenOn": "2022-12-13T15:51:54Z",
      "side": 1,
      "message": "This was one of the things I was confused about.\nI got warnings: `\u0027PushArgumentsIterator\u0027 may not intend to support class template argument deduction [-Werror,-Wctad-maybe-unsupported]`.\nIt felt kinda weird that I need to add a generic deduction guide to supress this warning.\nDid that now, but it somehow doesn\u0027t feel like it is the right thing to do?",
      "parentUuid": "22ebbe79_1118a71b",
      "range": {
        "startLine": 1327,
        "startChar": 29,
        "endLine": 1327,
        "endChar": 37
      },
      "revId": "e2057fe50f089b309b6c83ceeeaef3dec5bfba7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f0d9f41_c068bdf5",
        "filename": "src/maglev/maglev-ir.cc",
        "patchSetId": 7
      },
      "lineNbr": 1327,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2022-12-14T10:28:59Z",
      "side": 1,
      "message": "Looks like requiring explicit deduction guides is an intentional consequence of this warning being enabled -- an alternative would be to provide a helper function, similar to `make_pair` or `make_unique`.",
      "parentUuid": "d904e887_98e3da7d",
      "range": {
        "startLine": 1327,
        "startChar": 29,
        "endLine": 1327,
        "endChar": 37
      },
      "revId": "e2057fe50f089b309b6c83ceeeaef3dec5bfba7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c1fecd0_36202a10",
        "filename": "src/maglev/maglev-ir.cc",
        "patchSetId": 7
      },
      "lineNbr": 1327,
      "author": {
        "id": 1468500
      },
      "writtenOn": "2022-12-14T10:55:21Z",
      "side": 1,
      "message": "Ack.. weird behaviour imo. By using `make_iterator_range` now this is gone anyways.",
      "parentUuid": "6f0d9f41_c068bdf5",
      "range": {
        "startLine": 1327,
        "startChar": 29,
        "endLine": 1327,
        "endChar": 37
      },
      "revId": "e2057fe50f089b309b6c83ceeeaef3dec5bfba7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ccd3f55a_983b3289",
        "filename": "src/maglev/x64/maglev-assembler-x64-inl.h",
        "patchSetId": 7
      },
      "lineNbr": 97,
      "author": {
        "id": 1368302
      },
      "writtenOn": "2022-12-08T14:50:22Z",
      "side": 1,
      "message": "Why distinguish PushArguments(...) vs Push(...)? What\u0027s supposed to be the difference? Can we unify?",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 97,
        "endChar": 0
      },
      "revId": "e2057fe50f089b309b6c83ceeeaef3dec5bfba7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80f49a7f_0316ca5f",
        "filename": "src/maglev/x64/maglev-assembler-x64-inl.h",
        "patchSetId": 7
      },
      "lineNbr": 97,
      "author": {
        "id": 1468500
      },
      "writtenOn": "2022-12-08T14:53:54Z",
      "side": 1,
      "message": "We could if we ever see a need to use iterators and/or repeating the same value for normal pushes.\nThese possiblities come at a slight cost and therefore I decided to not merge them with regular `Push` (as we don\u0027t need these added functionality there at least right now).",
      "parentUuid": "ccd3f55a_983b3289",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 97,
        "endChar": 0
      },
      "revId": "e2057fe50f089b309b6c83ceeeaef3dec5bfba7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37eda5cf_0d8c4488",
        "filename": "src/maglev/x64/maglev-assembler-x64-inl.h",
        "patchSetId": 7
      },
      "lineNbr": 97,
      "author": {
        "id": 1368302
      },
      "writtenOn": "2022-12-08T14:55:40Z",
      "side": 1,
      "message": "Which cost? Wouldn\u0027t the template just collapse at the compile into a simple push?",
      "parentUuid": "80f49a7f_0316ca5f",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 97,
        "endChar": 0
      },
      "revId": "e2057fe50f089b309b6c83ceeeaef3dec5bfba7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b843dde_8c453175",
        "filename": "src/maglev/x64/maglev-assembler-x64-inl.h",
        "patchSetId": 7
      },
      "lineNbr": 97,
      "author": {
        "id": 1468500
      },
      "writtenOn": "2022-12-08T15:03:27Z",
      "side": 1,
      "message": "Due to the iterators we don\u0027t know the number of arguments we push statically anymore. Therefore the number of pushed arguments is tracked dynamically.\nThis is currently only used for DCHECKs, so we could also disable it for release builds (that would make the code a lot uglier though, as we would have macro calls all over the place).\nIf you strongly prefer to unify `Push` and `PushArguments`, I could do this though.",
      "parentUuid": "37eda5cf_0d8c4488",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 97,
        "endChar": 0
      },
      "revId": "e2057fe50f089b309b6c83ceeeaef3dec5bfba7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80dc3392_63c66e31",
        "filename": "src/maglev/x64/maglev-assembler-x64-inl.h",
        "patchSetId": 7
      },
      "lineNbr": 97,
      "author": {
        "id": 1468500
      },
      "writtenOn": "2022-12-08T15:05:39Z",
      "side": 1,
      "message": "Ah well my previous comment was not 100% correct.\nWe use the number of pushed arguments only in DCHECKs right now for arguments.\nFor general pushes, we want to have the padding in front of the other pushed values though (for arguments padding is the last pushed value).\nSo due to the dynamically tracked nubmer of values, this wouldn\u0027t be possible.",
      "parentUuid": "5b843dde_8c453175",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 97,
        "endChar": 0
      },
      "revId": "e2057fe50f089b309b6c83ceeeaef3dec5bfba7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e15e8e6e_3bda03df",
        "filename": "src/maglev/x64/maglev-assembler-x64-inl.h",
        "patchSetId": 7
      },
      "lineNbr": 97,
      "author": {
        "id": 1468500
      },
      "writtenOn": "2022-12-13T15:51:54Z",
      "side": 1,
      "message": "As Leszek was also pro support of iterators for `Push`, I implemented it now.",
      "parentUuid": "80dc3392_63c66e31",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 97,
        "endChar": 0
      },
      "revId": "e2057fe50f089b309b6c83ceeeaef3dec5bfba7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}