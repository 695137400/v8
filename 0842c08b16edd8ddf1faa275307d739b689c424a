{
  "comments": [
    {
      "key": {
        "uuid": "3375aad5_7c6b8dbe",
        "filename": "src/ast/scopes.cc",
        "patchSetId": 12
      },
      "lineNbr": 2241,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2019-09-30T13:03:47Z",
      "side": 1,
      "message": "Is there a reason to remove it from the list? If a variable isn\u0027t used it should be dropped automatically?\n\nIf this was a response to the \".\" (class {}) variable in case of eval; that simply needs special code because \"eval\" + no private methods simply doesn\u0027t know that it can\u0027t use \".\" in any other way.",
      "revId": "0842c08b16edd8ddf1faa275307d739b689c424a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e621a2b6_4fcc0b90",
        "filename": "src/ast/scopes.cc",
        "patchSetId": 12
      },
      "lineNbr": 2241,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2019-09-30T15:13:12Z",
      "side": 1,
      "message": "Should I just special case this in Scope::MustAllocate so that the anonymous class variable don\u0027t get marked as used if it\u0027s only referenced through potential eval with static private methods?",
      "parentUuid": "3375aad5_7c6b8dbe",
      "revId": "0842c08b16edd8ddf1faa275307d739b689c424a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1416f53_153a4d92",
        "filename": "src/ast/scopes.cc",
        "patchSetId": 12
      },
      "lineNbr": 2241,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2019-09-30T20:38:10Z",
      "side": 1,
      "message": "I updated Scope::MustAllocate to special case this. I am not sure about the best way to test that the class variable is for an anonymous class. var-\u003eraw_name()-\u003eIsOneByteEqualTo(\".\") seems slower than doing a comparison with ast_value_factory-\u003edot_string(), but it is now guarded by is_class_scope() \u0026\u0026 var \u003d\u003d AsClassScope()-\u003eclass_variable() so it should not be done frequently. To compare it with the dot_string we\u0027ll have to pass ast_value_factory everywhere instead.",
      "parentUuid": "e621a2b6_4fcc0b90",
      "revId": "0842c08b16edd8ddf1faa275307d739b689c424a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b043396e_0c9fb85d",
        "filename": "src/ast/scopes.cc",
        "patchSetId": 12
      },
      "lineNbr": 2241,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2019-10-01T12:20:47Z",
      "side": 1,
      "message": "What about simply setting a flag on the Variable itself? That way you can turn the 3 checks into 1. There\u0027s a uint16_t bitfield that you can extend to uint32_t; it\u0027ll be padded to word size anyway.\n\nAlternatively you could also lazily create the anonymous class_variable when needed (when a private method is referenced or eval is called). Both are less common than MustAllocate and moving the cost there actually seems like a better trade-off.",
      "parentUuid": "d1416f53_153a4d92",
      "revId": "0842c08b16edd8ddf1faa275307d739b689c424a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91cfad98_b229f4c0",
        "filename": "src/ast/scopes.cc",
        "patchSetId": 12
      },
      "lineNbr": 2241,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2019-10-02T19:32:10Z",
      "side": 1,
      "message": "Update: I tried lazily creating the anonymous class variable instead (as this brings us closer to the old behavior, where no class variables are created for anonymous classes). I am currently running into DCHECKs for restoring the class variable property during the full parse. For example:\n\nclass Outer {\n  #outer() { return \u0027Outer\u0027; }\n  test() {\n    return class {\n      static #inner() { return \u0027Inner\u0027; }\n      static run() { return this.#inner(); }\n    };\n  }\n}\n\nconst obj \u003d new Outer;\nconst C \u003d obj.test();\n\nHere when we reparse the anonymous class, since `run()` will be skipped, we need something else to remind us that this class has explicit static private method access and that we should declare the class variable. We also need something similar for possible eval of static private method, since inner_scope_calls_eval_ is restored from the preparsed data after the reparse.",
      "parentUuid": "b043396e_0c9fb85d",
      "revId": "0842c08b16edd8ddf1faa275307d739b689c424a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8284369c_f26d881d",
        "filename": "src/ast/scopes.cc",
        "patchSetId": 12
      },
      "lineNbr": 2241,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2019-10-07T07:31:19Z",
      "side": 1,
      "message": "Yeah you\u0027d need to add this information to the preparse data, similar to how we remember that we need to context allocate in the first place. In this particular case I guess it needs to be in some flags field.\n\nI hope this can\u0027t change the order in which variables are declared (based on what\u0027s parsed)? Otherwise we might have issues with reapplying preparse information. If there\u0027s an issue, perhaps we can push the variable declaration to the front of the list so it\u0027s always handled first.\n\nIf this works; great. If it doesn\u0027t, I suppose we can drop this simplification. In that case simply mark the variable as I mentioned.",
      "parentUuid": "91cfad98_b229f4c0",
      "revId": "0842c08b16edd8ddf1faa275307d739b689c424a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82c52222_fd662c51",
        "filename": "src/ast/scopes.cc",
        "patchSetId": 12
      },
      "lineNbr": 2241,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2019-10-07T15:26:51Z",
      "side": 1,
      "message": "The current patch set adds a ShouldSaveClassVariableIndexField to the preparse flag and re-declare the edge-case class variable after the flag is decoded. It still changes the order in which the class variable is declared - it\u0027s now always the last one in the scope, if it\u0027s ever declared. Since we go through\n\nparse by skipping inner functions -\u003e reapply preparse data (with info about inner functions) -\u003e scope analysis\n\nThis seems to be the best way I can think of.\n\nIt currently passes the tests (as well as test262 locally) so I assume there are no issues. WDYT?",
      "parentUuid": "8284369c_f26d881d",
      "revId": "0842c08b16edd8ddf1faa275307d739b689c424a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49aa28d3_86f9cc0c",
        "filename": "src/ast/scopes.cc",
        "patchSetId": 12
      },
      "lineNbr": 2241,
      "author": {
        "id": 1184114
      },
      "writtenOn": "2019-10-09T13:39:01Z",
      "side": 1,
      "message": "Iiuc you track flags whether you need a class variable, and declare it after parsing the class so it has a stable position? That sounds good to me.",
      "parentUuid": "82c52222_fd662c51",
      "revId": "0842c08b16edd8ddf1faa275307d739b689c424a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "691ddc19_badd22b6",
        "filename": "src/ast/scopes.cc",
        "patchSetId": 12
      },
      "lineNbr": 2241,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2019-10-10T00:41:08Z",
      "side": 1,
      "message": "Yes, that was the intention",
      "parentUuid": "49aa28d3_86f9cc0c",
      "revId": "0842c08b16edd8ddf1faa275307d739b689c424a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}