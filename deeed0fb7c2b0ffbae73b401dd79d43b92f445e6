{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6ed58535_503a581d",
        "filename": "src/codegen/ppc/macro-assembler-ppc.cc",
        "patchSetId": 20
      },
      "lineNbr": 1771,
      "author": {
        "id": 1323125
      },
      "writtenOn": "2023-12-07T18:40:43Z",
      "side": 1,
      "message": "How about just pass scratch1 and scratch2 directly:\n```\nLoadCompressedMap(scratch1, object, scratch2);\nCompareInstanceTypeWithUniqueCompressedMap(scratch1, scratch2, type);\n```",
      "revId": "deeed0fb7c2b0ffbae73b401dd79d43b92f445e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c077aba6_e363f770",
        "filename": "src/codegen/ppc/macro-assembler-ppc.cc",
        "patchSetId": 20
      },
      "lineNbr": 1771,
      "author": {
        "id": 1305638
      },
      "writtenOn": "2023-12-07T19:48:42Z",
      "side": 1,
      "message": "This is mirroring the arm64 code in src/codegen/arm64/macro-assembler-arm64.cc.  I thought we wanted to stay as close to arm64 as we can?",
      "parentUuid": "6ed58535_503a581d",
      "revId": "deeed0fb7c2b0ffbae73b401dd79d43b92f445e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5bd9ff58_5fa56887",
        "filename": "src/codegen/ppc/macro-assembler-ppc.cc",
        "patchSetId": 20
      },
      "lineNbr": 1771,
      "author": {
        "id": 1323125
      },
      "writtenOn": "2023-12-07T19:55:02Z",
      "side": 1,
      "message": "Correct, as long as it doesn\u0027t violate anything on our platforms. Some of our Load ops must have a scratch register passed to them which may not be the case on arm, scratch1 or 2 could be passed as r0 on ppc so we might as well use both scratch registers without the if-else check.",
      "parentUuid": "c077aba6_e363f770",
      "revId": "deeed0fb7c2b0ffbae73b401dd79d43b92f445e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fdbead5b_0ab92572",
        "filename": "src/codegen/ppc/macro-assembler-ppc.cc",
        "patchSetId": 20
      },
      "lineNbr": 1771,
      "author": {
        "id": 1305638
      },
      "writtenOn": "2023-12-07T20:02:35Z",
      "side": 1,
      "message": "There are a lot of calls that pass the same register for scratch1 and scratch2, I don\u0027t think it\u0027s a great idea to modify all of them to pass r0 for scratch2 instead as it will introduce significant discrepancy with the arm64 codebase.  Passing no_reg causes failures, as does blindly using the same scratch register for both operations.\n\nThoughts?  Can we merge and revisit when we\u0027re not carrying both of these patchsets out of tree?",
      "parentUuid": "5bd9ff58_5fa56887",
      "revId": "deeed0fb7c2b0ffbae73b401dd79d43b92f445e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "98d434f1_cd41404b",
        "filename": "src/codegen/ppc/macro-assembler-ppc.cc",
        "patchSetId": 20
      },
      "lineNbr": 1771,
      "author": {
        "id": 1323125
      },
      "writtenOn": "2023-12-07T20:31:59Z",
      "side": 1,
      "message": "no no I\u0027m not suggesting to change any of the calls to use r0. I\u0027m just saying the passed scratch register could be r0 anyways. \n\nYour `CompareInstanceTypeWithUniqueCompressedMap` is using r11 if no_reg is passed which is fine but for `LoadCompressedMap` why can\u0027t we just pass scratch2 regardless? Arm doesn\u0027t need a scratch when loading but we do.",
      "parentUuid": "fdbead5b_0ab92572",
      "revId": "deeed0fb7c2b0ffbae73b401dd79d43b92f445e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7660cdfa_36982aad",
        "filename": "src/codegen/ppc/macro-assembler-ppc.cc",
        "patchSetId": 20
      },
      "lineNbr": 1771,
      "author": {
        "id": 1305638
      },
      "writtenOn": "2023-12-07T20:57:07Z",
      "side": 1,
      "message": "For LoadCompressedMap IIRC there were failures in one of the test configurations because this function tends to have the same register passed for both scratch1 and scratch2, which doesn\u0027t always work.\n\nIf this is something that needs to be analyzed prior to merge I\u0027ll end up needing to spend a day checking the various configurations to see what was going wrong (6 or more build + test cycles), so I\u0027d prefer to only do that if it\u0027s absolutely necessary. ;)",
      "parentUuid": "98d434f1_cd41404b",
      "revId": "deeed0fb7c2b0ffbae73b401dd79d43b92f445e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "405f4c74_a8c80af6",
        "filename": "src/codegen/ppc/macro-assembler-ppc.cc",
        "patchSetId": 20
      },
      "lineNbr": 1771,
      "author": {
        "id": 1323125
      },
      "writtenOn": "2023-12-07T21:12:18Z",
      "side": 1,
      "message": "Not necessary to do it before merge but then can you add `DCHECK ((scratch1 !\u003d scratch2) || scratch1 !\u003d r0)`. All registers being r0 can be ugly.",
      "parentUuid": "7660cdfa_36982aad",
      "revId": "deeed0fb7c2b0ffbae73b401dd79d43b92f445e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4e0f5204_c7271920",
        "filename": "src/codegen/ppc/macro-assembler-ppc.cc",
        "patchSetId": 20
      },
      "lineNbr": 1771,
      "author": {
        "id": 1305638
      },
      "writtenOn": "2023-12-08T02:17:18Z",
      "side": 1,
      "message": "Done.  Agreed on the r0 issue ðŸ˜Š",
      "parentUuid": "405f4c74_a8c80af6",
      "revId": "deeed0fb7c2b0ffbae73b401dd79d43b92f445e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}