{
  "comments": [
    {
      "key": {
        "uuid": "ba50bf7d_7166bec2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2020-09-08T11:15:26Z",
      "side": 1,
      "message": "Thibaud: PTAL.\n\nMichael: Please do an OWNERS review for src/base/platform. The change there is as simple (and targeted) as possible; per the TODO comment in there, we could consider to only set the MAP_JIT flag on memory we\u0027re planning to use for code, but that\u0027s information we don\u0027t currently have when reserving address space, so it\u0027d be a somewhat bigger refactoring.\n\nThe skipped tests require more work, but don\u0027t seem to be critical for production code.",
      "revId": "6505495edde79f9d13ba324a14500aea7d8a3824",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce6d8710_8f404a7c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2020-09-08T11:35:14Z",
      "side": 1,
      "message": "base/platform lgtm\n\nWe should probably add OS::MemoryPermission::kJIT at some point which is a no-op on most platforms.",
      "revId": "6505495edde79f9d13ba324a14500aea7d8a3824",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1cd9bf4a_ebfa1ca1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1345975
      },
      "writtenOn": "2020-09-09T09:31:34Z",
      "side": 1,
      "message": "LGTM",
      "revId": "6505495edde79f9d13ba324a14500aea7d8a3824",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2424bcda_df3dc0ee",
        "filename": "src/wasm/code-space-access.h",
        "patchSetId": 10
      },
      "lineNbr": 25,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2020-09-08T13:21:44Z",
      "side": 1,
      "message": "pthread_jit_write_protect_np isn’t just absent from the headers in earlier SDKs, it’s absent from the library you need to link with. So all this declaration would do would be to turn a compile-time error into a link-time error.\n\nNot to worry, though. You’re inside V8_HOST_ARCH_ARM64 here, and there’s no possibility to build arm64 code for macOS with anything older than the 11.0 SDK, which does have pthread_jit_write_protect_np. Since you only ever attempt to use this function on arm64, your own declaration here is completely unnecessary. We will always be on the right SDK where you need this function, so your own declaration will always be excluded. You can get rid of this block (12–25) entirely.",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 25,
        "endChar": 45
      },
      "revId": "6505495edde79f9d13ba324a14500aea7d8a3824",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5257c22b_80694f6c",
        "filename": "src/wasm/code-space-access.h",
        "patchSetId": 10
      },
      "lineNbr": 25,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2020-09-09T19:56:19Z",
      "side": 1,
      "message": "Cool, done.",
      "parentUuid": "2424bcda_df3dc0ee",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 25,
        "endChar": 45
      },
      "revId": "6505495edde79f9d13ba324a14500aea7d8a3824",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3e2db3f_0e74def2",
        "filename": "src/wasm/code-space-access.h",
        "patchSetId": 10
      },
      "lineNbr": 32,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2020-09-08T13:21:44Z",
      "side": 1,
      "message": "It should work now, but __builtin_available is a little misguided and I actually prefer what you’ve written here.",
      "revId": "6505495edde79f9d13ba324a14500aea7d8a3824",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef01cbbf_1481f2d6",
        "filename": "src/wasm/code-space-access.h",
        "patchSetId": 10
      },
      "lineNbr": 32,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2020-09-09T19:56:19Z",
      "side": 1,
      "message": "Thanks, updated the comment.",
      "parentUuid": "d3e2db3f_0e74def2",
      "revId": "6505495edde79f9d13ba324a14500aea7d8a3824",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a354ff9e_c4bf7ddb",
        "filename": "src/wasm/code-space-access.h",
        "patchSetId": 10
      },
      "lineNbr": 58,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2020-09-08T13:21:44Z",
      "side": 1,
      "message": "Might want to #if out these implementations and the TLS variable on non-mac-arm64 too.",
      "revId": "6505495edde79f9d13ba324a14500aea7d8a3824",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8658132a_e5946f86",
        "filename": "src/wasm/code-space-access.h",
        "patchSetId": 10
      },
      "lineNbr": 58,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2020-09-09T19:56:19Z",
      "side": 1,
      "message": "Done.\n(I originally wrote this with an assumption that we might start using the CodeSpaceWriteScope class for implementing w^x exclusion on all platforms; but you\u0027re right: as long as we\u0027re not doing that, we might as well make it as specific as possible.\nThis does mean that I had to use a macro to avoid \u0027unused variable\u0027 compiler warnings for the empty scope objects.)",
      "parentUuid": "a354ff9e_c4bf7ddb",
      "revId": "6505495edde79f9d13ba324a14500aea7d8a3824",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}