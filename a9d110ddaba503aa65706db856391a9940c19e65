{
  "comments": [
    {
      "key": {
        "uuid": "d45e99a9_927b8738",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 7,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2020-04-30T10:15:23Z",
      "side": 1,
      "message": "This is exactly the same title as the previous CL, which makes it harder to distinguish them in logs later (for bisection, sheriffing and so on).\n\nIt\u0027s also not very specific.\nWhat about something like:\n[wasm] Avoid runtime calls for exception handling",
      "revId": "a9d110ddaba503aa65706db856391a9940c19e65",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c89df74a_fcd1648d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 19,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2020-04-30T10:15:23Z",
      "side": 1,
      "message": "You mean macros instead of builtins I think.",
      "revId": "a9d110ddaba503aa65706db856391a9940c19e65",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54e84bea_309e9919",
        "filename": "src/builtins/builtins-internal-gen.cc",
        "patchSetId": 5
      },
      "lineNbr": 1007,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-04-30T06:56:41Z",
      "side": 1,
      "message": "Is it okay to consider the bailout case as \u0027not found\u0027 here?",
      "revId": "a9d110ddaba503aa65706db856391a9940c19e65",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "609106a8_4daf1f90",
        "filename": "src/builtins/builtins-internal-gen.cc",
        "patchSetId": 5
      },
      "lineNbr": 1007,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2020-04-30T10:15:23Z",
      "side": 1,
      "message": "Good question. I guess the alternative would to add another runtime function which will be called in that case?\nSince this is a general builtin now, I think it would be better to make it error-proof.",
      "parentUuid": "54e84bea_309e9919",
      "revId": "a9d110ddaba503aa65706db856391a9940c19e65",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "680f178a_7ecff5eb",
        "filename": "src/builtins/builtins-internal-gen.cc",
        "patchSetId": 5
      },
      "lineNbr": 1007,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-04-30T10:20:14Z",
      "side": 1,
      "message": "That might already exist, I\u0027d check what the other places do that call TryGetOwnProperty. Either that, or make the builtin wasm-specific and perhaps assert that the bailout case does not occur (if that is the expectation).",
      "parentUuid": "609106a8_4daf1f90",
      "revId": "a9d110ddaba503aa65706db856391a9940c19e65",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eaf9bf91_13d1576f",
        "filename": "src/builtins/builtins-internal-gen.cc",
        "patchSetId": 5
      },
      "lineNbr": 1007,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2020-04-30T10:24:51Z",
      "side": 1,
      "message": "For our use case (loading a private symbol) the existing runtime function probably does the right thing already, since it skips the prototype walk for private symbols.\nSo yes, we could make this wasm specific and call the existing runtime function, or we keep it generic and add another runtime function. What would you prefer, Jakob?",
      "parentUuid": "680f178a_7ecff5eb",
      "revId": "a9d110ddaba503aa65706db856391a9940c19e65",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "260609ca_eb2f484c",
        "filename": "src/builtins/builtins-internal-gen.cc",
        "patchSetId": 5
      },
      "lineNbr": 1007,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-04-30T10:36:41Z",
      "side": 1,
      "message": "I think either are okay as long as it\u0027s not possible to accidentally hit the case where TryGetOwnProperty needs to bailout but we silently treat it as \"not found\".",
      "parentUuid": "eaf9bf91_13d1576f",
      "revId": "a9d110ddaba503aa65706db856391a9940c19e65",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61d9e496_a07c5885",
        "filename": "src/compiler/wasm-compiler.cc",
        "patchSetId": 5
      },
      "lineNbr": 83,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2020-04-30T09:15:26Z",
      "side": 1,
      "message": "Is there a reason why we don\u0027t use the GraphAssembler here, i.e. gasm_-\u003e? In that case we would not need to call SetEffect below.",
      "revId": "a9d110ddaba503aa65706db856391a9940c19e65",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a5efbad_3438daa4",
        "filename": "src/compiler/wasm-compiler.cc",
        "patchSetId": 5
      },
      "lineNbr": 89,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2020-04-30T09:15:26Z",
      "side": 1,
      "message": "Nit: I wonder if we could make this a function and not a macro. Functions are much easier to read and debug. If it\u0027s ugly with functions though, the macro is acceptable for me.\n\nUpdate: maybe this comment does not matter here, because this macro just forwards to the next macro, so maybe a function would not make it more beautiful. Still, macros are annoying to debug.",
      "revId": "a9d110ddaba503aa65706db856391a9940c19e65",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fea74f3f_1e88c95a",
        "filename": "src/compiler/wasm-compiler.cc",
        "patchSetId": 5
      },
      "lineNbr": 89,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2020-04-30T10:15:23Z",
      "side": 1,
      "message": "This is another macro where I wonder if inlining it (i.e. repeating the code) would increase readability (also see comment below).",
      "parentUuid": "9a5efbad_3438daa4",
      "revId": "a9d110ddaba503aa65706db856391a9940c19e65",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1b4992d_73ef110b",
        "filename": "src/compiler/wasm-compiler.cc",
        "patchSetId": 5
      },
      "lineNbr": 93,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2020-04-30T09:15:26Z",
      "side": 1,
      "message": "Also here I would prefer a function over the macro.",
      "revId": "a9d110ddaba503aa65706db856391a9940c19e65",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72b43e67_11fb08a3",
        "filename": "src/compiler/wasm-compiler.cc",
        "patchSetId": 5
      },
      "lineNbr": 93,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2020-04-30T10:15:23Z",
      "side": 1,
      "message": "+1, or maybe just inline which would have the benefit that it\u0027s obvious that this is a builtin call.\nAbstractions have the risk of hiding such details which are important when reading and writing code.",
      "parentUuid": "a1b4992d_73ef110b",
      "revId": "a9d110ddaba503aa65706db856391a9940c19e65",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8cbf24be_06566563",
        "filename": "src/compiler/wasm-compiler.cc",
        "patchSetId": 5
      },
      "lineNbr": 5474,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2020-04-30T09:15:26Z",
      "side": 1,
      "message": "I think we should just call {SetEffect} inside CALL_BUILTIN, as it is needed always anyways.",
      "range": {
        "startLine": 5474,
        "startChar": 11,
        "endLine": 5474,
        "endChar": 20
      },
      "revId": "a9d110ddaba503aa65706db856391a9940c19e65",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e84b630_d68859af",
        "filename": "src/compiler/wasm-compiler.cc",
        "patchSetId": 5
      },
      "lineNbr": 5491,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2020-04-30T09:15:26Z",
      "side": 1,
      "message": "If we call {SetEffect} in CALL_BUILTIN, then we would only have to call {SetControl} here.\n\nBtw, is this {SetControl} here needed because of the verification bug with IfSuccess? Could you add a comment about that here?",
      "revId": "a9d110ddaba503aa65706db856391a9940c19e65",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3edf2e78_4fc2df80",
        "filename": "src/compiler/wasm-compiler.cc",
        "patchSetId": 5
      },
      "lineNbr": 5491,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2020-04-30T10:15:23Z",
      "side": 1,
      "message": "Since we refactor this anyway, we should try to switch to the GraphAssembler and avoid any manual SetEffect or SetControl in the new code.",
      "parentUuid": "1e84b630_d68859af",
      "revId": "a9d110ddaba503aa65706db856391a9940c19e65",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c5096c3_6f39b6c0",
        "filename": "src/compiler/wasm-compiler.h",
        "patchSetId": 5
      },
      "lineNbr": 13,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-04-30T06:56:41Z",
      "side": 1,
      "message": "You could omit the include by passing the builtin id as an int (we do this in quite a few spots).",
      "revId": "a9d110ddaba503aa65706db856391a9940c19e65",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}