{
  "comments": [
    {
      "key": {
        "uuid": "95d8f441_b5523d67",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2020-08-05T15:24:24Z",
      "side": 1,
      "message": "Ulan, PTAL overall\nJakob, PTAL snapshot",
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28453d65_e12670d5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-06T06:43:53Z",
      "side": 1,
      "message": "Looking good, one suggestion for organizing iteration. I\u0027m not strictly opposed to the current approach either though. Wdyt? ",
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "de6eb87e_72f10363",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-06T08:58:36Z",
      "side": 1,
      "message": "lgtm with comments",
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d4c2effd_82790456",
        "filename": "src/snapshot/deserializer.cc",
        "patchSetId": 5
      },
      "lineNbr": 232,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-06T06:43:53Z",
      "side": 1,
      "message": ".(",
      "range": {
        "startLine": 232,
        "startChar": 63,
        "endLine": 232,
        "endChar": 65
      },
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd380ba8_31bf7123",
        "filename": "src/snapshot/deserializer.cc",
        "patchSetId": 5
      },
      "lineNbr": 241,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-06T06:43:53Z",
      "side": 1,
      "message": "nit: remove one nesting with \u0026\u0026",
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd2f2b2d_393ecc5c",
        "filename": "src/snapshot/deserializer.h",
        "patchSetId": 5
      },
      "lineNbr": 199,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-06T06:43:53Z",
      "side": 1,
      "message": "Is this used anywhere?",
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1edebec4_24677fb3",
        "filename": "src/snapshot/startup-deserializer.cc",
        "patchSetId": 5
      },
      "lineNbr": 91,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-06T06:43:53Z",
      "side": 1,
      "message": "So LookupKey inserts? Interesting :p",
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "69711822_0346b5e7",
        "filename": "src/snapshot/startup-deserializer.cc",
        "patchSetId": 5
      },
      "lineNbr": 91,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2020-08-06T08:09:56Z",
      "side": 1,
      "message": "Yeah, I considered changing the name but figured this CL was confusing enough :)",
      "parentUuid": "1edebec4_24677fb3",
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "502a7ca6_40ca84d7",
        "filename": "src/snapshot/startup-serializer.cc",
        "patchSetId": 5
      },
      "lineNbr": 183,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-06T06:43:53Z",
      "side": 1,
      "message": "A possible alternative to explicitly iterating the string table here, would be to override VisitRootPointers, let Heap::IterateWeakRoots do its thing, and look at the Root type. For Root::kStringTable, we could call SerializeStringTable.\n\nThe advantage would be to remove the special casing (of kUnserializable) in heap.cc, and remove the implicit ordering connection between here and deserialization (e.g. currently moving either ST serialization or deserialization would break things; that\u0027s not possible if order is centrally controlled by IterateWeakRoots).",
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19c1c3ca_f688f983",
        "filename": "src/snapshot/startup-serializer.cc",
        "patchSetId": 5
      },
      "lineNbr": 183,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2020-08-06T08:09:56Z",
      "side": 1,
      "message": "To be honest, I\u0027m not a big fan of that -- this would rely on overriding VisitRootPointers to, effectively, do something other than visiting those pointers. In particular, if someone were to refactor StringTable::IterateElements to e.g. call VisitRootPointer once per entry (maybe once per string entry?), then a Root-type-based override of VisitRootPointers would write N string tables.\n\nI\u0027m not too concerned with the ordering issue, since we have an ordering issue with almost literally every other part of the serialization (e.g. IterateWeakRoots after strong roots, deferred objects after IterateWeakRoots). Synchronization bytecodes should catch any issues here.",
      "parentUuid": "502a7ca6_40ca84d7",
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b2a0444_763fd6d8",
        "filename": "src/snapshot/startup-serializer.cc",
        "patchSetId": 5
      },
      "lineNbr": 183,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-06T08:58:36Z",
      "side": 1,
      "message": "fyi we have somewhat similar customization of VisitRootPointers here https://source.chromium.org/chromium/chromium/src/+/master:v8/src/snapshot/roots-serializer.cc;l\u003d45;drc\u003dbce121c7c5fe116d9661f8a1a9d2ec22ecf5b6ee\n\nThe current approach lgtm as well.",
      "parentUuid": "19c1c3ca_f688f983",
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "792217d8_89b76a42",
        "filename": "src/snapshot/startup-serializer.cc",
        "patchSetId": 5
      },
      "lineNbr": 221,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-06T06:43:53Z",
      "side": 1,
      "message": "q: These are mostly references into RO space, right?",
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d612976_18c0f764",
        "filename": "src/snapshot/startup-serializer.cc",
        "patchSetId": 5
      },
      "lineNbr": 221,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2020-08-06T08:09:56Z",
      "side": 1,
      "message": "Mostly, but not only.",
      "parentUuid": "792217d8_89b76a42",
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}