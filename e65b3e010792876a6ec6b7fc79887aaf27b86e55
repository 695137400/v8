{
  "comments": [
    {
      "key": {
        "uuid": "95d8f441_b5523d67",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2020-08-05T15:24:24Z",
      "side": 1,
      "message": "Ulan, PTAL overall\nJakob, PTAL snapshot",
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28453d65_e12670d5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-06T06:43:53Z",
      "side": 1,
      "message": "Looking good, one suggestion for organizing iteration. I\u0027m not strictly opposed to the current approach either though. Wdyt? ",
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "de6eb87e_72f10363",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-06T08:58:36Z",
      "side": 1,
      "message": "lgtm with comments",
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1e33d1b_ebb1964e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-08-06T09:53:27Z",
      "side": 1,
      "message": "lgtm!\n\nI like how simpler the concurrent protocol became.",
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8deaff58_7f62b65f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2020-08-06T10:58:57Z",
      "side": 1,
      "message": "Thanks, comments addressed. I\u0027ve left the iteration as-is, because of a) the RO serialization issue, and b) it has the least performance impact; we can revisit if we want to clean-up.",
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "908d8761_b37bf5fe",
        "filename": "src/heap/mark-compact.cc",
        "patchSetId": 5
      },
      "lineNbr": 1071,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-08-06T09:53:27Z",
      "side": 1,
      "message": "DCHECK(!Heap::InYoungGeneration(heap_object));\n\nThis is an important invariant that allows us to skip string table iteration during Scavenge.",
      "range": {
        "startLine": 1071,
        "startChar": 19,
        "endLine": 1071,
        "endChar": 30
      },
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "960c155d_f69c6a79",
        "filename": "src/heap/mark-compact.cc",
        "patchSetId": 5
      },
      "lineNbr": 1071,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2020-08-06T10:58:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "908d8761_b37bf5fe",
      "range": {
        "startLine": 1071,
        "startChar": 19,
        "endLine": 1071,
        "endChar": 30
      },
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "974f7364_379cc468",
        "filename": "src/objects/string-set.h",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-08-06T09:53:27Z",
      "side": 1,
      "message": "Nit: 2020",
      "range": {
        "startLine": 1,
        "startChar": 13,
        "endLine": 1,
        "endChar": 17
      },
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "843dbb9c_4580f70b",
        "filename": "src/objects/string-table.cc",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-08-06T09:53:27Z",
      "side": 1,
      "message": "Nit: full words please",
      "range": {
        "startLine": 44,
        "startChar": 10,
        "endLine": 44,
        "endChar": 13
      },
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eff531ba_8145505d",
        "filename": "src/objects/string-table.cc",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2020-08-06T10:58:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "843dbb9c_4580f70b",
      "range": {
        "startLine": 44,
        "startChar": 10,
        "endLine": 44,
        "endChar": 13
      },
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb6d84dc_6a53afaa",
        "filename": "src/objects/string-table.cc",
        "patchSetId": 5
      },
      "lineNbr": 52,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-08-06T09:53:27Z",
      "side": 1,
      "message": "Should it be a DCHECK that the capacity cannot be lower that the min capacity?",
      "range": {
        "startLine": 52,
        "startChar": 23,
        "endLine": 52,
        "endChar": 24
      },
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37b95903_4b569635",
        "filename": "src/objects/string-table.cc",
        "patchSetId": 5
      },
      "lineNbr": 52,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2020-08-06T10:58:57Z",
      "side": 1,
      "message": "Makes sense.",
      "parentUuid": "eb6d84dc_6a53afaa",
      "range": {
        "startLine": 52,
        "startChar": 23,
        "endLine": 52,
        "endChar": 24
      },
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79aac8f0_d8320b1a",
        "filename": "src/objects/string-table.cc",
        "patchSetId": 5
      },
      "lineNbr": 176,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-08-06T09:53:27Z",
      "side": 1,
      "message": "Let\u0027s check the result and call FatalProcessOutOfMemory?\n\nWould it make sense to update GetHeapStatistics to include the memory of all Data tables as part of V8/malloc memory? So that we continue accounting it as a part of V8.",
      "range": {
        "startLine": 176,
        "startChar": 9,
        "endLine": 176,
        "endChar": 15
      },
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8d110db_a5d353c8",
        "filename": "src/objects/string-table.cc",
        "patchSetId": 5
      },
      "lineNbr": 176,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2020-08-06T10:58:57Z",
      "side": 1,
      "message": "Done, by using AlignedAlloc (which is a good idea anyway). Added a GetCurrentMemoryUsage to StringTable and call it from GetHeapStatistics.",
      "parentUuid": "79aac8f0_d8320b1a",
      "range": {
        "startLine": 176,
        "startChar": 9,
        "endLine": 176,
        "endChar": 15
      },
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9342865b_cf42b18d",
        "filename": "src/objects/string-table.cc",
        "patchSetId": 5
      },
      "lineNbr": 216,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-08-06T09:53:27Z",
      "side": 1,
      "message": "Would the following work?\nnew_data-\u003eprevious_data_ \u003d std::move(data);\ndata \u003d std::move(new_data)",
      "range": {
        "startLine": 214,
        "startChar": 2,
        "endLine": 216,
        "endChar": 32
      },
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8b06a8e_b3c5e731",
        "filename": "src/objects/string-table.cc",
        "patchSetId": 5
      },
      "lineNbr": 224,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-08-06T09:53:27Z",
      "side": 1,
      "message": "How about asserting that here and below?",
      "range": {
        "startLine": 224,
        "startChar": 1,
        "endLine": 224,
        "endChar": 64
      },
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0930e1d9_15997b73",
        "filename": "src/objects/string-table.cc",
        "patchSetId": 5
      },
      "lineNbr": 461,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-08-06T09:53:27Z",
      "side": 1,
      "message": "How about extracting all this into a separate function:\n\nStringTable::Data* data \u003d EnsureCapacity(1);",
      "range": {
        "startLine": 437,
        "startChar": 6,
        "endLine": 461,
        "endChar": 7
      },
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e57fe2f_a8e9c2dd",
        "filename": "src/objects/string-table.cc",
        "patchSetId": 5
      },
      "lineNbr": 461,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2020-08-06T10:58:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0930e1d9_15997b73",
      "range": {
        "startLine": 437,
        "startChar": 6,
        "endLine": 461,
        "endChar": 7
      },
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4f2bec4_ab02da6d",
        "filename": "src/objects/string-table.h",
        "patchSetId": 5
      },
      "lineNbr": 46,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-08-06T09:53:27Z",
      "side": 1,
      "message": "Please update the comment to explain the new layout of StringTable.",
      "range": {
        "startLine": 43,
        "startChar": 3,
        "endLine": 46,
        "endChar": 63
      },
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22d794c9_82ed2861",
        "filename": "src/objects/string-table.h",
        "patchSetId": 5
      },
      "lineNbr": 46,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2020-08-06T10:58:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e4f2bec4_ab02da6d",
      "range": {
        "startLine": 43,
        "startChar": 3,
        "endLine": 46,
        "endChar": 63
      },
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d4c2effd_82790456",
        "filename": "src/snapshot/deserializer.cc",
        "patchSetId": 5
      },
      "lineNbr": 232,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-06T06:43:53Z",
      "side": 1,
      "message": ".(",
      "range": {
        "startLine": 232,
        "startChar": 63,
        "endLine": 232,
        "endChar": 65
      },
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15d33794_89b6e52c",
        "filename": "src/snapshot/deserializer.cc",
        "patchSetId": 5
      },
      "lineNbr": 232,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2020-08-06T10:58:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d4c2effd_82790456",
      "range": {
        "startLine": 232,
        "startChar": 63,
        "endLine": 232,
        "endChar": 65
      },
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd380ba8_31bf7123",
        "filename": "src/snapshot/deserializer.cc",
        "patchSetId": 5
      },
      "lineNbr": 241,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-06T06:43:53Z",
      "side": 1,
      "message": "nit: remove one nesting with \u0026\u0026",
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1da118e9_abda7179",
        "filename": "src/snapshot/deserializer.cc",
        "patchSetId": 5
      },
      "lineNbr": 241,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2020-08-06T10:58:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dd380ba8_31bf7123",
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd2f2b2d_393ecc5c",
        "filename": "src/snapshot/deserializer.h",
        "patchSetId": 5
      },
      "lineNbr": 199,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-06T06:43:53Z",
      "side": 1,
      "message": "Is this used anywhere?",
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65f2e89a_fc288ea2",
        "filename": "src/snapshot/deserializer.h",
        "patchSetId": 5
      },
      "lineNbr": 199,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2020-08-06T10:58:57Z",
      "side": 1,
      "message": "Not anymore, you\u0027re right!",
      "parentUuid": "cd2f2b2d_393ecc5c",
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1edebec4_24677fb3",
        "filename": "src/snapshot/startup-deserializer.cc",
        "patchSetId": 5
      },
      "lineNbr": 91,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-06T06:43:53Z",
      "side": 1,
      "message": "So LookupKey inserts? Interesting :p",
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "69711822_0346b5e7",
        "filename": "src/snapshot/startup-deserializer.cc",
        "patchSetId": 5
      },
      "lineNbr": 91,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2020-08-06T08:09:56Z",
      "side": 1,
      "message": "Yeah, I considered changing the name but figured this CL was confusing enough :)",
      "parentUuid": "1edebec4_24677fb3",
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "502a7ca6_40ca84d7",
        "filename": "src/snapshot/startup-serializer.cc",
        "patchSetId": 5
      },
      "lineNbr": 183,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-06T06:43:53Z",
      "side": 1,
      "message": "A possible alternative to explicitly iterating the string table here, would be to override VisitRootPointers, let Heap::IterateWeakRoots do its thing, and look at the Root type. For Root::kStringTable, we could call SerializeStringTable.\n\nThe advantage would be to remove the special casing (of kUnserializable) in heap.cc, and remove the implicit ordering connection between here and deserialization (e.g. currently moving either ST serialization or deserialization would break things; that\u0027s not possible if order is centrally controlled by IterateWeakRoots).",
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19c1c3ca_f688f983",
        "filename": "src/snapshot/startup-serializer.cc",
        "patchSetId": 5
      },
      "lineNbr": 183,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2020-08-06T08:09:56Z",
      "side": 1,
      "message": "To be honest, I\u0027m not a big fan of that -- this would rely on overriding VisitRootPointers to, effectively, do something other than visiting those pointers. In particular, if someone were to refactor StringTable::IterateElements to e.g. call VisitRootPointer once per entry (maybe once per string entry?), then a Root-type-based override of VisitRootPointers would write N string tables.\n\nI\u0027m not too concerned with the ordering issue, since we have an ordering issue with almost literally every other part of the serialization (e.g. IterateWeakRoots after strong roots, deferred objects after IterateWeakRoots). Synchronization bytecodes should catch any issues here.",
      "parentUuid": "502a7ca6_40ca84d7",
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b2a0444_763fd6d8",
        "filename": "src/snapshot/startup-serializer.cc",
        "patchSetId": 5
      },
      "lineNbr": 183,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-06T08:58:36Z",
      "side": 1,
      "message": "fyi we have somewhat similar customization of VisitRootPointers here https://source.chromium.org/chromium/chromium/src/+/master:v8/src/snapshot/roots-serializer.cc;l\u003d45;drc\u003dbce121c7c5fe116d9661f8a1a9d2ec22ecf5b6ee\n\nThe current approach lgtm as well.",
      "parentUuid": "19c1c3ca_f688f983",
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f85b4704_a16435c2",
        "filename": "src/snapshot/startup-serializer.cc",
        "patchSetId": 5
      },
      "lineNbr": 183,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2020-08-06T09:05:50Z",
      "side": 1,
      "message": "The other problem is that then the RO serializer sees the string table, which causes issues during deserialization because the HashSeed isn\u0027t necessarily initialized yet.",
      "parentUuid": "9b2a0444_763fd6d8",
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab6f7bbf_91e15c59",
        "filename": "src/snapshot/startup-serializer.cc",
        "patchSetId": 5
      },
      "lineNbr": 183,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2020-08-06T09:53:27Z",
      "side": 1,
      "message": "If we can afford encoding each string individually as \"internalized string that needs to be inserted into the string table\", then VisitRootPointers would be cleaner.\n\nIf not, then either of the discussed options sgtm.",
      "parentUuid": "9b2a0444_763fd6d8",
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e0f30102_c9deb7a6",
        "filename": "src/snapshot/startup-serializer.cc",
        "patchSetId": 5
      },
      "lineNbr": 183,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2020-08-06T10:58:57Z",
      "side": 1,
      "message": "I think shared root iteration with the RO serializer is the bigger issue. I\u0027ll leave as-is and we can consider cleanups in the future if there are more such structures.",
      "parentUuid": "ab6f7bbf_91e15c59",
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "792217d8_89b76a42",
        "filename": "src/snapshot/startup-serializer.cc",
        "patchSetId": 5
      },
      "lineNbr": 221,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-08-06T06:43:53Z",
      "side": 1,
      "message": "q: These are mostly references into RO space, right?",
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d612976_18c0f764",
        "filename": "src/snapshot/startup-serializer.cc",
        "patchSetId": 5
      },
      "lineNbr": 221,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2020-08-06T08:09:56Z",
      "side": 1,
      "message": "Mostly, but not only.",
      "parentUuid": "792217d8_89b76a42",
      "revId": "e65b3e010792876a6ec6b7fc79887aaf27b86e55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}