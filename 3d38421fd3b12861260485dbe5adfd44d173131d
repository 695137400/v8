{
  "comments": [
    {
      "key": {
        "uuid": "8bce3fb8_ea45da96",
        "filename": "src/compiler/access-builder.cc",
        "patchSetId": 3
      },
      "lineNbr": 470,
      "author": {
        "id": 1118575
      },
      "writtenOn": "2017-07-19T08:22:28Z",
      "side": 1,
      "message": "AFAICT this should be MachineType::IntPtr in order to be in sync with the object layout. Unfortunately this might still cause problems on 64-bit architectures (at least in the JavaScript pipeline, not so much the CSA) because representation selection will still be confused about MachineType::Int64 fields.",
      "range": {
        "startLine": 470,
        "startChar": 37,
        "endLine": 470,
        "endChar": 44
      },
      "revId": "3d38421fd3b12861260485dbe5adfd44d173131d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78b29021_0954f301",
        "filename": "src/compiler/access-builder.cc",
        "patchSetId": 3
      },
      "lineNbr": 470,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2017-07-20T05:00:00Z",
      "side": 1,
      "message": "Yeah, you\u0027re right. That still doesn\u0027t fix it -- \nhttps://build.chromium.org/p/tryserver.v8/builders/v8_linux64_rel_ng_triggered/builds/27014\n\nI don\u0027t know how representation selection works, definitely appreciate any pointers you have on fixing this.",
      "parentUuid": "8bce3fb8_ea45da96",
      "range": {
        "startLine": 470,
        "startChar": 37,
        "endLine": 470,
        "endChar": 44
      },
      "revId": "3d38421fd3b12861260485dbe5adfd44d173131d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ddd1dcc3_08230e3c",
        "filename": "src/compiler/access-builder.cc",
        "patchSetId": 3
      },
      "lineNbr": 470,
      "author": {
        "id": 1118575
      },
      "writtenOn": "2017-07-20T11:00:28Z",
      "side": 1,
      "message": "One possible solution that I see would be to keep the length be stored as a Smi (i.e. tagged value aka. MachineType::TaggedSigned) similar to the FixedArray and encode the bitfield in the Smi payload. That would limit the bits available for the hash code down to 21-bit instead of 22-bit.",
      "parentUuid": "78b29021_0954f301",
      "range": {
        "startLine": 470,
        "startChar": 37,
        "endLine": 470,
        "endChar": 44
      },
      "revId": "3d38421fd3b12861260485dbe5adfd44d173131d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}