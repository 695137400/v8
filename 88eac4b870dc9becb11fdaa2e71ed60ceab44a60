{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "437421b7_4132f91c",
        "filename": "src/heap/incremental-marking.cc",
        "patchSetId": 1
      },
      "lineNbr": 562,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2023-01-09T14:30:32Z",
      "side": 0,
      "message": "Here and below: We do publish the mutator marking state in `CppHeap::AdvanceTracing()` (to allow concurrent marking to pick up objects as well), so I think this is also obsolete.",
      "range": {
        "startLine": 562,
        "startChar": 33,
        "endLine": 562,
        "endChar": 47
      },
      "revId": "88eac4b870dc9becb11fdaa2e71ed60ceab44a60",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a182042_189e5034",
        "filename": "src/heap/incremental-marking.cc",
        "patchSetId": 1
      },
      "lineNbr": 562,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2023-01-09T14:53:33Z",
      "side": 0,
      "message": "Following the assignment to see that we indeed use the same marking state was not trivial. Perhaps we should document it better somewhere.\n\nI think you\u0027re right that it\u0027s not necessary, but I\u0027m concerned it might cause an issue in `CppHeap::AdvanceTracing()`. `AdvanceTracing` restarts concurrent tasks, then traces on the main thread (until the deadline is reached), and only then publishes. It worked fine until now because we published before calling `AdvanceTracing`. Now it may happen that concurrent marking thread are restarted, but don\u0027t see any available work and bail out before we publish to them.\nI think `AdvanceTracing` should publish before restarting concurrent marking (as well as after it stops tracing).",
      "parentUuid": "437421b7_4132f91c",
      "range": {
        "startLine": 562,
        "startChar": 33,
        "endLine": 562,
        "endChar": 47
      },
      "revId": "88eac4b870dc9becb11fdaa2e71ed60ceab44a60",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "536802a7_4911d7d9",
        "filename": "src/heap/incremental-marking.cc",
        "patchSetId": 1
      },
      "lineNbr": 562,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2023-01-09T15:11:15Z",
      "side": 0,
      "message": "\u003e I think `AdvanceTracing` should publish before restarting concurrent marking (as well as after it stops tracing).\n\nFor `CppHeap::AdvanceTracing()` I think we only have `NotifyConcurrentMarkingOfWorkIfNeeded()` to signal `kUserBlocking` to the atomic pause. There\u0027s no regular concurrent marking restart in there for the incremental marking case. (Unless I did miss something.)\n\nConcurrent marking is really restarted in `AdvanceMarkingWithLimits()` where it\u0027s paired with the `Publish()` call which is all part of the general marking mechanism as long as we keep on reusing the marking states (by design).\n\nI\u0027d like to keep the CL as is. An improvement would be handling the `kUserBlocking` priority increase in `cppgc` instead of `CppHeap` as that\u0027s actually generally useful. Thoughts?",
      "parentUuid": "2a182042_189e5034",
      "range": {
        "startLine": 562,
        "startChar": 33,
        "endLine": 562,
        "endChar": 47
      },
      "revId": "88eac4b870dc9becb11fdaa2e71ed60ceab44a60",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "581202b7_cac0a305",
        "filename": "src/heap/incremental-marking.cc",
        "patchSetId": 1
      },
      "lineNbr": 562,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2023-01-09T15:52:22Z",
      "side": 0,
      "message": "Moving the priority increase to `cppgc` sgtm, but it can wait for a followup.\n\nIncreasing the priority also calls `NotifyConcurrencyIncrease` that would restart the concurrent jobs. For the calls here that have a deadline, I suppose starting concurrent marking after the step is fine. My concern is for the calls in mark-compact.cc as part of the atomic pause where there is no deadline for the calls to `AdvanceTracing`. I guess since we should have had parallel marking already, and it\u0027s only the current private segments that are not published, it should overall be negligible, right? wdyt?",
      "parentUuid": "536802a7_4911d7d9",
      "range": {
        "startLine": 562,
        "startChar": 33,
        "endLine": 562,
        "endChar": 47
      },
      "revId": "88eac4b870dc9becb11fdaa2e71ed60ceab44a60",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80acbed7_89f99506",
        "filename": "src/heap/incremental-marking.cc",
        "patchSetId": 1
      },
      "lineNbr": 562,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2023-01-09T16:07:17Z",
      "side": 0,
      "message": "\u003e Moving the priority increase to `cppgc` sgtm, but it can wait for a followup.\n\u003e \n\u003e Increasing the priority also calls `NotifyConcurrencyIncrease` that would restart the concurrent jobs. For the calls here that have a deadline, I suppose starting concurrent marking after the step is fine. My concern is for the calls in mark-compact.cc as part of the atomic pause where there is no deadline for the calls to `AdvanceTracing`. I guess since we should have had parallel marking already, and it\u0027s only the current private segments that are not published, it should overall be negligible, right? wdyt?\n\nYeah, I think so. There\u0027s room for improvement in the way we schedule this but it doesn\u0027t look like it\u0027s plain wrong.",
      "parentUuid": "581202b7_cac0a305",
      "range": {
        "startLine": 562,
        "startChar": 33,
        "endLine": 562,
        "endChar": 47
      },
      "revId": "88eac4b870dc9becb11fdaa2e71ed60ceab44a60",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82928f36_7090e32a",
        "filename": "src/heap/incremental-marking.cc",
        "patchSetId": 1
      },
      "lineNbr": 570,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2023-01-09T14:30:32Z",
      "side": 0,
      "message": "I don\u0027t think this was doing anything (anymore) as we already have a `marking_done_` bool in CppHeap.",
      "range": {
        "startLine": 570,
        "startChar": 16,
        "endLine": 570,
        "endChar": 40
      },
      "revId": "88eac4b870dc9becb11fdaa2e71ed60ceab44a60",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d753a59b_8880df0b",
        "filename": "src/heap/incremental-marking.cc",
        "patchSetId": 1
      },
      "lineNbr": 570,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2023-01-09T14:53:33Z",
      "side": 0,
      "message": "Ack",
      "parentUuid": "82928f36_7090e32a",
      "range": {
        "startLine": 570,
        "startChar": 16,
        "endLine": 570,
        "endChar": 40
      },
      "revId": "88eac4b870dc9becb11fdaa2e71ed60ceab44a60",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f99196a_d5b49381",
        "filename": "src/heap/incremental-marking.cc",
        "patchSetId": 2
      },
      "lineNbr": 554,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2023-01-09T14:53:33Z",
      "side": 0,
      "message": "I think this return is still needed otherwise you will overwrite |duration_ms|.",
      "range": {
        "startLine": 554,
        "startChar": 4,
        "endLine": 554,
        "endChar": 10
      },
      "revId": "88eac4b870dc9becb11fdaa2e71ed60ceab44a60",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ceb625a_af534532",
        "filename": "src/heap/incremental-marking.cc",
        "patchSetId": 2
      },
      "lineNbr": 554,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2023-01-09T15:11:15Z",
      "side": 0,
      "message": "Done",
      "parentUuid": "4f99196a_d5b49381",
      "range": {
        "startLine": 554,
        "startChar": 4,
        "endLine": 554,
        "endChar": 10
      },
      "revId": "88eac4b870dc9becb11fdaa2e71ed60ceab44a60",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}