{
  "comments": [
    {
      "key": {
        "uuid": "86f2c016_0856a7fd",
        "filename": "src/debug/debug.cc",
        "patchSetId": 9
      },
      "lineNbr": 1761,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2017-11-14T16:07:25Z",
      "side": 1,
      "message": "Nit: else if",
      "revId": "52f8239c1fabfb6466f7b818de89d151c8f7271e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d9fcc50_4cf5a54c",
        "filename": "src/debug/debug.cc",
        "patchSetId": 9
      },
      "lineNbr": 1761,
      "author": {
        "id": 1125920
      },
      "writtenOn": "2017-11-14T16:50:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "86f2c016_0856a7fd",
      "revId": "52f8239c1fabfb6466f7b818de89d151c8f7271e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2c055a08_20dc5089",
        "filename": "src/debug/debug.cc",
        "patchSetId": 9
      },
      "lineNbr": 1765,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2017-11-14T16:07:25Z",
      "side": 1,
      "message": "Nit: else",
      "revId": "52f8239c1fabfb6466f7b818de89d151c8f7271e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "819c035b_c496bb3d",
        "filename": "src/debug/debug.cc",
        "patchSetId": 9
      },
      "lineNbr": 1765,
      "author": {
        "id": 1125920
      },
      "writtenOn": "2017-11-14T16:50:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2c055a08_20dc5089",
      "revId": "52f8239c1fabfb6466f7b818de89d151c8f7271e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0dcc42a6_f9c00690",
        "filename": "src/debug/debug.cc",
        "patchSetId": 9
      },
      "lineNbr": 1769,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2017-11-14T16:07:25Z",
      "side": 1,
      "message": "I wonder if we could handle this case without a stack walk.",
      "revId": "52f8239c1fabfb6466f7b818de89d151c8f7271e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c47dad2_cbe7239d",
        "filename": "src/debug/debug.cc",
        "patchSetId": 9
      },
      "lineNbr": 1769,
      "author": {
        "id": 1125920
      },
      "writtenOn": "2017-11-14T16:50:32Z",
      "side": 1,
      "message": "We walk only until first user function on stack trace and in any case this part is much faster then getting async task id from promise. We can optimize this part later by adding specific instrumentation into promise builtins.",
      "parentUuid": "0dcc42a6_f9c00690",
      "revId": "52f8239c1fabfb6466f7b818de89d151c8f7271e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5be253d_bcf44447",
        "filename": "src/debug/debug.cc",
        "patchSetId": 9
      },
      "lineNbr": 1772,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2017-11-14T16:07:25Z",
      "side": 1,
      "message": "Nit: This seems unnatural, why not iterate from 0 \u003c\u003d i \u003c size? Or just C++11 style:\n\n  for (const auto\u0026 info : infos) {",
      "revId": "52f8239c1fabfb6466f7b818de89d151c8f7271e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c988566e_5e0455a6",
        "filename": "src/debug/debug.cc",
        "patchSetId": 9
      },
      "lineNbr": 1772,
      "author": {
        "id": 1125920
      },
      "writtenOn": "2017-11-14T16:50:32Z",
      "side": 1,
      "message": "I need to iterate in reverse order and since always (size value) \u003e\u003d 0 I prefer this kind of cycle.",
      "parentUuid": "a5be253d_bcf44447",
      "revId": "52f8239c1fabfb6466f7b818de89d151c8f7271e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9972fbe5_a1b49ae9",
        "filename": "src/debug/debug.cc",
        "patchSetId": 9
      },
      "lineNbr": 1772,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2017-11-14T16:55:37Z",
      "side": 1,
      "message": "Oh I missed that. I would\u0027ve expected `for (i \u003d size - 1; i \u003e\u003d 0; i--)` then, but YMMV.",
      "parentUuid": "c988566e_5e0455a6",
      "revId": "52f8239c1fabfb6466f7b818de89d151c8f7271e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c50fc153_4fd814d1",
        "filename": "src/debug/debug.cc",
        "patchSetId": 9
      },
      "lineNbr": 1785,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2017-11-14T16:07:25Z",
      "side": 1,
      "message": "SFI::lazy_deserialization_builtin_id is meant only for use by lazy deserialization. Could you compare the code objects instead (i.e. against *BUILTIN_CODE(isolate, Builtins::kAsyncFunctionPromiseCreate))? Since the frame is on the callstack, the builtin must\u0027ve already been deserialized.",
      "revId": "52f8239c1fabfb6466f7b818de89d151c8f7271e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f768b68c_0ed5f4af",
        "filename": "src/debug/debug.cc",
        "patchSetId": 9
      },
      "lineNbr": 1785,
      "author": {
        "id": 1125920
      },
      "writtenOn": "2017-11-14T16:50:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c50fc153_4fd814d1",
      "revId": "52f8239c1fabfb6466f7b818de89d151c8f7271e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "755191ee_55ab973e",
        "filename": "src/debug/debug.cc",
        "patchSetId": 9
      },
      "lineNbr": 2174,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2017-11-14T16:07:25Z",
      "side": 1,
      "message": "Nit: the argument is called `is_blackboxed` here and `created_by_user` in the header.",
      "revId": "52f8239c1fabfb6466f7b818de89d151c8f7271e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c01b4a8_4bb6767f",
        "filename": "src/debug/debug.cc",
        "patchSetId": 9
      },
      "lineNbr": 2174,
      "author": {
        "id": 1125920
      },
      "writtenOn": "2017-11-14T16:50:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "755191ee_55ab973e",
      "revId": "52f8239c1fabfb6466f7b818de89d151c8f7271e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}