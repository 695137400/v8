{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fd7544a5_783b9d2a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2024-04-04T09:05:38Z",
      "side": 1,
      "message": "LGTM, thanks",
      "revId": "f3b33113f78ddcfd52e13eefaed0b965744dff06",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da01f450_57d72e3c",
        "filename": "src/compiler/turboshaft/operations.cc",
        "patchSetId": 1
      },
      "lineNbr": 1783,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2024-04-04T08:22:51Z",
      "side": 1,
      "message": "Do you think we should allow comparison of different `V` types to make this nicer?",
      "range": {
        "startLine": 1783,
        "startChar": 12,
        "endLine": 1783,
        "endChar": 24
      },
      "revId": "f3b33113f78ddcfd52e13eefaed0b965744dff06",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "567d393e_f0be4c65",
        "filename": "src/compiler/turboshaft/operations.cc",
        "patchSetId": 1
      },
      "lineNbr": 1783,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2024-04-04T08:47:19Z",
      "side": 1,
      "message": "I thought `V\u003cAny\u003e::Cast` casts an `OpIndex` into a `V\u003cAny\u003e`. Alternatively `graph.PreviousIndex` could also return a `V\u003cAny\u003e` instead of an `OpIndex`.\n\nI don\u0027t think allowing comparisons of different `V` types would help much, shouldn\u0027t they typically have the same type?",
      "parentUuid": "da01f450_57d72e3c",
      "range": {
        "startLine": 1783,
        "startChar": 12,
        "endLine": 1783,
        "endChar": 24
      },
      "revId": "f3b33113f78ddcfd52e13eefaed0b965744dff06",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e3b6fb33_7364bfe8",
        "filename": "src/compiler/turboshaft/operations.cc",
        "patchSetId": 1
      },
      "lineNbr": 1783,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2024-04-04T09:05:38Z",
      "side": 1,
      "message": "I think `graph.PreviousIndex` returning a plain `OpIndex` is fine and casting here to `V\u003cAny\u003e` is fine here, too. I was just thinking in general that we might want to be able to compare indices regardless of type (I think this wouldn\u0027t harm), but we can think about this another time and consider in a follow up. I think it\u0027s rarely necessary anyway.",
      "parentUuid": "567d393e_f0be4c65",
      "range": {
        "startLine": 1783,
        "startChar": 12,
        "endLine": 1783,
        "endChar": 24
      },
      "revId": "f3b33113f78ddcfd52e13eefaed0b965744dff06",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "f3b33113f78ddcfd52e13eefaed0b965744dff06",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "f3b33113f78ddcfd52e13eefaed0b965744dff06",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "f3b33113f78ddcfd52e13eefaed0b965744dff06",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}