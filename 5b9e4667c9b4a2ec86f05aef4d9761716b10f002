{
  "comments": [
    {
      "key": {
        "uuid": "6079015c_46de6ece",
        "filename": "src/wasm/function-body-decoder-impl.h",
        "patchSetId": 3
      },
      "lineNbr": 1088,
      "author": {
        "id": 1002783
      },
      "writtenOn": "2017-12-01T22:26:48Z",
      "side": 1,
      "message": "Seems like this may not work, since the opcode after the prefix could be shared between the SIMD and Atomics?",
      "revId": "5b9e4667c9b4a2ec86f05aef4d9761716b10f002",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80f5042c_146be759",
        "filename": "src/wasm/function-body-decoder-impl.h",
        "patchSetId": 3
      },
      "lineNbr": 1088,
      "author": {
        "id": 1122079
      },
      "writtenOn": "2017-12-01T22:38:14Z",
      "side": 1,
      "message": "Not sure if I understand, we update the opcode above to have the prefix, and the byte after - so the final opcode can either be a SIMD or an Atomic opcode based on the prefix, or an invalid opcode.",
      "parentUuid": "6079015c_46de6ece",
      "revId": "5b9e4667c9b4a2ec86f05aef4d9761716b10f002",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7c47217_85ff8b8f",
        "filename": "src/wasm/function-body-decoder-impl.h",
        "patchSetId": 3
      },
      "lineNbr": 1095,
      "author": {
        "id": 1002783
      },
      "writtenOn": "2017-12-01T22:26:48Z",
      "side": 1,
      "message": "Maybe just fallthrough to the default case below?",
      "revId": "5b9e4667c9b4a2ec86f05aef4d9761716b10f002",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "059065cf_78d8b9af",
        "filename": "src/wasm/function-body-decoder-impl.h",
        "patchSetId": 3
      },
      "lineNbr": 1095,
      "author": {
        "id": 1122079
      },
      "writtenOn": "2017-12-01T22:38:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f7c47217_85ff8b8f",
      "revId": "5b9e4667c9b4a2ec86f05aef4d9761716b10f002",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "42db0b6c_5ce9cdca",
        "filename": "src/wasm/wasm-interpreter.cc",
        "patchSetId": 3
      },
      "lineNbr": 1544,
      "author": {
        "id": 1144619
      },
      "writtenOn": "2017-12-01T21:19:15Z",
      "side": 1,
      "message": "len should be a pointer or const\u0026 by the coding style: https://google.github.io/styleguide/cppguide.html#Reference_Arguments\n\nIf it can be const, it\u0027d be better not to make it a reference at all.\n\n(It\u0027s fine to do this as a separate cleanup since it\u0027s kind of independent of your change)",
      "revId": "5b9e4667c9b4a2ec86f05aef4d9761716b10f002",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f49ec1d0_3d76d157",
        "filename": "src/wasm/wasm-interpreter.cc",
        "patchSetId": 3
      },
      "lineNbr": 1544,
      "author": {
        "id": 1122079
      },
      "writtenOn": "2017-12-01T21:54:55Z",
      "side": 1,
      "message": "Thanks for catching, I\u0027ll clean this up in a separate CL as it will touch other unrelated functions.",
      "parentUuid": "42db0b6c_5ce9cdca",
      "revId": "5b9e4667c9b4a2ec86f05aef4d9761716b10f002",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}