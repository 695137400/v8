{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ac5f9e11_3ff1c79c",
        "filename": "src/heap/cppgc-js/cpp-snapshot.cc",
        "patchSetId": 2
      },
      "lineNbr": 464,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-09-03T11:17:45Z",
      "side": 1,
      "message": "nit: Here and above, do we still need the default arg?",
      "range": {
        "startLine": 464,
        "startChar": 43,
        "endLine": 464,
        "endChar": 48
      },
      "revId": "621ece21732ea2e60d4838dd3c4241b6aadd8eb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "98211b38_5c38afda",
        "filename": "src/heap/cppgc-js/cpp-snapshot.cc",
        "patchSetId": 2
      },
      "lineNbr": 464,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2021-09-03T12:18:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ac5f9e11_3ff1c79c",
      "range": {
        "startLine": 464,
        "startChar": 43,
        "endLine": 464,
        "endChar": 48
      },
      "revId": "621ece21732ea2e60d4838dd3c4241b6aadd8eb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7a73880_272f9361",
        "filename": "src/heap/cppgc-js/cpp-snapshot.cc",
        "patchSetId": 2
      },
      "lineNbr": 822,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-09-03T11:17:45Z",
      "side": 1,
      "message": "Why can\u0027t we just call the TracedReferenceBase variant of VisitForVisibility in line 840 below?\nWe should only get here with a TracedReference, so I think it\u0027s safe to assume that and crash otherwise.",
      "range": {
        "startLine": 821,
        "startChar": 2,
        "endLine": 822,
        "endChar": 39
      },
      "revId": "621ece21732ea2e60d4838dd3c4241b6aadd8eb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea2e626e_8d90bca4",
        "filename": "src/heap/cppgc-js/cpp-snapshot.cc",
        "patchSetId": 2
      },
      "lineNbr": 822,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2021-09-03T11:39:57Z",
      "side": 1,
      "message": "There\u0027s no invariant that guarantees us that it\u0027s a TracedReference at this point. In Blink we only use it for that type right now but it would work for anything that\u0027s eagerly traced.\n\nSimilarly, we don\u0027t assume anything in the marker and just delegate to TraceTrait.",
      "parentUuid": "c7a73880_272f9361",
      "range": {
        "startLine": 821,
        "startChar": 2,
        "endLine": 822,
        "endChar": 39
      },
      "revId": "621ece21732ea2e60d4838dd3c4241b6aadd8eb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e856af5_833ff62e",
        "filename": "src/heap/cppgc-js/cpp-snapshot.cc",
        "patchSetId": 2
      },
      "lineNbr": 822,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-09-03T12:26:22Z",
      "side": 1,
      "message": "I didn\u0027t mean set an invariant. I meant to implicitly assume that by calling VisitForVisibility directly. We have implementations for GCed objects and for TraceReferences. If we get a new type, it will fail and crash (or not even build), which will tell us that there\u0027s a problem. I\u0027m just not convinced we need the added abstractions here of initializing another visitor and dispatching. wdyt?",
      "parentUuid": "ea2e626e_8d90bca4",
      "range": {
        "startLine": 821,
        "startChar": 2,
        "endLine": 822,
        "endChar": 39
      },
      "revId": "621ece21732ea2e60d4838dd3c4241b6aadd8eb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3e4255e_ce0a541f",
        "filename": "src/heap/cppgc-js/cpp-snapshot.cc",
        "patchSetId": 2
      },
      "lineNbr": 822,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2021-09-03T12:35:14Z",
      "side": 1,
      "message": "\u003e I didn\u0027t mean set an invariant. I meant to implicitly assume that by calling VisitForVisibility directly. We have implementations for GCed objects and for TraceReferences. If we get a new type, it will fail and crash (or not even build), which will tell us that there\u0027s a problem. I\u0027m just not convinced we need the added abstractions here of initializing another visitor and dispatching. wdyt?\n\nWe would be casting a void* to TraceReferenceBase* here which is not correct as we have a TraceWrapperV8Reference* on the Blink side [1]. There\u0027s no compile time failure but we may or may not crash depending on object layouts.\n\nAlso, this still generally compiles as it uses the same patter as we use to make TraceWrapperV8Reference work:\n  class Foo {\n    DISALLOW_NEW();\n   public:\n    void Trace(Visitor*) const {}\n  };\n  // Adjust TraceTrait.\n  HeapHashMap\u003cWeakMember\u003cA\u003e, Foo\u003e;\n\nI *don\u0027t* think it should work like that but that\u0027s what we have right now because of TraceWrapperV8Reference.\n\nIdeally, we don\u0027t use TraceWrapperV8Reference but just TracedReference (relatively straight forward) and also rely on our EphemeronPair which we would specialize for WeakMemember + Member/TracedReference (seems harder because of Blink collections). This would allow making us all of this more explicit.\n\n[1] https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/platform/bindings/dom_data_store.h;l\u003d203;drc\u003df6f22e82bcd0d50f390b23ee9688c58de5ae0bdc",
      "parentUuid": "1e856af5_833ff62e",
      "range": {
        "startLine": 821,
        "startChar": 2,
        "endLine": 822,
        "endChar": 39
      },
      "revId": "621ece21732ea2e60d4838dd3c4241b6aadd8eb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "08401671_26e1b267",
        "filename": "src/heap/cppgc-js/cpp-snapshot.cc",
        "patchSetId": 2
      },
      "lineNbr": 822,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-09-03T12:59:06Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d3e4255e_ce0a541f",
      "range": {
        "startLine": 821,
        "startChar": 2,
        "endLine": 822,
        "endChar": 39
      },
      "revId": "621ece21732ea2e60d4838dd3c4241b6aadd8eb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f4bcf57_bfd22d8f",
        "filename": "src/heap/cppgc-js/cpp-snapshot.cc",
        "patchSetId": 2
      },
      "lineNbr": 882,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-09-03T11:17:45Z",
      "side": 1,
      "message": "Why does this need to be a new visitor? I think we can reuse |object_visitor|.",
      "range": {
        "startLine": 882,
        "startChar": 27,
        "endLine": 882,
        "endChar": 62
      },
      "revId": "621ece21732ea2e60d4838dd3c4241b6aadd8eb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e738ab3c_e640a57b",
        "filename": "src/heap/cppgc-js/cpp-snapshot.cc",
        "patchSetId": 2
      },
      "lineNbr": 882,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2021-09-03T11:41:14Z",
      "side": 1,
      "message": "There\u0027s no strict need. The alternative is setting the edge_name on the existing visitor here.",
      "parentUuid": "3f4bcf57_bfd22d8f",
      "range": {
        "startLine": 882,
        "startChar": 27,
        "endLine": 882,
        "endChar": 62
      },
      "revId": "621ece21732ea2e60d4838dd3c4241b6aadd8eb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f9e67562_2e748708",
        "filename": "src/heap/cppgc-js/cpp-snapshot.cc",
        "patchSetId": 2
      },
      "lineNbr": 882,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2021-09-03T12:18:53Z",
      "side": 1,
      "message": "Used a setter now. In the current case it doesn\u0027t matter. If we reuse the visitor, we should reset the edge name again to get auto indexing.",
      "parentUuid": "e738ab3c_e640a57b",
      "range": {
        "startLine": 882,
        "startChar": 27,
        "endLine": 882,
        "endChar": 62
      },
      "revId": "621ece21732ea2e60d4838dd3c4241b6aadd8eb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}