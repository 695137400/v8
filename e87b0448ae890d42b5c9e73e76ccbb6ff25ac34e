{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "73e2ba76_adce121f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1145189
      },
      "writtenOn": "2020-11-02T12:01:49Z",
      "side": 1,
      "message": "Thanks Sathya! overall lg. Just a couple of comments.",
      "revId": "e87b0448ae890d42b5c9e73e76ccbb6ff25ac34e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76ca8d46_b89c8a53",
        "filename": "src/compiler/effect-control-linearizer.cc",
        "patchSetId": 6
      },
      "lineNbr": 1941,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-11-02T11:17:38Z",
      "side": 1,
      "message": "suggest DCHECK(maps_count \u003e 1)",
      "revId": "e87b0448ae890d42b5c9e73e76ccbb6ff25ac34e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5a387037_b0f16a2b",
        "filename": "src/compiler/effect-control-linearizer.cc",
        "patchSetId": 6
      },
      "lineNbr": 1941,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2020-11-03T10:48:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "76ca8d46_b89c8a53",
      "revId": "e87b0448ae890d42b5c9e73e76ccbb6ff25ac34e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfcc2a86_62b2afcf",
        "filename": "src/compiler/effect-control-linearizer.cc",
        "patchSetId": 6
      },
      "lineNbr": 1949,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-11-02T11:17:38Z",
      "side": 1,
      "message": "In this case the `check` value goes unused. Looks like we\u0027re missing the final equality check.\n\nAlso, suggestion: Could we tell the builtin to start checking at a particular slot?",
      "revId": "e87b0448ae890d42b5c9e73e76ccbb6ff25ac34e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd2b39c6_3760dcef",
        "filename": "src/compiler/effect-control-linearizer.cc",
        "patchSetId": 6
      },
      "lineNbr": 1949,
      "author": {
        "id": 1145189
      },
      "writtenOn": "2020-11-02T12:01:49Z",
      "side": 1,
      "message": "+1 for the equality check. \n\nJakob, IIUC your suggestion is to also specify where to start checking right? like if we see two maps here, start checking from 3rd. Unfortunately we still might have to check 1st and second slots too, so I think that might complicate the builtin a bit.",
      "parentUuid": "dfcc2a86_62b2afcf",
      "revId": "e87b0448ae890d42b5c9e73e76ccbb6ff25ac34e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a048ce49_3904a9c8",
        "filename": "src/compiler/effect-control-linearizer.cc",
        "patchSetId": 6
      },
      "lineNbr": 1949,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2020-11-03T10:48:43Z",
      "side": 1,
      "message": "Done\n\n\u003e Also, suggestion: Could we tell the builtin to start checking at a particular slot?\n\nWe could but the initial maps could change in the feedback vector so we need to check all the maps.",
      "parentUuid": "dd2b39c6_3760dcef",
      "revId": "e87b0448ae890d42b5c9e73e76ccbb6ff25ac34e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d6f4e6b8_db562295",
        "filename": "src/compiler/effect-control-linearizer.cc",
        "patchSetId": 6
      },
      "lineNbr": 1949,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-11-03T11:17:22Z",
      "side": 1,
      "message": "So maps in the FV can be added and/or reordered but never removed?",
      "parentUuid": "a048ce49_3904a9c8",
      "revId": "e87b0448ae890d42b5c9e73e76ccbb6ff25ac34e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "78cd7c09_0441ca12",
        "filename": "src/compiler/effect-control-linearizer.cc",
        "patchSetId": 6
      },
      "lineNbr": 1949,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2020-11-04T13:38:19Z",
      "side": 1,
      "message": "They can be added, reordered and removed.",
      "parentUuid": "d6f4e6b8_db562295",
      "revId": "e87b0448ae890d42b5c9e73e76ccbb6ff25ac34e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "39d0068a_6711ef9c",
        "filename": "src/compiler/effect-control-linearizer.cc",
        "patchSetId": 6
      },
      "lineNbr": 1949,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-11-04T13:41:02Z",
      "side": 1,
      "message": "If they can be removed, what does that mean for inlined map checks? Is the code invalidated?",
      "parentUuid": "78cd7c09_0441ca12",
      "revId": "e87b0448ae890d42b5c9e73e76ccbb6ff25ac34e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e61575d3_51714dda",
        "filename": "src/compiler/effect-control-linearizer.cc",
        "patchSetId": 6
      },
      "lineNbr": 1949,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2020-11-04T13:45:10Z",
      "side": 1,
      "message": "In the builtin, we check the map as well as the handler -- the handler will be different if the new map invalidates the code. \n\nThe inlined map checks can never in an incorrect state because for those maps, our code can not be incorrect.",
      "parentUuid": "39d0068a_6711ef9c",
      "revId": "e87b0448ae890d42b5c9e73e76ccbb6ff25ac34e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b693ce1b_d602a3a1",
        "filename": "src/compiler/effect-control-linearizer.cc",
        "patchSetId": 6
      },
      "lineNbr": 1949,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-11-04T13:51:04Z",
      "side": 1,
      "message": "I see, thanks.",
      "parentUuid": "e61575d3_51714dda",
      "revId": "e87b0448ae890d42b5c9e73e76ccbb6ff25ac34e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19a1bbca_a962f038",
        "filename": "src/compiler/js-native-context-specialization.cc",
        "patchSetId": 6
      },
      "lineNbr": 1078,
      "author": {
        "id": 1145189
      },
      "writtenOn": "2020-11-02T12:01:49Z",
      "side": 1,
      "message": "I don\u0027t think it is required since we only use maps for generating code. We don\u0027t use it to lookup anything from the map.",
      "revId": "e87b0448ae890d42b5c9e73e76ccbb6ff25ac34e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0f4b2782_17fef080",
        "filename": "src/compiler/js-native-context-specialization.cc",
        "patchSetId": 6
      },
      "lineNbr": 1078,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2020-11-03T10:48:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "19a1bbca_a962f038",
      "revId": "e87b0448ae890d42b5c9e73e76ccbb6ff25ac34e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59549b7a_33eaf461",
        "filename": "src/compiler/simplified-operator.cc",
        "patchSetId": 6
      },
      "lineNbr": 297,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-11-02T11:17:38Z",
      "side": 1,
      "message": "This compares the entire set in O(n), no? Is that intended?",
      "revId": "e87b0448ae890d42b5c9e73e76ccbb6ff25ac34e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a8f8b5b_41cb42f6",
        "filename": "src/compiler/simplified-operator.cc",
        "patchSetId": 6
      },
      "lineNbr": 297,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2020-11-03T10:48:43Z",
      "side": 1,
      "message": "Yes, I think so? It\u0027s similar to CheckMapsParameters##maps() which seems to do the same O(n) comparison",
      "parentUuid": "59549b7a_33eaf461",
      "revId": "e87b0448ae890d42b5c9e73e76ccbb6ff25ac34e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a253975b_d0c42fb1",
        "filename": "src/compiler/simplified-operator.h",
        "patchSetId": 6
      },
      "lineNbr": 450,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-11-02T11:17:38Z",
      "side": 1,
      "message": "Likewise here this copies the set, right? Could we instead store a pointer to the set?",
      "range": {
        "startLine": 450,
        "startChar": 42,
        "endLine": 450,
        "endChar": 53
      },
      "revId": "e87b0448ae890d42b5c9e73e76ccbb6ff25ac34e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9518fb7c_a81294db",
        "filename": "src/compiler/simplified-operator.h",
        "patchSetId": 6
      },
      "lineNbr": 450,
      "author": {
        "id": 1145189
      },
      "writtenOn": "2020-11-02T12:01:49Z",
      "side": 1,
      "message": "Actually, I think instead of plumbing all this information through, we can just get this from the broker. So dynamic map checks parameters will only have FeedbackSource and in effect-control-linearizer we can simply get this information from the broker by something like this:\n\nFeedbackSource const\u0026 feedback_source \u003d DynamicCheckMapsParametersOf(node-\u003eop());\nMinimorphicLoadPropertyAccessFeedback feedback \u003d  broker()-\u003eGetFeedback(feedback_source).AsMinimorphicPropertyAccess();\n\nThat way we could avoid plumbing this information through and any unnecessary copies too.",
      "parentUuid": "a253975b_d0c42fb1",
      "range": {
        "startLine": 450,
        "startChar": 42,
        "endLine": 450,
        "endChar": 53
      },
      "revId": "e87b0448ae890d42b5c9e73e76ccbb6ff25ac34e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8664a235_e462dba0",
        "filename": "src/compiler/simplified-operator.h",
        "patchSetId": 6
      },
      "lineNbr": 450,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2020-11-03T10:48:43Z",
      "side": 1,
      "message": "Mostly just copied from CheckMapsParameters that does this as well. Do you know why CheckMapParameters does this?",
      "parentUuid": "a253975b_d0c42fb1",
      "range": {
        "startLine": 450,
        "startChar": 42,
        "endLine": 450,
        "endChar": 53
      },
      "revId": "e87b0448ae890d42b5c9e73e76ccbb6ff25ac34e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18fa162a_b99d7d32",
        "filename": "src/compiler/simplified-operator.h",
        "patchSetId": 6
      },
      "lineNbr": 450,
      "author": {
        "id": 1145189
      },
      "writtenOn": "2020-11-03T11:15:02Z",
      "side": 1,
      "message": "I think for CheckMaps, there is no one place where we can get the list of all maps. We store the PropertyAccessInfo per each receiver_map + access_type and when we build check maps we combine all these and come up with a list of receiver_maps: \nhttps://source.chromium.org/chromium/chromium/src/+/master:v8/src/compiler/js-native-context-specialization.cc;l\u003d1155\n\nWhere as for dyanmic map checks we already have all this info just in one place.",
      "parentUuid": "8664a235_e462dba0",
      "range": {
        "startLine": 450,
        "startChar": 42,
        "endLine": 450,
        "endChar": 53
      },
      "revId": "e87b0448ae890d42b5c9e73e76ccbb6ff25ac34e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f94c9e1_59d8e4f7",
        "filename": "src/compiler/simplified-operator.h",
        "patchSetId": 6
      },
      "lineNbr": 450,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-11-03T11:17:22Z",
      "side": 1,
      "message": "Nope, wasn\u0027t aware of CMP. That also seems like something we should fix.",
      "parentUuid": "8664a235_e462dba0",
      "range": {
        "startLine": 450,
        "startChar": 42,
        "endLine": 450,
        "endChar": 53
      },
      "revId": "e87b0448ae890d42b5c9e73e76ccbb6ff25ac34e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e53e374a_878faded",
        "filename": "src/compiler/simplified-operator.h",
        "patchSetId": 6
      },
      "lineNbr": 450,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-11-03T11:18:16Z",
      "side": 1,
      "message": "Anyways, if the original set were zone-allocated, we could easily store a ptr here instead of a copy.",
      "parentUuid": "8f94c9e1_59d8e4f7",
      "range": {
        "startLine": 450,
        "startChar": 42,
        "endLine": 450,
        "endChar": 53
      },
      "revId": "e87b0448ae890d42b5c9e73e76ccbb6ff25ac34e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "01ea3251_4d877ed7",
        "filename": "src/compiler/simplified-operator.h",
        "patchSetId": 6
      },
      "lineNbr": 450,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2020-11-04T13:38:19Z",
      "side": 1,
      "message": "Actually, ZoneHandleSet is a thin wrapper around a zone vector so I don\u0027t think there\u0027s any copying of the underlying zone vector happening here.",
      "parentUuid": "e53e374a_878faded",
      "range": {
        "startLine": 450,
        "startChar": 42,
        "endLine": 450,
        "endChar": 53
      },
      "revId": "e87b0448ae890d42b5c9e73e76ccbb6ff25ac34e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b3bddd3b_8075afda",
        "filename": "src/compiler/simplified-operator.h",
        "patchSetId": 6
      },
      "lineNbr": 450,
      "author": {
        "id": 1145189
      },
      "writtenOn": "2020-11-04T14:35:30Z",
      "side": 1,
      "message": "I still prefer getting this information from broker, so we can avoid plumbing this information through. Though not necessary for this cl.",
      "parentUuid": "01ea3251_4d877ed7",
      "range": {
        "startLine": 450,
        "startChar": 42,
        "endLine": 450,
        "endChar": 53
      },
      "revId": "e87b0448ae890d42b5c9e73e76ccbb6ff25ac34e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "73c942c7_d52bef32",
        "filename": "src/compiler/simplified-operator.h",
        "patchSetId": 6
      },
      "lineNbr": 450,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2020-11-04T15:45:12Z",
      "side": 1,
      "message": "I\u0027m happy to make the change but I\u0027m curious to understand the reasoning for future reference. \n\nThe way I see it, plumbing it through the operator makes it clear what the operator depends on (ie, more explicit) which simplifies other operations such as equality checking of the operator (which now needs to look at the broker to get the maps?). On the other hand, if we do this, there\u0027s no need for this extra plumbing code. \n\nIs there anything else I missed?",
      "parentUuid": "b3bddd3b_8075afda",
      "range": {
        "startLine": 450,
        "startChar": 42,
        "endLine": 450,
        "endChar": 53
      },
      "revId": "e87b0448ae890d42b5c9e73e76ccbb6ff25ac34e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}