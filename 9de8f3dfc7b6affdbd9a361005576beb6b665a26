{
  "comments": [
    {
      "key": {
        "uuid": "455f453d_3bed0fdd",
        "filename": "src/assembler.cc",
        "patchSetId": 7
      },
      "lineNbr": 914,
      "author": {
        "id": 1162379
      },
      "writtenOn": "2017-07-26T16:52:12Z",
      "side": 1,
      "message": "Hack to pick the correct overload of JSFunction::IsInterpreted",
      "revId": "9de8f3dfc7b6affdbd9a361005576beb6b665a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54ebc082_638860bc",
        "filename": "src/bootstrapper.cc",
        "patchSetId": 7
      },
      "lineNbr": 1503,
      "author": {
        "id": 1162379
      },
      "writtenOn": "2017-07-26T16:52:12Z",
      "side": 1,
      "message": "Some closures were renamed, also installs the new one",
      "revId": "9de8f3dfc7b6affdbd9a361005576beb6b665a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa81e74e_76655e67",
        "filename": "src/builtins/builtins-async-gen.cc",
        "patchSetId": 7
      },
      "lineNbr": 22,
      "author": {
        "id": 1162379
      },
      "writtenOn": "2017-07-26T16:52:12Z",
      "side": 1,
      "message": "A few adjustments are made to support resolve/reject closures that are Phis (so that AsyncGeneratorReturn can pick which closure to use)",
      "revId": "9de8f3dfc7b6affdbd9a361005576beb6b665a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3bfcfba_706be481",
        "filename": "src/builtins/builtins-async-gen.h",
        "patchSetId": 7
      },
      "lineNbr": 46,
      "author": {
        "id": 1162379
      },
      "writtenOn": "2017-07-26T16:52:12Z",
      "side": 1,
      "message": "These overloads avoid adding changes to builtins-async-function-gen.cc and other callers in builtins-async-generators-gen.cc, but they don\u0027t have to be included in the version that lands.",
      "revId": "9de8f3dfc7b6affdbd9a361005576beb6b665a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9bf4c035_d2bb93c1",
        "filename": "src/builtins/builtins-async-generator-gen.cc",
        "patchSetId": 7
      },
      "lineNbr": 260,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2017-07-27T09:56:31Z",
      "side": 1,
      "message": "Nit: At some point this should also use the LoadPromiseFromAsyncGeneratorRequest helper, doesn\u0027t have to be in this CL though.",
      "revId": "9de8f3dfc7b6affdbd9a361005576beb6b665a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "101bdbde_e2c65ab2",
        "filename": "src/builtins/builtins-async-generator-gen.cc",
        "patchSetId": 7
      },
      "lineNbr": 327,
      "author": {
        "id": 1162379
      },
      "writtenOn": "2017-07-26T16:52:12Z",
      "side": 1,
      "message": "Previously, the catch handler would be statically known upon resuming the generator. Since the AsyncGeneratorResumeNext stub performs the Await on its own, it needs to figure out if rejections will be handled. This function tries to do that.",
      "revId": "9de8f3dfc7b6affdbd9a361005576beb6b665a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "319b169f_f25ad5b1",
        "filename": "src/builtins/builtins-async-generator-gen.cc",
        "patchSetId": 7
      },
      "lineNbr": 327,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2017-07-27T09:56:31Z",
      "side": 1,
      "message": "In my previous comment here, I meant not only replacing the `IsInterpreted` logic with a C call; but moving this entire `HasCatchHandlerForPC` helper to C++. There, we would ideally be able to reuse already existing logic (e.g. in isolate.cc:PredictException or similar).",
      "parentUuid": "101bdbde_e2c65ab2",
      "revId": "9de8f3dfc7b6affdbd9a361005576beb6b665a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35c8c72e_28d38abe",
        "filename": "src/builtins/builtins-async-generator-gen.cc",
        "patchSetId": 7
      },
      "lineNbr": 346,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2017-07-27T09:43:27Z",
      "side": 1,
      "message": "I don\u0027t think it\u0027s valid to check the JSFunction for being interpreted / not interpreted to know whether the current activation is interpreted / optimized. The current activation could have been OSRed or could have deopted which would mean that the stack frame\u0027s PC type (interpreted or optimized) wouldn\u0027t match that of the JSFunction.",
      "range": {
        "startLine": 342,
        "startChar": 0,
        "endLine": 346,
        "endChar": 46
      },
      "revId": "9de8f3dfc7b6affdbd9a361005576beb6b665a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "178aa083_59f63d0a",
        "filename": "src/builtins/builtins-async-generator-gen.cc",
        "patchSetId": 7
      },
      "lineNbr": 364,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2017-07-27T09:43:27Z",
      "side": 1,
      "message": "I don\u0027t understand this - we only have non-optimized code in the SFI (optimized code goes on the JSFunction), and we never use full-codegen for generators, so why do we look for a handler table for the code offset in the SFI?",
      "range": {
        "startLine": 358,
        "startChar": 2,
        "endLine": 364,
        "endChar": 3
      },
      "revId": "9de8f3dfc7b6affdbd9a361005576beb6b665a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd616a78_ba437008",
        "filename": "src/builtins/builtins-async-generator-gen.cc",
        "patchSetId": 7
      },
      "lineNbr": 542,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2017-07-27T09:56:31Z",
      "side": 1,
      "message": "Please clarify here that in all cases, the resolve/reject closures end up calling AsyncGeneratorResumeNext again (the current comment sounds to me like it happens only if the generator is closed).",
      "revId": "9de8f3dfc7b6affdbd9a361005576beb6b665a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64e2cd21_089a9fc6",
        "filename": "src/builtins/builtins-async-generator-gen.cc",
        "patchSetId": 7
      },
      "lineNbr": 544,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2017-07-27T09:56:31Z",
      "side": 1,
      "message": "Nit: We could load the value before the branch.",
      "revId": "9de8f3dfc7b6affdbd9a361005576beb6b665a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d68f04c_fced0624",
        "filename": "src/builtins/builtins-async-generator-gen.cc",
        "patchSetId": 7
      },
      "lineNbr": 671,
      "author": {
        "id": 1162379
      },
      "writtenOn": "2017-07-26T16:52:12Z",
      "side": 1,
      "message": "When resuming with .return(), this stub is called. It performs an Await on the sent value before resuming the generator with a \"return\" completion. If it fails, it resumes with a \"throw\" completion.\n\nIf the generator was already closed, instead of resuming the generator, it will just perform AsyncGeneratorResolve or AsyncGeneratorReject.",
      "revId": "9de8f3dfc7b6affdbd9a361005576beb6b665a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a7c25ec_41c59b08",
        "filename": "src/builtins/builtins-async-generator-gen.cc",
        "patchSetId": 7
      },
      "lineNbr": 671,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2017-07-27T09:56:31Z",
      "side": 1,
      "message": "Please add something like this as a comment just above here, it\u0027s very helpful. It may also be worth mentioning the similarity to AsyncGeneratorAwait.",
      "parentUuid": "8d68f04c_fced0624",
      "revId": "9de8f3dfc7b6affdbd9a361005576beb6b665a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b7efe77_245b63fa",
        "filename": "src/builtins/builtins-async-generator-gen.cc",
        "patchSetId": 7
      },
      "lineNbr": 674,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2017-07-27T09:56:31Z",
      "side": 1,
      "message": "Nit: CSA_ASSERT(this, WordNotEqual(request, UndefinedConstant())); to stay consistent with AsyncGeneratorAwait.",
      "revId": "9de8f3dfc7b6affdbd9a361005576beb6b665a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d772df4c_92cfe539",
        "filename": "src/builtins/builtins-async-generator-gen.cc",
        "patchSetId": 7
      },
      "lineNbr": 676,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2017-07-27T09:56:31Z",
      "side": 1,
      "message": "Nit: Please assert IsAsyncGenerator(generator) here. Might be worth a helper in CSA (and update other places that check HasInstanceType(o, JS_ASYNC_GENERATOR_OBJECT_TYPE)). The refactoring is fine in another CL to avoid making this one more complicated than required.",
      "revId": "9de8f3dfc7b6affdbd9a361005576beb6b665a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27868b8a_1137c930",
        "filename": "src/builtins/builtins-async-generator-gen.cc",
        "patchSetId": 7
      },
      "lineNbr": 694,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2017-07-27T09:56:31Z",
      "side": 1,
      "message": "This now has 3 users in this file, maybe it\u0027s time to create a named helper function in AsyncGeneratorBuiltinsAssembler.",
      "revId": "9de8f3dfc7b6affdbd9a361005576beb6b665a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25a60cf8_a1929644",
        "filename": "src/builtins/builtins-async-generator-gen.cc",
        "patchSetId": 7
      },
      "lineNbr": 712,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2017-07-27T09:56:31Z",
      "side": 1,
      "message": "WDYT about moving the definition of all related closures next to each other in a follow-up? It might make it easier to see their connection / similarities / differences that way. Same for AsyncGenerator{Await,Return}. Ideally in a move-only CL without any other changes.",
      "revId": "9de8f3dfc7b6affdbd9a361005576beb6b665a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4be8cff7_fa0f4e1a",
        "filename": "src/builtins/builtins-async-generator-gen.cc",
        "patchSetId": 7
      },
      "lineNbr": 714,
      "author": {
        "id": 1162379
      },
      "writtenOn": "2017-07-26T16:52:12Z",
      "side": 1,
      "message": "On-resolve closure for AsyncGeneratorReturn when the generator is not closed.\n\nTODO: rename this to be clear about what it actually does (AsyncGeneratorResumeAsReturnClosure?)",
      "revId": "9de8f3dfc7b6affdbd9a361005576beb6b665a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "083da943_b8e1dd0a",
        "filename": "src/builtins/builtins-async-generator-gen.cc",
        "patchSetId": 7
      },
      "lineNbr": 714,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2017-07-27T09:56:31Z",
      "side": 1,
      "message": "A brief comment clarifying its use would also be helpful here and above other closures). Especially the \u0027when the generator is not closed\u0027 part is helpful as it\u0027s not apparent from the name.",
      "parentUuid": "4be8cff7_fa0f4e1a",
      "revId": "9de8f3dfc7b6affdbd9a361005576beb6b665a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a774404_cf330f24",
        "filename": "src/builtins/builtins-async-generator-gen.cc",
        "patchSetId": 7
      },
      "lineNbr": 719,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2017-07-27T09:56:31Z",
      "side": 1,
      "message": "Suggestion: could we add an IsAsyncGenerator assert somewhere inside these helpers? Perhaps in LoadGeneratorAwaitedPromise. Also, would it make sense to rename these to \u0027IsAsyncGeneratorSuspendedForAwait\u0027? Fine in a follow-up.",
      "revId": "9de8f3dfc7b6affdbd9a361005576beb6b665a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e5662b5_ddda1d02",
        "filename": "src/builtins/builtins-async-generator-gen.cc",
        "patchSetId": 7
      },
      "lineNbr": 723,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2017-07-27T09:56:31Z",
      "side": 1,
      "message": "Couldn\u0027t we replace the entire body with\n\n AsyncGeneratorAwaitResumeClosure(context, value,\n                                  JSAsyncGeneratorObject::kReturn);",
      "revId": "9de8f3dfc7b6affdbd9a361005576beb6b665a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6be51319_6892e32d",
        "filename": "src/builtins/builtins-async-generator-gen.cc",
        "patchSetId": 7
      },
      "lineNbr": 730,
      "author": {
        "id": 1162379
      },
      "writtenOn": "2017-07-26T16:52:12Z",
      "side": 1,
      "message": "On-resolve closure for AsyncGeneratorReturn when the generator was already closed.\n\nTODO: rename this to be clear about what it actually does (AsyncGeneratorResolveClosure?)",
      "revId": "9de8f3dfc7b6affdbd9a361005576beb6b665a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2442687_c9000c23",
        "filename": "src/builtins/builtins-async-generator-gen.cc",
        "patchSetId": 7
      },
      "lineNbr": 740,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2017-07-27T09:56:31Z",
      "side": 1,
      "message": "Nit: Please add some sort of context as to where this step is from in the spec. A link to the spec somewhere easily accessible from the CL (description or tracking bug) would also be nice. Extra nice: a link to the affected Await in the spec - I assume it\u0027s the longer instruction sequence in 10.b.i.2-9 here https://tc39.github.io/proposal-async-iteration/#sec-asyncgeneratorresumenext?",
      "revId": "9de8f3dfc7b6affdbd9a361005576beb6b665a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72a91a42_9128f6f2",
        "filename": "src/builtins/builtins-async-generator-gen.cc",
        "patchSetId": 7
      },
      "lineNbr": 749,
      "author": {
        "id": 1162379
      },
      "writtenOn": "2017-07-26T16:52:12Z",
      "side": 1,
      "message": "On-reject closure for AsyncGeneratorReturn wen the generator was already closed.\n\nTODO: rename this to be clear about what it actually does (AsyncGeneratorRejectClosure?)",
      "revId": "9de8f3dfc7b6affdbd9a361005576beb6b665a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0fa9a3f_0d6050f6",
        "filename": "src/builtins/builtins-definitions.h",
        "patchSetId": 7
      },
      "lineNbr": 1054,
      "author": {
        "id": 1162379
      },
      "writtenOn": "2017-07-26T16:52:12Z",
      "side": 1,
      "message": "TODO: All of the other Await methods (not the closures) could be built with stub-linkage and be installed in the native context.\n\nAsyncGeneratorReturn is essentially another version of Await stubs which does different actions when the Promise is resolved or rejected.",
      "revId": "9de8f3dfc7b6affdbd9a361005576beb6b665a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9ae1309_f7a2600c",
        "filename": "src/external-reference-table.cc",
        "patchSetId": 7
      },
      "lineNbr": 347,
      "author": {
        "id": 1162379
      },
      "writtenOn": "2017-07-26T16:52:12Z",
      "side": 1,
      "message": "ExternalReference so that IsInterpreted doesn\u0027t need to be re-implemented in CSA",
      "revId": "9de8f3dfc7b6affdbd9a361005576beb6b665a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3bc1e6fc_077872ec",
        "filename": "src/objects.cc",
        "patchSetId": 7
      },
      "lineNbr": 5688,
      "author": {
        "id": 1162379
      },
      "writtenOn": "2017-07-26T16:52:12Z",
      "side": 1,
      "message": "Static version of this method so that it can be cast to an Address in assembler.cc --- Perhaps it really makes more sense to do all of the catch prediction in C++ rather than just figuring out if interpreted or not, but no strong opinion.",
      "revId": "9de8f3dfc7b6affdbd9a361005576beb6b665a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0216b036_07e417be",
        "filename": "src/objects.cc",
        "patchSetId": 7
      },
      "lineNbr": 5688,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2017-07-27T09:56:31Z",
      "side": 1,
      "message": "+1 to catch prediction in C++.",
      "parentUuid": "3bc1e6fc_077872ec",
      "revId": "9de8f3dfc7b6affdbd9a361005576beb6b665a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41f6b07a_f31d975d",
        "filename": "src/objects.h",
        "patchSetId": 7
      },
      "lineNbr": 5150,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2017-07-27T09:56:31Z",
      "side": 1,
      "message": "As in my previous comment, I\u0027d rather move the entire handler-table functionality to C++. Then this new function becomes unnecessary, and we can also leave handler table indices above private.",
      "revId": "9de8f3dfc7b6affdbd9a361005576beb6b665a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a831e6a6_8278ab47",
        "filename": "test/cctest/interpreter/bytecode_expectations/AsyncGenerators.golden",
        "patchSetId": 7
      },
      "lineNbr": 105,
      "author": {
        "id": 1162379
      },
      "writtenOn": "2017-07-26T16:52:12Z",
      "side": 1,
      "message": "In the updated version, there\u0027s only a single call to %_GeneratorClose() in the top-level finally block in the async function, so this is always evaluated before returning. There\u0027s still another redundant LdaUndefined -\u003e Return, which is implicitly added by BytecodeGenerator if still in a block at the end of a function (which we are after leaving the outer finally block).\n\nBut theses points aren\u0027t super important, they\u0027re incidental and could be moved to a separate CL. Very small change, and some not unreasonable improvements to bytecode from it.",
      "revId": "9de8f3dfc7b6affdbd9a361005576beb6b665a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}