{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a1daed2b_9296ba23",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-04-13T20:13:42Z",
      "side": 1,
      "message": "looks good to me, just nits and suggestions to discuss with heap OWNERs.",
      "revId": "9ba6f9c9694bd342b780f6ac8a69fe22816d9219",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9592edf9_df10ad3f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2021-04-14T01:57:19Z",
      "side": 1,
      "message": "Removing ulan@ for now while waiting for review on https://chromium-review.googlesource.com/c/v8/v8/+/2824098",
      "revId": "9ba6f9c9694bd342b780f6ac8a69fe22816d9219",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e9bfa66_bb79af2f",
        "filename": "include/v8.h",
        "patchSetId": 8
      },
      "lineNbr": 7143,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-04-13T20:13:42Z",
      "side": 1,
      "message": "v8:11460",
      "range": {
        "startLine": 7143,
        "startChar": 10,
        "endLine": 7143,
        "endChar": 15
      },
      "revId": "9ba6f9c9694bd342b780f6ac8a69fe22816d9219",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b241ece7_a98815ae",
        "filename": "src/common/globals.h",
        "patchSetId": 8
      },
      "lineNbr": 241,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-04-13T20:13:42Z",
      "side": 1,
      "message": "Not sure, why should the minimum code range size be affected at all.",
      "range": {
        "startLine": 241,
        "startChar": 17,
        "endLine": 241,
        "endChar": 38
      },
      "revId": "9ba6f9c9694bd342b780f6ac8a69fe22816d9219",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60ee8ab6_dbafe821",
        "filename": "src/execution/isolate.cc",
        "patchSetId": 8
      },
      "lineNbr": 4959,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-04-13T20:13:42Z",
      "side": 1,
      "message": "I think isolate-inl.h is a better place for these two functions.",
      "revId": "9ba6f9c9694bd342b780f6ac8a69fe22816d9219",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b89ef016_885ff75f",
        "filename": "src/heap/code-range.h",
        "patchSetId": 8
      },
      "lineNbr": 41,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-04-13T20:13:42Z",
      "side": 1,
      "message": "Hm... It looks very much like PtrComprCage. The differences are mostly the way we initalize and use this second cage and |embedded_blob_code_copy_| which will go away soon.\nI wonder if it makes sense to just have two respectively initialized cages instead?",
      "range": {
        "startLine": 41,
        "startChar": 6,
        "endLine": 41,
        "endChar": 15
      },
      "revId": "9ba6f9c9694bd342b780f6ac8a69fe22816d9219",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58a056ac_10cdb82d",
        "filename": "src/heap/code-range.h",
        "patchSetId": 8
      },
      "lineNbr": 41,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2021-04-13T20:44:16Z",
      "side": 1,
      "message": "Interesting, you mean make a generic MemoryCage class that can be used for both scenarios? Worth a try to refactor here, I\u0027ll see how it turns out. The main differences are how hard each cage tries to get the reservation (the pointer cage tries harder) and the permission setting.",
      "parentUuid": "b89ef016_885ff75f",
      "range": {
        "startLine": 41,
        "startChar": 6,
        "endLine": 41,
        "endChar": 15
      },
      "revId": "9ba6f9c9694bd342b780f6ac8a69fe22816d9219",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "950a26b5_6b682cf1",
        "filename": "src/heap/code-range.h",
        "patchSetId": 8
      },
      "lineNbr": 41,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-04-13T22:00:30Z",
      "side": 1,
      "message": "Yes, kind of. Although, I didn\u0027t think this idea through deeply.\nI guess, when the code range is needed we are trying to allocate it with the same amount of hardness as we do for the PtrComprCage.\nAt the same time, when pointer compression is enabled - allocating a code range inside a fresh PtrComprCage should succeed from the first try anyway (so, hardness shouldn\u0027t matter here).\n\nAh! I didn\u0027t notice that we are setting the RW permissions for the first page.",
      "parentUuid": "58a056ac_10cdb82d",
      "range": {
        "startLine": 41,
        "startChar": 6,
        "endLine": 41,
        "endChar": 15
      },
      "revId": "9ba6f9c9694bd342b780f6ac8a69fe22816d9219",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df66e70b_53adacc1",
        "filename": "src/heap/memory-allocator.h",
        "patchSetId": 8
      },
      "lineNbr": 341,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-04-13T20:13:42Z",
      "side": 1,
      "message": "Idea: given that CodeRange is a separate self-containing thing anyway, it might be cleaner/simpler to always create/initialize it somewhere in Isolate and just pass the code_page_allocator here. The MemoryAllocator doesn\u0027t need the code_range_, just a code_page_allocator_.",
      "revId": "9ba6f9c9694bd342b780f6ac8a69fe22816d9219",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2423ade0_7ee1fa12",
        "filename": "src/heap/memory-allocator.h",
        "patchSetId": 8
      },
      "lineNbr": 341,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2021-04-13T20:44:16Z",
      "side": 1,
      "message": "I did that in a previous iteration of the CL and also found it to be awkward. There are 3 ownership scenarios:\n\n1. Pointer compression w/ Isolate cage. The Isolate owns the cage and the CodeRange.\n2. Pointer compression w/ shared cage. The Isolate doesn\u0027t own either the cage and the CodeRange, both of which are shared.\n3. Full pointer mode. The Isolate doesn\u0027t have a cage, and the Isolate\u0027s MemoryAllocator owns the CodeRange.\n\n(2) means the Isolate doesn\u0027t always own a CodeRange, so to implement this suggestion, the sensible thing is to mirror PtrComprCage with a GetProcessWideCodeRange in the case of sharing a cage.\n\nBut I ended up not going with that approach and made PtrComprCage own the CodeRange for two reasons.\n\nA. The CodeRange has to be contained in the ptr cage if one exists. (This of course would change for the long term fix.)\nB. If we end up exposing PtrComprCage to API for more embedder configurability, it\u0027d be easier for it own a CodeRange.\n\nGiven this reasoning, does that change your opinion at all?\n\nTo be clear I don\u0027t have a very strong an opinion here, especially since if the long term fix is ready before long, none of this matters.",
      "parentUuid": "df66e70b_53adacc1",
      "revId": "9ba6f9c9694bd342b780f6ac8a69fe22816d9219",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "910fc391_dff07479",
        "filename": "src/heap/memory-allocator.h",
        "patchSetId": 8
      },
      "lineNbr": 341,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-04-13T22:00:30Z",
      "side": 1,
      "message": "I also don\u0027t have a strong opinion here. Given that the majority of changes are on the heap side, I\u0027d defer the final decision to Ulan.",
      "parentUuid": "2423ade0_7ee1fa12",
      "revId": "9ba6f9c9694bd342b780f6ac8a69fe22816d9219",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c1ec809_1d9dd508",
        "filename": "src/profiler/tick-sample.cc",
        "patchSetId": 8
      },
      "lineNbr": 235,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2021-04-13T20:13:42Z",
      "side": 1,
      "message": "Maybe it makes sense to add a\n  const AddressRegion\u0026 Heap::code_region()\nto make this kind of calls less wordy.",
      "range": {
        "startLine": 235,
        "startChar": 6,
        "endLine": 235,
        "endChar": 70
      },
      "revId": "9ba6f9c9694bd342b780f6ac8a69fe22816d9219",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "996f3bdf_22b5f38a",
        "filename": "src/profiler/tick-sample.cc",
        "patchSetId": 8
      },
      "lineNbr": 235,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2021-04-13T20:44:16Z",
      "side": 1,
      "message": "Heap::code_region actually exists but delegates to the 3p heap when V8_ENABLE_THIRD_PARTY_HEAP. This code, I guess, assumes that 3p heap isn\u0027t enabled. I\u0027m not exactly sure when I should be checking for 3p heap being enabled.",
      "parentUuid": "9c1ec809_1d9dd508",
      "range": {
        "startLine": 235,
        "startChar": 6,
        "endLine": 235,
        "endChar": 70
      },
      "revId": "9ba6f9c9694bd342b780f6ac8a69fe22816d9219",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}