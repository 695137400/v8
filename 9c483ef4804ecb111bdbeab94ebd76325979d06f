{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "df877b0a_62668dc5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2022-10-27T09:22:15Z",
      "side": 1,
      "message": "I like that we stash the stack scanning mode in the heap instead of passing it to the individual collectors.\nHowever I think the combination of scopes, arguments and SkipRoots is getting confusing.\n\nUsing the scope withing heap methods seems odd to me. I would leave the scope for uses external to the heap and internally we can just update the stack scanning mode directly.\nI would also use the SkipRoots set that we already have everywhere instead of wrapping calls to IterateRoots* method with a scope (and then IterateStackConservatively can assume that scan mode is not kNone).\n\nI\u0027m also concerned that the internal uses of the scope can create bugs where we accidentally override a previous scope.\n\nWill the explicit argument to the CollectGarbage methods stick around? If it is then I think we can drop the default stack scanning mode. We can set the stack scan mode when we start the GC and use the scopes only for setting an override.",
      "revId": "9c483ef4804ecb111bdbeab94ebd76325979d06f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94fbf027_b41c8939",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2022-10-27T11:52:00Z",
      "side": 1,
      "message": "We discussed about this offline. I\u0027m leaving it as unresolved, to discuss it again with Michael and decide on the balance between scopes and explicit parameters.",
      "parentUuid": "df877b0a_62668dc5",
      "revId": "9c483ef4804ecb111bdbeab94ebd76325979d06f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a44e508_62b844bd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2022-10-27T19:02:10Z",
      "side": 1,
      "message": "Thought about it a bot more.\nI think using the scope internally in the heap is fine.\nKeeping the explicit parameters is also fine. Alternatively we could get rid of the explicit parameter to Heap GC methods, keep the parameter for testing methods, and establish a scope there as needed.\n\nI think the only thing I would consider is to use the existing SkipRoot mechanism to skip CSS altogether when we know we don\u0027t want it. However, even that will not change any of the semantics imo and probably will be negligible. \n\nI was trying to simplify the how we choose the stack scanning mode, but on second thought maybe it\u0027s not as complicated as I initially thought.",
      "parentUuid": "94fbf027_b41c8939",
      "revId": "9c483ef4804ecb111bdbeab94ebd76325979d06f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "efb4ffe1_5f6dd0b6",
        "filename": "src/heap/heap.cc",
        "patchSetId": 21
      },
      "lineNbr": 4631,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2022-10-27T09:22:15Z",
      "side": 1,
      "message": "If I have a scope outside of IterateRoots, this one will override it. I\u0027m not sure that\u0027s the correct behavior we want (same below for the other IterateRoots* methods).",
      "range": {
        "startLine": 4631,
        "startChar": 21,
        "endLine": 4631,
        "endChar": 40
      },
      "revId": "9c483ef4804ecb111bdbeab94ebd76325979d06f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "788900ef_675a3ddb",
        "filename": "src/heap/heap.cc",
        "patchSetId": 21
      },
      "lineNbr": 4631,
      "author": {
        "id": 1147189
      },
      "writtenOn": "2022-10-27T11:52:00Z",
      "side": 1,
      "message": "This could only \"lower\" the CSS mode, so it is correct.\nWhat it does is disabling CSS if it\u0027s not consistent with the `SkipRoot` parameter.",
      "parentUuid": "efb4ffe1_5f6dd0b6",
      "range": {
        "startLine": 4631,
        "startChar": 21,
        "endLine": 4631,
        "endChar": 40
      },
      "revId": "9c483ef4804ecb111bdbeab94ebd76325979d06f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c0daba6a_9e0c31bd",
        "filename": "src/heap/heap.cc",
        "patchSetId": 21
      },
      "lineNbr": 4631,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2022-10-27T19:02:10Z",
      "side": 1,
      "message": "Thanks, I missed the min between modes.",
      "parentUuid": "788900ef_675a3ddb",
      "range": {
        "startLine": 4631,
        "startChar": 21,
        "endLine": 4631,
        "endChar": 40
      },
      "revId": "9c483ef4804ecb111bdbeab94ebd76325979d06f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}