{
  "comments": [
    {
      "key": {
        "uuid": "fc1a56f6_49a49f2e",
        "filename": "src/wasm/gdb-server/gdb-server-thread.h",
        "patchSetId": 3
      },
      "lineNbr": 50,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2019-11-25T10:52:55Z",
      "side": 1,
      "message": "Why not use the base class here?",
      "revId": "6fb9062ce24733a9f48b554c347876be2193057f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "593aa922_a5727ead",
        "filename": "src/wasm/gdb-server/gdb-server-thread.h",
        "patchSetId": 3
      },
      "lineNbr": 50,
      "author": {
        "id": 1318771
      },
      "writtenOn": "2019-11-26T04:50:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fc1a56f6_49a49f2e",
      "revId": "6fb9062ce24733a9f48b554c347876be2193057f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c8e1bc5_8d29c664",
        "filename": "src/wasm/gdb-server/gdb-server.cc",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2019-11-25T10:52:55Z",
      "side": 1,
      "message": "Can  the server be reinitialized after a shutdown? In that case, the thread_ should be reset here as well.",
      "revId": "6fb9062ce24733a9f48b554c347876be2193057f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c485dd2_26d52f10",
        "filename": "src/wasm/gdb-server/gdb-server.cc",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1318771
      },
      "writtenOn": "2019-11-26T04:50:40Z",
      "side": 1,
      "message": "It cannot be reinitialized, but it\u0027s much cleaner if we reset thread_ as you suggest.",
      "parentUuid": "9c8e1bc5_8d29c664",
      "revId": "6fb9062ce24733a9f48b554c347876be2193057f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9925909a_5120ef8b",
        "filename": "src/wasm/gdb-server/gdb-server.h",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2019-11-25T10:52:55Z",
      "side": 1,
      "message": "What is the reason this changed? With this change there is a strong implied contract between the methods, namely that each is called only once and in strict order. Before, that was explicit.",
      "revId": "6fb9062ce24733a9f48b554c347876be2193057f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1590f8dd_1c8e084a",
        "filename": "src/wasm/gdb-server/gdb-server.h",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1318771
      },
      "writtenOn": "2019-11-26T04:50:40Z",
      "side": 1,
      "message": "I was reading the Google C++ Style Guide https://google.github.io/styleguide/cppguide.html#Doing_Work_in_Constructors that says: \"Avoid initialization that can fail if you can\u0027t signal an error\".\nI was a bit on the fence here, but I thought that it was better not to do too much work in the constructor and not to block on a thread Join in the destructor. I can revert if you prefer.",
      "parentUuid": "9925909a_5120ef8b",
      "revId": "6fb9062ce24733a9f48b554c347876be2193057f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c49c41f_b9b41e20",
        "filename": "src/wasm/gdb-server/gdb-server.h",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2019-11-26T09:04:05Z",
      "side": 1,
      "message": "Sure, that makes sense. You can use a factory to init gdbserver instead, and still tie the thread lifetime to the object lifetime. That being said, what is the reason to have this extra layer around the thread, that doesn\u0027t do anything else but own it?",
      "parentUuid": "1590f8dd_1c8e084a",
      "revId": "6fb9062ce24733a9f48b554c347876be2193057f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cdd59ceb_54136d93",
        "filename": "src/wasm/gdb-server/gdb-server.h",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1318771
      },
      "writtenOn": "2019-11-26T17:53:28Z",
      "side": 1,
      "message": "With the next CLs the GdbServer will the interaction between the debugging Target, which executes the GDB-remote commands, and the Wasm engine. It will be act as a \"Manager\" for the GDB remote stub. \nNot sure what should the factory do in this case; I think the code is cleaner if WasmEngine calls gdb_server_-\u003eInitialize() directly, even though it is not clear what it should do when the \nGdbServer cannot be initialized for example because it fails binding to a TCP port.\nAnd it is probably cleaner if WasmEngine explicitly calls gdb_server_-\u003eShutdown(), because it is a blocking call that a waits for the termination of a thread.",
      "parentUuid": "8c49c41f_b9b41e20",
      "revId": "6fb9062ce24733a9f48b554c347876be2193057f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d419c32d_741d2a2e",
        "filename": "src/wasm/gdb-server/gdb-server.h",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2019-11-27T11:44:14Z",
      "side": 1,
      "message": "The factory should create a GdbServer object and initialize it. Similarly, the destructor should do the Shutdown. That way there is never an uninitialized GdbServer object. Shutdown() is currently called by the wasm engine destructor, so I don\u0027t quite understand the blocking call argument. In any case, since GdbServer objects live in a unique_ptr you can still shut a server down explicitly by just calling reset.",
      "parentUuid": "cdd59ceb_54136d93",
      "revId": "6fb9062ce24733a9f48b554c347876be2193057f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e60bd5fc_de1273d9",
        "filename": "src/wasm/gdb-server/gdb-server.h",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1318771
      },
      "writtenOn": "2019-11-27T18:57:41Z",
      "side": 1,
      "message": "Then it\u0027s probably better to have the initialization in the GdbServer constructor and the shutdown in the destructor, after all the factory would have the same identical logic.",
      "parentUuid": "d419c32d_741d2a2e",
      "revId": "6fb9062ce24733a9f48b554c347876be2193057f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b832b931_534c1c93",
        "filename": "src/wasm/gdb-server/session.cc",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2019-11-25T10:52:55Z",
      "side": 1,
      "message": "I\u0027d prefer a greater separation of concerns between Packet and Session. Currently both Session and Packet format data for the protocol. I feel only one (i.e., Packet) should do the formatting, while the other manages control flow.",
      "revId": "6fb9062ce24733a9f48b554c347876be2193057f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dedaca3d_74eaea55",
        "filename": "src/wasm/gdb-server/session.cc",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 1318771
      },
      "writtenOn": "2019-11-26T04:50:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b832b931_534c1c93",
      "revId": "6fb9062ce24733a9f48b554c347876be2193057f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8299585a_dd96f251",
        "filename": "src/wasm/gdb-server/session.cc",
        "patchSetId": 3
      },
      "lineNbr": 111,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2019-11-25T10:52:55Z",
      "side": 1,
      "message": "The code below can be decomposed into multiple functions so that you don\u0027t have to do this.",
      "revId": "6fb9062ce24733a9f48b554c347876be2193057f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69a9210b_c771fcad",
        "filename": "src/wasm/gdb-server/session.cc",
        "patchSetId": 3
      },
      "lineNbr": 111,
      "author": {
        "id": 1318771
      },
      "writtenOn": "2019-11-26T04:50:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8299585a_dd96f251",
      "revId": "6fb9062ce24733a9f48b554c347876be2193057f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8f505ed_ae09097e",
        "filename": "src/wasm/gdb-server/transport.h",
        "patchSetId": 3
      },
      "lineNbr": 106,
      "author": {
        "id": 1372423
      },
      "writtenOn": "2019-11-25T10:52:55Z",
      "side": 1,
      "message": "I see why you went for this type hierarchie. But wouldn\u0027t it be cleaner to have a win32/posix socket abstraction, and a general SocketTransport handler using that?",
      "revId": "6fb9062ce24733a9f48b554c347876be2193057f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}