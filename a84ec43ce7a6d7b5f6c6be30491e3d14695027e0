{
  "comments": [
    {
      "key": {
        "uuid": "4aae20e4_17047695",
        "filename": "src/interpreter/bytecode-generator.cc",
        "patchSetId": 25
      },
      "lineNbr": 2027,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2019-05-07T13:57:27Z",
      "side": 1,
      "message": "Can you move this code to a helper method to reduce nesting.",
      "range": {
        "startLine": 2000,
        "startChar": 8,
        "endLine": 2027,
        "endChar": 9
      },
      "revId": "a84ec43ce7a6d7b5f6c6be30491e3d14695027e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18f2b302_2aa75cbd",
        "filename": "src/interpreter/bytecode-generator.cc",
        "patchSetId": 25
      },
      "lineNbr": 2027,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2019-05-08T09:15:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4aae20e4_17047695",
      "range": {
        "startLine": 2000,
        "startChar": 8,
        "endLine": 2027,
        "endChar": 9
      },
      "revId": "a84ec43ce7a6d7b5f6c6be30491e3d14695027e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f5ed1e6d_2e46d9ab",
        "filename": "src/interpreter/bytecode-generator.cc",
        "patchSetId": 25
      },
      "lineNbr": 2027,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2019-05-08T09:15:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4aae20e4_17047695",
      "range": {
        "startLine": 2000,
        "startChar": 8,
        "endLine": 2027,
        "endChar": 9
      },
      "revId": "a84ec43ce7a6d7b5f6c6be30491e3d14695027e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a67d736_c0354382",
        "filename": "src/interpreter/bytecode-generator.cc",
        "patchSetId": 25
      },
      "lineNbr": 2157,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2019-05-07T13:57:27Z",
      "side": 1,
      "message": "Please make the comment relate to why we are skipping, not the fact that we are skipping early.",
      "range": {
        "startLine": 2157,
        "startChar": 6,
        "endLine": 2157,
        "endChar": 57
      },
      "revId": "a84ec43ce7a6d7b5f6c6be30491e3d14695027e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c659deab_7c36c73c",
        "filename": "src/interpreter/bytecode-generator.cc",
        "patchSetId": 25
      },
      "lineNbr": 2157,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2019-05-08T09:15:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1a67d736_c0354382",
      "range": {
        "startLine": 2157,
        "startChar": 6,
        "endLine": 2157,
        "endChar": 57
      },
      "revId": "a84ec43ce7a6d7b5f6c6be30491e3d14695027e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a41ca3f_2ef295ba",
        "filename": "src/interpreter/bytecode-generator.cc",
        "patchSetId": 25
      },
      "lineNbr": 4551,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2019-05-07T13:57:27Z",
      "side": 1,
      "message": "You aren\u0027t restoring the accumulator with instance here (e.g., what happens in line 4565 below) - see comment below for a suggestion of how to restructure this.",
      "range": {
        "startLine": 4551,
        "startChar": 0,
        "endLine": 4551,
        "endChar": 0
      },
      "revId": "a84ec43ce7a6d7b5f6c6be30491e3d14695027e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c6e3023_cefe2881",
        "filename": "src/interpreter/bytecode-generator.cc",
        "patchSetId": 25
      },
      "lineNbr": 4551,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2019-05-08T09:15:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4a41ca3f_2ef295ba",
      "range": {
        "startLine": 4551,
        "startChar": 0,
        "endLine": 4551,
        "endChar": 0
      },
      "revId": "a84ec43ce7a6d7b5f6c6be30491e3d14695027e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02427b51_0d0251cf",
        "filename": "src/interpreter/bytecode-generator.cc",
        "patchSetId": 25
      },
      "lineNbr": 4566,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2019-05-07T13:57:27Z",
      "side": 1,
      "message": "Could we add an \"info()-\u003eliteral()-\u003erequires_brand_initialization()\" function and structure this as follows:\n\nRegister instance \u003d register_allocator()-\u003eNewRegister();\nbuilder()-\u003eStoreAccumulatorInRegister(instance);\n\nif (info()-\u003eliteral()-requires_brand_initialization()) {\n   BuildPrivateBrandInitialization(instance);\n}\nif (info()-\u003eliteral()-\u003erequires_instance_members_initializer() ||\n      !IsDerivedConstructor(info()-\u003eliteral()-\u003ekind())) {\n  BuildInstanceMemberInitialization(this_function, instance);\n}\nbuilder()-\u003eLoadAccumulatorWithRegister(instance);\n\nSame for the base-case in GenerateBytecodeBody, and then remove the early-exits in BuildPrivateBrandInitialization.",
      "range": {
        "startLine": 4548,
        "startChar": 2,
        "endLine": 4566,
        "endChar": 3
      },
      "revId": "a84ec43ce7a6d7b5f6c6be30491e3d14695027e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80221bd9_4659087f",
        "filename": "src/interpreter/bytecode-generator.cc",
        "patchSetId": 25
      },
      "lineNbr": 4566,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2019-05-07T17:09:33Z",
      "side": 1,
      "message": "I have tried using a `info()-\u003eliteral()-\u003erequires_brand_initialization()` before, but that requires a bit in the shared function info for deserialization, and there are already 32 bit fields there. Is any one of those SFI bits unused at the moment that we can replace with this instead?",
      "parentUuid": "02427b51_0d0251cf",
      "range": {
        "startLine": 4548,
        "startChar": 2,
        "endLine": 4566,
        "endChar": 3
      },
      "revId": "a84ec43ce7a6d7b5f6c6be30491e3d14695027e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "881b2d1c_7923e298",
        "filename": "src/interpreter/bytecode-generator.cc",
        "patchSetId": 25
      },
      "lineNbr": 4566,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2019-05-07T17:15:19Z",
      "side": 1,
      "message": "Not sure what you mean, literal is a FunctionalLiteral not a SFI. Can\u0027t you do the same checks on the Scope as you are currently doing in BuildPrivateBrandInitialization?",
      "parentUuid": "80221bd9_4659087f",
      "range": {
        "startLine": 4548,
        "startChar": 2,
        "endLine": 4566,
        "endChar": 3
      },
      "revId": "a84ec43ce7a6d7b5f6c6be30491e3d14695027e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4098f3d_914d2cf4",
        "filename": "src/interpreter/bytecode-generator.cc",
        "patchSetId": 25
      },
      "lineNbr": 4566,
      "author": {
        "id": 1288325
      },
      "writtenOn": "2019-05-08T09:15:36Z",
      "side": 1,
      "message": "Ah, I see, we can just compute requires_brand_initialization() on the fly with just the scope information, thanks for the suggestion.\n\nI was thinking about storing this in a bit in FunctionalLiteral, then the FunctionLiteral bit would need to be set from the ParseInfo which may have its bits deserialized from a SFI due to lazy parsing.",
      "parentUuid": "881b2d1c_7923e298",
      "range": {
        "startLine": 4548,
        "startChar": 2,
        "endLine": 4566,
        "endChar": 3
      },
      "revId": "a84ec43ce7a6d7b5f6c6be30491e3d14695027e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96421ec8_4aa2c01e",
        "filename": "src/interpreter/bytecode-generator.cc",
        "patchSetId": 25
      },
      "lineNbr": 4566,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2019-05-08T10:06:06Z",
      "side": 1,
      "message": "Right, I don\u0027t think storing it on the SFI is necessary as long as we can always reconstruct it from the scope information.",
      "parentUuid": "e4098f3d_914d2cf4",
      "range": {
        "startLine": 4548,
        "startChar": 2,
        "endLine": 4566,
        "endChar": 3
      },
      "revId": "a84ec43ce7a6d7b5f6c6be30491e3d14695027e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}