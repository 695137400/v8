{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9d6b567d_32ce2b31",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2023-01-02T15:07:40Z",
      "side": 1,
      "message": "Another little optimization; PTAL.",
      "revId": "18d62ba55253399d110792a4846966a5d3761c7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4737c7a1_f9708553",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2023-01-05T07:17:22Z",
      "side": 1,
      "message": "As far as I understand, this CL allocates the whole signature object including types array in one allocation, whereas the original code with the Signature::Builder uses two allocations. Nice find! One question though: Could you not just have done this refactoring in the Signature::Builder, so that all uses of Signature::Builder benefit from the change? The Signature::Builder seems to be a nice design pattern, and not inherently the issue here. As far as I understand the code, it is not necessary to inline the builder code in the CallDescriptor code manually.\n\nThe other small cleanups are naturally nice though.",
      "revId": "18d62ba55253399d110792a4846966a5d3761c7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bf01a5b8_0a6d3d42",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2023-01-05T16:43:00Z",
      "side": 1,
      "message": "This CL specifically avoids the use of `Signature::Builder`, since it\u0027s an unnecessary abstraction which does not improve readability here IMO. There is also a chance that writing to the array directly is faster, but I did not measure that specifically.\n\nI can look into applying the same optimization to `Signature::Builder`, but I think that\u0027s independent of this CL.",
      "parentUuid": "4737c7a1_f9708553",
      "revId": "18d62ba55253399d110792a4846966a5d3761c7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd103301_1bc125c4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2023-01-05T17:03:17Z",
      "side": 1,
      "message": "Here we go: https://crrev.com/c/4138268",
      "parentUuid": "bf01a5b8_0a6d3d42",
      "revId": "18d62ba55253399d110792a4846966a5d3761c7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d1622a9f_8e51a9a2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2023-01-09T06:15:18Z",
      "side": 1,
      "message": "You did several great optimizations and cleanups here, which make the code more readable and faster. Indeed, the call to `FunctionSigToMachineSig` was unnecessary, and introducing `has_tagged_param` was a great idea. But the last step, to also eliminate `Signature::Builder`, is unnecessary, and it\u0027s better to just optimize `Signature::Builder`, as you do it in https://crrev.com/c/4138268.\n\nI don\u0027t agree that `Signature::Builder` is an unnecessary abstraction. It hides all the memory management, and all the pointer arithmetic. I mean, by removing the `Signature::Builder` you require from the reader of the code to know the internal memory layout of a `Signature`, whereas with the `Signature::Builder` it is sufficient to know what a signature is.\n\nYou could argue that the `++param_locations;` makes the code cleaner and avoids the `+ param_offset` in the original code. But I would argue that this actually hides important information in this function and may make the reader misunderstand the code: if you glance at the code quickly it looks like parameter 3 gets written into position 3, whereas actually it gets written into position 4 in the parameter array.\n\nOverall I think this is a great CL with many improvements, but removing `Signature::Builder` in `BuildLocations` is a bit too much. \n\nIf you can measure a big enough performance advantage of writing to the array directly, then I\u0027m okay with the change. In that case we may want to question the `Signature::Builder` in general.",
      "parentUuid": "cd103301_1bc125c4",
      "revId": "18d62ba55253399d110792a4846966a5d3761c7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "52c739fa_a3635e62",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2023-01-09T13:52:56Z",
      "side": 1,
      "message": "You could also argue that `AddParamAt` is a method which should not even exist in the signature builder (because it allows to build \"incomplete\" signatures by avoiding some DCHECKs). Avoiding the use of the builder here would remove the only use of that method.\n\nI\u0027ll split this CL in multiple, so we can discuss the individual optimizations.",
      "parentUuid": "d1622a9f_8e51a9a2",
      "revId": "18d62ba55253399d110792a4846966a5d3761c7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "18d62ba55253399d110792a4846966a5d3761c7b",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "18d62ba55253399d110792a4846966a5d3761c7b",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "18d62ba55253399d110792a4846966a5d3761c7b",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "18d62ba55253399d110792a4846966a5d3761c7b",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}