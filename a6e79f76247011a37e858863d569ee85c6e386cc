{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b0aa95b0_f70babde",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-13T14:08:20Z",
      "side": 1,
      "message": "@Michael Achenbach: Do we already have an (fyi?) bot which we could run this on?",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77325c65_e4e7d75b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1115956
      },
      "writtenOn": "2024-05-14T10:44:33Z",
      "side": 1,
      "message": "Not yet, could you please file me a bug with the details? I.e. what gn variables to switch on and what other parameters... compile-only or test? Debug/release? Platform?",
      "parentUuid": "b0aa95b0_f70babde",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aeeecb64_7f2ce027",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-15T15:21:31Z",
      "side": 1,
      "message": "Sure, see https://crbug.com/340822364. My first intuition would be:\n* FYI bot, possibly only triggered every 5th commit or even only manually (the V8/Wasm team at Google would invest little time to keep it green, but it\u0027s good to have an early indication if things break, hence the bot)\n* Windows (most useful for Microsoft folks as an early heads-up?)\n* x64 (since most of the development happens there)\n* definitely running tests (at least the `jitless` variant, possibly all)\n* debug (DCHECKs, more coverage, easier to debug; if slow tests are a problem, release would be fine as well)\n\n@Paolo and @Andreas, WDYT?",
      "parentUuid": "77325c65_e4e7d75b",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "39cf56c1_a463abf4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1115956
      },
      "writtenOn": "2024-05-16T10:20:56Z",
      "side": 1,
      "message": "Thanks, let\u0027s follow up on that bug.",
      "parentUuid": "aeeecb64_7f2ce027",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f6fbc57_40c0de16",
        "filename": "BUILD.gn",
        "patchSetId": 10
      },
      "lineNbr": 387,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-13T14:06:53Z",
      "side": 1,
      "message": "nit: should be `DrumBrake` for consistency, I suppose (at least it\u0027s the only place where it\u0027s written this way)",
      "range": {
        "startLine": 387,
        "startChar": 29,
        "endLine": 387,
        "endChar": 38
      },
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f80d8c4_cd2b471a",
        "filename": "BUILD.gn",
        "patchSetId": 10
      },
      "lineNbr": 387,
      "author": {
        "id": 1472029
      },
      "writtenOn": "2024-05-14T21:15:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1f6fbc57_40c0de16",
      "range": {
        "startLine": 387,
        "startChar": 29,
        "endLine": 387,
        "endChar": 38
      },
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aadb5624_092c663e",
        "filename": "BUILD.gn",
        "patchSetId": 10
      },
      "lineNbr": 389,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-13T14:06:53Z",
      "side": 1,
      "message": "What\u0027s the purpose of `v8_wasm_interpreter` if we already have `is_drumbrake_enabled`? Could we get rid of the former?\n\nAlso nit: For consistency with, e.g., Maglev, I would name this build flag `v8_enable_drumbrake` and then name the macro accordingly `V8_ENABLE_DRUMBRAKE`.",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5dc72197_5a5b8273",
        "filename": "BUILD.gn",
        "patchSetId": 10
      },
      "lineNbr": 389,
      "author": {
        "id": 1472029
      },
      "writtenOn": "2024-05-14T21:15:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aadb5624_092c663e",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "465f8ca5_c0cff1cf",
        "filename": "BUILD.gn",
        "patchSetId": 10
      },
      "lineNbr": 483,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-13T14:06:53Z",
      "side": 1,
      "message": "So DrumBrake is silently disabled if `is_drumbrake_supported` is false? How about `assert`-ing instead that `v8_enable_drumbrake` cannot be true in that case?",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ead91192_07caaaed",
        "filename": "BUILD.gn",
        "patchSetId": 10
      },
      "lineNbr": 483,
      "author": {
        "id": 1472029
      },
      "writtenOn": "2024-05-20T20:17:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "465f8ca5_c0cff1cf",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eff72765_805fe76b",
        "filename": "gni/v8.gni",
        "patchSetId": 10
      },
      "lineNbr": 221,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-13T14:06:53Z",
      "side": 1,
      "message": "Maybe a naive question, but how does the interpreter depend on pointer compression? In particular, would the interpreter break in other (non-Chrome) V8 embedders that don\u0027t use pointer compression, say, Node.js?",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb1f9325_e81e0c19",
        "filename": "gni/v8.gni",
        "patchSetId": 10
      },
      "lineNbr": 221,
      "author": {
        "id": 1472029
      },
      "writtenOn": "2024-05-14T21:15:19Z",
      "side": 1,
      "message": "That was just done for simplicity, to reduce the implementation/testing effort, given that we were not really interested in the other case. Probably supporting pointer compression would require very limited changes, I think there is some ASM builtin for the interpreter that expects compressed pointers. But I would postpone this work to a future CL, if it is useful for some other embedder.",
      "parentUuid": "eff72765_805fe76b",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8afac579_366edb0d",
        "filename": "gni/v8.gni",
        "patchSetId": 10
      },
      "lineNbr": 221,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-15T15:21:31Z",
      "side": 1,
      "message": "Sure, postponing it until some embedder asks for it makes sense, just wanted to understand why the restriction. (Minor correction: You probably meant to write \"supporting _non_ pointer compression builds would require limited changes\").",
      "parentUuid": "fb1f9325_e81e0c19",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3ba3aa01_be6ba96f",
        "filename": "gni/v8.gni",
        "patchSetId": 10
      },
      "lineNbr": 221,
      "author": {
        "id": 1472029
      },
      "writtenOn": "2024-05-20T20:17:24Z",
      "side": 1,
      "message": "Yes sorry, I wrote it wrongly.",
      "parentUuid": "8afac579_366edb0d",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c82ea857_1d648071",
        "filename": "include/v8-metrics.h",
        "patchSetId": 10
      },
      "lineNbr": 160,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-13T14:06:53Z",
      "side": 1,
      "message": "nit: This is a pretty generic name, can we come up with something that makes a bit clearer that this is for tracking performance of the interpreter somehow? (I am not fully sure what it\u0027s purpose is.) Maybe `WasmModuleSlowInterpreterEvent` or something?",
      "range": {
        "startLine": 160,
        "startChar": 7,
        "endLine": 160,
        "endChar": 31
      },
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7947b62a_707cba2f",
        "filename": "include/v8-metrics.h",
        "patchSetId": 10
      },
      "lineNbr": 160,
      "author": {
        "id": 1472029
      },
      "writtenOn": "2024-05-14T21:15:19Z",
      "side": 1,
      "message": "Done, renamed as WasmInterpreterSlowExecution. (Usually the main thread events declared in v8-metrics.h don\u0027t have a suffix -Event). Also renamed WasmModuleJitStatus -\u003e WasmInterpreterJitStatus.",
      "parentUuid": "c82ea857_1d648071",
      "range": {
        "startLine": 160,
        "startChar": 7,
        "endLine": 160,
        "endChar": 31
      },
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c024f91e_71c36484",
        "filename": "src/builtins/builtins.cc",
        "patchSetId": 10
      },
      "lineNbr": 477,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-13T14:06:53Z",
      "side": 1,
      "message": "Just to clarify: You have your own interpreted JS-to-Wasm and Wasm-to-JS wrappers (\"generic wrappers\"), independent of the `kJSToWasmWrapperAsm` wrapper that Andreas added last year, correct?\n\nIf yes, how much work would it be to use the latter instead? (In order to avoid having two things that do have a very similar purpose.)",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3042792_08f2c170",
        "filename": "src/builtins/builtins.cc",
        "patchSetId": 10
      },
      "lineNbr": 477,
      "author": {
        "id": 1472029
      },
      "writtenOn": "2024-05-14T21:15:19Z",
      "side": 1,
      "message": "It would be very nice to reuse the existing wrappers, but it would be also a lot of work because there are differences. The two Wasm interpreter builtins `kGenericJSToWasmInterpreterWrapper` and `kGenericWasmToJSInterpreterWrapper` where written before Andreas added `kJSToWasmWrapperAsm`, there was already a GenericJsToWasmWrapper ASM builtin which did not support all the fn signatures, and that I used as inspiration.",
      "parentUuid": "c024f91e_71c36484",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "946bbbfe_cf44521d",
        "filename": "src/builtins/builtins.cc",
        "patchSetId": 10
      },
      "lineNbr": 477,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-15T15:21:31Z",
      "side": 1,
      "message": "Sure, your call (we just won\u0027t update the `kGenericJSToWasmInterpreterWrapper` so it might save maintenance in the long term to unify.)",
      "parentUuid": "b3042792_08f2c170",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2302d5e7_0159f90a",
        "filename": "src/diagnostics/objects-debug.cc",
        "patchSetId": 10
      },
      "lineNbr": 2268,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-13T14:06:53Z",
      "side": 1,
      "message": "nit: Add comment why this doesn\u0027t hold any longer with the interpreter.",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9af50877_570890e8",
        "filename": "src/diagnostics/objects-debug.cc",
        "patchSetId": 10
      },
      "lineNbr": 2268,
      "author": {
        "id": 1472029
      },
      "writtenOn": "2024-05-14T21:15:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2302d5e7_0159f90a",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74187c64_4a335de7",
        "filename": "src/diagnostics/objects-printer.cc",
        "patchSetId": 10
      },
      "lineNbr": 2491,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-13T14:06:53Z",
      "side": 1,
      "message": "nit: `indexes` -\u003e `indices`.",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d5648ced_f4403d2f",
        "filename": "src/diagnostics/objects-printer.cc",
        "patchSetId": 10
      },
      "lineNbr": 2491,
      "author": {
        "id": 1472029
      },
      "writtenOn": "2024-05-14T21:15:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "74187c64_4a335de7",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9b16900_9e023f89",
        "filename": "src/diagnostics/objects-printer.cc",
        "patchSetId": 10
      },
      "lineNbr": 2545,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-13T14:06:53Z",
      "side": 1,
      "message": "This seems to be independent of the interpreter (i.e., the `packed_args_size` field existed already). Should this _not_ be behind the `#if` guard?",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c26d244e_5710eef2",
        "filename": "src/diagnostics/objects-printer.cc",
        "patchSetId": 10
      },
      "lineNbr": 2545,
      "author": {
        "id": 1472029
      },
      "writtenOn": "2024-05-14T21:15:19Z",
      "side": 1,
      "message": "Right. And currently v8 is not printing this field, so there is no reason to print it with the interpreter.",
      "parentUuid": "f9b16900_9e023f89",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a255c9b6_eaa25a52",
        "filename": "src/execution/frames-inl.h",
        "patchSetId": 10
      },
      "lineNbr": 390,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-15T15:21:31Z",
      "side": 1,
      "message": "Is the C_WASM_ENTRY intentionally missing here? (No in-depth understanding, but I saw a change with the interpreter enabled in `SafeStackFrameType` in `frames.cc`)",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9f360c4_08b5fd10",
        "filename": "src/execution/frames-inl.h",
        "patchSetId": 10
      },
      "lineNbr": 390,
      "author": {
        "id": 1472029
      },
      "writtenOn": "2024-05-20T20:17:24Z",
      "side": 1,
      "message": "That is intentionally missing here because StackFrameIteratorForProfiler::Advance() ignores C_WASM_ENTRY frames. We can add a DCHECK.",
      "parentUuid": "a255c9b6_eaa25a52",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ce78678_ad92b3c7",
        "filename": "src/execution/frames.cc",
        "patchSetId": 10
      },
      "lineNbr": 79,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-13T14:06:53Z",
      "side": 1,
      "message": "Note to self: I will need help reviewing this from someone more familiar with this part of the code base.",
      "range": {
        "startLine": 79,
        "startChar": 29,
        "endLine": 79,
        "endChar": 42
      },
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b8b61b6_0b9da354",
        "filename": "src/execution/frames.cc",
        "patchSetId": 10
      },
      "lineNbr": 79,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-27T13:14:10Z",
      "side": 1,
      "message": "A senior team member might be a good person to review just these `frames.cc/h`-related parts (also ideally an OWNER and knowledgeable about Wasm), maybe Andreas, Clemens (but he is OOO for a little while longer), or Jakob?",
      "parentUuid": "6ce78678_ad92b3c7",
      "range": {
        "startLine": 79,
        "startChar": 29,
        "endLine": 79,
        "endChar": 42
      },
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa11e03a_13cabafe",
        "filename": "src/execution/frames.cc",
        "patchSetId": 10
      },
      "lineNbr": 79,
      "author": {
        "id": 1472029
      },
      "writtenOn": "2024-06-03T08:19:01Z",
      "side": 1,
      "message": "Adding ahaas@chromium.org as reviewer.",
      "parentUuid": "7b8b61b6_0b9da354",
      "range": {
        "startLine": 79,
        "startChar": 29,
        "endLine": 79,
        "endChar": 42
      },
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc542496_c41565d8",
        "filename": "src/execution/frames.cc",
        "patchSetId": 10
      },
      "lineNbr": 99,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-13T14:06:53Z",
      "side": 1,
      "message": "typo: any?",
      "range": {
        "startLine": 99,
        "startChar": 9,
        "endLine": 99,
        "endChar": 11
      },
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e710640f_20df01d8",
        "filename": "src/execution/frames.cc",
        "patchSetId": 10
      },
      "lineNbr": 99,
      "author": {
        "id": 1472029
      },
      "writtenOn": "2024-05-14T21:15:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fc542496_c41565d8",
      "range": {
        "startLine": 99,
        "startChar": 9,
        "endLine": 99,
        "endChar": 11
      },
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3e7c53f_c61ade37",
        "filename": "src/execution/frames.cc",
        "patchSetId": 10
      },
      "lineNbr": 1541,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-13T14:06:53Z",
      "side": 1,
      "message": "nit: instead of exposing this internal field, why not have two ctors (or static factory methods), one for the case where you are wrapping a `WasmCode` object, and one where not? I.e., `DrumBrakeWasmCode::Interpreter()` sets it to `nullptr` and `DrumBrakeWasmCode::Compiled(WasmCode*)` wraps it?",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "70b422c6_259166d2",
        "filename": "src/execution/frames.cc",
        "patchSetId": 10
      },
      "lineNbr": 1541,
      "author": {
        "id": 1472029
      },
      "writtenOn": "2024-05-14T21:15:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e3e7c53f_c61ade37",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "858a040e_144f1bc2",
        "filename": "src/execution/frames.cc",
        "patchSetId": 10
      },
      "lineNbr": 2801,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-13T14:06:53Z",
      "side": 1,
      "message": "nit: indent one out",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6f22f6ac_950bcd50",
        "filename": "src/execution/frames.cc",
        "patchSetId": 10
      },
      "lineNbr": 2801,
      "author": {
        "id": 1472029
      },
      "writtenOn": "2024-05-14T21:15:19Z",
      "side": 1,
      "message": "`git cl format` modifies the file with this indentation, probably because it expects a `case` or `default`.",
      "parentUuid": "858a040e_144f1bc2",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5daf7c90_ff9c2826",
        "filename": "src/execution/frames.cc",
        "patchSetId": 10
      },
      "lineNbr": 2801,
      "author": {
        "id": 1472029
      },
      "writtenOn": "2024-05-14T21:15:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "858a040e_144f1bc2",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4e74f17_22d1e2ff",
        "filename": "src/execution/frames.h",
        "patchSetId": 10
      },
      "lineNbr": 57,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-15T15:21:31Z",
      "side": 1,
      "message": "At least according to the class definition `WasmInterpreterEntryFrame` would need to be below `CommonFrame`, not `TypedFrame`.",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "29e117a8_ed8b37ef",
        "filename": "src/execution/frames.h",
        "patchSetId": 10
      },
      "lineNbr": 57,
      "author": {
        "id": 1472029
      },
      "writtenOn": "2024-05-20T20:17:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a4e74f17_22d1e2ff",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26a79ce1_16daaa48",
        "filename": "src/execution/frames.h",
        "patchSetId": 10
      },
      "lineNbr": 550,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-15T15:21:31Z",
      "side": 1,
      "message": "This seems to be unused, i.e., I commented it out and it still compiles fine? Is this possibly a copying artifact from `WasmFrameSummary`? If yes, remove + rename the field to `code_offset` to make clearer what this offset points to.",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "add10634_89c19880",
        "filename": "src/execution/frames.h",
        "patchSetId": 10
      },
      "lineNbr": 550,
      "author": {
        "id": 1472029
      },
      "writtenOn": "2024-05-20T20:17:24Z",
      "side": 1,
      "message": "This is used by `AppendWasmInterpretedFrame` in file isolate.cc, the build breaks if I remove the function `byte_offset()`.",
      "parentUuid": "26a79ce1_16daaa48",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0e45749_c3f35bb7",
        "filename": "src/execution/frames.h",
        "patchSetId": 10
      },
      "lineNbr": 1224,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-15T15:21:31Z",
      "side": 1,
      "message": "I believe this is undefined behavior, since `WasmFrame` and `WasmInterpreterEntryFrame` are unrelated classes (even though they have a common ancestor). I suppose the only safe way would be to derive `WasmInterpreterEntryFrame` from `WasmFrame`.",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b051b574_84e42780",
        "filename": "src/execution/frames.h",
        "patchSetId": 10
      },
      "lineNbr": 1224,
      "author": {
        "id": 1472029
      },
      "writtenOn": "2024-05-20T20:17:24Z",
      "side": 1,
      "message": "True. `WasmInterpreterEntryFrame` was not inheriting from `WasmFrame` because there are functions implemented by WasmFrame (`generated_code_offset()`, `is_inspectable()`, `LookExceptionHandlerInTable()` that are not used and would not work for a WasmInterpreterEntryFrame, given that `wasm_code()` is null.\nBut it\u0027s true that this is undefined behavior, and it should be ok if we make `WasmInterpreterEntryFrame::wasm_code()` fail with UNREACHABLE().",
      "parentUuid": "a0e45749_c3f35bb7",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32fc21c0_feeca4e8",
        "filename": "src/execution/isolate.cc",
        "patchSetId": 10
      },
      "lineNbr": 824,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-15T15:21:31Z",
      "side": 1,
      "message": "nit: ...we\u0027ll _leave_ it as is...",
      "range": {
        "startLine": 824,
        "startChar": 39,
        "endLine": 824,
        "endChar": 41
      },
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "00ee37ce_347fc042",
        "filename": "src/execution/isolate.cc",
        "patchSetId": 10
      },
      "lineNbr": 824,
      "author": {
        "id": 1472029
      },
      "writtenOn": "2024-05-20T20:17:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "32fc21c0_feeca4e8",
      "range": {
        "startLine": 824,
        "startChar": 39,
        "endLine": 824,
        "endChar": 41
      },
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e8e94f9_f2fdd545",
        "filename": "src/execution/isolate.cc",
        "patchSetId": 10
      },
      "lineNbr": 2195,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-15T15:21:31Z",
      "side": 1,
      "message": "I don\u0027t know much about the (existing) trap handler implementation and `C_WASM_ENTRY`, so maybe a naive question: Why can the `IsThreadInWasm` flag not be set at this point? I thought this is (so far, before the interpreter) an entry from embedder code (\"C\") to Wasm, i.e., the thread in wasm flag should not be set?",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eaad3f65_7da427da",
        "filename": "src/execution/isolate.cc",
        "patchSetId": 10
      },
      "lineNbr": 2195,
      "author": {
        "id": 1472029
      },
      "writtenOn": "2024-05-20T20:17:24Z",
      "side": 1,
      "message": "`C_WASM_ENTRY`s are just skipped in `StackFrameIteratorForProfiler::Advance()`, that\u0027s why we can ignore them here.",
      "parentUuid": "2e8e94f9_f2fdd545",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3b320ea_db31a060",
        "filename": "src/flags/flag-definitions.h",
        "patchSetId": 10
      },
      "lineNbr": 1721,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-13T14:06:53Z",
      "side": 1,
      "message": "Given that we (as in the overall V8/Wasm team) haven\u0027t reviewed the interpreter in-depth, we should make the interpreter imply `--experimental`, i.e., change this to\n```\nDEFINE_EXPERIMENTAL_FEATURE(wasm_jitless, \"Use DrumBrake, a rewriting Wasm interpreter\")\n``` or something",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9580afc5_29ba90bc",
        "filename": "src/flags/flag-definitions.h",
        "patchSetId": 10
      },
      "lineNbr": 1721,
      "author": {
        "id": 1472029
      },
      "writtenOn": "2024-05-14T21:15:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a3b320ea_db31a060",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d154a44_55f158a0",
        "filename": "src/flags/flag-definitions.h",
        "patchSetId": 10
      },
      "lineNbr": 1723,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-13T14:06:53Z",
      "side": 1,
      "message": "Why is the overall Wasm interpreter dependent on `slow_histograms`? I do understand that it\u0027s needed for `wasm_enable_exec_time_histograms`, but wouldn\u0027t an implication just for this suffice? Or just require users to explicitly set `--slow-histograms`, and enforce that via a `DEFINE_NEG_NEG_IMPLICATION`? (AFAIK there are other expensive histograms that have nothing to do with Wasm or the interpreter that would be enabled by this, which I\u0027d rather not.)",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8eb510a_4a593719",
        "filename": "src/flags/flag-definitions.h",
        "patchSetId": 10
      },
      "lineNbr": 1723,
      "author": {
        "id": 1472029
      },
      "writtenOn": "2024-05-14T21:15:19Z",
      "side": 1,
      "message": "You are right, an implication from `wasm_enable_exec_time_histograms` should be sufficient.",
      "parentUuid": "0d154a44_55f158a0",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "095bf5dd_99a31658",
        "filename": "src/flags/flag-definitions.h",
        "patchSetId": 10
      },
      "lineNbr": 1724,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-15T15:21:31Z",
      "side": 1,
      "message": "Please add a very short description what this flag does (I assume it\u0027s insecure/for testing only?)",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f50415a9_0690bc64",
        "filename": "src/flags/flag-definitions.h",
        "patchSetId": 10
      },
      "lineNbr": 1724,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-16T12:34:43Z",
      "side": 1,
      "message": "After reading the `variants.py` below (see comment there), I think I know why this flag exists: It\u0027s so that we can unconditionally set it, but it doesn\u0027t have any effect in case DrumBrake-support is not compiled in. Correct?\n\nIs there a nicer way to solve this (ideally in the test runner), without introducing a flag? In any case, the description/comment string should be filled with something meaningfull.",
      "parentUuid": "095bf5dd_99a31658",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b4f5b763_5bc9b86f",
        "filename": "src/flags/flag-definitions.h",
        "patchSetId": 10
      },
      "lineNbr": 1724,
      "author": {
        "id": 1472029
      },
      "writtenOn": "2024-05-20T20:17:24Z",
      "side": 1,
      "message": "Renamed as `wasm_jitless_if_available_for_testing`.",
      "parentUuid": "f50415a9_0690bc64",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "672f8bfb_971bb4dc",
        "filename": "src/flags/flag-definitions.h",
        "patchSetId": 10
      },
      "lineNbr": 1748,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-13T14:06:53Z",
      "side": 1,
      "message": "Security: (Why) is this safe?",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e944967e_334bfe84",
        "filename": "src/flags/flag-definitions.h",
        "patchSetId": 10
      },
      "lineNbr": 1748,
      "author": {
        "id": 1472029
      },
      "writtenOn": "2024-05-14T21:15:19Z",
      "side": 1,
      "message": "There is the same implication for jitless:\n```\nDEFINE_NEG_IMPLICATION(jitless, validate_asm)\n```\nAnd since `wasm-jitless` always and only work with `jitless` asm validation would be disabled anyway. What should we do here?",
      "parentUuid": "672f8bfb_971bb4dc",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "434b0043_87e1a4af",
        "filename": "src/flags/flag-definitions.h",
        "patchSetId": 10
      },
      "lineNbr": 1748,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-15T15:21:31Z",
      "side": 1,
      "message": "Ah thanks, that lead me to read a bit more about `validate_asm`: If I understand correctly (see https://source.chromium.org/chromium/chromium/src/+/main:v8/src/codegen/compiler.cc;l\u003d657?q\u003dvalidate_asm), formerly with `--jitless`, we would _not_ compile asm.js to Wasm internally, but instead just fall through at https://source.chromium.org/chromium/chromium/src/+/main:v8/src/codegen/compiler.cc;l\u003d830;drc\u003d7e088bf159ef779ea494dd55bb48916be569b06a;bpv\u003d1;bpt\u003d1?q\u003dvalidate_asm and interpret it with Ignition as \"regular JS\" instead.\n\nThe question now is: With `--wasm-jitless`, do we want to generate Wasm code from asm.js and interpret that, or interpret as JS directly? I suppose you want to do the latter, which I am fine with, but then the comment `--jitless also implies --no-expose-wasm` is no longer true and needs to be changed. How about something like\n```\n// Directly interpret asm.js code as regular JavaScript code, instead of \n// translating it to Wasm bytecode first and then interpreting that with DrumBrake.\n// (validate_asm\u003dfalse turns off asm.js to Wasm compilation.)\n```\n\nCould you also update the comment above the implication from --jitless to `--no-validate-asm`?",
      "parentUuid": "e944967e_334bfe84",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "22486554_0b1c6e4b",
        "filename": "src/flags/flag-definitions.h",
        "patchSetId": 10
      },
      "lineNbr": 1748,
      "author": {
        "id": 1472029
      },
      "writtenOn": "2024-05-20T20:17:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "434b0043_87e1a4af",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa252cf4_7a8df665",
        "filename": "src/heap/factory.h",
        "patchSetId": 10
      },
      "lineNbr": 1333,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-15T15:21:31Z",
      "side": 1,
      "message": "I only briefly checked, but it seems the new call sites of `NewWasmStructUninitialized` and `NewWasmStructUninitialized` inside `WasmInterpreterRuntime` do not create a `DisallowGarbageCollection` scope until initialization, unlike what the comment advises. Why is this safe?",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "515ec355_276ac252",
        "filename": "src/heap/factory.h",
        "patchSetId": 10
      },
      "lineNbr": 1333,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-15T15:21:31Z",
      "side": 1,
      "message": "Could you copy over the comment from `NewWasmArrayUninitialized`, since it seems it would apply here as well (see also previous comment).",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5789c121_5d06fe67",
        "filename": "src/heap/factory.h",
        "patchSetId": 10
      },
      "lineNbr": 1333,
      "author": {
        "id": 1472029
      },
      "writtenOn": "2024-05-20T20:17:24Z",
      "side": 1,
      "message": "Ops, I ignored that comment and did not consider GC...",
      "parentUuid": "aa252cf4_7a8df665",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4e7e06d1_ecaf5b10",
        "filename": "src/heap/factory.h",
        "patchSetId": 10
      },
      "lineNbr": 1333,
      "author": {
        "id": 1472029
      },
      "writtenOn": "2024-05-20T20:17:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "515ec355_276ac252",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af481e75_4e10a826",
        "filename": "src/wasm/interpreter/wasm-interpreter.cc",
        "patchSetId": 10
      },
      "lineNbr": 7500,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-13T14:06:53Z",
      "side": 1,
      "message": "compile error with `v8_wasm_interpreter\u003dtrue` in `args.gn`:\n```\n../../src/wasm/interpreter/wasm-interpreter.cc:7501:1: error: static declaration of \u0027TrapMemOutOfBounds\u0027 follows non-static declaration\n 7501 | TrapMemOutOfBounds(const uint8_t* code, uint32_t* sp,\n      | ^\n../../src/wasm/interpreter/wasm-interpreter.cc:471:50: note: previous declaration is here\n  471 | DISABLE_CFI_ICALL InstrHandlerRetType VECTORCALL TrapMemOutOfBounds(\n      |                                                  ^\n```\nI suppose you want a non-static variant of the `INSTRUCTION_HANDLER_FUNC` macro.",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5ca0dbb7_d034916f",
        "filename": "src/wasm/interpreter/wasm-interpreter.cc",
        "patchSetId": 10
      },
      "lineNbr": 7500,
      "author": {
        "id": 1472029
      },
      "writtenOn": "2024-05-14T21:15:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "af481e75_4e10a826",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88bcf69e_a8e1b3d5",
        "filename": "src/wasm/interpreter/wasm-interpreter.h",
        "patchSetId": 10
      },
      "lineNbr": 44,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-13T14:06:53Z",
      "side": 1,
      "message": "(Disclosure: I haven\u0027t reviewed files in `interpreter/` in depth, but just stumbled over this due to the compile error below.)\n`DISABLE_CFI_ICALL` means the interpreter instruction handlers are callable (and ROP-able) from everywhere, i.e., this could be pretty detrimental for security, no?",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48a77ea7_cf5a2b86",
        "filename": "src/wasm/interpreter/wasm-interpreter.h",
        "patchSetId": 10
      },
      "lineNbr": 44,
      "author": {
        "id": 1472029
      },
      "writtenOn": "2024-05-14T21:15:19Z",
      "side": 1,
      "message": "There are two reasons for this.\nThe first is that a few of the interpreter instruction handlers (those that can trap with an out-of-bounds memory access) are not C++ compiled functions, but are instead ASM builtins, and I don\u0027t know how to declare them as valid CFI targets.\nBut even if all handlers were valid targets, the last instruction of each handler is a tail call to the next instruction handler, like:\n\n```\n[[clang::musttail]] return kInstructionTable[\n    ReadFnId(code) \u0026 kInstructionTableMask](code, sp, wasm_runtime, r0, fp0)\n```\n\nAnd for the sake of speed, we cannot make a CFI check after every single handler call.\n\nHow does the JS interpreter solve this issue?",
      "parentUuid": "88bcf69e_a8e1b3d5",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0511765e_95d5fe92",
        "filename": "src/wasm/interpreter/wasm-interpreter.h",
        "patchSetId": 10
      },
      "lineNbr": 44,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-15T15:21:31Z",
      "side": 1,
      "message": "* Regarding how to make ASM builtins valid CFI targets, let\u0027s ask sroettger@ (Stephen Roettger). On x64 it should essentially be an `endbr64` instruction at handler entry, right? (At least for the \"coarse-grained\" CET, no idea about more strict CFI that takes signatures into account, e.g., FineIBT.)\n* More generally, Stephen, is it fine to disable CFI for interpreter handlers? (As long as the interpreter is not enabled/used by Chrome, I think we are indifferent, but just wanted to get your OK as the CFI expert.)\n* Regarding how the JS interpreter does dispatch + efficient CFI (if at all): sroettger@ and leszeks@ (Leszek Swirski) probably know more as well.",
      "parentUuid": "48a77ea7_cf5a2b86",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9c7bed3_ab8afe13",
        "filename": "src/wasm/interpreter/wasm-interpreter.h",
        "patchSetId": 10
      },
      "lineNbr": 44,
      "author": {
        "id": 1120979
      },
      "writtenOn": "2024-05-16T09:29:00Z",
      "side": 1,
      "message": "The forward edge CFI is work in progress so I think it\u0027s fine to have the disable here for the time being.\n\n\u003e `DISABLE_CFI_ICALL` means the interpreter instruction handlers are callable (and ROP-able) from everywhere.\nI think this should just disable the icall protections for the calls from inside the annotated functions, so the tail calls will not enforce CFI.\n\nThe current plan for JS interpreter handlers is to have the fn ptrs in read-only memory.",
      "parentUuid": "0511765e_95d5fe92",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce3e88a7_903854cd",
        "filename": "src/wasm/interpreter/wasm-interpreter.h",
        "patchSetId": 10
      },
      "lineNbr": 44,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-05-16T12:47:42Z",
      "side": 1,
      "message": "Thanks for the information Stephen!\n\nPaolo, does it answer your question?\n\nI think this means for the time being `DISABLE_CFI_ICALL` is fine and certainly not a blocker to landing the interpreter behind a flag.",
      "parentUuid": "d9c7bed3_ab8afe13",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b84e08e2_2b971a28",
        "filename": "src/wasm/interpreter/wasm-interpreter.h",
        "patchSetId": 10
      },
      "lineNbr": 44,
      "author": {
        "id": 1472029
      },
      "writtenOn": "2024-05-20T20:17:24Z",
      "side": 1,
      "message": "Yes, thanks for the info!\n\n\u003e The current plan for JS interpreter handlers is to have the fn ptrs in read-only memory.\n\nsroettger@ Can you tell me more about this? I could use the same mechanism for the Wasm interpreter.",
      "parentUuid": "ce3e88a7_903854cd",
      "revId": "a6e79f76247011a37e858863d569ee85c6e386cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}