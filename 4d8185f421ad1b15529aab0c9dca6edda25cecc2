{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "80b47ca3_ba61b72e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2023-01-31T09:24:03Z",
      "side": 1,
      "message": "ptal.\n\nRemembered set filtering during marking is already implemented at https://source.chromium.org/chromium/chromium/src/+/main:v8/src/heap/mark-compact.cc;l\u003d6303;drc\u003d3297fb6d70a02d8c4af8db2bc9e315053744442b;bpv\u003d1;bpt\u003d1",
      "revId": "4d8185f421ad1b15529aab0c9dca6edda25cecc2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "024870fb_00cd21a9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2023-01-31T10:56:43Z",
      "side": 1,
      "message": "lgtm, nice!",
      "revId": "4d8185f421ad1b15529aab0c9dca6edda25cecc2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0349f988_0f1dc85c",
        "filename": "src/heap/mark-compact.cc",
        "patchSetId": 2
      },
      "lineNbr": 4175,
      "author": {
        "id": 1357035
      },
      "writtenOn": "2023-01-31T11:25:10Z",
      "side": 1,
      "message": "I think when filtering OLD_TO_NEW slots we also filter invalidated slots already, this should allow us to clear that invalidated_slots vector as well. So I believe this DCHECK should hold in the future as well.",
      "revId": "4d8185f421ad1b15529aab0c9dca6edda25cecc2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "856d42cf_1b114373",
        "filename": "src/heap/mark-compact.cc",
        "patchSetId": 2
      },
      "lineNbr": 4175,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2023-01-31T11:36:03Z",
      "side": 1,
      "message": "We drop the invalidated_slot when filtering the remembered set, but since we don\u0027t filter anymore (before this verification is called) we also won\u0027t drop the invalidated_slots.",
      "parentUuid": "0349f988_0f1dc85c",
      "revId": "4d8185f421ad1b15529aab0c9dca6edda25cecc2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa09627e_14a073eb",
        "filename": "src/heap/mark-compact.cc",
        "patchSetId": 2
      },
      "lineNbr": 4175,
      "author": {
        "id": 1357035
      },
      "writtenOn": "2023-01-31T12:15:09Z",
      "side": 1,
      "message": "We should still filter before this point though, as this seems to be invoked only after evacuation. So all invalid slots should be filtered out by marking already. Could be that the ReleaseInvalidatedSlots there is missing but I believe this DCHECK should still hold.",
      "parentUuid": "856d42cf_1b114373",
      "revId": "4d8185f421ad1b15529aab0c9dca6edda25cecc2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f7771437_b9f68771",
        "filename": "src/heap/mark-compact.cc",
        "patchSetId": 2
      },
      "lineNbr": 4175,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2023-01-31T12:46:31Z",
      "side": 1,
      "message": "The only case where we call ReleaseInvalidatedSlots during marking is for OLD_TO_SHARED when iterating clients. We don\u0027t release OLD_TO_NEW during marking.",
      "parentUuid": "aa09627e_14a073eb",
      "revId": "4d8185f421ad1b15529aab0c9dca6edda25cecc2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03d33c41_2e4cee7d",
        "filename": "src/heap/mark-compact.cc",
        "patchSetId": 2
      },
      "lineNbr": 5839,
      "author": {
        "id": 1357035
      },
      "writtenOn": "2023-01-31T11:22:19Z",
      "side": 1,
      "message": "I don\u0027t think we need this anymore. We don\u0027t need to update references AFAIU and we seem to remove dead entries in MinorMarkCompactCollector::ClearNonLiveReferences already. So we should be able to remove that method entirely.\n\nThat said we don\u0027t even allow MakeExternal on young strings from embedders, only for tests and that may or may not be by accident. So there should be very few items in that table. But I believe we could even remove that table iteration if we want so.",
      "revId": "4d8185f421ad1b15529aab0c9dca6edda25cecc2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b0625e68_0810f850",
        "filename": "src/heap/mark-compact.cc",
        "patchSetId": 2
      },
      "lineNbr": 5839,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2023-01-31T11:36:03Z",
      "side": 1,
      "message": "It is still required for heap verification at least. Maybe we can skip it when heap verification is disabled. I plan to check later.",
      "parentUuid": "03d33c41_2e4cee7d",
      "revId": "4d8185f421ad1b15529aab0c9dca6edda25cecc2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9d6d822c_5bc3e0fb",
        "filename": "src/heap/mark-compact.cc",
        "patchSetId": 2
      },
      "lineNbr": 5839,
      "author": {
        "id": 1357035
      },
      "writtenOn": "2023-01-31T12:15:09Z",
      "side": 1,
      "message": "Ah right, I guess it is still needed for promotion. Sorry, forgot about that.\n\nCould you please update the comment for why we still need this code? Right now it still mentions that we update pointers.",
      "parentUuid": "b0625e68_0810f850",
      "revId": "4d8185f421ad1b15529aab0c9dca6edda25cecc2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a63a3c6c_6ce4cc3b",
        "filename": "src/heap/mark-compact.cc",
        "patchSetId": 2
      },
      "lineNbr": 5839,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2023-01-31T12:46:31Z",
      "side": 1,
      "message": "I plan to update scope names as well later. I\u0027ll update the comment when I do that.",
      "parentUuid": "9d6d822c_5bc3e0fb",
      "revId": "4d8185f421ad1b15529aab0c9dca6edda25cecc2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "4d8185f421ad1b15529aab0c9dca6edda25cecc2",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "4d8185f421ad1b15529aab0c9dca6edda25cecc2",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "4d8185f421ad1b15529aab0c9dca6edda25cecc2",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "4d8185f421ad1b15529aab0c9dca6edda25cecc2",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}