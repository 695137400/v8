{
  "comments": [
    {
      "key": {
        "uuid": "fef11772_4a4676f1",
        "filename": "include/v8.h",
        "patchSetId": 2
      },
      "lineNbr": 7250,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2019-07-31T10:42:00Z",
      "side": 1,
      "message": "This is currently a duplicate of WorklistTaskId::MainThread.\nIs the intention to replace usages of WorklistTaskId::MainThread with kMainThreadId?\n\nIf not, I\u0027d suggest:\n1) Reconsider if we actually need kMainThread (since having 2 constants for the same thing doesn\u0027t seem desirable)\n2) Consider initializing kMainThread to WorklistTaskId::MainThread instead of hardcoded 0",
      "range": {
        "startLine": 7250,
        "startChar": 26,
        "endLine": 7250,
        "endChar": 39
      },
      "revId": "b87c3830200982df37f9caf27b70e7963a19f8cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46a7bb2d_8d9f8010",
        "filename": "include/v8.h",
        "patchSetId": 2
      },
      "lineNbr": 7268,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2019-07-31T10:42:00Z",
      "side": 1,
      "message": "Does need to be dynamic?\nIf not, I\u0027d suggest replacing this method with a constant the compiler can use for optimizations.",
      "range": {
        "startLine": 7268,
        "startChar": 9,
        "endLine": 7268,
        "endChar": 20
      },
      "revId": "b87c3830200982df37f9caf27b70e7963a19f8cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3300ef36_1b9e3191",
        "filename": "include/v8.h",
        "patchSetId": 2
      },
      "lineNbr": 7284,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2019-07-30T21:13:58Z",
      "side": 1,
      "message": "I do find our naming here a bit weird: \"RegisterV8References\" actually registers embedder references and \"RegisterEmbedderReference\" actually registers a V8 reference.\n\nMaybe the naming should be reversed?",
      "range": {
        "startLine": 7284,
        "startChar": 15,
        "endLine": 7284,
        "endChar": 35
      },
      "revId": "b87c3830200982df37f9caf27b70e7963a19f8cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "937aad29_e7082e29",
        "filename": "include/v8.h",
        "patchSetId": 2
      },
      "lineNbr": 7284,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2019-07-31T09:19:24Z",
      "side": 1,
      "message": "+1 to fixing the sames. In the new API we probably also want to push individual embedder fields instead of accumulating them in arrays?\n\nSuggestions for naming:\n- RegisterDiscoveredEmbedderField(id, embedder_field);\n- PushDiscoveredEmbedderField(id, embedder_field);\n- PushEmbedderField(id, embedder_field);\n(similar for V8).",
      "parentUuid": "3300ef36_1b9e3191",
      "range": {
        "startLine": 7284,
        "startChar": 15,
        "endLine": 7284,
        "endChar": 35
      },
      "revId": "b87c3830200982df37f9caf27b70e7963a19f8cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dcaf0628_f4102439",
        "filename": "include/v8.h",
        "patchSetId": 2
      },
      "lineNbr": 7284,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2019-07-31T10:42:00Z",
      "side": 1,
      "message": "I agree the names should be changed. I think they should be more explicit.\n{V8/Embedder}Refernces leaves the direction of the reference vague.\nThe names are correct if it is references from {V8/Embedder}, but reversed if it is references to.\nI was thinking of either \"RegisterReferencesTo{V8/Embedder}\" or \"RegisterReferencesFrom{V8/Embedder}\" (and swapping the names).\n\nUlan\u0027s suggestion also clarifies this distinction but I don\u0027t quite understand the need for the smaller granularity Ulan suggested.",
      "parentUuid": "3300ef36_1b9e3191",
      "range": {
        "startLine": 7284,
        "startChar": 15,
        "endLine": 7284,
        "endChar": 35
      },
      "revId": "b87c3830200982df37f9caf27b70e7963a19f8cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "547a96d2_8a16b8ff",
        "filename": "include/v8.h",
        "patchSetId": 2
      },
      "lineNbr": 7284,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2019-07-31T11:04:00Z",
      "side": 1,
      "message": "The motivation for the smaller granularity is to make the API symmetric in both directions so that Blink markers see the newly discovered reference as soon as possible.\n\nI think collecting the references into a vector is an artifact of the old system when we had only incremental marking.",
      "parentUuid": "dcaf0628_f4102439",
      "range": {
        "startLine": 7284,
        "startChar": 15,
        "endLine": 7284,
        "endChar": 35
      },
      "revId": "b87c3830200982df37f9caf27b70e7963a19f8cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71865c71_a61106ed",
        "filename": "include/v8.h",
        "patchSetId": 2
      },
      "lineNbr": 7284,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2019-07-31T11:27:28Z",
      "side": 1,
      "message": "Wouldn\u0027t you get the same symmetry with the existing names as well (assuming they were clarified to denote directionality)?\n\nI guess what I don\u0027t understand is when I would use each of the methods you\u0027re suggesting.",
      "parentUuid": "547a96d2_8a16b8ff",
      "range": {
        "startLine": 7284,
        "startChar": 15,
        "endLine": 7284,
        "endChar": 35
      },
      "revId": "b87c3830200982df37f9caf27b70e7963a19f8cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "601113cb_ab679395",
        "filename": "include/v8.h",
        "patchSetId": 2
      },
      "lineNbr": 7358,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2019-07-31T10:42:00Z",
      "side": 1,
      "message": "does that mean the embedder can ask to go into an atomic pause and finish the gc cycle? or is this something else?",
      "range": {
        "startLine": 7358,
        "startChar": 39,
        "endLine": 7358,
        "endChar": 61
      },
      "revId": "b87c3830200982df37f9caf27b70e7963a19f8cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "798bb229_e8b28b58",
        "filename": "src/api/api.cc",
        "patchSetId": 2
      },
      "lineNbr": 10197,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2019-07-31T10:42:00Z",
      "side": 1,
      "message": "This and RegisterEmbedderReference you added are just wrapper we should start using so the code using EmbedderHeapTracer will be prepared when we start using multiple tasks, correct?\nThe actual behavior has not changed.",
      "range": {
        "startLine": 10197,
        "startChar": 25,
        "endLine": 10197,
        "endChar": 45
      },
      "revId": "b87c3830200982df37f9caf27b70e7963a19f8cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}