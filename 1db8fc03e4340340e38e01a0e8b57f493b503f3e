{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2da76b13_34ab9fc5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2022-10-27T14:06:46Z",
      "side": 1,
      "message": "Jakob, could you take a look please?\nWhile the C++ code should be ready, the WAT code does not cover all MVP features yet. I plan on extending it in a separate CL later.",
      "revId": "1db8fc03e4340340e38e01a0e8b57f493b503f3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f31fc31e_f3eec932",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2022-10-27T15:04:45Z",
      "side": 1,
      "message": "Nice! My comments mostly answer your questions. I\u0027m not so happy with the big literal, see below. WDYT about doing that differently?",
      "revId": "1db8fc03e4340340e38e01a0e8b57f493b503f3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad4cda96_680ba6de",
        "filename": "test/unittests/wasm/wasm-disassembler-unittest-mvp.wasm.inc",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2022-10-27T15:04:45Z",
      "side": 1,
      "message": "Well, this isn\u0027t exactly readable...\n\nI can see value in the sort-of roundtrip you\u0027ve built into this design by making sure our disassembler produces output that `wat2wasm` understands. But I think in the long run, being able to edit our tests without relying on external tools is more important than optimizing for easy auto-generation of the initial tests. So I\u0027m inclined to prefer `wami --full-hexdump` over `xxd`, to make this more human-editable. My guess why you haven\u0027t done that yet is that wami adds `[...]` around everything. I\u0027d probably just manually copy-paste the body of the literal right into the array definition in the .cc file. Alternatively we could also add a flag to wami that either skips the `[]` or uses `{}` instead, but I\u0027m not sure that\u0027s worth it, as we don\u0027t really need this to be a standalone .inc file.",
      "range": {
        "startLine": 1,
        "startChar": 2,
        "endLine": 1,
        "endChar": 24
      },
      "revId": "1db8fc03e4340340e38e01a0e8b57f493b503f3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c796ea6a_b1ddc7dd",
        "filename": "test/unittests/wasm/wasm-disassembler-unittest-mvp.wasm.inc",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2022-11-02T09:20:33Z",
      "side": 1,
      "message": "Being able to edit the test without external tooling is a good point! I will change this to use the `wami --full-hexdump` output.\n\nMy reasoning for choosing `xxd` was that I didn\u0027t want to produce the module bytes with the same code that we ultimately test. There could be the (admittedly unlikely) case that `wami --full-hexdump` suffers from a bug (e.g., dropping some instructions from the output) that cancels itself out when disassembling those bytes again. However, this could be mitigated by either comparing `xxd` and `wami`\u0027s output, or producing a file from the bytes again and comparing that with the wasm file generated by `wat2wasm`.\n\nRegarding having a standalone .wasm.inc file: This just made developing the test quicker for me. Whenever I updated the .wat expectation, I can update and run the test with a single CLI invocation instead of having to manually copy and paste. Long-term (when the test is stable), this is less of an argument for having it in a separate file, but for now I keep it as such.\n\nWith regards to `wami`\u0027s output format: No need to change anything there, tail+head can just strip off the `[]` and then my single command invocation still works.",
      "parentUuid": "ad4cda96_680ba6de",
      "range": {
        "startLine": 1,
        "startChar": 2,
        "endLine": 1,
        "endChar": 24
      },
      "revId": "1db8fc03e4340340e38e01a0e8b57f493b503f3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7547c6b7_0087ebed",
        "filename": "test/unittests/wasm/wasm-disassembler-unittest-mvp.wasm.inc",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2022-11-02T15:11:06Z",
      "side": 1,
      "message": "Re hidden bugs: we may assume that our disassembler is correct right now, because we\u0027ve tested it (using a manual workflow) against `wasmparser` before it landed. So these tests are largely \"change detector tests\": we don\u0027t want established functionality to regress when we make changes.\n\nRe .wasm.inc: I understand that that setup eases test development, especially as you need to iterate. But that phase ends when this CL lands, so you could inline the file before that happens. I don\u0027t feel strongly about it though.",
      "parentUuid": "c796ea6a_b1ddc7dd",
      "range": {
        "startLine": 1,
        "startChar": 2,
        "endLine": 1,
        "endChar": 24
      },
      "revId": "1db8fc03e4340340e38e01a0e8b57f493b503f3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "068a5585_4b89dfdc",
        "filename": "test/unittests/wasm/wasm-disassembler-unittest-mvp.wat.inc",
        "patchSetId": 2
      },
      "lineNbr": 5,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2022-10-27T15:04:45Z",
      "side": 1,
      "message": "Yes. It\u0027s shorter, and it follows wasmparser behavior (https://github.com/wasdk/wasmparser).",
      "range": {
        "startLine": 5,
        "startChar": 22,
        "endLine": 5,
        "endChar": 52
      },
      "revId": "1db8fc03e4340340e38e01a0e8b57f493b503f3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d0edf096_9eef8496",
        "filename": "test/unittests/wasm/wasm-disassembler-unittest-mvp.wat.inc",
        "patchSetId": 2
      },
      "lineNbr": 5,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2022-11-02T09:20:33Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "068a5585_4b89dfdc",
      "range": {
        "startLine": 5,
        "startChar": 22,
        "endLine": 5,
        "endChar": 52
      },
      "revId": "1db8fc03e4340340e38e01a0e8b57f493b503f3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ca8e3699_f04ddab4",
        "filename": "test/unittests/wasm/wasm-disassembler-unittest-mvp.wat.inc",
        "patchSetId": 2
      },
      "lineNbr": 5,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2022-11-02T09:20:33Z",
      "side": 1,
      "message": "In these cases marked here, I am not sure what the correct expected output from the disassembler shall be. Is it specified somewhere, or do we always follow, e.g., the output of wasm2wat?",
      "revId": "1db8fc03e4340340e38e01a0e8b57f493b503f3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ebd86a67_54fbc3f9",
        "filename": "test/unittests/wasm/wasm-disassembler-unittest-mvp.wat.inc",
        "patchSetId": 2
      },
      "lineNbr": 5,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2022-11-02T15:11:06Z",
      "side": 1,
      "message": "The spec is at https://webassembly.github.io/spec/core/text/index.html, but it leaves some freedom as there\u0027s more than one way to format modules as text.\nFor now, we follow what https://github.com/wasdk/wasmparser does, because that\u0027s what DevTools used to use. Generally, anything we find readable/useful is fine, as long as it\u0027s covered by the official text format spec. In particular, we can change what our disassembler produces, as long as we believe that it is an improvement.",
      "parentUuid": "ca8e3699_f04ddab4",
      "revId": "1db8fc03e4340340e38e01a0e8b57f493b503f3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b17535e2_e0225f2f",
        "filename": "test/unittests/wasm/wasm-disassembler-unittest-mvp.wat.inc",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2022-10-27T15:04:45Z",
      "side": 1,
      "message": "Yes, same as imports.",
      "range": {
        "startLine": 9,
        "startChar": 22,
        "endLine": 9,
        "endChar": 52
      },
      "revId": "1db8fc03e4340340e38e01a0e8b57f493b503f3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b794a484_e24d044d",
        "filename": "test/unittests/wasm/wasm-disassembler-unittest-mvp.wat.inc",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2022-11-02T09:20:33Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b17535e2_e0225f2f",
      "range": {
        "startLine": 9,
        "startChar": 22,
        "endLine": 9,
        "endChar": 52
      },
      "revId": "1db8fc03e4340340e38e01a0e8b57f493b503f3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d32cca5_367a0285",
        "filename": "test/unittests/wasm/wasm-disassembler-unittest-mvp.wat.inc",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2022-10-27T15:04:45Z",
      "side": 1,
      "message": "The current behavior is good: if we have a name for the global (from imports, exports, or name section), add the index. If we don\u0027t have a name and generate `global{index}` as automatic name, there\u0027s no point in repeating the index. If you exported `global3` as `globalfoo`, the resulting behavior would be less confusing :-)\nAnd if the module had a name section, you could create the situation \n`(global $foo (;3;) (export \"bar\") ...)`.",
      "range": {
        "startLine": 10,
        "startChar": 22,
        "endLine": 10,
        "endChar": 74
      },
      "revId": "1db8fc03e4340340e38e01a0e8b57f493b503f3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c60e3b8e_8940113b",
        "filename": "test/unittests/wasm/wasm-disassembler-unittest-mvp.wat.inc",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2022-11-02T09:20:33Z",
      "side": 1,
      "message": "Thanks for the explanation! I will change the export name to make it less confusing.",
      "parentUuid": "4d32cca5_367a0285",
      "range": {
        "startLine": 10,
        "startChar": 22,
        "endLine": 10,
        "endChar": 74
      },
      "revId": "1db8fc03e4340340e38e01a0e8b57f493b503f3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16741113_932c5b72",
        "filename": "test/unittests/wasm/wasm-disassembler-unittest-mvp.wat.inc",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2022-10-27T15:04:45Z",
      "side": 1,
      "message": "The binary format provides no hints for making this decision, so printing all constants as signed is the best we can do.",
      "range": {
        "startLine": 30,
        "startChar": 4,
        "endLine": 30,
        "endChar": 73
      },
      "revId": "1db8fc03e4340340e38e01a0e8b57f493b503f3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff617396_9a3aedbe",
        "filename": "test/unittests/wasm/wasm-disassembler-unittest-mvp.wat.inc",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2022-11-02T09:20:33Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "16741113_932c5b72",
      "range": {
        "startLine": 30,
        "startChar": 4,
        "endLine": 30,
        "endChar": 73
      },
      "revId": "1db8fc03e4340340e38e01a0e8b57f493b503f3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "96eb61cb_f2ae2035",
        "filename": "test/unittests/wasm/wasm-disassembler-unittest-mvp.wat.inc",
        "patchSetId": 2
      },
      "lineNbr": 90,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2022-11-02T09:20:33Z",
      "side": 1,
      "message": "These I plan on adding in a separate CL.\nFor the non-MVP features, I would use separate module(s).",
      "revId": "1db8fc03e4340340e38e01a0e8b57f493b503f3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e68deb9a_f3f00ecc",
        "filename": "test/unittests/wasm/wasm-disassembler-unittest-mvp.wat.inc",
        "patchSetId": 2
      },
      "lineNbr": 90,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2022-11-02T15:11:06Z",
      "side": 1,
      "message": "OK.\n\nModules that use a name section would also be good to include eventually. They don\u0027t necessarily need to be separate: the name section can provide partial coverage to test both cases in a single module.\n\nSpecs for things that can be named:\n- https://webassembly.github.io/spec/core/appendix/custom.html#name-section \n- https://github.com/WebAssembly/extended-name-section/blob/main/proposals/extended-name-section/Overview.md \n- https://github.com/WebAssembly/exception-handling/blob/main/proposals/exception-handling/Exceptions.md#name-section \n- https://github.com/WebAssembly/gc/issues/193",
      "parentUuid": "96eb61cb_f2ae2035",
      "revId": "1db8fc03e4340340e38e01a0e8b57f493b503f3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "95fd3325_1d7c5668",
        "filename": "test/unittests/wasm/wasm-disassembler-unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 54,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2022-10-27T15:04:45Z",
      "side": 1,
      "message": "Cute :-)\nAnd `#include` is a nice solution to the path resolution problem.",
      "range": {
        "startLine": 54,
        "startChar": 5,
        "endLine": 54,
        "endChar": 54
      },
      "revId": "1db8fc03e4340340e38e01a0e8b57f493b503f3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}