{
  "comments": [
    {
      "key": {
        "uuid": "d823e68e_8277dfb5",
        "filename": "src/d8/d8.cc",
        "patchSetId": 15
      },
      "lineNbr": 3374,
      "author": {
        "id": 1116032
      },
      "writtenOn": "2019-07-04T10:35:47Z",
      "side": 1,
      "message": "nit: This doesn\u0027t currently depend on Perfetto directly, but on the off chance it might I\u0027d suggest moving perfetto::Tracing::Initialize to happen first.",
      "range": {
        "startLine": 3374,
        "startChar": 13,
        "endLine": 3374,
        "endChar": 34
      },
      "revId": "42400d411a003bbe7215911b8e752c4596941464",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c70cbe7_70b75728",
        "filename": "src/d8/d8.cc",
        "patchSetId": 15
      },
      "lineNbr": 3374,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2019-07-08T08:30:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d823e68e_8277dfb5",
      "range": {
        "startLine": 3374,
        "startChar": 13,
        "endLine": 3374,
        "endChar": 34
      },
      "revId": "42400d411a003bbe7215911b8e752c4596941464",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f8abbe1_39fbe3ba",
        "filename": "src/libplatform/tracing/tracing-controller.cc",
        "patchSetId": 15
      },
      "lineNbr": 294,
      "author": {
        "id": 1116032
      },
      "writtenOn": "2019-07-04T10:35:47Z",
      "side": 1,
      "message": "You can use kUnspecifiedBackend here to avoid hardcoding to the in-process backend (even though right now that\u0027s the only available one).",
      "range": {
        "startLine": 294,
        "startChar": 57,
        "endLine": 294,
        "endChar": 74
      },
      "revId": "42400d411a003bbe7215911b8e752c4596941464",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e7b9c73_1b8941f4",
        "filename": "src/libplatform/tracing/tracing-controller.cc",
        "patchSetId": 15
      },
      "lineNbr": 294,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2019-07-08T08:30:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5f8abbe1_39fbe3ba",
      "range": {
        "startLine": 294,
        "startChar": 57,
        "endLine": 294,
        "endChar": 74
      },
      "revId": "42400d411a003bbe7215911b8e752c4596941464",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e29a3b7f_f0e7e131",
        "filename": "src/libplatform/tracing/tracing-controller.cc",
        "patchSetId": 15
      },
      "lineNbr": 297,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-07-03T14:06:42Z",
      "side": 1,
      "message": "So this will only be called once per process? Is there no blocking Start() method on the tracing session / would that be nice to have? Or maybe something similar to the teardown process with a callback?",
      "revId": "42400d411a003bbe7215911b8e752c4596941464",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2e14994_afd53f7a",
        "filename": "src/libplatform/tracing/tracing-controller.cc",
        "patchSetId": 15
      },
      "lineNbr": 297,
      "author": {
        "id": 1116032
      },
      "writtenOn": "2019-07-04T10:35:47Z",
      "side": 1,
      "message": "We\u0027re going to add a StartBlocking()/StopBlocking() calls for exactly this use case -- stay tuned :)",
      "parentUuid": "e29a3b7f_f0e7e131",
      "revId": "42400d411a003bbe7215911b8e752c4596941464",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e19c8bf_db7f1f4f",
        "filename": "src/libplatform/tracing/tracing-controller.cc",
        "patchSetId": 15
      },
      "lineNbr": 297,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2019-07-08T08:30:25Z",
      "side": 1,
      "message": "I\u0027ve added a todo to switch to it when it\u0027s available",
      "parentUuid": "f2e14994_afd53f7a",
      "revId": "42400d411a003bbe7215911b8e752c4596941464",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bbc32581_66c47375",
        "filename": "test/cctest/BUILD.gn",
        "patchSetId": 15
      },
      "lineNbr": 424,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-07-03T14:06:42Z",
      "side": 1,
      "message": "q: what\u0027s lite/zero? Is zero a part of lite?",
      "revId": "42400d411a003bbe7215911b8e752c4596941464",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8519a1f1_edf64d92",
        "filename": "test/cctest/BUILD.gn",
        "patchSetId": 15
      },
      "lineNbr": 424,
      "author": {
        "id": 1116032
      },
      "writtenOn": "2019-07-04T10:35:47Z",
      "side": 1,
      "message": "\"lite\" means libprotobuf-lite, i.e., the variant of the standard protocol buffer library without runtime introspection support. \"zero\" is Perfetto\u0027s own protocol buffer library that supports zero-copy (streamed) writing of protobufs.\n\nFWIW we\u0027re working to remove the need to depend on protobuf-lite here.",
      "parentUuid": "bbc32581_66c47375",
      "revId": "42400d411a003bbe7215911b8e752c4596941464",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1df61c40_f7f0e354",
        "filename": "test/cctest/BUILD.gn",
        "patchSetId": 15
      },
      "lineNbr": 424,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2019-07-08T08:30:25Z",
      "side": 1,
      "message": "Yep - so we include lite when we need to read from protos (e.g. tests, json listener) and zero when we need to write to protos (tracing controller, also tests). So sometimes we include both.",
      "parentUuid": "8519a1f1_edf64d92",
      "revId": "42400d411a003bbe7215911b8e752c4596941464",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5395852c_5f3d18e0",
        "filename": "test/cctest/libplatform/test-tracing.cc",
        "patchSetId": 15
      },
      "lineNbr": 747,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-07-03T14:06:42Z",
      "side": 1,
      "message": "What is the test expectation? Is there anything to assert?",
      "revId": "42400d411a003bbe7215911b8e752c4596941464",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94b8542c_5fe843bd",
        "filename": "test/cctest/libplatform/test-tracing.cc",
        "patchSetId": 15
      },
      "lineNbr": 747,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2019-07-08T08:30:25Z",
      "side": 1,
      "message": "I\u0027ll add a non-empty assert for now. Mostly this was to check it isn\u0027t crashing. I\u0027ll do a follow up to sort out testing properly too",
      "parentUuid": "5395852c_5f3d18e0",
      "revId": "42400d411a003bbe7215911b8e752c4596941464",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}