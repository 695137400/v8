{
  "comments": [
    {
      "key": {
        "uuid": "c958f29b_267d4840",
        "filename": "src/builtins/builtins-async-generator-gen.cc",
        "patchSetId": 2
      },
      "lineNbr": 562,
      "author": {
        "id": 1187164
      },
      "writtenOn": "2018-03-17T19:48:06Z",
      "side": 1,
      "message": "I think this optimization is observable.\n\n```\nPromise.race([\n  (async function* g() { yield 2; })().next(),\n  Promise.resolve(1),\n]).then(v \u003d\u003e print(v));\n```\n\nI think that should be ‘1` per spec, because the generator yield should be delayed a turn, but this change will make this output ‘2’, right?\n\nIt seems similar to some bugs about microtask ordering anba had filed om v8 a few years ago.\n\nIf we do violate the spec, we should probably be up front about it",
      "revId": "95aa22f2bc987bd793124dbdb65d4831b962a621",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "595ee776_d4160c84",
        "filename": "src/builtins/builtins-async-generator-gen.cc",
        "patchSetId": 2
      },
      "lineNbr": 562,
      "author": {
        "id": 1183894
      },
      "writtenOn": "2018-03-17T20:00:15Z",
      "side": 1,
      "message": "No, it preserves the observable semantics: The regular case will create a temporary Promise (in Await) and immediately fulfill it with the value (in ResolvePromise), which schedules a PromiseFulfillReactionJob (in FulfillPromise). There\u0027s no microtask step in between these.",
      "parentUuid": "c958f29b_267d4840",
      "revId": "95aa22f2bc987bd793124dbdb65d4831b962a621",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}