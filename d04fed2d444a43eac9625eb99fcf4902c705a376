{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "bddd5ef0_7d076307",
        "filename": "src/debug/liveedit.cc",
        "patchSetId": 2
      },
      "lineNbr": 759,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2022-10-06T11:57:22Z",
      "side": 1,
      "message": "can you add some DCHECKs here around invariants that we expect (e.g. that the script is a COMPILATION_TYPE_EVAL etc)?",
      "range": {
        "startLine": 759,
        "startChar": 15,
        "endLine": 759,
        "endChar": 35
      },
      "revId": "d04fed2d444a43eac9625eb99fcf4902c705a376",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ed4f46a_d38db49d",
        "filename": "src/debug/liveedit.cc",
        "patchSetId": 2
      },
      "lineNbr": 759,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2022-10-06T12:25:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bddd5ef0_7d076307",
      "range": {
        "startLine": 759,
        "startChar": 15,
        "endLine": 759,
        "endChar": 35
      },
      "revId": "d04fed2d444a43eac9625eb99fcf4902c705a376",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c9fdc37_850686c1",
        "filename": "src/debug/liveedit.cc",
        "patchSetId": 2
      },
      "lineNbr": 762,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2022-10-06T11:57:22Z",
      "side": 1,
      "message": "why drop script scopes?",
      "range": {
        "startLine": 762,
        "startChar": 32,
        "endLine": 762,
        "endChar": 71
      },
      "revId": "d04fed2d444a43eac9625eb99fcf4902c705a376",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a542e31_e2c4cac0",
        "filename": "src/debug/liveedit.cc",
        "patchSetId": 2
      },
      "lineNbr": 762,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2022-10-06T12:25:17Z",
      "side": 1,
      "message": "Actually I think I messed up here. `GetFunctionFromEval` doesn\u0027t use the ScopeInfo of the outer SFI, but rather the ScopeInfo from the current context when an eval happens:\n\nhttps://source.chromium.org/chromium/chromium/src/+/main:v8/src/codegen/compiler.cc;l\u003d2813-2820;drc\u003d8d399817282e3c12ed54eb23ec42a5e418298ec6\n\nThis means I should probably walk the ScopeInfo chain until I find one that has `HasContext` true to actually mirror what `GetFunctionFromEval` does. Do I understand that correctly?",
      "parentUuid": "2c9fdc37_850686c1",
      "range": {
        "startLine": 762,
        "startChar": 32,
        "endLine": 762,
        "endChar": 71
      },
      "revId": "d04fed2d444a43eac9625eb99fcf4902c705a376",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "843c1cbd_68ebee75",
        "filename": "src/debug/liveedit.cc",
        "patchSetId": 2
      },
      "lineNbr": 762,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2022-10-06T12:30:03Z",
      "side": 1,
      "message": "I\u0027m starting to wonder whether you even have this information available -- would it be terrible to just disable live edit for eval scripts instead and avoid this problem?",
      "parentUuid": "4a542e31_e2c4cac0",
      "range": {
        "startLine": 762,
        "startChar": 32,
        "endLine": 762,
        "endChar": 71
      },
      "revId": "d04fed2d444a43eac9625eb99fcf4902c705a376",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef3f145a_69d04e89",
        "filename": "src/debug/liveedit.cc",
        "patchSetId": 2
      },
      "lineNbr": 762,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2022-10-06T12:49:03Z",
      "side": 1,
      "message": "It would break some important dev workflows. e.g. bundlers like webpack use eval under the hood, which means we loose live edit for any project thats bundled that way. Live edit is also used implicitly with the \"Workspaces\" feature. You can map a local build output directory on top of your page. Then, every time the build output changes, DevTools will pick that up and live edit the existing page.\n\nq: How can the ScopeInfo we grab from the context not be on the scope chain starting at the \"eval_from_shared\" SFI? Btw the only place where we actually use a contxt other than the native context (and thus skip using any outer scope info) is here: https://source.chromium.org/chromium/chromium/src/+/main:v8/src/runtime/runtime-compiler.cc;l\u003d571;drc\u003d8d399817282e3c12ed54eb23ec42a5e418298ec6\n\nand its for \"Runtime_ResolvePossiblyDirectEval\"",
      "parentUuid": "843c1cbd_68ebee75",
      "range": {
        "startLine": 762,
        "startChar": 32,
        "endLine": 762,
        "endChar": 71
      },
      "revId": "d04fed2d444a43eac9625eb99fcf4902c705a376",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41db6104_e0b3eab7",
        "filename": "src/debug/liveedit.cc",
        "patchSetId": 2
      },
      "lineNbr": 762,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2022-10-06T13:10:30Z",
      "side": 1,
      "message": "The webpack argument makes sense, workspaces less so since I would have assumed that this local build output is files, not eval. Nevertheless, ok, fine.\n\nI think you might be right that you can walk up from `eval_from_shared` to get the nearest relevant context, though I don\u0027t know if I\u0027m _100%_ sure here that this can\u0027t false positive to a too-near context, which is why I\u0027m hesitating. Any ideas on how we could verify/DCHECK this, maybe with a more expensive context/scope walk?",
      "parentUuid": "ef3f145a_69d04e89",
      "range": {
        "startLine": 762,
        "startChar": 32,
        "endLine": 762,
        "endChar": 71
      },
      "revId": "d04fed2d444a43eac9625eb99fcf4902c705a376",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1f60bb4_2d1e8e88",
        "filename": "src/debug/liveedit.cc",
        "patchSetId": 2
      },
      "lineNbr": 762,
      "author": {
        "id": 1323977
      },
      "writtenOn": "2022-10-06T13:34:59Z",
      "side": 1,
      "message": "Local build output can also be the webpack result :)\n\nNo idea how to DCHECK this.\n\nI have an alternative idea though. Scripts have a `context_data` field (https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/script.tq;l\u003d32;drc\u003d5e1f856d18f7ad82ead1cb0ff7862bee1743d40d)\n\nWe use this field in the debugger to identify the native context the script was compiled in. For sloppy eval scripts we could set this field to a Tuple that also has the outer ScopeInfo in it. Then we don\u0027t have to guess and we don\u0027t need an extra field on Script.",
      "parentUuid": "41db6104_e0b3eab7",
      "range": {
        "startLine": 762,
        "startChar": 32,
        "endLine": 762,
        "endChar": 71
      },
      "revId": "d04fed2d444a43eac9625eb99fcf4902c705a376",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}