{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e66974b0_b1ee6057",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-09-23T13:53:25Z",
      "side": 1,
      "message": "Sorry, I didn\u0027t get to this today - first thing monday.",
      "revId": "72a136ea7c229d7dccddd9f1997937dbbb02c6ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "806d8641_2f726d9f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2021-09-23T22:43:02Z",
      "side": 1,
      "message": "sg, thanks for letting me know.",
      "parentUuid": "e66974b0_b1ee6057",
      "revId": "72a136ea7c229d7dccddd9f1997937dbbb02c6ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c86efcf6_22599116",
        "filename": "src/heap/factory-base.h",
        "patchSetId": 4
      },
      "lineNbr": 239,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-09-27T09:35:49Z",
      "side": 1,
      "message": "Suggestion: move this to the String class as a static method. Factory is a bit unexpected for this predicate.",
      "revId": "72a136ea7c229d7dccddd9f1997937dbbb02c6ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3745c8fc_6a3002c5",
        "filename": "src/heap/factory-base.h",
        "patchSetId": 4
      },
      "lineNbr": 239,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2021-09-27T14:56:12Z",
      "side": 1,
      "message": "The reason this is on Factory is that it uses the GetInPlaceInternalizedStringMap method, which returns maps. Having it on the String class as a static method duplicates the logic for what instance types are in-place internalizable.\n\nGiven that, do you still prefer the move?",
      "parentUuid": "c86efcf6_22599116",
      "revId": "72a136ea7c229d7dccddd9f1997937dbbb02c6ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91bc1bd1_8f9700f4",
        "filename": "src/heap/factory-base.h",
        "patchSetId": 4
      },
      "lineNbr": 239,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2021-09-28T00:38:07Z",
      "side": 1,
      "message": "I\u0027ve separated out this change on its own in PS6. Let me know what you think.",
      "parentUuid": "3745c8fc_6a3002c5",
      "revId": "72a136ea7c229d7dccddd9f1997937dbbb02c6ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2885ba3c_3d039d5d",
        "filename": "src/heap/factory-base.h",
        "patchSetId": 4
      },
      "lineNbr": 239,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-09-28T09:31:20Z",
      "side": 1,
      "message": "The String method could still call Factory::GetInPlaceInternalizedStringMap and avoid the duplication, no? Or did I miss something?",
      "parentUuid": "91bc1bd1_8f9700f4",
      "revId": "72a136ea7c229d7dccddd9f1997937dbbb02c6ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9755839c_834f6e16",
        "filename": "src/objects/visitors.h",
        "patchSetId": 4
      },
      "lineNbr": 40,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-09-27T09:35:49Z",
      "side": 1,
      "message": "Thinking out loud.. I wonder whether we need a separate cache per snapshot type at all. It might be nicer to maintain only a single SnapshotObjectCache on the isolate. Again, just an idea for a followup.",
      "revId": "72a136ea7c229d7dccddd9f1997937dbbb02c6ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c653e341_1667222f",
        "filename": "src/objects/visitors.h",
        "patchSetId": 4
      },
      "lineNbr": 40,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2021-09-28T00:38:07Z",
      "side": 1,
      "message": "The startup and shareable object cache are very close in functionality, so those two would be a good candidate to try to combine. RO acts a little different and isn\u0027t iterated by the GC in the same way, so maybe we can leave that out.\n\nThe main challenge I see with a combined cache is that there\u0027s a clear dependence hierarchy: startup objs might depend on shareable objs might depend on RO objs. So with a combine cache, there\u0027d still need to be multiple sections to they get deserialized in the right order.",
      "parentUuid": "9755839c_834f6e16",
      "revId": "72a136ea7c229d7dccddd9f1997937dbbb02c6ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a171c67_259d944e",
        "filename": "src/objects/visitors.h",
        "patchSetId": 4
      },
      "lineNbr": 40,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-09-28T09:31:20Z",
      "side": 1,
      "message": "That might just work out okay by itself, since it\u0027s the natural order the cache is filled (RO first, the others after). If possible, it\u0027d be a good simplification, but ofc it\u0027s out of scope of this CL.",
      "parentUuid": "c653e341_1667222f",
      "revId": "72a136ea7c229d7dccddd9f1997937dbbb02c6ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80d7728e_de154c2b",
        "filename": "src/snapshot/serializer-deserializer.h",
        "patchSetId": 4
      },
      "lineNbr": 38,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-09-27T09:35:49Z",
      "side": 1,
      "message": "0x1d",
      "revId": "72a136ea7c229d7dccddd9f1997937dbbb02c6ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1f98e533_e20a6d69",
        "filename": "src/snapshot/serializer-deserializer.h",
        "patchSetId": 4
      },
      "lineNbr": 38,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2021-09-28T00:38:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "80d7728e_de154c2b",
      "revId": "72a136ea7c229d7dccddd9f1997937dbbb02c6ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96eee1be_5937667b",
        "filename": "src/snapshot/shareable-deserializer.h",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-09-27T09:35:49Z",
      "side": 1,
      "message": "Wdyt about SharedIsolate{Deserializer,Serializer,...}? Likewise for every related name like shareable_data. I realize this is a big change but unless \u0027Shareable\u0027 is already a thing in V8 I\u0027d like to stay consistent with existing terms.",
      "revId": "72a136ea7c229d7dccddd9f1997937dbbb02c6ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d45a5fd_8f214f96",
        "filename": "src/snapshot/shareable-deserializer.h",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2021-09-27T14:56:12Z",
      "side": 1,
      "message": "The reason I went with \"shareable\" is that I thought \"shared\" suggests it would only be when we have a shared isolate at all (e.g. due to passing --shared-string-table or something), or that the objects in it are always shared. Whereas actually this snapshot is also used when there\u0027s no sharing. (Of course when V8 is running, an object is either shared or not, but to maintain some flexibility while this is still flagged, this snapshot is usable both when sharing or not sharing.)\n\nDo you think SharedIsolate{Deserializer,Serializer} would be misleading in this way?",
      "parentUuid": "96eee1be_5937667b",
      "revId": "72a136ea7c229d7dccddd9f1997937dbbb02c6ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74c8c8fb_95a18461",
        "filename": "src/snapshot/shareable-deserializer.h",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2021-09-28T00:38:07Z",
      "side": 1,
      "message": "I\u0027ve separated this change out on its own in PS7 and settled on the name SharedHeap instead of SharedIsolate, since to me SharedIsolateSerializer suggested serializing everything in the shared Isolate (the shared Isolate also deserializes the startup snapshot), while this is just about the shared portions.",
      "parentUuid": "5d45a5fd_8f214f96",
      "revId": "72a136ea7c229d7dccddd9f1997937dbbb02c6ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "98e745bf_50519db0",
        "filename": "src/snapshot/shareable-deserializer.h",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-09-28T09:31:20Z",
      "side": 1,
      "message": "Thanks, SharedHeap sounds like a good improvement to me.",
      "parentUuid": "74c8c8fb_95a18461",
      "revId": "72a136ea7c229d7dccddd9f1997937dbbb02c6ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d75f250_c694a10a",
        "filename": "src/snapshot/snapshot.cc",
        "patchSetId": 4
      },
      "lineNbr": 417,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-09-27T09:35:49Z",
      "side": 1,
      "message": "Hmm.. We should update this since neither the RO nor shareable bits are usually per-Isolate. Please either do that in a followup or file a bug, thanks!",
      "revId": "72a136ea7c229d7dccddd9f1997937dbbb02c6ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "251a596f_65615464",
        "filename": "src/snapshot/snapshot.cc",
        "patchSetId": 4
      },
      "lineNbr": 417,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2021-09-28T00:38:07Z",
      "side": 1,
      "message": "Removed this line and filed https://bugs.chromium.org/p/v8/issues/detail?id\u003d12268",
      "parentUuid": "1d75f250_c694a10a",
      "revId": "72a136ea7c229d7dccddd9f1997937dbbb02c6ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08b56187_c2411755",
        "filename": "src/snapshot/startup-serializer.h",
        "patchSetId": 4
      },
      "lineNbr": 65,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-09-27T09:35:49Z",
      "side": 1,
      "message": "nit: while you\u0027re here please make this and the read_only_serializer_ const (ShareableSerializer* const shareable_serializer_).",
      "revId": "72a136ea7c229d7dccddd9f1997937dbbb02c6ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "929ca14f_857c8530",
        "filename": "src/snapshot/startup-serializer.h",
        "patchSetId": 4
      },
      "lineNbr": 65,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2021-09-28T00:38:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "08b56187_c2411755",
      "revId": "72a136ea7c229d7dccddd9f1997937dbbb02c6ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81bdf75d_0dd7a664",
        "filename": "test/cctest/test-serialize.cc",
        "patchSetId": 4
      },
      "lineNbr": 162,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-09-27T09:35:49Z",
      "side": 1,
      "message": "nit: I\u0027d remove this in favor of is_shared (kIsShared is potentially confusing because it implies a compile-time constant).",
      "revId": "72a136ea7c229d7dccddd9f1997937dbbb02c6ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8fc597b0_eec33390",
        "filename": "test/cctest/test-serialize.cc",
        "patchSetId": 4
      },
      "lineNbr": 162,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2021-09-28T00:38:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "81bdf75d_0dd7a664",
      "revId": "72a136ea7c229d7dccddd9f1997937dbbb02c6ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}