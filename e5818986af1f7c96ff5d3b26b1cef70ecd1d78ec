{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "69753e6b_c8132999",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1349169
      },
      "writtenOn": "2021-03-24T08:45:54Z",
      "side": 1,
      "message": "Thanks Neis for the comments! We are revising the CL and planning a performance test. We will keep you updated once the code and data are ready.",
      "revId": "e5818986af1f7c96ff5d3b26b1cef70ecd1d78ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b7e3199_c262c2cb",
        "filename": "src/compiler/js-call-reducer.cc",
        "patchSetId": 2
      },
      "lineNbr": 4222,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-03-23T11:05:36Z",
      "side": 1,
      "message": "Instead of comment:\nDCHECK_EQ(p.feedback_content(), CallFeedbackContent::kReceiver);",
      "revId": "e5818986af1f7c96ff5d3b26b1cef70ecd1d78ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "392afbfa_cd3e5220",
        "filename": "src/compiler/js-call-reducer.cc",
        "patchSetId": 2
      },
      "lineNbr": 4222,
      "author": {
        "id": 1349169
      },
      "writtenOn": "2021-03-30T06:30:41Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "6b7e3199_c262c2cb",
      "revId": "e5818986af1f7c96ff5d3b26b1cef70ecd1d78ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d1c91ee_ef2cfe13",
        "filename": "src/compiler/js-call-reducer.cc",
        "patchSetId": 2
      },
      "lineNbr": 4227,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-03-23T11:05:36Z",
      "side": 1,
      "message": "There are two problems with the CallFeedbackContent::kReceiver case:\n\n1) By making feedback_target a Code object, the ReferenceEqual check against the target below will always deopt. You either need to obtain the Function.prototype.apply JSFunction (e.g. by remembering it in the native context), or change the ReferenceEqual to something that checks at runtime if the incoming JSFunction wraps the kFunctionPrototypeApply builtin.\n\n2) You are not using the recorded feedback (the receiver of apply) at all (see the commented-out line below)! Also note that making use of it will require an additional ReferenceEqual check that the receiver is still the recorded one.",
      "revId": "e5818986af1f7c96ff5d3b26b1cef70ecd1d78ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44b0de8c_7c44c5bb",
        "filename": "src/compiler/js-call-reducer.cc",
        "patchSetId": 2
      },
      "lineNbr": 4227,
      "author": {
        "id": 1349169
      },
      "writtenOn": "2021-03-30T06:30:41Z",
      "side": 1,
      "message": "Thanks for the detailed insights! F.prototype.apply is added to the native context in patchset 3. For the second point, does it mean by genreating code like this?\n    movl r15,0x8203761      ;; (compressed) object: 0x156508203761 \u003cJSFunction apply (sfi \u003d 0x15650818420d)\u003e \n    cmpl [r12+0x7],r15 \n    jnz 0x15650008440a  \u003c+0x2aa\u003e \n    REX.W movq rdi,0x156508213c39    ;; object: 0x156508213c39 \u003cJSFunction js-to-wasm::i (sfi \u003d 0x156508213c15)\u003e \n    cmpl r9,rdi \n    jnz 0x156500084411  \u003c+0x2b1\u003e\nA ReferenceEqual check on receiver will be added when that call node go through the ReduceJSCall a second time after ReduceFunctionPrototypeApply.",
      "parentUuid": "4d1c91ee_ef2cfe13",
      "revId": "e5818986af1f7c96ff5d3b26b1cef70ecd1d78ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3734d91_13658b0e",
        "filename": "src/compiler/js-call-reducer.cc",
        "patchSetId": 2
      },
      "lineNbr": 4227,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-03-31T10:19:54Z",
      "side": 1,
      "message": "You\u0027re right about (2), I missed how you rewrite CallFeedbackContent from kReceiver to kTarget when rewriting the call in ReduceFunctionPrototypeApply (though I think this needs to be tied to the change of CallFeedbackRelation to be fully correct).",
      "parentUuid": "44b0de8c_7c44c5bb",
      "revId": "e5818986af1f7c96ff5d3b26b1cef70ecd1d78ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d75473a_8f88f19c",
        "filename": "src/compiler/js-call-reducer.cc",
        "patchSetId": 2
      },
      "lineNbr": 4229,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-03-23T11:05:36Z",
      "side": 1,
      "message": "?",
      "revId": "e5818986af1f7c96ff5d3b26b1cef70ecd1d78ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb9fd62f_4f74f75f",
        "filename": "src/compiler/js-call-reducer.cc",
        "patchSetId": 2
      },
      "lineNbr": 4229,
      "author": {
        "id": 1349169
      },
      "writtenOn": "2021-03-30T06:30:41Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "9d75473a_8f88f19c",
      "revId": "e5818986af1f7c96ff5d3b26b1cef70ecd1d78ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}