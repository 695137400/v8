{
  "comments": [
    {
      "key": {
        "uuid": "f3fcdcd4_e18f6b43",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001213
      },
      "writtenOn": "2020-08-05T22:51:18Z",
      "side": 1,
      "message": "Something that just occurred to me: if we want to report attempts to create SABs or PostMessage them as errors in the Dev console (as part of migration process), then we shouldn\u0027t remove the SAB function from the global object. Instead, we should check the flags in the constructor to throw the appropriate exception.",
      "revId": "6258275c595423ebd52d732541be8d0ff82a607b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "98fa137e_79d741b4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1115851
      },
      "writtenOn": "2020-08-05T23:30:47Z",
      "side": 1,
      "message": "In order to maintain feature-detection capability with the existing world (where Chrome on desktop has the SAB constructor but Chrome on Android does not), the plan (and spec) require us to continue that behavior. CCing syg@ for confirmation.",
      "parentUuid": "f3fcdcd4_e18f6b43",
      "revId": "6258275c595423ebd52d732541be8d0ff82a607b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f431ff5c_8a8f2ba2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1115851
      },
      "writtenOn": "2020-08-05T23:30:47Z",
      "side": 1,
      "message": "Where else do you intend to check this flag in V8? As-is I don\u0027t understand the motivation for adding a flag which does the same thing as an existing flag.",
      "revId": "6258275c595423ebd52d732541be8d0ff82a607b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f831e0f_f5a8c3b5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2020-08-05T23:36:59Z",
      "side": 1,
      "message": "(Assuming this or a functionally equivalent flag gets passed in when the loaded page has COOP+COEP.)\n\nAs Adam said, in order to keep the feature detection capability, the standard behavior is that the SharedArrayBuffer global property is only present when COOP+COEP are present.\n\nThe presence of the SharedArrayBuffer global property is orthogonal to whether postMessage throws when passed a SAB. Even when COOP+COEP are not present, it is still possible to get at an SAB using WebAssembly.Memory. In that case, passing it to postMessage throws.\n\nDoes that clear it up?",
      "parentUuid": "98fa137e_79d741b4",
      "revId": "6258275c595423ebd52d732541be8d0ff82a607b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c6ac8603_51a91ce2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001213
      },
      "writtenOn": "2020-08-06T00:08:09Z",
      "side": 1,
      "message": "I think so. What I meant above is if a page tries to construct a SAB without COOP+COEP, it\u0027s going to get an undefined-is-not-a-function exception, when migration plans might prefer one that gives an informative message in the Dev console.\n\nAgree that detecting SAB in PostMessage in Blink is orthogonal.\n\nFor now we have to leave SAB and Atomics on all pages on desktop, where --harmony-sharedarraybuffer is enabled by default to not change visible behavior.\n\nIt\u0027s tricky to use the new flag without changing existing desktop behavior. Ultimately we will always add Atomics and the SAB function on the global object only if the --cross-origin-isolated flag is set.",
      "parentUuid": "3f831e0f_f5a8c3b5",
      "revId": "6258275c595423ebd52d732541be8d0ff82a607b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34a862cf_124335c3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001213
      },
      "writtenOn": "2020-08-06T00:08:09Z",
      "side": 1,
      "message": "binji@ suggested adding a new flag in order to maintain the --harmony-sharedarraybuffer flag behavior as it might be confusing if it changed and could even break desktop sites.\n\nHowever, since Android is being newly enabled, we should implement the end-state behavior, and add Atomics unconditionally, and SAB only if the new flag is set.",
      "parentUuid": "f431ff5c_8a8f2ba2",
      "revId": "6258275c595423ebd52d732541be8d0ff82a607b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8bf09ffe_5cfb14b3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1115851
      },
      "writtenOn": "2020-08-06T00:16:31Z",
      "side": 1,
      "message": "It\u0027s possible that I don\u0027t have the proper context to review this (though I would like to understand), so also adding binji as a reviewer.",
      "revId": "6258275c595423ebd52d732541be8d0ff82a607b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fda770d3_59356921",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1115851
      },
      "writtenOn": "2020-08-06T00:16:31Z",
      "side": 1,
      "message": "I\u0027m still missing something, though: why do we need a new command-line flag if the Android behavior is going to be per-Context (based on COOP+COEP)?",
      "parentUuid": "34a862cf_124335c3",
      "revId": "6258275c595423ebd52d732541be8d0ff82a607b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f6a0636_7f505046",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2020-08-06T00:57:45Z",
      "side": 1,
      "message": "Oh I\u0027m sorry I misunderstood the question, but am also missing context.\n\nIs the migration plan to provide the SharedArrayBuffer property regardless of COOP+COEP for now?\n\nIf so, then yes, a console message sounds good.\n\nIf not (i.e. if we\u0027re going to ship the standardized behavior right now), then I don\u0027t see how the dev console message can be implemented. A property interceptor on the global proxy itself? That seems expensive.",
      "parentUuid": "c6ac8603_51a91ce2",
      "revId": "6258275c595423ebd52d732541be8d0ff82a607b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff981794_5aae999a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002783
      },
      "writtenOn": "2020-08-06T18:32:41Z",
      "side": 1,
      "message": "\u003e Is the migration plan to provide the SharedArrayBuffer property regardless of COOP+COEP for now?\n\nYes, but only on desktop, AIUI. The eventual plan is this: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/Planned_changes\n\nSummary:\n* SAB is always accessible, but not available on global object unless cross-origin isolated\n* Atomics is always accessible from global object\n* SAB throws on postMessage if not cross-origin isolated",
      "parentUuid": "7f6a0636_7f505046",
      "revId": "6258275c595423ebd52d732541be8d0ff82a607b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b2dd67ea_c14b4220",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002783
      },
      "writtenOn": "2020-08-06T18:32:41Z",
      "side": 1,
      "message": "It seems that the capability is per-process, not per-context (the COOP+COEP bit is implemented as a static bool in Blink).",
      "parentUuid": "fda770d3_59356921",
      "revId": "6258275c595423ebd52d732541be8d0ff82a607b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}