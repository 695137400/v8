{
  "comments": [
    {
      "key": {
        "uuid": "17836ff7_9a9ad9d5",
        "filename": "src/compiler/machine-operator-reducer.cc",
        "patchSetId": 11
      },
      "lineNbr": 1241,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2020-09-03T12:17:53Z",
      "side": 1,
      "message": "nit: s/over_flow/overflow/",
      "range": {
        "startLine": 1241,
        "startChar": 25,
        "endLine": 1241,
        "endChar": 34
      },
      "revId": "6db671fe78883ab6886595cf6055ddac53da04d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b9e92e0_29efd7c2",
        "filename": "src/compiler/machine-operator-reducer.cc",
        "patchSetId": 11
      },
      "lineNbr": 1241,
      "author": {
        "id": 1322305
      },
      "writtenOn": "2020-09-03T22:44:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "17836ff7_9a9ad9d5",
      "range": {
        "startLine": 1241,
        "startChar": 25,
        "endLine": 1241,
        "endChar": 34
      },
      "revId": "6db671fe78883ab6886595cf6055ddac53da04d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "be7908a2_99e90094",
        "filename": "src/compiler/machine-operator-reducer.cc",
        "patchSetId": 11
      },
      "lineNbr": 1248,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2020-09-03T12:17:53Z",
      "side": 1,
      "message": "This modifies the add_with_over_flow node, but we didn\u0027t check that there are no other users. While we did check that we own the value projection, we didn\u0027t check how the overflow bit projection is used. But this approach is scary and probably unsound anyway, since the node is pure and could therefore be subject to global value numbering or potentially other side-tables not covered by OwnedBy(). In short: We should never modify a node to represent a different value. Instead, we should just create a new node for the a+b addition. Then we also don\u0027t even need to check ownership at all.",
      "range": {
        "startLine": 1248,
        "startChar": 14,
        "endLine": 1248,
        "endChar": 32
      },
      "revId": "6db671fe78883ab6886595cf6055ddac53da04d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1adbfb96_749b6473",
        "filename": "src/compiler/machine-operator-reducer.cc",
        "patchSetId": 11
      },
      "lineNbr": 1248,
      "author": {
        "id": 1322305
      },
      "writtenOn": "2020-09-03T22:44:43Z",
      "side": 1,
      "message": "PS 12 is motivated by your approach. However, the optimization doesn\u0027t seem to bring any benefits ðŸ˜ž\n\nGenerated code for x + a + b is:\n\n*Before this CL:\nput x in r1\nadd r1, a\ndeoptimize if overflow\nadd r1, b\ndeoptimize if overflow\n\n*After this CL:\nput x in r1\nadd r1, a\ndeoptimize if overflow\nadd r1, c // where c \u003d a+b\ndeoptimize if overflow\n\nIdeally, we want something like (under some conditions):\nput x in r1\nadd r1, c // where c \u003d a+b\ndeoptimize if overflow\n\nI was thinking if we can eliminate (x + a) as it isn\u0027t used anywhere else then we can see some benefits. Is there anything we can do?",
      "parentUuid": "be7908a2_99e90094",
      "range": {
        "startLine": 1248,
        "startChar": 14,
        "endLine": 1248,
        "endChar": 32
      },
      "revId": "6db671fe78883ab6886595cf6055ddac53da04d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6079a209_9b30d93b",
        "filename": "src/compiler/machine-operator-reducer.cc",
        "patchSetId": 11
      },
      "lineNbr": 1248,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2020-09-07T08:31:32Z",
      "side": 1,
      "message": "Oh, yes, this is an issue. But the original CL was not sound, so we have to solve it in a different way. I can see two possible ways around this:\n- Do the reduction before EffectControlLinearizer, when there are no deopts yet. The nodes are probably a Speculative*Add at this point. This might be easiest if it works.\n- We know that the second deopt happens at least as often as the first one. If both deopts are to the same target, we could merge them using this knowledge.",
      "parentUuid": "1adbfb96_749b6473",
      "range": {
        "startLine": 1248,
        "startChar": 14,
        "endLine": 1248,
        "endChar": 32
      },
      "revId": "6db671fe78883ab6886595cf6055ddac53da04d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c6db840_ccbb84ca",
        "filename": "src/compiler/machine-operator-reducer.cc",
        "patchSetId": 11
      },
      "lineNbr": 1248,
      "author": {
        "id": 1322305
      },
      "writtenOn": "2020-09-09T18:41:09Z",
      "side": 1,
      "message": "PS13 is motivated by your suggestions in the first bullet. I\u0027m sure if it is the right place to do this reduction.",
      "parentUuid": "6079a209_9b30d93b",
      "range": {
        "startLine": 1248,
        "startChar": 14,
        "endLine": 1248,
        "endChar": 32
      },
      "revId": "6db671fe78883ab6886595cf6055ddac53da04d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92e76bc1_6112d4c1",
        "filename": "src/compiler/machine-operator-reducer.cc",
        "patchSetId": 11
      },
      "lineNbr": 1249,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2020-09-03T12:17:53Z",
      "side": 1,
      "message": "We did modify the node, so we should trigger re-visitation of the addition node as well as the projection nodes. But returning Changed() is a bit tricky, because it requires passing in the current node which is the projection node, not the addition node. I think the problem partially stems from this code being in the wrong place: We should change the addition node when reducing the addition node itself, not it\u0027s projection. So I think we should add a new case to MachineOperatorReducer::Reduce for IrOpcode::kInt32AddWithOverflow.",
      "range": {
        "startLine": 1249,
        "startChar": 21,
        "endLine": 1249,
        "endChar": 31
      },
      "revId": "6db671fe78883ab6886595cf6055ddac53da04d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6720b007_7fd684ab",
        "filename": "src/compiler/machine-operator-reducer.cc",
        "patchSetId": 11
      },
      "lineNbr": 1249,
      "author": {
        "id": 1322305
      },
      "writtenOn": "2020-09-03T22:44:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "92e76bc1_6112d4c1",
      "range": {
        "startLine": 1249,
        "startChar": 21,
        "endLine": 1249,
        "endChar": 31
      },
      "revId": "6db671fe78883ab6886595cf6055ddac53da04d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "186a7049_6b61a7f1",
        "filename": "test/unittests/compiler/machine-operator-reducer-unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 1867,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2020-09-03T12:17:53Z",
      "side": 1,
      "message": "This test is problematic because it doesn\u0027t actually test that the resulting graph has the right shape, but rather that the add1 node got modified to represent a specific different value (which we shouldn\u0027t do anyway).\nAlso, could you add a testcase that we don\u0027t reduce away something like x + 1 - 1?",
      "range": {
        "startLine": 1860,
        "startChar": 0,
        "endLine": 1867,
        "endChar": 55
      },
      "revId": "6db671fe78883ab6886595cf6055ddac53da04d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90268035_37bcfc9a",
        "filename": "test/unittests/compiler/machine-operator-reducer-unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 1867,
      "author": {
        "id": 1322305
      },
      "writtenOn": "2020-09-03T22:44:43Z",
      "side": 1,
      "message": "x + 1 - 1 is covered b several pair of (x, y).",
      "parentUuid": "186a7049_6b61a7f1",
      "range": {
        "startLine": 1860,
        "startChar": 0,
        "endLine": 1867,
        "endChar": 55
      },
      "revId": "6db671fe78883ab6886595cf6055ddac53da04d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}