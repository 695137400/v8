{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fe05060b_6905ecbd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1558499
      },
      "writtenOn": "2022-11-03T07:47:31Z",
      "side": 1,
      "message": "I implemented an escape hatch to allow ExternalReferences to return JSObjects, and used that to call the `factory()-\u003eNewExternal(pointer)` to create the external. This works, now the for-in loop does not cause an assert.\n\nThe downside here is that I needed to create a handle scope to get the allocation done. I considered trying to do the allocation manually on my own but the necessary factory API is private and I also couldn\u0027t figure out what the AllocationSite should be. (Ah, maybe it should be nullptr?)\n\nLooking at the `Factory::InitializeJSObjectFromMap` function (`factory.cc:2678`) I start wondering if somehow the Turbofan allocation and storing of the JSExternalObject was just somehow missing the object properties initialization? ie. Were we missing `obj.set_raw_properties_or_hash(properties, kRelaxedStore)` or `obj.initialize_elements()` call?\n\nOther map creations do not seem to be doing anything like that, so either Turbofan created BigInts are currently exploding on `for-in` iterations out there in the world (unlikely), or perhaps there is code somewhere in eg. ML that takes care of doing that sort of stuff automatically for known Object Maps, and the code is just missing a branch for ExternalMap?\n\nI guess one thing to do would be to try the manually allocated Fast call version and compare an External allocated by that to an External allocated by a Slow call, read the JSObject and see what sort of differences do they have.",
      "revId": "468cc4a2bc8df72f540f3c6dbf447c4040c6d910",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d79fd897_94d0f262",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2022-11-09T14:48:05Z",
      "side": 1,
      "message": "Hi, sorry for the super late reply and thanks for continuing on this!\n\nI think the change to ExternalReference sounds reasonable. Btw, it\u0027s possible that your latest change contains a rebase too, and now we see many unrelated changes in the CL. Could you try doing another rebase and possibly checking if you haven\u0027t (by mistake) added some of the rebase code twice?\n\nRe: Creating a HandleScope sounds okay to me.\nRe: Not fully initializing the object on the Turbofan side - highly probable. Do you want to debug this further, e.g. in ML or should we stay with the current solution?\n\nIf you\u0027re on board with this approach, let\u0027s try to clean the CL up and make sure we have all tests necessary (how about extracting them to a separate file or function in the same file?), and I\u0027ll hunt for additional reviewers.",
      "parentUuid": "fe05060b_6905ecbd",
      "revId": "468cc4a2bc8df72f540f3c6dbf447c4040c6d910",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "89cfc1d8_e916699c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1558499
      },
      "writtenOn": "2022-11-11T13:22:06Z",
      "side": 1,
      "message": "No worries, a leisurely pace fits me fine right now ðŸ˜Š\n\nI\u0027ll try doing some sort of magics with whatever branch I have at home, maybe today or during the weekend. I\u0027m probably misusing the CL system somehow, as I\u0027m not even really sure if I have a separate branch, and if I should have a separate branch for the CL? I\u0027m much more used to having a custom branch and manually doing rebases from main, and the `git cl` commands, patch sets and whatnot are really throwing me for a loop.\n\nI think I\u0027d like to debug this further still, since I expect that the HandleScope creation etc. will all do quite a lot of work that is 90% unnecessary. If I can just figure out how to get the properties saved into the object (and if that fixes the issue) then I think the resulting code should be truly Fast! :)",
      "parentUuid": "d79fd897_94d0f262",
      "revId": "468cc4a2bc8df72f540f3c6dbf447c4040c6d910",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "294c8147_9cfdbcf8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1558499
      },
      "writtenOn": "2022-11-11T18:40:04Z",
      "side": 1,
      "message": "I manually re-copied all the changes from the _previous_ patch set onto current main branch and uploaded the changes. Not the most pleasant thing, but not too bad.\n\nSo, now the branch once again has the issue where the Fast API created External objects are usable but trying to iterate their properties causes V8 to crash. Should we setup a debugging session, or do you think the debugging is something I could try do on my own with some instructions from you?",
      "parentUuid": "89cfc1d8_e916699c",
      "revId": "468cc4a2bc8df72f540f3c6dbf447c4040c6d910",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5e1483f7_49ce9e70",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2022-11-11T19:57:20Z",
      "side": 1,
      "message": "Ouch, sorry it\u0027s such a hassle with the branches. Normally one branch per CL and rebasing from `main` should be fine.\nLet\u0027s do another debugging session this Monday? E.g. in the morning or somewhere in the interval 11:30-13:30?",
      "parentUuid": "294c8147_9cfdbcf8",
      "revId": "468cc4a2bc8df72f540f3c6dbf447c4040c6d910",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}