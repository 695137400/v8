{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "580d5eca_ba778863",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2021-05-11T16:26:34Z",
      "side": 1,
      "message": "ptal, seems very costly to do it this way. Not sure we should slow down builds with those checks that much.",
      "revId": "e5f989ba6f91759226cde341774d0593e1b4a499",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "207cb53c_d677e090",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-05-12T10:09:19Z",
      "side": 1,
      "message": "lgtm",
      "revId": "e5f989ba6f91759226cde341774d0593e1b4a499",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50f30a4d_275d53a4",
        "filename": "src/heap/cppgc/heap-base.h",
        "patchSetId": 2
      },
      "lineNbr": 213,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-05-12T10:09:19Z",
      "side": 1,
      "message": "You can wrap this (and the usages) with \u0027#if V8_ENABLE_CHECKS\u0027 so it\u0027s removed from production builds (if you want).",
      "range": {
        "startLine": 213,
        "startChar": 2,
        "endLine": 213,
        "endChar": 57
      },
      "revId": "e5f989ba6f91759226cde341774d0593e1b4a499",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a5f94a8f_66b54160",
        "filename": "src/heap/cppgc/heap-base.h",
        "patchSetId": 2
      },
      "lineNbr": 213,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2021-05-12T10:13:40Z",
      "side": 1,
      "message": "Considered that but heap creation is not a fast path so this registry should be fine.",
      "parentUuid": "50f30a4d_275d53a4",
      "range": {
        "startLine": 213,
        "startChar": 2,
        "endLine": 213,
        "endChar": 57
      },
      "revId": "e5f989ba6f91759226cde341774d0593e1b4a499",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4b4bd77_7cdd84a2",
        "filename": "src/heap/cppgc/pointer-policies.cc",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-05-12T11:50:13Z",
      "side": 1,
      "message": "Alternative approach:\nNever initialize state. On first allocation, check that heap containing the values also contains the Member. Only if not, check that no other heap contains the member.\nThis should provide the same guarantees but for on-heap members will only check a single heap even if multiple heaps exist in the process. On-stack and off-heap still check all heap same as in the current implementation.\nOverall, I think this should be a performance win.",
      "range": {
        "startLine": 43,
        "startChar": 7,
        "endLine": 43,
        "endChar": 13
      },
      "revId": "e5f989ba6f91759226cde341774d0593e1b4a499",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80c0f120_5615eaec",
        "filename": "src/heap/cppgc/pointer-policies.cc",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2021-05-17T10:30:13Z",
      "side": 1,
      "message": "Yip, that should indeed be better, cool idea! Will try to implement and report back.",
      "parentUuid": "a4b4bd77_7cdd84a2",
      "range": {
        "startLine": 43,
        "startChar": 7,
        "endLine": 43,
        "endChar": 13
      },
      "revId": "e5f989ba6f91759226cde341774d0593e1b4a499",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a4aba7d_e079197c",
        "filename": "src/heap/cppgc/pointer-policies.cc",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2021-05-17T11:01:14Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "80c0f120_5615eaec",
      "range": {
        "startLine": 43,
        "startChar": 7,
        "endLine": 43,
        "endChar": 13
      },
      "revId": "e5f989ba6f91759226cde341774d0593e1b4a499",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8cff72c8_dddc9f3e",
        "filename": "src/heap/cppgc/pointer-policies.cc",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-05-17T11:53:18Z",
      "side": 1,
      "message": "I don\u0027t this in the code. Did you forget to upload it or are you keeping it for a followup?",
      "parentUuid": "0a4aba7d_e079197c",
      "range": {
        "startLine": 43,
        "startChar": 7,
        "endLine": 43,
        "endChar": 13
      },
      "revId": "e5f989ba6f91759226cde341774d0593e1b4a499",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca393709_ffd9f4be",
        "filename": "src/heap/cppgc/process-heap.cc",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-05-12T10:09:19Z",
      "side": 1,
      "message": "HeapRegistryStorage?",
      "range": {
        "startLine": 25,
        "startChar": 32,
        "endLine": 25,
        "endChar": 54
      },
      "revId": "e5f989ba6f91759226cde341774d0593e1b4a499",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e6451fea_9883139e",
        "filename": "src/heap/cppgc/process-heap.cc",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2021-05-17T11:01:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ca393709_ffd9f4be",
      "range": {
        "startLine": 25,
        "startChar": 32,
        "endLine": 25,
        "endChar": 54
      },
      "revId": "e5f989ba6f91759226cde341774d0593e1b4a499",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4637318c_eda0f351",
        "filename": "test/unittests/heap/cppgc/member-unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 540,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2021-05-12T10:09:19Z",
      "side": 1,
      "message": "Do we still support on-stack members?\nI think the clang plugin reports on these and states that they should be raw pointers.",
      "range": {
        "startLine": 540,
        "startChar": 28,
        "endLine": 540,
        "endChar": 70
      },
      "revId": "e5f989ba6f91759226cde341774d0593e1b4a499",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e3d30af_5d9be370",
        "filename": "test/unittests/heap/cppgc/member-unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 540,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2021-05-12T10:13:40Z",
      "side": 1,
      "message": "We still support them\n\n  HeapVector\u003cMember\u003cT\u003e, 1\u003e vec;\n\n(Due to PDFium we actually have to support on-heap, off-heap and on-stack)",
      "parentUuid": "4637318c_eda0f351",
      "range": {
        "startLine": 540,
        "startChar": 28,
        "endLine": 540,
        "endChar": 70
      },
      "revId": "e5f989ba6f91759226cde341774d0593e1b4a499",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}