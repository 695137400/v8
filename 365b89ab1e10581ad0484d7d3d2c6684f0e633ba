{
  "comments": [
    {
      "key": {
        "uuid": "9c3db0bb_e1849c9e",
        "filename": "src/builtins/builtins.cc",
        "patchSetId": 8
      },
      "lineNbr": 326,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-24T14:12:11Z",
      "side": 1,
      "message": "I didn\u0027t notice this earlier, but the BUILTIN_LIST_BYTECODE_HANDLERS should be a flat list of all builtins, i.e. one entry per bytecode per operand scale. We rely on this assumption all over the place and manually expanding BCH entries at each use feels wrong. \n\nI do realize that it\u0027s a bit inconvenient since the BYTECODE_LIST doesn\u0027t have this format and AFAICT there\u0027s no easy way to do this with macro magic. Maybe we could generate handler lists during the build?\n\nWdyt?",
      "revId": "365b89ab1e10581ad0484d7d3d2c6684f0e633ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9bb8d85f_4b00ff0b",
        "filename": "src/builtins/builtins.cc",
        "patchSetId": 8
      },
      "lineNbr": 326,
      "author": {
        "id": 1204345
      },
      "writtenOn": "2018-08-24T15:01:01Z",
      "side": 1,
      "message": "Bear in mind that BUILTIN_LIST always needs to be supplied with a BCH macro which is responsible for doing the expansion.\n\nI should probably update https://cs.chromium.org/chromium/src/v8/src/builtins/builtins-definitions.h?q\u003dbuiltins-defini\u0026sq\u003dpackage:chromium\u0026l\u003d28 to say this.\n\nIf we wanted to go down the header file generation route, we could eliminate a lot of list macros across the code base, but I was told this approach was not popular...",
      "parentUuid": "9c3db0bb_e1849c9e",
      "revId": "365b89ab1e10581ad0484d7d3d2c6684f0e633ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75729f05_2fe46b82",
        "filename": "src/builtins/builtins.cc",
        "patchSetId": 8
      },
      "lineNbr": 326,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-24T15:33:34Z",
      "side": 1,
      "message": "Would a second, dedicated handler list be an option? The list could be expanded for all widths, and could omit bytecodes/scale combinations without a handler.",
      "parentUuid": "9bb8d85f_4b00ff0b",
      "revId": "365b89ab1e10581ad0484d7d3d2c6684f0e633ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "189d98ba_1f88d4e2",
        "filename": "src/builtins/setup-builtins-internal.cc",
        "patchSetId": 8
      },
      "lineNbr": 255,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-24T14:12:11Z",
      "side": 1,
      "message": "Could we initialize with kIllegal instead to avoid snapshotting placeholder objects?",
      "revId": "365b89ab1e10581ad0484d7d3d2c6684f0e633ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4aa3db01_c8f18a33",
        "filename": "src/builtins/setup-builtins-internal.cc",
        "patchSetId": 8
      },
      "lineNbr": 255,
      "author": {
        "id": 1204345
      },
      "writtenOn": "2018-08-24T15:01:01Z",
      "side": 1,
      "message": "Two problems:\nFirst AddBuiltin will DCHECK that code-\u003ebuiltin_index \u003d\u003d index\nSecondly the BuiltinSerializer expects that every object in the builtins table is unique, I think. So when it sees one again it complains that LookupReference() returns something. I had a play with trying to work around this, by calling SerializeBuiltinReference, but ultimately couldn\u0027t get it to work.\n\nHow about I add a TODO here to revisit this?",
      "parentUuid": "189d98ba_1f88d4e2",
      "revId": "365b89ab1e10581ad0484d7d3d2c6684f0e633ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e42c6f21_b80cc323",
        "filename": "src/builtins/setup-builtins-internal.cc",
        "patchSetId": 8
      },
      "lineNbr": 255,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-24T15:33:34Z",
      "side": 1,
      "message": "I see, a TODO sounds good. For the builtins list / table, it\u0027d be nice to have each entry be a real builtin and not have slots taken up by unused dummy objects.",
      "parentUuid": "4aa3db01_c8f18a33",
      "revId": "365b89ab1e10581ad0484d7d3d2c6684f0e633ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b1bc9de_f79db417",
        "filename": "src/interpreter/setup-interpreter-internal.cc",
        "patchSetId": 8
      },
      "lineNbr": 87,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2018-08-24T14:12:11Z",
      "side": 1,
      "message": "Nit: We have Builtins::kNoBuiltinId for this purpose. Just fyi. Not important here since I assume this will go away in the follow-up.",
      "revId": "365b89ab1e10581ad0484d7d3d2c6684f0e633ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8c74c4e_f9dc7404",
        "filename": "src/interpreter/setup-interpreter-internal.cc",
        "patchSetId": 8
      },
      "lineNbr": 87,
      "author": {
        "id": 1204345
      },
      "writtenOn": "2018-08-24T15:01:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0b1bc9de_f79db417",
      "revId": "365b89ab1e10581ad0484d7d3d2c6684f0e633ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}