{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "95fba0bd_ce59f5cb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1310973
      },
      "writtenOn": "2022-09-30T07:52:46Z",
      "side": 1,
      "message": "Hi Leszek, could you help take a look? \nThis can save 100+ register moves for Speedometer2, but no significant performance impact as it may be a small portion. Pinpoint shows around 5~8% compile time regression for v8.browser_desktop, but marked insignificant.",
      "revId": "5dd7dce05aa0d64e51d30595f0e8a244ffc52b96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "633f07e1_739d4599",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1310973
      },
      "writtenOn": "2022-09-30T09:05:38Z",
      "side": 1,
      "message": "One correction, after clean-up disk cache, the savings for register moves are 470+ for Speedometer2.",
      "parentUuid": "95fba0bd_ce59f5cb",
      "revId": "5dd7dce05aa0d64e51d30595f0e8a244ffc52b96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b278a48_3de44d0f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2022-10-04T12:30:21Z",
      "side": 1,
      "message": "Do you see any memory improvements? Otherwise I don\u0027t think the complexity increase and performance regression risk is worth it.",
      "parentUuid": "633f07e1_739d4599",
      "revId": "5dd7dce05aa0d64e51d30595f0e8a244ffc52b96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "712ebead_bfd59eb0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1310973
      },
      "writtenOn": "2022-10-10T07:30:02Z",
      "side": 1,
      "message": "Hi Leszek, I only see 1.8%/2.9% reduction for footprint/peak size in render process. The p-value is 0.5/0.2, still not considered significant. I think I\u0027d better restrict the compile time overhead to where there\u0027s a benefit only, e.g. not to track candidates in general cases. The Jetstream2 test shows both regressions and improvements in some cases. I will try to revise the patch and run the tests again.",
      "parentUuid": "6b278a48_3de44d0f",
      "revId": "5dd7dce05aa0d64e51d30595f0e8a244ffc52b96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "351f54ae_0494210f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2022-10-13T08:47:24Z",
      "side": 1,
      "message": "Ok, let me know how it goes; if we see big enough improvements, great, otherwise as mentioned previously I\u0027d prefer to avoid additional code complexity and compile regressions.",
      "parentUuid": "712ebead_bfd59eb0",
      "revId": "5dd7dce05aa0d64e51d30595f0e8a244ffc52b96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cfe1d5a6_96d1ba8c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1310973
      },
      "writtenOn": "2022-10-17T12:23:22Z",
      "side": 1,
      "message": "Got itï¼ŒLeszek. I\u0027ve prepared a local prototype and need more tests to verify the performance and overheads. Besides I also found somde side effect with the existing solution that I\u0027d like to address firstly. Please see my comment in the ForOf test.",
      "parentUuid": "351f54ae_0494210f",
      "revId": "5dd7dce05aa0d64e51d30595f0e8a244ffc52b96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aabf0827_fe6a8cd8",
        "filename": "test/unittests/interpreter/bytecode_expectations/ForOf.golden",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 1310973
      },
      "writtenOn": "2022-10-17T12:23:22Z",
      "side": 1,
      "message": "Here Ldar R8 has been changed to Ldar R0, which induces an immediate depedence from previous bytecode Mov R1, R0. This seems a side effect that may hurt the performance.",
      "range": {
        "startLine": 38,
        "startChar": 16,
        "endLine": 38,
        "endChar": 30
      },
      "revId": "5dd7dce05aa0d64e51d30595f0e8a244ffc52b96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3273516_3c6cffb1",
        "filename": "test/unittests/interpreter/bytecode_expectations/ForOf.golden",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2022-10-17T14:44:14Z",
      "side": 1,
      "message": "I don\u0027t expect interpreter register data dependencies have a big impact in execution, there\u0027s enough going on with the dispatch machinery that the data dependency on the stack slot shouldn\u0027t be a bottleneck (that\u0027d be my hypothesis anyway, it\u0027s worth validating).",
      "parentUuid": "aabf0827_fe6a8cd8",
      "range": {
        "startLine": 38,
        "startChar": 16,
        "endLine": 38,
        "endChar": 30
      },
      "revId": "5dd7dce05aa0d64e51d30595f0e8a244ffc52b96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c378a51_b545b8d3",
        "filename": "test/unittests/interpreter/bytecode_expectations/ForOf.golden",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 1310973
      },
      "writtenOn": "2022-10-20T07:06:34Z",
      "side": 1,
      "message": "I did not observe obvious performance improvement, but slight regressions in local test by mitigating this dependence(not sure why). Besides by simply replacing the \"MarkTemporariesAsUnmaterialized\" to unmaterialized the patched input only can bring up a stable 0.9~1% improvement in local tests. Seems calling this function will induce some side effects. I\u0027m now verifying with Pinpoint.",
      "parentUuid": "d3273516_3c6cffb1",
      "range": {
        "startLine": 38,
        "startChar": 16,
        "endLine": 38,
        "endChar": 30
      },
      "revId": "5dd7dce05aa0d64e51d30595f0e8a244ffc52b96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "03f3f652_859ade32",
        "filename": "test/unittests/interpreter/bytecode_expectations/ForOf.golden",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 1310973
      },
      "writtenOn": "2022-10-24T10:05:01Z",
      "side": 1,
      "message": "I start to see some significant number when increase the attemp count to 40 in Pinpoint for each round of test. In the v8.browsing_desktop, the 5.7% compile time regression is marked significant. There is also one subcase in Speedometer2 shows 2% significant improvement. Details can be found in the last two pinpoint tests. I also feel the bytecode patching method is too heavy for such small improvement. I found some simple way to partially improve stack moves. Please find a prototype at https://chromium-review.googlesource.com/c/v8/v8/+/3974508. HDYT?",
      "parentUuid": "2c378a51_b545b8d3",
      "range": {
        "startLine": 38,
        "startChar": 16,
        "endLine": 38,
        "endChar": 30
      },
      "revId": "5dd7dce05aa0d64e51d30595f0e8a244ffc52b96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}