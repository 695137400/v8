{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0119b428_7ba58914",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-02-02T18:15:41Z",
      "side": 1,
      "message": "PTAL",
      "revId": "ba834090f4c318459992ab2aff3a9ddb7c4d30b4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d40a31f_31a5eaa4",
        "filename": "src/wasm/wasm-objects.cc",
        "patchSetId": 1
      },
      "lineNbr": 513,
      "author": {
        "id": 1411293
      },
      "writtenOn": "2022-02-03T09:27:51Z",
      "side": 1,
      "message": "I do not think this check is correct. Two wasm-gc signatures may look the same, but if they originate from different modules, they are not: e.g. (ref 0) may refer to a different type depending on defining module. Can you not just compare instance with target_instance instead?",
      "range": {
        "startLine": 512,
        "startChar": 4,
        "endLine": 513,
        "endChar": 58
      },
      "revId": "ba834090f4c318459992ab2aff3a9ddb7c4d30b4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fbd8771a_99ff770d",
        "filename": "src/wasm/wasm-objects.cc",
        "patchSetId": 1
      },
      "lineNbr": 513,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-02-03T10:04:52Z",
      "side": 1,
      "message": "If that would be the case, then also the lookup in the signature map would give the wrong result, no?\nSo you say the DCHECK_EQ would fail for WasmGC?\n\nUsing the target instance would solve the case of a single instance, but not the case of multiple instances created from the same wire bytes. We could compare the underlying NativeModule*, but it would still be slightly less generic than the check here.",
      "parentUuid": "1d40a31f_31a5eaa4",
      "range": {
        "startLine": 512,
        "startChar": 4,
        "endLine": 513,
        "endChar": 58
      },
      "revId": "ba834090f4c318459992ab2aff3a9ddb7c4d30b4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8fe3ea8_9350a7c8",
        "filename": "src/wasm/wasm-objects.cc",
        "patchSetId": 1
      },
      "lineNbr": 513,
      "author": {
        "id": 1411293
      },
      "writtenOn": "2022-02-03T11:36:15Z",
      "side": 1,
      "message": "I am not saying it would fail for wasm-gc, I am saying it is too permissive: Imagine two modules which both define signature 5 to be `(ref 0) -\u003e (ref 0)`. One of them defines type 0 to be a struct, the other an array. This check would evaluate them as equal, when they are not. And you are right, the signature map lookup would do the same.\nI am fine with keeping this for now, knowing it fails for wasm-gc, but we need to fix it when we implement global canonicalization of isorecursive types. Can you please add a TODO(7748) to do so?",
      "parentUuid": "fbd8771a_99ff770d",
      "range": {
        "startLine": 512,
        "startChar": 4,
        "endLine": 513,
        "endChar": 58
      },
      "revId": "ba834090f4c318459992ab2aff3a9ddb7c4d30b4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "609d91c8_883dc0a9",
        "filename": "src/wasm/wasm-objects.cc",
        "patchSetId": 1
      },
      "lineNbr": 513,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2022-02-03T11:40:21Z",
      "side": 1,
      "message": "Ack, added the TODO. If it\u0027s not a regression from the previous state, I think it shouldn\u0027t block this CL though.",
      "parentUuid": "e8fe3ea8_9350a7c8",
      "range": {
        "startLine": 512,
        "startChar": 4,
        "endLine": 513,
        "endChar": 58
      },
      "revId": "ba834090f4c318459992ab2aff3a9ddb7c4d30b4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}