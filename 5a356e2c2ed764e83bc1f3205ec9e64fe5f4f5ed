{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "405b1a9f_ca4c16a7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-20T09:33:42Z",
      "side": 1,
      "message": "@dlehmann@chromium.org: PTAL. There is similar code in `call_ref` and `call_indirect`. As mentioned, I\u0027ll try to rewrite this using `Variable`s to get rid of this manual maintenance stuff but that isn\u0027t something we should abuse as a fix imo (and we certainly can\u0027t backmerge it).",
      "revId": "5a356e2c2ed764e83bc1f3205ec9e64fe5f4f5ed",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cc115862_28e444fe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-20T10:00:42Z",
      "side": 1,
      "message": "Thanks, landing",
      "revId": "5a356e2c2ed764e83bc1f3205ec9e64fe5f4f5ed",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d7e1e20_763e8919",
        "filename": "test/mjsunit/regress/wasm/regress-360044696.js",
        "patchSetId": 4
      },
      "lineNbr": 61,
      "author": {
        "id": 1557311
      },
      "writtenOn": "2024-08-20T09:53:44Z",
      "side": 1,
      "message": "Just to double check my understanding: `main22` tail (ref) calls `callee_017`, which calls `main22` again with a different index into the table, which thus tail ref calls `callee_118` the second time. Because of the flags both callees get inlined in the tiered-up version of `main22`, and the inlinee bodies have different `InstanceCache` state (specifically `managed_object_maps`), which breaks without your fix. Nice find!",
      "revId": "5a356e2c2ed764e83bc1f3205ec9e64fe5f4f5ed",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a247ac41_5c17cc49",
        "filename": "test/mjsunit/regress/wasm/regress-360044696.js",
        "patchSetId": 4
      },
      "lineNbr": 61,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-08-20T10:00:42Z",
      "side": 1,
      "message": "Yes, that\u0027s the structure here and also in the other repro. However, going from that it sounds trivial to\na) Build a \"clean\" repro for this based on the knowledge.\nb) Remove e.g. the `global.get(global.set(local.get 0)) in the main function (as long as we still inline enough.\n\nI struggled with both however and gave up on that.\nThe \"thing\" that triggers the updated instance cache is the `memory.size` in line 43 but that isn\u0027t enough, we still need to try to emit phis for the instance cache (e.g. in a place where this works correctly) in the inlined version of the 2nd polymorphic case. (I think the array.new_default` has some control flow that triggers that.)\n\nIt is also unfortunate that this reproducer was only found externally but not by clusterfuzz as this is based on an unmodified version of the `wasm_deopt_fuzzer`...",
      "parentUuid": "8d7e1e20_763e8919",
      "revId": "5a356e2c2ed764e83bc1f3205ec9e64fe5f4f5ed",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "If the author is a V8 committer, code review is required from one other committer (see https://v8.dev/docs/become-committer). Otherwise, code review is required from two committers."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "((uploaderin:cria/project-v8-committers AND label:Code-Review\u003dMAX,user\u003dnon_uploader) OR label:Code-Review\u003dMAX,count\u003e\u003d2) AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"((uploaderin:cria/project-v8-committers AND label:Code-Review=MAX,user=non_uploader) OR label:Code-Review=MAX,count>=2) AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader","uploaderin:cria/project-v8-committers"],"failingAtoms":["label:Code-Review=MIN","label:Code-Review=MAX,count>=2"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "5a356e2c2ed764e83bc1f3205ec9e64fe5f4f5ed",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "5a356e2c2ed764e83bc1f3205ec9e64fe5f4f5ed",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "5a356e2c2ed764e83bc1f3205ec9e64fe5f4f5ed",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}