{
  "comments": [
    {
      "key": {
        "uuid": "739eb902_e892ed3e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-27T10:52:34Z",
      "side": 1,
      "message": "Did tier-up logic move?",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc9ac5f9_3c34c61b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 1356229
      },
      "writtenOn": "2019-08-28T11:55:33Z",
      "side": 1,
      "message": "My bad. Re-introduced in builtins-regexp-gen.cc line 541.",
      "parentUuid": "739eb902_e892ed3e",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "315459c2_0eb15ea8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-29T06:42:45Z",
      "side": 1,
      "message": "FYI Ana is currently changing that bit; please coordinate to make sure you don\u0027t overwrite each other\u0027s changes.",
      "parentUuid": "fc9ac5f9_3c34c61b",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a65b356_7574b4eb",
        "filename": "src/builtins/builtins-regexp-gen.cc",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-27T10:52:34Z",
      "side": 1,
      "message": "turbo-assembler.h is not enough?",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15f1e099_e04e83bf",
        "filename": "src/builtins/builtins-regexp-gen.cc",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1356229
      },
      "writtenOn": "2019-08-28T11:55:33Z",
      "side": 1,
      "message": "macro-assembler.h is required for the trampoline builtin (line 29 in this file).",
      "parentUuid": "1a65b356_7574b4eb",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cdc2cafc_a4f7f5ff",
        "filename": "src/builtins/builtins-regexp-gen.cc",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-29T06:42:45Z",
      "side": 1,
      "message": "But is it? You could pass in a TurboAssembler (the macro assembler base class) and call Jump on that, right?",
      "parentUuid": "15f1e099_e04e83bf",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "acf34946_9e985289",
        "filename": "src/builtins/builtins-regexp-gen.cc",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1356229
      },
      "writtenOn": "2019-08-29T11:13:41Z",
      "side": 1,
      "message": "We have to pass MacroAssembler* to adhere to the declaration generated by DECLARE_ASM:\n#define DECLARE_ASM(Name, ...) \\\n  static void Generate_##Name(MacroAssembler* masm);",
      "parentUuid": "cdc2cafc_a4f7f5ff",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ca473d9_43273b62",
        "filename": "src/builtins/builtins-regexp-gen.cc",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-27T10:52:34Z",
      "side": 1,
      "message": "q: Would it be too involved to ensure Jump doesn\u0027t clobber any register used to pass C call args?",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d17abfd3_813b456c",
        "filename": "src/builtins/builtins-regexp-gen.cc",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 1356229
      },
      "writtenOn": "2019-08-28T11:55:33Z",
      "side": 1,
      "message": "If we want to do something like that, then I think we shouldn\u0027t call it \"Jump\" but something like \"FastTailCallCFunction\"?\nI added this item to my follow-up todo list.",
      "parentUuid": "9ca473d9_43273b62",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e99cec2_ff4895d4",
        "filename": "src/builtins/builtins-regexp-gen.cc",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-29T06:42:45Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d17abfd3_813b456c",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0fbc9c34_c487414e",
        "filename": "src/builtins/builtins-regexp-gen.cc",
        "patchSetId": 3
      },
      "lineNbr": 49,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-27T10:52:34Z",
      "side": 1,
      "message": "Please add a TODO \u0027A potential optimization for the future is to make this decision based on the builtin index instead of flags, and avoid it\u0027s additional load below.\u0027",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c4d5b77_a4ddcba4",
        "filename": "src/builtins/builtins-regexp-gen.cc",
        "patchSetId": 3
      },
      "lineNbr": 49,
      "author": {
        "id": 1356229
      },
      "writtenOn": "2019-08-28T11:55:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0fbc9c34_c487414e",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d82a247e_86a2c515",
        "filename": "src/builtins/builtins-regexp-gen.cc",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-27T10:52:34Z",
      "side": 1,
      "message": "nit: Whitespace please here and before L72.",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0dafd95c_2d4a53be",
        "filename": "src/builtins/builtins-regexp-gen.cc",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 1356229
      },
      "writtenOn": "2019-08-28T11:55:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d82a247e_86a2c515",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bf386e4_158ce0e9",
        "filename": "src/builtins/builtins-regexp-gen.cc",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-27T10:52:34Z",
      "side": 1,
      "message": "nit: builtin_entry_offset_from_isolate_root",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a97d8d2b_025c57c7",
        "filename": "src/builtins/builtins-regexp-gen.cc",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 1356229
      },
      "writtenOn": "2019-08-28T11:55:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4bf386e4_158ce0e9",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ec658d97_0c914fe9",
        "filename": "src/builtins/builtins-regexp-gen.cc",
        "patchSetId": 3
      },
      "lineNbr": 463,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-27T10:52:34Z",
      "side": 1,
      "message": "\u0027code or bytecode\u0027",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a0e9078_4191fed3",
        "filename": "src/builtins/builtins-regexp-gen.cc",
        "patchSetId": 3
      },
      "lineNbr": 463,
      "author": {
        "id": 1356229
      },
      "writtenOn": "2019-08-28T11:55:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ec658d97_0c914fe9",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6eb092c_966e3b42",
        "filename": "src/builtins/builtins-regexp-gen.cc",
        "patchSetId": 3
      },
      "lineNbr": 520,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2019-08-23T14:02:20Z",
      "side": 1,
      "message": "As far as I can tell this should not be possible at this point - it should either be a Smi or a code obejct at all times, right?. Can you change it to a CSA_ASSERT?",
      "range": {
        "startLine": 520,
        "startChar": 2,
        "endLine": 520,
        "endChar": 54
      },
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29f847e7_e63afdad",
        "filename": "src/builtins/builtins-regexp-gen.cc",
        "patchSetId": 3
      },
      "lineNbr": 520,
      "author": {
        "id": 1356229
      },
      "writtenOn": "2019-08-28T11:55:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f6eb092c_966e3b42",
      "range": {
        "startLine": 520,
        "startChar": 2,
        "endLine": 520,
        "endChar": 54
      },
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27aca3a1_a5d51615",
        "filename": "src/builtins/builtins-regexp-gen.cc",
        "patchSetId": 3
      },
      "lineNbr": 520,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-29T06:42:45Z",
      "side": 1,
      "message": "nit: the ASSERT is implicit in the TNode\u003cCode\u003e cast just below.",
      "parentUuid": "29f847e7_e63afdad",
      "range": {
        "startLine": 520,
        "startChar": 2,
        "endLine": 520,
        "endChar": 54
      },
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55253328_0c6b52e6",
        "filename": "src/builtins/builtins-regexp-gen.cc",
        "patchSetId": 3
      },
      "lineNbr": 520,
      "author": {
        "id": 1356229
      },
      "writtenOn": "2019-08-29T11:13:41Z",
      "side": 1,
      "message": "Yeah right. I removed my assert again.",
      "parentUuid": "27aca3a1_a5d51615",
      "range": {
        "startLine": 520,
        "startChar": 2,
        "endLine": 520,
        "endChar": 54
      },
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "14128d5b_1c6392f5",
        "filename": "src/builtins/builtins-regexp-gen.cc",
        "patchSetId": 3
      },
      "lineNbr": 526,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-27T10:52:34Z",
      "side": 1,
      "message": "Could we solve this some other way? It\u0027d be great to avoid loading the bytecode just for this check. Is it possible to always allocate an initial stack area?\n\nAnd while looking at this, I think we could also avoid juggling around with the `start + size \u003d stack_top` calculation below and just have a dedicated external reference for that :) Perhaps leave a TODO.",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a07c905_4bf53bf1",
        "filename": "src/builtins/builtins-regexp-gen.cc",
        "patchSetId": 3
      },
      "lineNbr": 526,
      "author": {
        "id": 1356229
      },
      "writtenOn": "2019-08-28T11:55:33Z",
      "side": 1,
      "message": "We could always create an initial stack area. For --regexp-interpret-all this would waste 1KB per isolate. But with tier-up it is quite likely that we need the area anyways. I don\u0027t know if 1KB extra for jitless mode is OK or not?\nAdditionally the bytecode field is used as an indicator that tier-up hasn\u0027t happened yet.\n\nRegarding top of stack: Added a TODO. Thought about just implementing it but this CL is quite huge already. Leaving this as a follow-up.",
      "parentUuid": "14128d5b_1c6392f5",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83e592e6_a9f96768",
        "filename": "src/builtins/builtins-regexp-gen.cc",
        "patchSetId": 3
      },
      "lineNbr": 526,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-29T06:42:45Z",
      "side": 1,
      "message": "Follow-up SGTM but let\u0027s not forget about this. 1K per isolate sounds okay, although we could also create a smaller initial size, right?",
      "parentUuid": "0a07c905_4bf53bf1",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a7e6d15_67cacbc1",
        "filename": "src/builtins/builtins-regexp-gen.cc",
        "patchSetId": 3
      },
      "lineNbr": 558,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-27T10:52:34Z",
      "side": 1,
      "message": "We *could* use it to build the subject_vector though, right? Again, perhaps in a follow-up.",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a047187_96180f72",
        "filename": "src/builtins/builtins-regexp-gen.cc",
        "patchSetId": 3
      },
      "lineNbr": 558,
      "author": {
        "id": 1356229
      },
      "writtenOn": "2019-08-28T11:55:33Z",
      "side": 1,
      "message": "Added to my follow-up TODO list.",
      "parentUuid": "8a7e6d15_67cacbc1",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "66b46a3f_e9b8c134",
        "filename": "src/builtins/builtins-regexp-gen.cc",
        "patchSetId": 3
      },
      "lineNbr": 572,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-27T10:52:34Z",
      "side": 1,
      "message": "No need to explain the history here, just document the current state :) Please also explain the \u0027(x + 1) \u003c\u003c 1\u0027 below.",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17b3cc7a_91b8e587",
        "filename": "src/builtins/builtins-regexp-gen.cc",
        "patchSetId": 3
      },
      "lineNbr": 572,
      "author": {
        "id": 1356229
      },
      "writtenOn": "2019-08-28T11:55:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "66b46a3f_e9b8c134",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2c21424_d89d4046",
        "filename": "src/builtins/builtins-regexp-gen.cc",
        "patchSetId": 3
      },
      "lineNbr": 579,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-27T10:52:34Z",
      "side": 1,
      "message": "Please assert TaggedIsPositiveSmi(register_count). Or (to make the connection) STATIC_ASSERT that \u0027(kMaxCaptures + 1) \u003c\u003c 1\u0027 is a valid smi. I\u0027d be okay with exposing kMaxCaptures in regexp.h.",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fac14dc4_35a2dcde",
        "filename": "src/builtins/builtins-regexp-gen.cc",
        "patchSetId": 3
      },
      "lineNbr": 579,
      "author": {
        "id": 1356229
      },
      "writtenOn": "2019-08-28T11:55:33Z",
      "side": 1,
      "message": "I moved the definition of kMaxCaptures to js-regexp.h. I think it fits there, as the capture count is also stored within the JSRegExp object, and the parser is already tied to JSRegExp. OK?",
      "parentUuid": "a2c21424_d89d4046",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2cf3535b_a683c7f3",
        "filename": "src/builtins/builtins-regexp-gen.cc",
        "patchSetId": 3
      },
      "lineNbr": 579,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-29T06:42:45Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "fac14dc4_35a2dcde",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc908c26_368bae9e",
        "filename": "src/builtins/builtins-regexp-gen.cc",
        "patchSetId": 3
      },
      "lineNbr": 597,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-27T10:52:34Z",
      "side": 1,
      "message": "Why not pass it through as CallOrigin? We could expose CallOrigin in regexp.h and use it here (instead of literal 1).",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "420fb987_3e10c48a",
        "filename": "src/builtins/builtins-regexp-gen.cc",
        "patchSetId": 3
      },
      "lineNbr": 597,
      "author": {
        "id": 1356229
      },
      "writtenOn": "2019-08-28T11:55:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fc908c26_368bae9e",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b4e6ce8_f5316137",
        "filename": "src/codegen/ia32/macro-assembler-ia32.cc",
        "patchSetId": 3
      },
      "lineNbr": 1962,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-27T10:52:34Z",
      "side": 1,
      "message": "What about jmp(ExternalReferenceAsOperand(ext))? We could actually do the same on x64 to generate better code.",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a9f143c_e850aa96",
        "filename": "src/codegen/ia32/macro-assembler-ia32.cc",
        "patchSetId": 3
      },
      "lineNbr": 1962,
      "author": {
        "id": 1356229
      },
      "writtenOn": "2019-08-28T11:55:33Z",
      "side": 1,
      "message": "This won\u0027t work.\nAs far as I understand it you can use ExternalReferenceAsOperand(ext) only if the external reference is pointing to an address, whereas in our case the external reference points to code.\n\nAs discussed offline: We emit an indirect jump now instead of loading the address to a register.",
      "parentUuid": "2b4e6ce8_f5316137",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b12f13eb_1599e64e",
        "filename": "src/codegen/turbo-assembler.h",
        "patchSetId": 3
      },
      "lineNbr": 101,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-27T10:52:34Z",
      "side": 1,
      "message": "Please put this next to similar pure-virtual methods above, e.g. just before CallBuiltinByIndex (don\u0027t forget whitespace). For consistency, call the arg \u0027reference\u0027 and potentially pass by const reference.",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39d10de7_8ac572d1",
        "filename": "src/codegen/turbo-assembler.h",
        "patchSetId": 3
      },
      "lineNbr": 101,
      "author": {
        "id": 1356229
      },
      "writtenOn": "2019-08-28T11:55:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b12f13eb_1599e64e",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "53df5cc0_a183115f",
        "filename": "src/diagnostics/objects-debug.cc",
        "patchSetId": 3
      },
      "lineNbr": 1455,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-27T10:52:34Z",
      "side": 1,
      "message": "\u0027 or the interpreter trampoline\u0027",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c15c4dc4_55713d94",
        "filename": "src/diagnostics/objects-debug.cc",
        "patchSetId": 3
      },
      "lineNbr": 1455,
      "author": {
        "id": 1356229
      },
      "writtenOn": "2019-08-28T11:55:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "53df5cc0_a183115f",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "15d54768_78b7bc93",
        "filename": "src/objects/js-regexp.h",
        "patchSetId": 3
      },
      "lineNbr": 123,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-27T10:52:34Z",
      "side": 1,
      "message": "nit: we could make this (and above) constexpr",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e9e73c9_b9e0c1bb",
        "filename": "src/objects/js-regexp.h",
        "patchSetId": 3
      },
      "lineNbr": 123,
      "author": {
        "id": 1356229
      },
      "writtenOn": "2019-08-28T11:55:33Z",
      "side": 1,
      "message": "For some reason we use c++11 for gcc and c++14 for clang.\nIn c++11 constexpr is only allowed if the body contains exactly one return statement.\nI changed this to use ternary operator.",
      "parentUuid": "15d54768_78b7bc93",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54720b30_2283a31a",
        "filename": "src/objects/js-regexp.h",
        "patchSetId": 3
      },
      "lineNbr": 123,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-29T06:42:45Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6e9e73c9_b9e0c1bb",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "80e4dc7e_dff6cc35",
        "filename": "src/objects/js-regexp.h",
        "patchSetId": 3
      },
      "lineNbr": 132,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-27T10:52:34Z",
      "side": 1,
      "message": "Once Ana extracts the prologue from irregexp-generated code, this should be renamed to \u0027Trampoline\u0027 and the below to \u0027CodeOrBytecode\u0027.",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "921d6701_b043fcf5",
        "filename": "src/objects/js-regexp.h",
        "patchSetId": 3
      },
      "lineNbr": 173,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2019-08-23T14:02:20Z",
      "side": 1,
      "message": "It will also be kUninitializedValue before we execute the regexp for the first time, right?",
      "range": {
        "startLine": 172,
        "startChar": 50,
        "endLine": 173,
        "endChar": 59
      },
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45ff98c6_6c3839d2",
        "filename": "src/objects/js-regexp.h",
        "patchSetId": 3
      },
      "lineNbr": 173,
      "author": {
        "id": 1356229
      },
      "writtenOn": "2019-08-28T11:55:33Z",
      "side": 1,
      "message": "Yes, right. But that\u0027s true for other fields as well. My intention with this comment was to make clear that this field might never be used or can be reset to kUninitializedValue when we use tier-up.\nI re-phrased the comment to make my intention more clear. Is it better now?",
      "parentUuid": "921d6701_b043fcf5",
      "range": {
        "startLine": 172,
        "startChar": 50,
        "endLine": 173,
        "endChar": 59
      },
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "941e1859_c9f90b7e",
        "filename": "src/regexp/arm64/regexp-macro-assembler-arm64.cc",
        "patchSetId": 3
      },
      "lineNbr": 58,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-27T10:52:34Z",
      "side": 1,
      "message": "104? :)",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b578603_10140869",
        "filename": "src/regexp/arm64/regexp-macro-assembler-arm64.cc",
        "patchSetId": 3
      },
      "lineNbr": 58,
      "author": {
        "id": 1356229
      },
      "writtenOn": "2019-08-28T11:55:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "941e1859_c9f90b7e",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e653d358_20719020",
        "filename": "src/regexp/regexp-interpreter.h",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-27T10:52:34Z",
      "side": 1,
      "message": "Alternatively just omit names for the args below and in the .cc file.",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92d3defd_12aef6d5",
        "filename": "src/regexp/regexp-interpreter.h",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1356229
      },
      "writtenOn": "2019-08-28T11:55:33Z",
      "side": 1,
      "message": "As discussed ommited names in .cc and kept them with comments in .h",
      "parentUuid": "e653d358_20719020",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d62cd11_090940e0",
        "filename": "src/regexp/regexp-macro-assembler.cc",
        "patchSetId": 3
      },
      "lineNbr": 271,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-27T10:52:34Z",
      "side": 1,
      "message": "nit: perhaps put this last, other args are also in order of the final call below.",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63dfa797_2697aac2",
        "filename": "src/regexp/regexp-macro-assembler.cc",
        "patchSetId": 3
      },
      "lineNbr": 271,
      "author": {
        "id": 1356229
      },
      "writtenOn": "2019-08-28T11:55:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5d62cd11_090940e0",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fd9bbd4f_f410006a",
        "filename": "src/regexp/regexp-macro-assembler.cc",
        "patchSetId": 3
      },
      "lineNbr": 292,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-27T10:52:34Z",
      "side": 1,
      "message": "This is likely the wrong address (of the C++) object, regexp.ptr() will give you the real heap object pointer.",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4180680d_1b58aa31",
        "filename": "src/regexp/regexp-macro-assembler.cc",
        "patchSetId": 3
      },
      "lineNbr": 292,
      "author": {
        "id": 1356229
      },
      "writtenOn": "2019-08-28T11:55:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fd9bbd4f_f410006a",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb6c342d_9c4789c6",
        "filename": "src/regexp/regexp.cc",
        "patchSetId": 3
      },
      "lineNbr": 317,
      "author": {
        "id": 1167239
      },
      "writtenOn": "2019-08-23T14:02:20Z",
      "side": 1,
      "message": "It\u0027s true that compiled_code will always be a code object now because it will always be the trampoline or the native generated code - but does the implication from regexp_interpret_all still hold, e.g. for bytecode.IsByteArray()? You could leave that in",
      "range": {
        "startLine": 317,
        "startChar": 4,
        "endLine": 317,
        "endChar": 35
      },
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f484576d_471991e4",
        "filename": "src/regexp/regexp.cc",
        "patchSetId": 3
      },
      "lineNbr": 317,
      "author": {
        "id": 1356229
      },
      "writtenOn": "2019-08-28T11:55:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eb6c342d_9c4789c6",
      "range": {
        "startLine": 317,
        "startChar": 4,
        "endLine": 317,
        "endChar": 35
      },
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0808de49_c9498d98",
        "filename": "src/regexp/regexp.cc",
        "patchSetId": 3
      },
      "lineNbr": 402,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-27T10:52:34Z",
      "side": 1,
      "message": "This is the bottleneck, right? IMO we should just dispatch based on compile_data.compilation_target here to properly assign fields.",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c1425f5_817b9b6a",
        "filename": "src/regexp/regexp.cc",
        "patchSetId": 3
      },
      "lineNbr": 402,
      "author": {
        "id": 1356229
      },
      "writtenOn": "2019-08-28T11:55:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0808de49_c9498d98",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cbbef139_c3075cba",
        "filename": "src/regexp/regexp.h",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-27T10:52:34Z",
      "side": 1,
      "message": "q: Why keep the trampoline here? Is it convenient for some reason? I wouldn\u0027t expect the regexp compiler to know about the trampoline, or for it to mirror JSRegExp structure.",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c70e9e8f_2e2117c7",
        "filename": "src/regexp/regexp.h",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1356229
      },
      "writtenOn": "2019-08-28T11:55:33Z",
      "side": 1,
      "message": "Moved the logic to regexp.cc bottleneck as suggested by you.",
      "parentUuid": "cbbef139_c3075cba",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ff1938b_721e7fce",
        "filename": "test/cctest/test-regexp.cc",
        "patchSetId": 3
      },
      "lineNbr": 641,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-27T10:52:34Z",
      "side": 1,
      "message": "This partially-constructed JSRegExp object may fail heap verification: https://cs.chromium.org/chromium/src/v8/src/diagnostics/objects-debug.cc?l\u003d1441\u0026rcl\u003d0faa1ec736a758eac44f1cedf4d93ab7f90c9f1a\n\nWe probably need to set it up fully; ideally this should be done in a factory function that\u0027s also used in the normal path (JSRegExp::New). \n\nSpeaking of which, can we not use JSRegExp::New here? It doesn\u0027t matter what\u0027s inside the regexp, does it?",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc1b7988_836b1290",
        "filename": "test/cctest/test-regexp.cc",
        "patchSetId": 3
      },
      "lineNbr": 641,
      "author": {
        "id": 1356229
      },
      "writtenOn": "2019-08-28T11:55:33Z",
      "side": 1,
      "message": "The reason I created this instead of using JSRegExp::New is that JSRegExp::New compiles the given source string and set all fields accordingly. The problem with this is that source strings of the tests here can also be atoms and then the whole layout will be wrong. \n\nIt does matter whats inside because the JSRegExp object is passed to NativeRegExpMacroAssembler::Execute() instead of the code (the code gets extracted from the JSRegExp object). This is done so we can pass the JSRegExp object to native irregexp code for consistency (because we also pass it from RegExpExecInternal now as it is required for the interpreter).\nAlso added a TODO to NativeRegexpMacroAssembler::Execute to get rid of the JS object if possible.\n\nThe partial objects also shouldn\u0027t fail heap verification as factory-\u003eSetRegExpIrregexpData initializes all the fields.",
      "parentUuid": "5ff1938b_721e7fce",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4921ef84_0f592238",
        "filename": "test/cctest/test-regexp.cc",
        "patchSetId": 3
      },
      "lineNbr": 641,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2019-08-29T06:42:45Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "cc1b7988_836b1290",
      "revId": "24d9856d3f3cec5efe3b5f9dfa020f7ef61e5012",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}