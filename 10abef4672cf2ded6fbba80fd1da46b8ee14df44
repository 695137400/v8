{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "98e18970_44040042",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2023-05-05T12:03:09Z",
      "side": 1,
      "message": "PTAL, thanks",
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "32f65cc3_8db27950",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-05-09T10:54:34Z",
      "side": 1,
      "message": "Very cool! :)\nMostly LGTM, but I\u0027d like to have another look once you\u0027ve addressed my comments :)",
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae8e404c_a7856100",
        "filename": "src/compiler/turboshaft/assembler.h",
        "patchSetId": 2
      },
      "lineNbr": 1562,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-05-09T10:54:34Z",
      "side": 1,
      "message": "That sounds a bit surprising to me, because we can allocate directly old objects, and if we then initialize-store a young pointer in such old object, the generational writer barrier is always required. Or would such a case go through a InitializeField rather than a Initialize? Or am I missing something?",
      "range": {
        "startLine": 1562,
        "startChar": 29,
        "endLine": 1562,
        "endChar": 62
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70f1d8f4_770962e4",
        "filename": "src/compiler/turboshaft/assembler.h",
        "patchSetId": 2
      },
      "lineNbr": 1562,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2023-05-09T13:20:21Z",
      "side": 1,
      "message": "Right, we should be careful with this. Eliminating write barriers for pre-tenured allocations is wrong. Also, we do have memory optimization afterwards, which eliminates write barriers to the most recent allocation anyway (when it is not pre-tenured).",
      "parentUuid": "ae8e404c_a7856100",
      "range": {
        "startLine": 1562,
        "startChar": 29,
        "endLine": 1562,
        "endChar": 62
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ead874f_06e88bac",
        "filename": "src/compiler/turboshaft/assembler.h",
        "patchSetId": 2
      },
      "lineNbr": 1562,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2023-05-09T16:06:56Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "70f1d8f4_770962e4",
      "range": {
        "startLine": 1562,
        "startChar": 29,
        "endLine": 1562,
        "endChar": 62
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0ea3969_c272edeb",
        "filename": "src/compiler/turboshaft/snapshot-table.h",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2023-05-09T13:20:21Z",
      "side": 1,
      "message": "Did you try the `friend size_t hash_value(Key key)` trick to avoid moving the templates out?",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 49,
        "endChar": 37
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "21cd8d3f_6fb569a4",
        "filename": "src/compiler/turboshaft/snapshot-table.h",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2023-05-09T16:06:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a0ea3969_c272edeb",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 49,
        "endChar": 37
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "acdfe985_5faf4634",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-05-09T10:54:34Z",
      "side": 1,
      "message": "Can you add a high-level summary mentioning:\n  - what this file does (maybe with a quick example so that it\u0027s a bit more visual: `a[0] \u003d 42; a[0] \u003d 17;` becomes `a[0] \u003d 17` (or any other example you like more)).\n  - how it works",
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a51acfb2_3ffd5d83",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2023-05-10T09:28:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "acdfe985_5faf4634",
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4e6396b3_9add7658",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-05-10T14:24:14Z",
      "side": 1,
      "message": "Nice, thanks :)",
      "parentUuid": "a51acfb2_3ffd5d83",
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e7075c8_d743d8a6",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-05-09T10:54:34Z",
      "side": 1,
      "message": "What about renaming that to StoreData?",
      "range": {
        "startLine": 19,
        "startChar": 7,
        "endLine": 19,
        "endChar": 14
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0729d7b_355c8614",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2023-05-09T13:20:21Z",
      "side": 1,
      "message": "A name `KeyData` in the `turboshaft` namespace could easily clash with other uses of `SnapshotTable`. Maybe give it a longer name and define an alias inside of the class?",
      "range": {
        "startLine": 19,
        "startChar": 7,
        "endLine": 19,
        "endChar": 14
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "149981e6_6f6fa0dc",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2023-05-09T16:06:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e0729d7b_355c8614",
      "range": {
        "startLine": 19,
        "startChar": 7,
        "endLine": 19,
        "endChar": 14
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f54bebdf_4ff1c546",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2023-05-09T16:06:56Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "3e7075c8_d743d8a6",
      "range": {
        "startLine": 19,
        "startChar": 7,
        "endLine": 19,
        "endChar": 14
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce58bdf2_fb8efcbc",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-05-09T10:54:34Z",
      "side": 1,
      "message": "I think that you could just write `else { active_keys_.erase(key); }`.",
      "range": {
        "startLine": 68,
        "startChar": 6,
        "endLine": 70,
        "endChar": 5
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "084080b7_4c28818f",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2023-05-09T16:06:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ce58bdf2_fb8efcbc",
      "range": {
        "startLine": 68,
        "startChar": 6,
        "endLine": 70,
        "endChar": 5
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e030e794_2c457d71",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-05-09T10:54:34Z",
      "side": 1,
      "message": "You always pass \"false\" for this parameter as far as I can see; I\u0027m guessing that it should be false the 1st time a block is visited, and true the next times or something like that.",
      "range": {
        "startLine": 74,
        "startChar": 36,
        "endLine": 74,
        "endChar": 58
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "444c4638_002ac133",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2023-05-09T16:06:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e030e794_2c457d71",
      "range": {
        "startLine": 74,
        "startChar": 36,
        "endLine": 74,
        "endChar": 58
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d04de8d1_060adada",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-05-09T10:54:34Z",
      "side": 1,
      "message": "This looks wrong, no? I guess that you wanted to skip backedges here if the loop header hasn\u0027t been visited yet?",
      "range": {
        "startLine": 89,
        "startChar": 8,
        "endLine": 89,
        "endChar": 54
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d1dcb640_cb28cf26",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2023-05-09T16:06:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d04de8d1_060adada",
      "range": {
        "startLine": 89,
        "startChar": 8,
        "endLine": 89,
        "endChar": 54
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac9dc93b_ab1a47a0",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-05-09T10:54:34Z",
      "side": 1,
      "message": "successors",
      "range": {
        "startLine": 98,
        "startChar": 7,
        "endLine": 98,
        "endChar": 19
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "97932de0_c1868fb9",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2023-05-09T16:06:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ac9dc93b_ab1a47a0",
      "range": {
        "startLine": 98,
        "startChar": 7,
        "endLine": 98,
        "endChar": 19
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07ae8366_a2995deb",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-05-09T10:54:34Z",
      "side": 1,
      "message": "Could you static_cast that to a StoreObservability, just so that it\u0027s a bit clearer what you\u0027re doing? :)",
      "range": {
        "startLine": 102,
        "startChar": 17,
        "endLine": 102,
        "endChar": 73
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b3f80e0_fd544e1c",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2023-05-09T14:06:26Z",
      "side": 1,
      "message": "C++ lambdas can also have an optional return type annotation, maybe that\u0027s nice?",
      "parentUuid": "07ae8366_a2995deb",
      "range": {
        "startLine": 102,
        "startChar": 17,
        "endLine": 102,
        "endChar": 73
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c3a5b595_00f7b45d",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2023-05-09T16:06:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "07ae8366_a2995deb",
      "range": {
        "startLine": 102,
        "startChar": 17,
        "endLine": 102,
        "endChar": 73
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "951ba6c5_08f34e01",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 123,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-05-09T10:54:34Z",
      "side": 1,
      "message": "You could remove this parameter; but if you want to keep it to maybe later use it to have more precise aliasing, then feel free to keep it :)",
      "range": {
        "startLine": 123,
        "startChar": 49,
        "endLine": 123,
        "endChar": 63
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e3f04950_2514d526",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 123,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2023-05-09T16:06:56Z",
      "side": 1,
      "message": "Yeah that was my hope that we might later use some information (e.g. type information) to exclude certain objects from potentially aliasing.",
      "parentUuid": "951ba6c5_08f34e01",
      "range": {
        "startLine": 123,
        "startChar": 49,
        "endLine": 123,
        "endChar": 63
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c5f5e9c_a3c8971f",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 123,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-05-10T14:24:14Z",
      "side": 1,
      "message": "Sounds good :)",
      "parentUuid": "e3f04950_2514d526",
      "range": {
        "startLine": 123,
        "startChar": 49,
        "endLine": 123,
        "endChar": 63
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43351dfc_4d316844",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 127,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-05-09T10:54:34Z",
      "side": 1,
      "message": "Maybe make this a ZoneVector that you\u0027d reuse for every call to MarkPotentiallyAliasingStoresAsObservable? (like successor_snapshots_ is reused for all merges)",
      "range": {
        "startLine": 127,
        "startChar": 4,
        "endLine": 127,
        "endChar": 45
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24fd2928_b2f8fcb6",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 127,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2023-05-09T14:06:26Z",
      "side": 1,
      "message": "How about using a `SmallVector` instead? Keeps memory usage down and avoids allocations in the common case. This should usually not be too big.",
      "parentUuid": "43351dfc_4d316844",
      "range": {
        "startLine": 127,
        "startChar": 4,
        "endLine": 127,
        "endChar": 45
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8e516c39_c35b3aea",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 127,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2023-05-09T16:06:56Z",
      "side": 1,
      "message": "Good idea!",
      "parentUuid": "43351dfc_4d316844",
      "range": {
        "startLine": 127,
        "startChar": 4,
        "endLine": 127,
        "endChar": 45
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39c93441_5a25480d",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-05-09T10:54:34Z",
      "side": 1,
      "message": "Here as well, you could reuse a ZoneVector (the same as in MarkPotentiallyAliasingStoresAsObservable I would think).",
      "range": {
        "startLine": 144,
        "startChar": 4,
        "endLine": 144,
        "endChar": 75
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "76d32684_0611e3d4",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2023-05-09T16:06:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "39c93441_5a25480d",
      "range": {
        "startLine": 144,
        "startChar": 4,
        "endLine": 144,
        "endChar": 75
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fac8cbb_db8ce3c5",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 147,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-05-09T10:54:34Z",
      "side": 1,
      "message": "Why does this DCHECK hold?",
      "range": {
        "startLine": 147,
        "startChar": 6,
        "endLine": 147,
        "endChar": 58
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25fa0755_94a056d2",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 147,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2023-05-09T16:06:56Z",
      "side": 1,
      "message": "Because keys with are `kObservable` (which is the key\u0027s default value) are not stored in the table and are not tracked in the `active_keys_`.",
      "parentUuid": "8fac8cbb_db8ce3c5",
      "range": {
        "startLine": 147,
        "startChar": 6,
        "endLine": 147,
        "endChar": 58
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0592f76f_7b941f49",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 147,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-05-10T14:24:14Z",
      "side": 1,
      "message": "OK I see. Could you add a comment before the declaration of `active_keys_` explaining what it contains (and pointing out that Observable keys are always directly removed from active_keys in OnValueChange)? :)",
      "parentUuid": "25fa0755_94a056d2",
      "range": {
        "startLine": 147,
        "startChar": 6,
        "endLine": 147,
        "endChar": 58
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d334bb90_076e29c5",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 147,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2023-05-11T12:06:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0592f76f_7b941f49",
      "range": {
        "startLine": 147,
        "startChar": 6,
        "endLine": 147,
        "endChar": 58
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a18f989_2421b28d",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 174,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-05-09T10:54:34Z",
      "side": 1,
      "message": "It\u0027s a bit sad that 1) you create a new snapshot just to know if 2 snapshots are different, and 2) you can\u0027t early return one you\u0027ve set snapshot_has_changed to true. What about adding a method CompareSnapshot(Snapshot a, Snapshot b) to SnapshotTable that compares 2 Snapshots? (it might need an additional callback for the comparison, I didn\u0027t think everything through :p)",
      "range": {
        "startLine": 167,
        "startChar": 8,
        "endLine": 174,
        "endChar": 22
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b9705af_f518633d",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 174,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2023-05-09T14:06:26Z",
      "side": 1,
      "message": "I\u0027d actually recommend to use the merged snapshot, as this guarantees termination even if the analysis is not entirely monotone. In addition, the merged snapshot has a condensed history, which makes subsequent merging faster.",
      "parentUuid": "8a18f989_2421b28d",
      "range": {
        "startLine": 167,
        "startChar": 8,
        "endLine": 174,
        "endChar": 22
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e042fe37_85960044",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 174,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2023-05-10T09:28:28Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "1b9705af_f518633d",
      "range": {
        "startLine": 167,
        "startChar": 8,
        "endLine": 174,
        "endChar": 22
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0389c993_916c63ea",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 232,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-05-09T10:54:34Z",
      "side": 1,
      "message": "Should we have some kind of counter to prevent revisiting too many times a loop?",
      "range": {
        "startLine": 223,
        "startChar": 0,
        "endLine": 232,
        "endChar": 7
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f83d7c6_e46a9289",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 232,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2023-05-10T09:28:28Z",
      "side": 1,
      "message": "I guess it is not necessary because the number of iterations are very limited already by the small height of the lattice, but very specific examples can probably constructed where we iterate a few rounds. Not sure if we need to take action here.",
      "parentUuid": "0389c993_916c63ea",
      "range": {
        "startLine": 223,
        "startChar": 0,
        "endLine": 232,
        "endChar": 7
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c399e09b_7abc2dc5",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 232,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-05-10T14:24:14Z",
      "side": 1,
      "message": "While the lattice height is small, aren\u0027t there cases where during each iteration a single key would change state, causing a single other to change state at the next iteration and so on, which would mean that the number of iterations would be basically \"number of memory operations\" in the loop? (maybe this can\u0027t happen though...)",
      "parentUuid": "5f83d7c6_e46a9289",
      "range": {
        "startLine": 223,
        "startChar": 0,
        "endLine": 232,
        "endChar": 7
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8990d53a_bc28e40e",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 232,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2023-05-11T12:06:29Z",
      "side": 1,
      "message": "Yeah I think that\u0027s not really happening, if we have a sequence of stores\n```\no.x \u003d ... // (1)\no.x \u003d ... // (2)\no.x \u003d ... // (3)\n```\nthen the observability of `(1)` and `(2)` depends on `(3)` and the operations between them and will not change when we revisit this block. The only change that can happen on a revisit is that `(3)` goes from `kUnobservable` to `kGCObservable` or `kObservable`. In either case, `(1)` and `(2)` don\u0027t change. I would think the worst-case complexity is somewhat linear in the number of different offsets stored to after the last \"can-observe-anything\"-operation (e.g. Load) in the block.",
      "parentUuid": "c399e09b_7abc2dc5",
      "range": {
        "startLine": 223,
        "startChar": 0,
        "endLine": 232,
        "endChar": 7
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fe2ac8f_66a874ec",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 237,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-05-09T10:54:34Z",
      "side": 1,
      "message": "You don\u0027t need this parameter (or at least, you\u0027re not using it ;) )",
      "range": {
        "startLine": 237,
        "startChar": 38,
        "endLine": 237,
        "endChar": 59
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "54c03079_456fe4a9",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 237,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2023-05-10T09:28:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1fe2ac8f_66a874ec",
      "range": {
        "startLine": 237,
        "startChar": 38,
        "endLine": 237,
        "endChar": 59
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84a400cf_c1e6acaf",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 270,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-05-09T10:54:34Z",
      "side": 1,
      "message": "The relationship between the comment and the line of code that follows is not super obvious. Could you rephrase this comment (and the one from a few lines above as well) to something like \"We keep this store, but update its state as Unobservable: if we reach a previous store without having modified the state in between, we\u0027ll be able to remove this other store\"? (or any other comment that you think makes sense) :)",
      "range": {
        "startLine": 270,
        "startChar": 19,
        "endLine": 270,
        "endChar": 38
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1d189ee8_541103f3",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 270,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2023-05-09T16:06:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "84a400cf_c1e6acaf",
      "range": {
        "startLine": 270,
        "startChar": 19,
        "endLine": 270,
        "endChar": 38
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39f29b9a_1c003878",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 308,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-05-09T10:54:34Z",
      "side": 1,
      "message": "I think that this returns `true` for block terminators, which in turns means that everytime you start a new block (from the end), you mark all stores as observable. Or am I missing something?",
      "range": {
        "startLine": 308,
        "startChar": 4,
        "endLine": 308,
        "endChar": 16
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48dfcabe_96df87b5",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 308,
      "author": {
        "id": 1180419
      },
      "writtenOn": "2023-05-09T14:06:26Z",
      "side": 1,
      "message": "Ha! The new effect system separates block termination from effects :)",
      "parentUuid": "39f29b9a_1c003878",
      "range": {
        "startLine": 308,
        "startChar": 4,
        "endLine": 308,
        "endChar": 16
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5bdadf97_c3acf1f0",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 308,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2023-05-10T09:28:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "48dfcabe_96df87b5",
      "range": {
        "startLine": 308,
        "startChar": 4,
        "endLine": 308,
        "endChar": 16
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "213d4a4e_c93888db",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 319,
      "author": {
        "id": 1535927
      },
      "writtenOn": "2023-05-09T10:54:34Z",
      "side": 1,
      "message": "I don\u0027t think that you\u0027re using the UniformReducerAdapter here. Left over from a previous version maybe?",
      "range": {
        "startLine": 319,
        "startChar": 13,
        "endLine": 319,
        "endChar": 34
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1927cfce_c00a6632",
        "filename": "src/compiler/turboshaft/store-store-elimination-reducer.h",
        "patchSetId": 2
      },
      "lineNbr": 319,
      "author": {
        "id": 1374077
      },
      "writtenOn": "2023-05-09T16:06:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "213d4a4e_c93888db",
      "range": {
        "startLine": 319,
        "startChar": 13,
        "endLine": 319,
        "endChar": 34
      },
      "revId": "10abef4672cf2ded6fbba80fd1da46b8ee14df44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}