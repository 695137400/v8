{
  "comments": [
    {
      "key": {
        "uuid": "db491e70_64cda10f",
        "filename": "src/wasm/module-instantiate.cc",
        "patchSetId": 1
      },
      "lineNbr": 923,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2019-06-06T08:04:08Z",
      "side": 1,
      "message": "Is this function never used to get Capi-functions from the table? I can see why the extension is needed for WasmJSFunctions, but I wonder why it was not necessary for Capi functions.",
      "range": {
        "startLine": 923,
        "startChar": 21,
        "endLine": 923,
        "endChar": 42
      },
      "revId": "ead2e0072e3d0163a67b1190d1366c86b658142e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa24fcae_45cf6b00",
        "filename": "src/wasm/module-instantiate.cc",
        "patchSetId": 1
      },
      "lineNbr": 923,
      "author": {
        "id": 1118575
      },
      "writtenOn": "2019-06-07T14:00:28Z",
      "side": 1,
      "message": "I think it is necessary for WasmCapiFunction as well, just not implemented yet.",
      "parentUuid": "db491e70_64cda10f",
      "range": {
        "startLine": 923,
        "startChar": 21,
        "endLine": 923,
        "endChar": 42
      },
      "revId": "ead2e0072e3d0163a67b1190d1366c86b658142e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b162857d_140c4117",
        "filename": "src/wasm/module-instantiate.cc",
        "patchSetId": 1
      },
      "lineNbr": 933,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2019-06-03T15:46:21Z",
      "side": 1,
      "message": "Can you wrap the code here in a separate function to document that this code implements importing a constructed WebAssembly.Function? First I thought of a comment, but if you find a good function name, then that would be a better kind of documentation.",
      "revId": "ead2e0072e3d0163a67b1190d1366c86b658142e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "945549c4_f457daaa",
        "filename": "src/wasm/module-instantiate.cc",
        "patchSetId": 1
      },
      "lineNbr": 933,
      "author": {
        "id": 1118575
      },
      "writtenOn": "2019-06-07T14:00:28Z",
      "side": 1,
      "message": "Done. This is in {WasmInstanceObject::ImportWasmJSFunctionIntoTable} now. Happy to tweak the name as needed. Also added an explanatory comment.",
      "parentUuid": "b162857d_140c4117",
      "revId": "ead2e0072e3d0163a67b1190d1366c86b658142e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f4b652d9_1646f0f5",
        "filename": "src/wasm/module-instantiate.cc",
        "patchSetId": 1
      },
      "lineNbr": 942,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2019-06-03T15:46:21Z",
      "side": 1,
      "message": "Do you not have to handle the {kind \u003d\u003d compiler::WasmImportCallKind::kLinkError} case here? If not, can you add a DCHECK that {kind} is not {compiler::WasmImportCallKind::kLinkError}?\n\nUpdate: I saw now that such a DCHECK already exists in CompileWasmImportCallWrapper. Maybe that\u0027s enough.",
      "range": {
        "startLine": 942,
        "startChar": 35,
        "endLine": 942,
        "endChar": 39
      },
      "revId": "ead2e0072e3d0163a67b1190d1366c86b658142e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bcd81286_2cccf813",
        "filename": "src/wasm/module-instantiate.cc",
        "patchSetId": 1
      },
      "lineNbr": 942,
      "author": {
        "id": 1118575
      },
      "writtenOn": "2019-06-07T14:00:28Z",
      "side": 1,
      "message": "Done. It should not be possible to reach a {WasmImportCallKind::kLinkError} on this path since the expected signature will always match. The worst that can happen is a {WasmImportCallKind::kRuntimeTypeError} if the signature is incompatible with JavaScript. I have added the suggested DCHECK.",
      "parentUuid": "f4b652d9_1646f0f5",
      "range": {
        "startLine": 942,
        "startChar": 35,
        "endLine": 942,
        "endChar": 39
      },
      "revId": "ead2e0072e3d0163a67b1190d1366c86b658142e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "908fe931_b291d1c2",
        "filename": "src/wasm/module-instantiate.cc",
        "patchSetId": 1
      },
      "lineNbr": 954,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2019-06-03T15:46:21Z",
      "side": 1,
      "message": "Can we do the signature check before compiling the wrapper? Do we even need the wrapper if {sig_id \u003c 0}?",
      "range": {
        "startLine": 954,
        "startChar": 11,
        "endLine": 954,
        "endChar": 17
      },
      "revId": "ead2e0072e3d0163a67b1190d1366c86b658142e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "504efd3a_396523a4",
        "filename": "src/wasm/module-instantiate.cc",
        "patchSetId": 1
      },
      "lineNbr": 954,
      "author": {
        "id": 1118575
      },
      "writtenOn": "2019-06-07T14:00:28Z",
      "side": 1,
      "message": "Done. We should not need a wrapper in this case. I am now storing {kNullAddress} as call target into the dispatch table, which should crash safely in case we accidentally miss the signature check somehow.",
      "parentUuid": "908fe931_b291d1c2",
      "range": {
        "startLine": 954,
        "startChar": 11,
        "endLine": 954,
        "endChar": 17
      },
      "revId": "ead2e0072e3d0163a67b1190d1366c86b658142e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "518e22a8_92d43a1b",
        "filename": "src/wasm/wasm-objects.cc",
        "patchSetId": 1
      },
      "lineNbr": 1029,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2019-06-06T08:04:08Z",
      "side": 1,
      "message": "I wonder if this function could share code with its sister version for Capi functions. You would then have to pass in the signature, and a generator function which takes a NativeModule and produces WasmCode.",
      "range": {
        "startLine": 1029,
        "startChar": 22,
        "endLine": 1029,
        "endChar": 42
      },
      "revId": "ead2e0072e3d0163a67b1190d1366c86b658142e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ebc1d82_d8a9a889",
        "filename": "src/wasm/wasm-objects.cc",
        "patchSetId": 1
      },
      "lineNbr": 1029,
      "author": {
        "id": 1118575
      },
      "writtenOn": "2019-06-07T14:00:28Z",
      "side": 1,
      "message": "Ack. I left a TODO in the wasm-objects.h about this. Do you think we should try to unify those as part of this CL or as a follow-up?",
      "parentUuid": "518e22a8_92d43a1b",
      "range": {
        "startLine": 1029,
        "startChar": 22,
        "endLine": 1029,
        "endChar": 42
      },
      "revId": "ead2e0072e3d0163a67b1190d1366c86b658142e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37843dc3_a6b90797",
        "filename": "test/mjsunit/wasm/type-reflection.js",
        "patchSetId": 1
      },
      "lineNbr": 282,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2019-06-06T08:04:08Z",
      "side": 1,
      "message": "q: Why do you use {assertDoesNotThrow} here? What is the difference to calling {table.set} directly? (I\u0027m asking mostly for my own interesting, not as marking it as a nit.)",
      "range": {
        "startLine": 282,
        "startChar": 2,
        "endLine": 282,
        "endChar": 20
      },
      "revId": "ead2e0072e3d0163a67b1190d1366c86b658142e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be0db7af_60c3cc12",
        "filename": "test/mjsunit/wasm/type-reflection.js",
        "patchSetId": 1
      },
      "lineNbr": 282,
      "author": {
        "id": 1118575
      },
      "writtenOn": "2019-06-07T14:00:28Z",
      "side": 1,
      "message": "Done. No particular reason, they should more or less be equivalent (i.e. of the direct call throws, the test will also fail). But I agree, the direct call is way easier to read.",
      "parentUuid": "37843dc3_a6b90797",
      "range": {
        "startLine": 282,
        "startChar": 2,
        "endLine": 282,
        "endChar": 20
      },
      "revId": "ead2e0072e3d0163a67b1190d1366c86b658142e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0e49c2d_6589eb3d",
        "filename": "test/mjsunit/wasm/type-reflection.js",
        "patchSetId": 1
      },
      "lineNbr": 286,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2019-06-06T08:04:08Z",
      "side": 1,
      "message": "table_index",
      "range": {
        "startLine": 286,
        "startChar": 38,
        "endLine": 286,
        "endChar": 48
      },
      "revId": "ead2e0072e3d0163a67b1190d1366c86b658142e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "acd46b79_5eb8420c",
        "filename": "test/mjsunit/wasm/type-reflection.js",
        "patchSetId": 1
      },
      "lineNbr": 286,
      "author": {
        "id": 1118575
      },
      "writtenOn": "2019-06-07T14:00:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b0e49c2d_6589eb3d",
      "range": {
        "startLine": 286,
        "startChar": 38,
        "endLine": 286,
        "endChar": 48
      },
      "revId": "ead2e0072e3d0163a67b1190d1366c86b658142e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "001ec4fb_9d8be7be",
        "filename": "test/mjsunit/wasm/type-reflection.js",
        "patchSetId": 1
      },
      "lineNbr": 294,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2019-06-06T08:04:08Z",
      "side": 1,
      "message": "you could use {assertTraps(kTrapFuncSigMismatch, () \u003d\u003e instance.exports.main(1));} here instead, to also document and check the trap reason.",
      "range": {
        "startLine": 294,
        "startChar": 2,
        "endLine": 294,
        "endChar": 14
      },
      "revId": "ead2e0072e3d0163a67b1190d1366c86b658142e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8470ca3_d69e7432",
        "filename": "test/mjsunit/wasm/type-reflection.js",
        "patchSetId": 1
      },
      "lineNbr": 294,
      "author": {
        "id": 1118575
      },
      "writtenOn": "2019-06-07T14:00:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "001ec4fb_9d8be7be",
      "range": {
        "startLine": 294,
        "startChar": 2,
        "endLine": 294,
        "endChar": 14
      },
      "revId": "ead2e0072e3d0163a67b1190d1366c86b658142e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}