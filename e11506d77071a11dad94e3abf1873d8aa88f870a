{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e369e0ca_05e79454",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1440073
      },
      "writtenOn": "2024-03-26T17:39:09Z",
      "side": 1,
      "message": "This is a cleanup that I forgot, could you take a look, please? ðŸ˜„",
      "revId": "e11506d77071a11dad94e3abf1873d8aa88f870a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c834336_c0f17b9a",
        "filename": "src/wasm/fuzzing/random-module-generation.cc",
        "patchSetId": 1
      },
      "lineNbr": 206,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-03-26T17:45:34Z",
      "side": 1,
      "message": "I agree that this is a lot better than the old implementation where a `if (include_numeric_types)` below would actually return whether numeric types are excluded.\n\nStill, there isn\u0027t any type safety on this in `GetValueTypeHelper`, so mixing up any of these flags in any of the callers would result in very confusing behavior.\nI\u0027d be in favor to switch to enum classes.\nI\u0027m aware that the now simpler `if` then becomes `if(static_cast\u003cbool\u003e(include_numeric_types))` but I think that\u0027s a cheap price to pay vs. mixing these enum values accidentally.\n\nIf you agree, let\u0027s replace these with enum classes here. If you disagree, I can provide an LGTM and we merge this CL. ðŸ˜Š",
      "revId": "e11506d77071a11dad94e3abf1873d8aa88f870a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "943c977e_293eb114",
        "filename": "src/wasm/fuzzing/random-module-generation.cc",
        "patchSetId": 1
      },
      "lineNbr": 206,
      "author": {
        "id": 1440073
      },
      "writtenOn": "2024-03-27T09:39:09Z",
      "side": 1,
      "message": "Hmm, I am a bit unsure too.\nGood point, that it would be",
      "parentUuid": "1c834336_c0f17b9a",
      "revId": "e11506d77071a11dad94e3abf1873d8aa88f870a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a9431b6_41be35e7",
        "filename": "src/wasm/fuzzing/random-module-generation.cc",
        "patchSetId": 1
      },
      "lineNbr": 206,
      "author": {
        "id": 1440073
      },
      "writtenOn": "2024-03-27T09:40:11Z",
      "side": 1,
      "message": "I somehow replied in a [different comment](https://chromium-review.googlesource.com/c/v8/v8/+/5396418/comments/30e8ff11_f540a830) and this is a draft ðŸ˜„",
      "parentUuid": "943c977e_293eb114",
      "revId": "e11506d77071a11dad94e3abf1873d8aa88f870a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8c2a6a33_d423e04b",
        "filename": "src/wasm/fuzzing/random-module-generation.cc",
        "patchSetId": 1
      },
      "lineNbr": 206,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-03-27T09:42:02Z",
      "side": 1,
      "message": "ðŸ˜Š",
      "parentUuid": "3a9431b6_41be35e7",
      "revId": "e11506d77071a11dad94e3abf1873d8aa88f870a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "caac8334_5bf4a818",
        "filename": "src/wasm/fuzzing/random-module-generation.cc",
        "patchSetId": 1
      },
      "lineNbr": 206,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2024-03-27T14:42:19Z",
      "side": 1,
      "message": "Sorry, only seeing this now after it landed. I am not sure I can follow the type safety argument. Assuming these definitions:\n\n    enum Foo : bool { kFoo \u003d true, kNoFoo \u003d false };\n    enum Bar : bool { kBar \u003d true, kNoBar \u003d false };\n    f(Foo);\n\nThen both `f(kBar)` and `f(true)` would be a type error.\nIf I am not missing anything, then PS1 would have both type safety and nice readability, while PS2 regressed significantly on readability.\n\nThe only remaining concern with non-class enums is pollution of the name space, but in a `cc` file this shouldn\u0027t be a concern.",
      "parentUuid": "8c2a6a33_d423e04b",
      "revId": "e11506d77071a11dad94e3abf1873d8aa88f870a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eecea07e_19fc4dbe",
        "filename": "src/wasm/fuzzing/random-module-generation.cc",
        "patchSetId": 1
      },
      "lineNbr": 206,
      "author": {
        "id": 1549182
      },
      "writtenOn": "2024-03-27T14:54:09Z",
      "side": 1,
      "message": "So the only \"type behavior\" difference on enum and enum classes is that the conversion from enum to underlying type is implicit?\nI thought it was in both ways that was my main reasoning for suggesting enum classes...",
      "parentUuid": "caac8334_5bf4a818",
      "revId": "e11506d77071a11dad94e3abf1873d8aa88f870a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}