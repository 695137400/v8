{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4add7023_7b0ee814",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1349169
      },
      "writtenOn": "2021-01-20T08:22:47Z",
      "side": 1,
      "message": "PTAL, thanks!",
      "revId": "0644867119363c56d5486ae79ce1ae9a1a171fc5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "181a1414_4ba1a8d5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1349169
      },
      "writtenOn": "2021-01-21T05:19:30Z",
      "side": 1,
      "message": "Thanks for reviewing this CL!",
      "revId": "0644867119363c56d5486ae79ce1ae9a1a171fc5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8e8467a9_b8d991f2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1349169
      },
      "writtenOn": "2021-02-03T07:34:02Z",
      "side": 1,
      "message": "Hi all, the design doc is ready. Any feedback would be greatly appreciated. Thanks!\nhttps://docs.google.com/document/d/1AJKCWDMpugu31_mor3dd55UMO9oJ-85nyL5M748Zevc/edit?usp\u003dsharing",
      "revId": "0644867119363c56d5486ae79ce1ae9a1a171fc5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a9a87ea_51af338b",
        "filename": "src/interpreter/interpreter-generator.cc",
        "patchSetId": 1
      },
      "lineNbr": 1360,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-01-20T10:07:54Z",
      "side": 1,
      "message": "Two questions come to mind, 1. does adding this codepath in JSCall slow down the common case of non-Function.p.{apply,call} calls? It\u0027s a sequence of 4+ checks (smi, JSFunction, builtin indices), so it probably doesn\u0027t come for free. 2. Sometimes collecting the target, sometimes the receiver, is new complexity, is it worth it? Can we reduce it?",
      "revId": "0644867119363c56d5486ae79ce1ae9a1a171fc5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16063e51_460ca168",
        "filename": "src/interpreter/interpreter-generator.cc",
        "patchSetId": 1
      },
      "lineNbr": 1360,
      "author": {
        "id": 1349169
      },
      "writtenOn": "2021-01-21T05:19:30Z",
      "side": 1,
      "message": "For the first question, I guess we may reduce its impact on common js calls by restricting the checks to probable Function.p.{apply,call} calls, similar to what has been done on eval (https://source.chromium.org/chromium/chromium/src/+/master:v8/src/interpreter/bytecode-generator.cc;l\u003d4956;drc\u003de45616a746204e7405d3e2414675978597817414). This may lead to some additional changes to parser. WDYT?",
      "parentUuid": "7a9a87ea_51af338b",
      "revId": "0644867119363c56d5486ae79ce1ae9a1a171fc5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1131f7cb_22497253",
        "filename": "src/interpreter/interpreter-generator.cc",
        "patchSetId": 1
      },
      "lineNbr": 1360,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-01-21T10:30:13Z",
      "side": 1,
      "message": "From a first look, the additional code added to Call/Construct bytecode handlers is too much since calls are one of the hottest codepaths in the JS interpreter on real-world websites / JS. To land this it would need to be optimized to have minimal impact on JS performance, and prove it provides real savings on real world code.\n\nIn addition, the code should live alongside CollectCallFeedback / CollectConstructFeedback - there is already some special casing in CollectConstructFeedback for Array functions, and a similar approach should be taken here.",
      "parentUuid": "16063e51_460ca168",
      "revId": "0644867119363c56d5486ae79ce1ae9a1a171fc5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ea57661_062ef660",
        "filename": "src/interpreter/interpreter-generator.cc",
        "patchSetId": 1
      },
      "lineNbr": 1360,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-01-21T10:38:53Z",
      "side": 1,
      "message": "As an aside, changes like this would benefit from a design doc to allow discussion of the approach and pros/cons of different options before code review, e.g., another recent interpreter change had a lot of discussion and performance analysis on this doc: https://docs.google.com/document/d/1g_NExMT78II_KnIYNa9MvyPYIj23qAiFUEsyemY5KRk/edit which helped refine the approach.",
      "parentUuid": "1131f7cb_22497253",
      "revId": "0644867119363c56d5486ae79ce1ae9a1a171fc5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10704898_8e52a666",
        "filename": "src/interpreter/interpreter-generator.cc",
        "patchSetId": 1
      },
      "lineNbr": 1360,
      "author": {
        "id": 1349169
      },
      "writtenOn": "2021-01-22T03:26:58Z",
      "side": 1,
      "message": "Thanks for the suggestion! We are preparing a design doc for this change. I will keep you updated once the doc is available.",
      "parentUuid": "1ea57661_062ef660",
      "revId": "0644867119363c56d5486ae79ce1ae9a1a171fc5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}