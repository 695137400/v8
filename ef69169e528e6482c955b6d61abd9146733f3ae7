{
  "comments": [
    {
      "key": {
        "uuid": "6506aaeb_eee13fde",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 7,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2018-07-27T00:14:55Z",
      "side": 1,
      "message": "CloneObjectIC",
      "range": {
        "startLine": 7,
        "startChar": 1,
        "endLine": 7,
        "endChar": 8
      },
      "revId": "ef69169e528e6482c955b6d61abd9146733f3ae7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff275a86_ae28fa1d",
        "filename": "src/ic/ic.cc",
        "patchSetId": 5
      },
      "lineNbr": 2456,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2018-07-27T00:14:55Z",
      "side": 1,
      "message": "No need to go megamorphic just because you saw a deprecated object, just migrate it in Runtime_CloneObjectIC_Miss:\n\n  if (MigrateDeprecated(source)) {\n    // The IC state will be updated next time.\n    RETURN_RESULT_OR_FAILURE(isolate,\n                             CloneObjectSlowPath(isolate, source, flags));\n  }\n\n  FeedbackSlot slot \u003d ...",
      "range": {
        "startLine": 2456,
        "startChar": 30,
        "endLine": 2456,
        "endChar": 54
      },
      "revId": "ef69169e528e6482c955b6d61abd9146733f3ae7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a082a50_3418b997",
        "filename": "src/ic/ic.cc",
        "patchSetId": 5
      },
      "lineNbr": 2456,
      "author": {
        "id": 1162379
      },
      "writtenOn": "2018-07-27T01:17:41Z",
      "side": 1,
      "message": "Done --- However, I\u0027m not sure about something:\n\nIf a fast-clone-able Map is deprecated and we reach this point, and do the generic clone, doesn\u0027t that introduce extra polymorphism too? e.g:\n\n```\nfunction clone(o) { return { ...o }; }\n\nfunction test(o) {\n  o \u003d clone(o);\n\n  if (!o.fullName)\n    o.fullName \u003d `${o.firstName} ${o.surName}`;\n\n  return o.fullName;\n}\n\nlet cast \u003d [\n   { firstName: \"helena\", surName: \"bonham carter\" },\n   { firstName: \"brad\", surName: \"pitt\" },\n   { firstName: \"ed\", surName: \"norton\" }\n];\n\ncast.map(test).join(\", \"); // LoadICs and StoreIC all see identical maps, all monomorphic\ncast[1] \u003d { fullName: \"brad pitt\" }; // sneaky map deprecation!\ncast.map(test).join(\", \"); // LoadICs and StoreIC now polymorphic with initial fast map and\n                           // unrelated generic map, no deprecation\n```\n\nIt probably doesn\u0027t matter, in practice, but I think it pollutes the 2 o.fullName LoadICs and isn\u0027t able to be removed until a GC (but could potentially pollute the feedback vector much longer)",
      "parentUuid": "ff275a86_ae28fa1d",
      "range": {
        "startLine": 2456,
        "startChar": 30,
        "endLine": 2456,
        "endChar": 54
      },
      "revId": "ef69169e528e6482c955b6d61abd9146733f3ae7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6628fdc3_d0f132e3",
        "filename": "src/ic/ic.cc",
        "patchSetId": 5
      },
      "lineNbr": 2456,
      "author": {
        "id": 1115935
      },
      "writtenOn": "2018-07-27T01:58:14Z",
      "side": 1,
      "message": "I don\u0027t think your example triggers any map deprecations, but I get your point anyway: your concern is that the slow path returns a clone with a different map? I considered that, but wasn\u0027t sure how important that is. I\u0027d also be fine with not doing the early return, i.e. just have:\n\n  MigrateDeprecated(source);\n\nand continue with the regular flow. Does that address your concern?",
      "parentUuid": "4a082a50_3418b997",
      "range": {
        "startLine": 2456,
        "startChar": 30,
        "endLine": 2456,
        "endChar": 54
      },
      "revId": "ef69169e528e6482c955b6d61abd9146733f3ae7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25c77190_826ed0ec",
        "filename": "src/ic/ic.cc",
        "patchSetId": 5
      },
      "lineNbr": 2456,
      "author": {
        "id": 1162379
      },
      "writtenOn": "2018-07-27T03:45:11Z",
      "side": 1,
      "message": "Anyway, if it didn’t early return, that would keep it monomorphic in the regression test, right? So that’s probably good. Will try tomorrow.",
      "parentUuid": "6628fdc3_d0f132e3",
      "range": {
        "startLine": 2456,
        "startChar": 30,
        "endLine": 2456,
        "endChar": 54
      },
      "revId": "ef69169e528e6482c955b6d61abd9146733f3ae7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a3d61fd_75bdf17b",
        "filename": "src/ic/ic.cc",
        "patchSetId": 5
      },
      "lineNbr": 2456,
      "author": {
        "id": 1162379
      },
      "writtenOn": "2018-07-27T12:43:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "25c77190_826ed0ec",
      "range": {
        "startLine": 2456,
        "startChar": 30,
        "endLine": 2456,
        "endChar": 54
      },
      "revId": "ef69169e528e6482c955b6d61abd9146733f3ae7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}