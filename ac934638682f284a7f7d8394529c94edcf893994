{
  "comments": [
    {
      "key": {
        "uuid": "a3ed337c_88b26c7b",
        "filename": "src/runtime/runtime-test.cc",
        "patchSetId": 7
      },
      "lineNbr": 290,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-04-08T14:25:13Z",
      "side": 1,
      "message": "nit: These and other related comments read like invalid inputs are ignored, while we in fact crash in non-fuzzing configs.",
      "revId": "ac934638682f284a7f7d8394529c94edcf893994",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3293d254_ec78abbf",
        "filename": "src/runtime/runtime-test.cc",
        "patchSetId": 7
      },
      "lineNbr": 290,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-04-14T10:48:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a3ed337c_88b26c7b",
      "revId": "ac934638682f284a7f7d8394529c94edcf893994",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "373be45a_4332b638",
        "filename": "src/runtime/runtime-test.cc",
        "patchSetId": 7
      },
      "lineNbr": 800,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-04-08T14:25:13Z",
      "side": 1,
      "message": "I don\u0027t think this or below is used by fuzzers, is it? In that case we should just CHECK the condition here.\n\nSame below. machenbach@: we have a whitelist of runtime functions used by fuzzers, right? Or is that not used by all fuzzers?",
      "revId": "ac934638682f284a7f7d8394529c94edcf893994",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da742821_b5968e3c",
        "filename": "src/runtime/runtime-test.cc",
        "patchSetId": 7
      },
      "lineNbr": 800,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-04-14T10:48:58Z",
      "side": 1,
      "message": "You\u0027re right that it\u0027s not used by fuzzers. It makes sense to me though to keep calling InvalidUse even then, it does no harm but it makes it easy to enable an intrinsic for fuzzing by just adding it to the whitelist in runtime.cc.\n\nWhile looking at that whitelist, I realized that there exists a flag --allow-natives-for-fuzzing that might have become redundant with the new --fuzzing flag.\n\nMichael, what do you think about those two points?",
      "parentUuid": "373be45a_4332b638",
      "revId": "ac934638682f284a7f7d8394529c94edcf893994",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96b8ffa3_13217493",
        "filename": "src/runtime/runtime-test.cc",
        "patchSetId": 7
      },
      "lineNbr": 800,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-04-14T10:58:14Z",
      "side": 1,
      "message": "Why not add a second InvalidUse helper that does not become more permissive when fuzzing? Otherwise we introduce more behavioral changes between fuzzers and the default V8 config than necessary.",
      "parentUuid": "da742821_b5968e3c",
      "revId": "ac934638682f284a7f7d8394529c94edcf893994",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d907e054_cd7a780b",
        "filename": "src/runtime/runtime-test.cc",
        "patchSetId": 7
      },
      "lineNbr": 800,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-04-14T11:10:00Z",
      "side": 1,
      "message": "Why not add another helper? The same arguments as before, plus a new argument: simplicity.\n\nI don\u0027t know what you mean by \"introduce more behavioral changes\".",
      "parentUuid": "96b8ffa3_13217493",
      "revId": "ac934638682f284a7f7d8394529c94edcf893994",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa8f1fc9_b6632be3",
        "filename": "src/runtime/runtime-test.cc",
        "patchSetId": 7
      },
      "lineNbr": 800,
      "author": {
        "id": 1115956
      },
      "writtenOn": "2020-04-14T11:30:36Z",
      "side": 1,
      "message": "--allow-natives-for-fuzzing is now redundant. We could remove it or just imply it by --fuzzing. But I still need the other flag that whitelists for differential fuzzing as there are fewer runtime functions.\n\nIn general we only need to be permissive in those runtime functions that are whitelisted. But I agree with Georg that it doesn\u0027t hurt to consistently use the new InvalidUse for all functions.",
      "parentUuid": "d907e054_cd7a780b",
      "revId": "ac934638682f284a7f7d8394529c94edcf893994",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ccbdcde_0fbbc273",
        "filename": "src/runtime/runtime-test.cc",
        "patchSetId": 7
      },
      "lineNbr": 800,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-04-14T11:31:58Z",
      "side": 1,
      "message": "\u003e I don\u0027t know what you mean by \"introduce more behavioral changes\".\n\nInvalidUse crashes does nothing on fuzzers, and crashes on the CHECK in the default config. That is the behavioral difference I meant.\n\nIn some cases, like DeoptimizeNow, that is what we actually want, since fuzzers are known to use the functions and can pass invalid arguments in or call them in invalid situations.\n\nBut in other cases the behavior should *not* diverge between fuzzers and the default config. For example, AFAIK Runtime_DebugTrackRetainingPath should never be called by a fuzzer. Silently doing nothing may hide real bugs that would otherwise be exposed.\n\nSo what I am arguing for is to make the set of \"runtime functions that are more permissive in --fuzzing mode\" as small as possible. Maybe just reuse the list in Runtime::IsWhitelistedForFuzzing?",
      "parentUuid": "d907e054_cd7a780b",
      "revId": "ac934638682f284a7f7d8394529c94edcf893994",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "858567b1_9a05ee05",
        "filename": "src/runtime/runtime-test.cc",
        "patchSetId": 7
      },
      "lineNbr": 800,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-04-14T11:46:58Z",
      "side": 1,
      "message": "This sounds like an orthogonal issue. If you want to protect against certain intrinsics being moved to the fuzzing whitelist, the way to do that is to have a CHECK(!FLAG_fuzzing) or CHECK(!IsWhiteListed) at the top of their code, rather than to hope that the fuzzer generates invalid input that then triggers an assertion failure. I\u0027m happy to add such a CHECK to the top of that intrinsic and any other where it\u0027s important.\n\nI still think it makes sense to use InvalidUse to deal with unexpected input or other conditions in the body of intrinsics. It would be nice if InvalidUse itself could consult the whitelist, but for that we would have to pass around the function id which is a little ugly or use perhaps use a macro, for virtually no benefit.",
      "parentUuid": "1ccbdcde_0fbbc273",
      "revId": "ac934638682f284a7f7d8394529c94edcf893994",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "355bdd39_d597a3b2",
        "filename": "src/runtime/runtime-test.cc",
        "patchSetId": 7
      },
      "lineNbr": 800,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-04-14T12:14:18Z",
      "side": 1,
      "message": "Rephrasing to attempt to clarify:\n\nThe current implementation of `InvalidUse` makes runtime functions that call `InvalidUse` more permissive regarding system state when --fuzzing is passed. My point is that this should only be done for the small set of functions that is explicitly called by JS code generated by fuzzers. Let me call that set of functions FuzzerFunctions.\n\nSo IMHO: \n- `InvalidUse` is not intended for general use and should be called something specific like `CrashUnlessFuzzing` or so.\n- Functions in the FuzzerFunctions set should call `CrashUnlessFuzzing`.\n- Functions not in the FuzzerFunctions set should just CHECK() the condition directly.\n\nThat said, I don\u0027t have a super-strong opinion. If everyone agrees I\u0027m also okay with landing the current state.",
      "parentUuid": "858567b1_9a05ee05",
      "revId": "ac934638682f284a7f7d8394529c94edcf893994",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1aedf677_a5c21cd6",
        "filename": "test/inspector/debugger/asm-js-breakpoint-before-exec-expected.txt",
        "patchSetId": 7
      },
      "lineNbr": 8,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-04-08T14:25:13Z",
      "side": 1,
      "message": "If your q was regarding this and below, you changed the definition of the function (it now has fewer lines and statements) thus the line numbers and # of breakpoints here change.",
      "revId": "ac934638682f284a7f7d8394529c94edcf893994",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}