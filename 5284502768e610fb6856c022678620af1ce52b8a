{
  "comments": [
    {
      "key": {
        "uuid": "d31c3583_081d5751",
        "filename": "src/objects.cc",
        "patchSetId": 1
      },
      "lineNbr": 4625,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2018-11-20T14:45:11Z",
      "side": 1,
      "message": "Maybe\n  if (FLAG_track_constant_fields) return NumberOfFields();\nor",
      "revId": "5284502768e610fb6856c022678620af1ce52b8a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4d1846e_7fea6895",
        "filename": "src/objects.cc",
        "patchSetId": 1
      },
      "lineNbr": 4630,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2018-11-20T14:45:11Z",
      "side": 1,
      "message": "... or\n  \u0026\u0026 (!FLAG_track_constant_fields || descriptors-\u003eGetDetails(i).constness() \u003d\u003d PropertyConstness::kMutable)",
      "revId": "5284502768e610fb6856c022678620af1ce52b8a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c733cd1b_4a8bc039",
        "filename": "src/objects.cc",
        "patchSetId": 1
      },
      "lineNbr": 4630,
      "author": {
        "id": 1118629
      },
      "writtenOn": "2018-11-21T06:03:04Z",
      "side": 1,
      "message": "Are not all fields mutable when constant field tracking is off?",
      "parentUuid": "a4d1846e_7fea6895",
      "revId": "5284502768e610fb6856c022678620af1ce52b8a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f9486df_1f67e0e4",
        "filename": "src/objects.cc",
        "patchSetId": 1
      },
      "lineNbr": 4630,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2018-11-21T10:22:11Z",
      "side": 1,
      "message": "Exactly, so we can skip checking the constness (the FLAG_track_constant_fields is a constant, so the compiler can remove the second part away if it\u0027s off).",
      "parentUuid": "c733cd1b_4a8bc039",
      "revId": "5284502768e610fb6856c022678620af1ce52b8a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ddff122f_fba0031b",
        "filename": "src/objects.cc",
        "patchSetId": 1
      },
      "lineNbr": 4630,
      "author": {
        "id": 1118629
      },
      "writtenOn": "2018-11-21T14:31:46Z",
      "side": 1,
      "message": "I would prefer to keep the condition readable, but if you feel strongly about this, I can change it.",
      "parentUuid": "7f9486df_1f67e0e4",
      "revId": "5284502768e610fb6856c022678620af1ce52b8a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7749c12c_a0dc2ee6",
        "filename": "src/objects/map-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 1118629
      },
      "writtenOn": "2018-11-20T14:27:52Z",
      "side": 1,
      "message": "Is there some hard limit on overall field count we should check?",
      "range": {
        "startLine": 153,
        "startChar": 4,
        "endLine": 153,
        "endChar": 69
      },
      "revId": "5284502768e610fb6856c022678620af1ce52b8a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85a87ed0_10409aa0",
        "filename": "src/objects/map-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2018-11-20T14:45:11Z",
      "side": 1,
      "message": "The hard limit is kMaxNumberOfDescriptors. But I guess we may just add a couple of STATIC_ASSERTs that kMaxNumberOfDescriptors \u003e kMaxFastProperties \u003e kFastPropertiesSoftLimit.",
      "parentUuid": "7749c12c_a0dc2ee6",
      "range": {
        "startLine": 153,
        "startChar": 4,
        "endLine": 153,
        "endChar": 69
      },
      "revId": "5284502768e610fb6856c022678620af1ce52b8a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48f65d97_1ba4b3cb",
        "filename": "src/objects/map-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 1118629
      },
      "writtenOn": "2018-11-21T06:03:04Z",
      "side": 1,
      "message": "Unfortunately, even if NumberOfMutableFields() is low, the overall number of fields might be high, so we might need some protection.",
      "parentUuid": "85a87ed0_10409aa0",
      "range": {
        "startLine": 153,
        "startChar": 4,
        "endLine": 153,
        "endChar": 69
      },
      "revId": "5284502768e610fb6856c022678620af1ce52b8a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "157a1f95_97c21140",
        "filename": "src/objects/map-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2018-11-21T10:22:11Z",
      "side": 1,
      "message": "I like your idea of counting both all fields and mutable fields and then do the safe heuristics here.",
      "parentUuid": "48f65d97_1ba4b3cb",
      "range": {
        "startLine": 153,
        "startChar": 4,
        "endLine": 153,
        "endChar": 69
      },
      "revId": "5284502768e610fb6856c022678620af1ce52b8a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf5603fb_b51bf57b",
        "filename": "src/objects/map-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 1118629
      },
      "writtenOn": "2018-11-21T14:31:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "157a1f95_97c21140",
      "range": {
        "startLine": 153,
        "startChar": 4,
        "endLine": 153,
        "endChar": 69
      },
      "revId": "5284502768e610fb6856c022678620af1ce52b8a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4623e827_72a7c161",
        "filename": "src/objects/map-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 157,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2018-11-20T14:45:11Z",
      "side": 1,
      "message": "Why not NumberOfMutableFields() ?",
      "range": {
        "startLine": 157,
        "startChar": 19,
        "endLine": 157,
        "endChar": 33
      },
      "revId": "5284502768e610fb6856c022678620af1ce52b8a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7a0673c_00fe6e08",
        "filename": "src/objects/map-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 157,
      "author": {
        "id": 1118629
      },
      "writtenOn": "2018-11-21T06:03:04Z",
      "side": 1,
      "message": "In some workloads, objects are used as hash tables and those objects often have all fields constant. If we use NumberOfMutableFields here, then those objects would never go to dictionary mode.",
      "parentUuid": "4623e827_72a7c161",
      "range": {
        "startLine": 157,
        "startChar": 19,
        "endLine": 157,
        "endChar": 33
      },
      "revId": "5284502768e610fb6856c022678620af1ce52b8a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d234168f_4eddfd72",
        "filename": "src/objects/map-inl.h",
        "patchSetId": 1
      },
      "lineNbr": 157,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2018-11-21T10:22:11Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f7a0673c_00fe6e08",
      "range": {
        "startLine": 157,
        "startChar": 19,
        "endLine": 157,
        "endChar": 33
      },
      "revId": "5284502768e610fb6856c022678620af1ce52b8a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}