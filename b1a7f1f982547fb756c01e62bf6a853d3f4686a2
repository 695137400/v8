{
  "comments": [
    {
      "key": {
        "uuid": "78f45617_084b735f",
        "filename": "src/DEPS",
        "patchSetId": 12
      },
      "lineNbr": 41,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2018-05-10T18:42:08Z",
      "side": 1,
      "message": "Why do we need this?",
      "revId": "b1a7f1f982547fb756c01e62bf6a853d3f4686a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2140dc6d_f8b947a3",
        "filename": "src/DEPS",
        "patchSetId": 12
      },
      "lineNbr": 41,
      "author": {
        "id": 1115880
      },
      "writtenOn": "2018-05-10T23:18:55Z",
      "side": 1,
      "message": "It starts with style guide saying - stop using -inl.h and put implementation for inline methods/templates into .h file.\nOnce you do that, you can\u0027t include e.g. objects-inl.h into js-locale.h, because presubmit check throws an error.\nIf I just pick necessary header, src/heap/incremental-marking.h (needed for ACCESSORS()), and add it to js-locale.h, presubmit fails again, but this time saying DEPS file has -src/heap.\n\nThis line actually cancels that -src/heap and allows me to include the file directly. I don\u0027t think this is a big problem, since all other code includes that file indirectly by including objects-inl.h.",
      "parentUuid": "78f45617_084b735f",
      "revId": "b1a7f1f982547fb756c01e62bf6a853d3f4686a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74624af1_61ac3940",
        "filename": "src/DEPS",
        "patchSetId": 12
      },
      "lineNbr": 41,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2018-05-11T21:13:51Z",
      "side": 1,
      "message": "Unfortunately, we don\u0027t follow that style rule at all. We just create -inl.h files for the ACCESSORS. I\u0027d say just follow the existing conventions in V8 and create js-locale-inl.h",
      "parentUuid": "2140dc6d_f8b947a3",
      "revId": "b1a7f1f982547fb756c01e62bf6a853d3f4686a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45a92777_c4c1ed47",
        "filename": "src/bootstrapper.cc",
        "patchSetId": 12
      },
      "lineNbr": 4403,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2018-05-10T18:42:08Z",
      "side": 1,
      "message": "This should be 1 as per the spec because optional args aren\u0027t counted.",
      "range": {
        "startLine": 4403,
        "startChar": 35,
        "endLine": 4403,
        "endChar": 36
      },
      "revId": "b1a7f1f982547fb756c01e62bf6a853d3f4686a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6308dc1a_99d44a4c",
        "filename": "src/bootstrapper.cc",
        "patchSetId": 12
      },
      "lineNbr": 4403,
      "author": {
        "id": 1115880
      },
      "writtenOn": "2018-05-10T23:18:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "45a92777_c4c1ed47",
      "range": {
        "startLine": 4403,
        "startChar": 35,
        "endLine": 4403,
        "endChar": 36
      },
      "revId": "b1a7f1f982547fb756c01e62bf6a853d3f4686a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4e1bf30_4d0129fb",
        "filename": "src/bootstrapper.cc",
        "patchSetId": 12
      },
      "lineNbr": 4433,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2018-05-10T18:42:08Z",
      "side": 1,
      "message": "Looks like this isn\u0027t exposed in the spec?",
      "revId": "b1a7f1f982547fb756c01e62bf6a853d3f4686a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f38640b_65e08140",
        "filename": "src/bootstrapper.cc",
        "patchSetId": 12
      },
      "lineNbr": 4433,
      "author": {
        "id": 1115880
      },
      "writtenOn": "2018-05-10T23:18:55Z",
      "side": 1,
      "message": "It should be (for both of them). I took them from Zibi\u0027s polyfill implementation - https://github.com/zbraniecki/Intl.js/commit/ac8f37dc7c32df9fe90242abf46005a2e2f79479\n\nShould we file a spec bug, or remove from code (I prefer 1)?",
      "parentUuid": "c4e1bf30_4d0129fb",
      "revId": "b1a7f1f982547fb756c01e62bf6a853d3f4686a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e94c49aa_5ee12105",
        "filename": "src/bootstrapper.cc",
        "patchSetId": 12
      },
      "lineNbr": 4433,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2018-05-11T21:13:51Z",
      "side": 1,
      "message": "We can\u0027t ship these methods unless they\u0027re spec\u0027d, but it\u0027s also pretty late in the proposal staging process so I\u0027m not sure if we can add these at this point.\n\nLet\u0027s remove them for now, we can always add it back later if it does make it to the spec.",
      "parentUuid": "2f38640b_65e08140",
      "revId": "b1a7f1f982547fb756c01e62bf6a853d3f4686a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbd03103_ad3e1b28",
        "filename": "src/bootstrapper.cc",
        "patchSetId": 12
      },
      "lineNbr": 4442,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2018-05-10T18:42:08Z",
      "side": 1,
      "message": "This doesn\u0027t seem like it\u0027s part of the spec?",
      "revId": "b1a7f1f982547fb756c01e62bf6a853d3f4686a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5b1d829_a6b5d500",
        "filename": "src/bootstrapper.cc",
        "patchSetId": 12
      },
      "lineNbr": 4442,
      "author": {
        "id": 1115880
      },
      "writtenOn": "2018-05-10T23:18:55Z",
      "side": 1,
      "message": "See above.",
      "parentUuid": "cbd03103_ad3e1b28",
      "revId": "b1a7f1f982547fb756c01e62bf6a853d3f4686a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13a9fd2b_6a5b89e0",
        "filename": "src/bootstrapper.cc",
        "patchSetId": 12
      },
      "lineNbr": 4442,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2018-05-11T21:13:51Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a5b1d829_a6b5d500",
      "revId": "b1a7f1f982547fb756c01e62bf6a853d3f4686a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "88d81b4a_37a9faee",
        "filename": "src/builtins/builtins-intl.cc",
        "patchSetId": 12
      },
      "lineNbr": 528,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2018-05-10T18:42:08Z",
      "side": 1,
      "message": "Shouldn\u0027t this be !tag-\u003eIsString() || !tag-\u003eIsJSReceiver() as per the spec?",
      "revId": "b1a7f1f982547fb756c01e62bf6a853d3f4686a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca598c88_e090d1ff",
        "filename": "src/builtins/builtins-intl.cc",
        "patchSetId": 12
      },
      "lineNbr": 528,
      "author": {
        "id": 1115880
      },
      "writtenOn": "2018-05-10T23:18:55Z",
      "side": 1,
      "message": "If Type(tag) is not String or Object...\n\nI read this as !(String or Object) which is equivalent to !String and !Object.\n\nAs you write it, something can be not a Name and be a JSReceiver, (!false || !true), which will trigger the if, and throw. I don\u0027t think we want that. Am I missing something?",
      "parentUuid": "88d81b4a_37a9faee",
      "revId": "b1a7f1f982547fb756c01e62bf6a853d3f4686a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b78dba4_bba08f14",
        "filename": "src/builtins/builtins-intl.cc",
        "patchSetId": 12
      },
      "lineNbr": 528,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2018-05-11T21:13:51Z",
      "side": 1,
      "message": "Yeah, re-reading the spec I think what you say makes sense. We should totally reword the spec to be clearer. I\u0027ll file a spec bug.",
      "parentUuid": "ca598c88_e090d1ff",
      "revId": "b1a7f1f982547fb756c01e62bf6a853d3f4686a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61ecdb6c_a1fbf55b",
        "filename": "src/builtins/builtins-intl.cc",
        "patchSetId": 12
      },
      "lineNbr": 533,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2018-05-11T21:13:51Z",
      "side": 1,
      "message": "The ToString is observable behavior, so we can\u0027t do this. This needs a IsJSLocale check:\n\n  if (tag-\u003eIsJSLocale()) { \n     locale_string \u003d Handle\u003cJSLocale\u003e::cast(tag)-\u003elocale()) \n  } else {\n    .. to string call ..\n  }",
      "revId": "b1a7f1f982547fb756c01e62bf6a853d3f4686a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "211c3133_d3d2450c",
        "filename": "src/builtins/builtins-intl.cc",
        "patchSetId": 12
      },
      "lineNbr": 562,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2018-05-10T18:42:08Z",
      "side": 1,
      "message": "The CHECK_RECEIVER macro also does the casting to JSLocale. So this can be simplified as\n  return locale_holder-\u003elanguage();\n\nSame for the builtins below.",
      "range": {
        "startLine": 562,
        "startChar": 9,
        "endLine": 562,
        "endChar": 32
      },
      "revId": "b1a7f1f982547fb756c01e62bf6a853d3f4686a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "676ab4ae_b68fbaf3",
        "filename": "src/builtins/builtins-intl.cc",
        "patchSetId": 12
      },
      "lineNbr": 562,
      "author": {
        "id": 1115880
      },
      "writtenOn": "2018-05-10T23:18:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "211c3133_d3d2450c",
      "range": {
        "startLine": 562,
        "startChar": 9,
        "endLine": 562,
        "endChar": 32
      },
      "revId": "b1a7f1f982547fb756c01e62bf6a853d3f4686a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "174117a4_4cf7298f",
        "filename": "src/objects.cc",
        "patchSetId": 12
      },
      "lineNbr": 3129,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2018-05-10T18:42:08Z",
      "side": 1,
      "message": "Missing typedef for INTL_SUPPORT",
      "revId": "b1a7f1f982547fb756c01e62bf6a853d3f4686a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80db1fba_77552cd4",
        "filename": "src/objects.cc",
        "patchSetId": 12
      },
      "lineNbr": 3129,
      "author": {
        "id": 1115880
      },
      "writtenOn": "2018-05-10T23:18:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "174117a4_4cf7298f",
      "revId": "b1a7f1f982547fb756c01e62bf6a853d3f4686a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9d6ef33_48b2b8b4",
        "filename": "src/objects.h",
        "patchSetId": 12
      },
      "lineNbr": 482,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2018-05-10T18:42:08Z",
      "side": 1,
      "message": "Missing typedef for INTL_SUPPORT. Here and below.",
      "revId": "b1a7f1f982547fb756c01e62bf6a853d3f4686a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e83b952_9526d80a",
        "filename": "src/objects.h",
        "patchSetId": 12
      },
      "lineNbr": 482,
      "author": {
        "id": 1115880
      },
      "writtenOn": "2018-05-10T23:18:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b9d6ef33_48b2b8b4",
      "revId": "b1a7f1f982547fb756c01e62bf6a853d3f4686a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f8860c2_1ec6f41a",
        "filename": "src/objects/js-locale.cc",
        "patchSetId": 12
      },
      "lineNbr": 50,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2018-05-10T18:42:08Z",
      "side": 1,
      "message": "Previously with the javascript implementation, we sanitized the options object in our intl.js code which handled all the errors.\n\nBut now, this can potentially throw, so we can\u0027t use ToHandleChecked here. JSReceiver::GetProperty could throw an exception and return an empty MaybeHandle\u003cObject\u003e(). You\u0027ll have to check for an error like this:\n\n  Handle\u003cObject\u003e object;\n  ASSIGN_RETURN_ON_EXCEPTION_VALUE(\n      isolate, object, JSReceiver::GetProperty(options,str), Nothing\u003cbool\u003e());\n\nHere, we get a MaybeHandle\u003cObject\u003e and try to cast to a Handle\u003cObject\u003e and if that fails, we return Nothing\u003cbool\u003e(). \n\nWe use Nothing\u003cbool\u003e() to denote an exception, Just(true)/Just(false) for regular return values. You can return `Just(true)` or `Just(false)` just like you return true or false currently.\n\nThis also means that we\u0027ll have to refactor the ExtractStringSetting function to return a Maybe\u003cbool\u003e. Then you\u0027ll have to change the call to check if this Maybe\u003cbool\u003e is nothing like this:\n\n   Maybe\u003cbool\u003e found \u003d ExtractStringSetting(isolate, options, option_to_bcp47.first,\n                                            \u0026value_unicode);\n   MAYBE_RETURN(found, Nothing\u003cbool\u003e());\n   if (!found.FromJust()) {\n      // Skip this key, user didn\u0027t specify it in options.\n      continue;\n   }\n   DCHECK(found.FromJust());\n\nYou\u0027ll have to make similar changes to InsertOptionsIntoLocale to return a Maybe\u003cbool\u003e.",
      "revId": "b1a7f1f982547fb756c01e62bf6a853d3f4686a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e9da67e_66e0e811",
        "filename": "src/objects/js-locale.cc",
        "patchSetId": 12
      },
      "lineNbr": 50,
      "author": {
        "id": 1115880
      },
      "writtenOn": "2018-05-10T23:18:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3f8860c2_1ec6f41a",
      "revId": "b1a7f1f982547fb756c01e62bf6a853d3f4686a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b020b105_878e6fad",
        "filename": "src/objects/js-locale.cc",
        "patchSetId": 12
      },
      "lineNbr": 121,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2018-05-10T18:42:08Z",
      "side": 1,
      "message": "Should we be checking the status for an error? Both here and elsewhere in this function.",
      "range": {
        "startLine": 121,
        "startChar": 3,
        "endLine": 121,
        "endChar": 26
      },
      "revId": "b1a7f1f982547fb756c01e62bf6a853d3f4686a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "670de802_e7a5e83f",
        "filename": "src/objects/js-locale.cc",
        "patchSetId": 12
      },
      "lineNbr": 121,
      "author": {
        "id": 1115880
      },
      "writtenOn": "2018-05-10T23:18:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b020b105_878e6fad",
      "range": {
        "startLine": 121,
        "startChar": 3,
        "endLine": 121,
        "endChar": 26
      },
      "revId": "b1a7f1f982547fb756c01e62bf6a853d3f4686a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "072468c5_79e5d231",
        "filename": "src/objects/js-locale.cc",
        "patchSetId": 12
      },
      "lineNbr": 177,
      "author": {
        "id": 1158954
      },
      "writtenOn": "2018-05-10T18:42:08Z",
      "side": 1,
      "message": "This can be more strictly typed as Handle\u003cJSLocale\u003e and then you can remove all the casts in here and PopulateLocaleWithUnicodeTags.",
      "range": {
        "startLine": 177,
        "startChar": 32,
        "endLine": 177,
        "endChar": 62
      },
      "revId": "b1a7f1f982547fb756c01e62bf6a853d3f4686a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf8b03eb_68e08f48",
        "filename": "src/objects/js-locale.cc",
        "patchSetId": 12
      },
      "lineNbr": 177,
      "author": {
        "id": 1115880
      },
      "writtenOn": "2018-05-10T23:18:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "072468c5_79e5d231",
      "range": {
        "startLine": 177,
        "startChar": 32,
        "endLine": 177,
        "endChar": 62
      },
      "revId": "b1a7f1f982547fb756c01e62bf6a853d3f4686a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}