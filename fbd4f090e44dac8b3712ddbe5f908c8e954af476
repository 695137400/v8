{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "45574ec6_be19ef19",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 44
      },
      "lineNbr": 0,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2023-11-20T11:03:10Z",
      "side": 1,
      "message": "Few more comments",
      "revId": "fbd4f090e44dac8b3712ddbe5f908c8e954af476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2933d4b3_7d8b532c",
        "filename": "src/handles/traced-handles.cc",
        "patchSetId": 44
      },
      "lineNbr": 850,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2023-11-20T11:03:10Z",
      "side": 1,
      "message": "This is relatively slow (we know this from perf profiles) and true for the majority of wrappers. Since all of this is approximate, we can only do this in the atomic pause and improve concurrent marking time?",
      "range": {
        "startLine": 850,
        "startChar": 18,
        "endLine": 850,
        "endChar": 24
      },
      "revId": "fbd4f090e44dac8b3712ddbe5f908c8e954af476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d53b3fd9_03370d8e",
        "filename": "src/handles/traced-handles.cc",
        "patchSetId": 44
      },
      "lineNbr": 850,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2023-11-21T11:15:20Z",
      "side": 1,
      "message": "Done (but I don\u0027t expect it will have an impact on benchmarks scores)",
      "parentUuid": "2933d4b3_7d8b532c",
      "range": {
        "startLine": 850,
        "startChar": 18,
        "endLine": 850,
        "endChar": 24
      },
      "revId": "fbd4f090e44dac8b3712ddbe5f908c8e954af476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebfe4872_4c107a3a",
        "filename": "src/handles/traced-handles.cc",
        "patchSetId": 44
      },
      "lineNbr": 1102,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2023-11-20T11:03:10Z",
      "side": 1,
      "message": "I think this should use `ObjectInYoungGeneration()` as we are only using `is_in_young_list()` for the iterations over nodes.",
      "range": {
        "startLine": 1102,
        "startChar": 12,
        "endLine": 1102,
        "endChar": 28
      },
      "revId": "fbd4f090e44dac8b3712ddbe5f908c8e954af476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "38be8089_9045babb",
        "filename": "src/handles/traced-handles.cc",
        "patchSetId": 44
      },
      "lineNbr": 1102,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2023-11-21T11:15:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ebfe4872_4c107a3a",
      "range": {
        "startLine": 1102,
        "startChar": 12,
        "endLine": 1102,
        "endChar": 28
      },
      "revId": "fbd4f090e44dac8b3712ddbe5f908c8e954af476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28d0774c_12305ffe",
        "filename": "src/heap/cppgc-js/unified-heap-marking-state-inl.h",
        "patchSetId": 44
      },
      "lineNbr": 32,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2023-11-20T11:03:10Z",
      "side": 1,
      "message": "Reading this code again, I wonder if we should split `MarkAndPush()` for the two use cases:\n- Concurrent processing\n- Main thread processing that DCHECKs that markbit is set but otherwise assumes that object is not a smi, not in read only space, and the object should be marked otherwise.",
      "range": {
        "startLine": 32,
        "startChar": 54,
        "endLine": 32,
        "endChar": 74
      },
      "revId": "fbd4f090e44dac8b3712ddbe5f908c8e954af476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d25a9b31_ccdb9fcb",
        "filename": "src/heap/cppgc-js/unified-heap-marking-state-inl.h",
        "patchSetId": 44
      },
      "lineNbr": 32,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2023-11-21T11:15:20Z",
      "side": 1,
      "message": "I split that off to crrev.com/c/5048912 to make sure these assumptions hold on ToT and benchmarks are happy with it (https://pinpoint-dot-chromeperf.appspot.com/job/160476d10e0000, https://pinpoint-dot-chromeperf.appspot.com/job/1009f6ea0e0000).",
      "parentUuid": "28d0774c_12305ffe",
      "range": {
        "startLine": 32,
        "startChar": 54,
        "endLine": 32,
        "endChar": 74
      },
      "revId": "fbd4f090e44dac8b3712ddbe5f908c8e954af476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d473250_60a05609",
        "filename": "src/heap/cppgc-js/unified-heap-marking-state-inl.h",
        "patchSetId": 44
      },
      "lineNbr": 32,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2023-11-21T15:16:16Z",
      "side": 1,
      "message": "This should not be fine in general but only in your version where you process it again after recording it concurrently.\n\nIn general, we can have a Smi here (or Undefined/True/False) which should trigger the check.",
      "parentUuid": "d25a9b31_ccdb9fcb",
      "range": {
        "startLine": 32,
        "startChar": 54,
        "endLine": 32,
        "endChar": 74
      },
      "revId": "fbd4f090e44dac8b3712ddbe5f908c8e954af476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b05919ff_9ac35377",
        "filename": "src/heap/cppgc-js/unified-heap-marking-state-inl.h",
        "patchSetId": 44
      },
      "lineNbr": 32,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2023-11-21T17:35:46Z",
      "side": 1,
      "message": "Now I understand what you meant (it didn\u0027t make sense to me but I figured I might be missing something and it\u0027s worth at least trying out; anecdotally, if we replace the Smi and should be marked checks with CHECKs, our benchmarks still pass).\n\nWhat you actually suggesting is not a concurrent vs main thread split. It\u0027s a first time visiting an object/node vs revisiting a weak object/node. Visiting it for the first time can also happen on the main thread. Revisiting happens only on the main thread atm.\nHowever, node maybe updated between visiting them for the first time during concurrent marking and revisiting them in the atomic pause. Given that, I don\u0027t think we can assume that they still refer to a valid heap object, aren\u0027t read only, and should be marked.",
      "parentUuid": "7d473250_60a05609",
      "range": {
        "startLine": 32,
        "startChar": 54,
        "endLine": 32,
        "endChar": 74
      },
      "revId": "fbd4f090e44dac8b3712ddbe5f908c8e954af476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1093392c_980cfb6e",
        "filename": "src/heap/cppgc-js/unified-heap-marking-state-inl.h",
        "patchSetId": 44
      },
      "lineNbr": 32,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2023-11-23T10:52:48Z",
      "side": 1,
      "message": "Nodes themselves cannot be updated and are immutable.\n\nThe JS objects can change, so the value of \"is unmodified\" can change. `node-\u003eobject()` is always the same.",
      "parentUuid": "b05919ff_9ac35377",
      "range": {
        "startLine": 32,
        "startChar": 54,
        "endLine": 32,
        "endChar": 74
      },
      "revId": "fbd4f090e44dac8b3712ddbe5f908c8e954af476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a0ef245_2838d7a6",
        "filename": "src/heap/cppgc-js/unified-heap-marking-state-inl.h",
        "patchSetId": 44
      },
      "lineNbr": 32,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2023-11-23T12:03:27Z",
      "side": 1,
      "message": "Sorry, I misphrased.\nWe\u0027re revisiting the `TracedReference`. Even if the node is immutable, the `TracedReference` could now be pointing to another node, no?",
      "parentUuid": "1093392c_980cfb6e",
      "range": {
        "startLine": 32,
        "startChar": 54,
        "endLine": 32,
        "endChar": 74
      },
      "revId": "fbd4f090e44dac8b3712ddbe5f908c8e954af476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3225863_40f8cd77",
        "filename": "src/heap/cppgc-js/unified-heap-marking-state-inl.h",
        "patchSetId": 44
      },
      "lineNbr": 32,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2023-11-23T12:11:27Z",
      "side": 1,
      "message": "Actually, never mind.\nIf we were dealing with a new node, I also couldn\u0027t check that it\u0027s marked as I do now.",
      "parentUuid": "6a0ef245_2838d7a6",
      "range": {
        "startLine": 32,
        "startChar": 54,
        "endLine": 32,
        "endChar": 74
      },
      "revId": "fbd4f090e44dac8b3712ddbe5f908c8e954af476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80f8b7e6_a345f23b",
        "filename": "src/heap/cppgc-js/unified-heap-marking-state-inl.h",
        "patchSetId": 44
      },
      "lineNbr": 32,
      "author": {
        "id": 1356087
      },
      "writtenOn": "2023-11-23T13:52:19Z",
      "side": 1,
      "message": "As discussed offline, I tried splitting the method and unfortunately it doesn\u0027t work because the slot of a traced handle may be updates, in which case we are getting a new node (which just happens to be marked due to black allocation of nodes).",
      "parentUuid": "e3225863_40f8cd77",
      "range": {
        "startLine": 32,
        "startChar": 54,
        "endLine": 32,
        "endChar": 74
      },
      "revId": "fbd4f090e44dac8b3712ddbe5f908c8e954af476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5190ad83_5832f1bf",
        "filename": "src/heap/cppgc-js/unified-heap-marking-state-inl.h",
        "patchSetId": 44
      },
      "lineNbr": 32,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2023-11-27T14:36:41Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "80f8b7e6_a345f23b",
      "range": {
        "startLine": 32,
        "startChar": 54,
        "endLine": 32,
        "endChar": 74
      },
      "revId": "fbd4f090e44dac8b3712ddbe5f908c8e954af476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}