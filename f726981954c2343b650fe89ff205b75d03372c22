{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "139fe866_eef5cf4f",
        "filename": "src/objects/objects.cc",
        "patchSetId": 2
      },
      "lineNbr": 6232,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2020-11-02T08:07:44Z",
      "side": 1,
      "message": "IMO we should separate the asm.js issue from the general problem of the CompilationCacheScript contents dying too early. \n\nMy current understanding of the latter is that heuristics here are incomplete: they only consider the bytecode age of the script-level bytecode, which of course is only executed once per native context and thus reaches old age quickly. So the script entry may be removed, even if a SFI belonging to this script is hot.\n\nAnother q is if `BytecodeArray::IsOld` is even the correct indicator, given that contents of this cache should survive until the next native context is created.\n\nThese are difficult questions, since any increase in cache lifetimes is also a memory regression. We\u0027d have to look at behavior across important benchmarks and real-world perf.\n\nFor the asm.js issue: I guess this is motivated by a particular benchmark? I don\u0027t know this part well enough to comment, except that a weak-to-strong change should be discussed with gc/asm.js owners.",
      "revId": "f726981954c2343b650fe89ff205b75d03372c22",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}