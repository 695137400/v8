{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c0023a87_7f6ebfbc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2022-09-21T06:10:04Z",
      "side": 1,
      "message": "Thanks!",
      "revId": "b218c53b2a110a05e89f3d7389f85d3d36efe623",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3acec095_dbeba148",
        "filename": "src/maglev/maglev-compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 403,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2022-09-21T06:10:04Z",
      "side": 1,
      "message": "For this whole fn family, please add a comment explaining the return value.",
      "revId": "b218c53b2a110a05e89f3d7389f85d3d36efe623",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d8aaa8e7_8b9e261f",
        "filename": "src/maglev/maglev-compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 403,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2022-09-21T08:13:59Z",
      "side": 1,
      "message": "Actually, I can simplify this by passing input locations in by mutable reference",
      "parentUuid": "3acec095_dbeba148",
      "revId": "b218c53b2a110a05e89f3d7389f85d3d36efe623",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d1e5c9b8_765f0694",
        "filename": "src/maglev/maglev-compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 403,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2022-09-21T08:18:39Z",
      "side": 1,
      "message": "Not sure this an improvement - yes it looks cleaner, but now it\u0027s completely invisible at callsites that input_locations is modified. Anyways, leaving the decision up to you.",
      "parentUuid": "d8aaa8e7_8b9e261f",
      "revId": "b218c53b2a110a05e89f3d7389f85d3d36efe623",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ede82a49_34f178eb",
        "filename": "src/maglev/maglev-compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 403,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2022-09-21T08:53:01Z",
      "side": 1,
      "message": "Yeah that\u0027s mutable refs for you, but they\u0027re now the expected way of passing in mutable arguments so I guess blame C++...",
      "parentUuid": "d1e5c9b8_765f0694",
      "revId": "b218c53b2a110a05e89f3d7389f85d3d36efe623",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35c1919f_fb4ac067",
        "filename": "src/maglev/maglev-compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 418,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2022-09-21T06:10:04Z",
      "side": 1,
      "message": "+1 for this comment, input_locations are hard to understand. What creates this encoding, StraightForwardRegisterAllocator::UpdateUse? MarkCheckpointNodes? Where does it skip over unused locations like return values and how can we ensure the logic stays in sync (should we emit marker sync values, at least in debug builds)? Where does it recurse through parent states? A comment here would be great.",
      "revId": "b218c53b2a110a05e89f3d7389f85d3d36efe623",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0fad756_4eff9de2",
        "filename": "src/maglev/maglev-compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 418,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2022-09-21T06:10:28Z",
      "side": 1,
      "message": "Fine in a followup ofc.",
      "parentUuid": "35c1919f_fb4ac067",
      "revId": "b218c53b2a110a05e89f3d7389f85d3d36efe623",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "87615daf_b40161ac",
        "filename": "src/maglev/maglev-compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 418,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2022-09-21T08:13:59Z",
      "side": 1,
      "message": "Follow up sounds good.",
      "parentUuid": "d0fad756_4eff9de2",
      "revId": "b218c53b2a110a05e89f3d7389f85d3d36efe623",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c79111c3_97ba3d22",
        "filename": "src/maglev/maglev-compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 432,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2022-09-21T06:10:04Z",
      "side": 1,
      "message": "nit: while nicely succinct, one now needs to understand the order of operator application (and *foo++ is not a common enough pattern for this to be on top of everyone\u0027s mind). I\u0027d suggest sticking to \n\n```\n EmitDeoptFrameSingleValue(value, *input_location);\n input_location++;\n```\n\nOr alternatively, maintaining an index into input_location, using `input_location[i++]`, and returning `\u0026input_location[i]` at the end.\n\nSame below",
      "revId": "b218c53b2a110a05e89f3d7389f85d3d36efe623",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab35d0cd_f4dd164d",
        "filename": "src/maglev/maglev-compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 432,
      "author": {
        "id": 1175774
      },
      "writtenOn": "2022-09-21T08:13:59Z",
      "side": 1,
      "message": "done (the first option)",
      "parentUuid": "c79111c3_97ba3d22",
      "revId": "b218c53b2a110a05e89f3d7389f85d3d36efe623",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}