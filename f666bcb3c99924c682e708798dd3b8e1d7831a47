{
  "comments": [
    {
      "key": {
        "uuid": "dce82a2f_4c8dbb22",
        "filename": "src/wasm/baseline/liftoff-compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 209,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2018-02-09T14:01:07Z",
      "side": 1,
      "message": "LiftoffRegList::has is a lot more readable than this. Couldn\u0027t RegList also provide a {has} function?",
      "range": {
        "startLine": 209,
        "startChar": 10,
        "endLine": 209,
        "endChar": 38
      },
      "revId": "f666bcb3c99924c682e708798dd3b8e1d7831a47",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "008c7220_272f7860",
        "filename": "src/wasm/baseline/liftoff-compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 209,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2018-02-09T14:06:59Z",
      "side": 1,
      "message": "I totally agree. Currently, {RegList} is just a typedef to {uint32_t} or {uint64_t}. Making this a real class would be nice IMO. One problem is that {RegList} can either store gp reg codes, or fp reg codes. Making it type safe is not that easy. We might need to templatize it, such that it knows whether it\u0027s supposed to store gp or fp register codes.\nAdding it to the code health backlog :)",
      "parentUuid": "dce82a2f_4c8dbb22",
      "range": {
        "startLine": 209,
        "startChar": 10,
        "endLine": 209,
        "endChar": 38
      },
      "revId": "f666bcb3c99924c682e708798dd3b8e1d7831a47",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "40220edf_7ddaeccf",
        "filename": "src/wasm/baseline/liftoff-compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 209,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2018-02-09T14:18:04Z",
      "side": 1,
      "message": "In that case, can you add a wrapper function for this for now?",
      "parentUuid": "008c7220_272f7860",
      "range": {
        "startLine": 209,
        "startChar": 10,
        "endLine": 209,
        "endChar": 38
      },
      "revId": "f666bcb3c99924c682e708798dd3b8e1d7831a47",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6bb26c8f_4c61a7e3",
        "filename": "src/wasm/baseline/liftoff-compiler.cc",
        "patchSetId": 1
      },
      "lineNbr": 209,
      "author": {
        "id": 1177599
      },
      "writtenOn": "2018-02-09T14:19:41Z",
      "side": 1,
      "message": "This code pattern appears all over the place in the different assemblers (outside of liftoff, I mean). If we want to fix this, I think we should refactor it properly everywhere.",
      "parentUuid": "40220edf_7ddaeccf",
      "range": {
        "startLine": 209,
        "startChar": 10,
        "endLine": 209,
        "endChar": 38
      },
      "revId": "f666bcb3c99924c682e708798dd3b8e1d7831a47",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}