{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6f8bebab_a82cf69c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2024-02-01T17:27:45Z",
      "side": 1,
      "message": "lgtm modulo padding",
      "revId": "6fd14e64e9528a6507367b9078c603c61a8a0d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81882ab6_17c864b5",
        "filename": "src/wasm/wasm-objects.h",
        "patchSetId": 7
      },
      "lineNbr": 627,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2024-02-01T17:27:45Z",
      "side": 1,
      "message": "I\u0027m not sure that this padding brings anything given that the start of the object is guaranteed to be aligned only by `kTaggedSize` bytes.\n\nSomething like\n```\n  // TODO(clemensb): If allocation alignment is ever enabled, we might need to add\n  // padding to align entries.\n  static_assert(!USE_ALLOCATION_ALIGNMENT_BOOL);\n```\n\nAlso note that on 64-bit mode with disabled pointer compression the `kEntrySize` will be 20 bytes which will make the every second entry unaligned.",
      "range": {
        "startLine": 627,
        "startChar": 23,
        "endLine": 627,
        "endChar": 36
      },
      "revId": "6fd14e64e9528a6507367b9078c603c61a8a0d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41634d7f_c3b1a7f6",
        "filename": "src/wasm/wasm-objects.h",
        "patchSetId": 7
      },
      "lineNbr": 648,
      "author": {
        "id": 1183889
      },
      "writtenOn": "2024-02-01T17:27:45Z",
      "side": 1,
      "message": "Same here.",
      "revId": "6fd14e64e9528a6507367b9078c603c61a8a0d9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}