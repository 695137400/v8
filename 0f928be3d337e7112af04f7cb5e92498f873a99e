{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6b747d7a_476c17e5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1555292
      },
      "writtenOn": "2022-11-16T04:56:54Z",
      "side": 1,
      "message": "Expose the implemented `GetProfilesCount`, `DeleteAllProfiles` and `GetProfile` methods in the CPUProfiler API",
      "revId": "0f928be3d337e7112af04f7cb5e92498f873a99e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c625af73_262963bd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1118373
      },
      "writtenOn": "2022-11-16T08:50:30Z",
      "side": 1,
      "message": "These functions are used in tests to test internals of the profiler. I don\u0027t think not being used elsewhere is a good reason to expose them through the API.\n\nDo you have a reason why you need these functions?",
      "revId": "0f928be3d337e7112af04f7cb5e92498f873a99e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f49ae45_62174788",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1555292
      },
      "writtenOn": "2022-11-16T15:01:56Z",
      "side": 1,
      "message": "Testing what exactly? That code is not being used somewhere else. I mean, the mentioned tests are just making sure that the private API supports those \"features\", but the profiler itself is not using them. What\u0027s the reason that code exists?\n\nI think it is better to expose them as the HeapProfiler does for more granular control of the profiler itself. Maybe it makes more sense in the HeapProfiler cuz\u0027 of the possible size of a heap snapshot and the memory usage concerns.\n\nWhere I work, we are heavy CPU profile users, we tend to trigger profilers in different circumstances, sometimes our tools may trigger another profile while there is one currently running (which is possible according to the docs); having something like `DeleteAllProfiles` exposed is way way easier than deleting profiles one by one; having a `GetProfile` makes each profile handier, instead of trying to guess which is the exact profile I need by keeping a reference somewhere else, why? I could have that in the profiler itself and it is already implemented.",
      "parentUuid": "c625af73_262963bd",
      "revId": "0f928be3d337e7112af04f7cb5e92498f873a99e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "71fe973e_d6f4dc52",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1118373
      },
      "writtenOn": "2022-11-16T15:55:20Z",
      "side": 1,
      "message": "These tests test the internal implementation of the CpuProfiler. They pose stricter, implementation-dependent expectations than necessary, and it is debatable whether that\u0027s good style. But these tests exist and there is no point in making any changes here.\n\nI can be persuaded that DeleteAllProfiles is useful. Then again, why not just delete the entire CpuProfiler and create a new one?\n\nI don\u0027t think exposing GetProfile makes sense. If you are running multiple profiles at once, you should already have the logic to keep track of these profiles. The integer index also does not match the ProfilerId that you would pass to CpuProfiler::Stop. It breaks abstractions.\n\nThat also makes GetProfilesCount also somewhat useless.\n\nI get that it could make your project more convenient, but I\u0027m very reluctant to change V8\u0027s API as this could mean future maintenance burden. It\u0027s very hard to take things back once they are exposed as part of the API. There are good ways of keeping track of profiles by the embedder, and this is this neither performance nor memory sensitive. So I don\u0027t see a need to add this to the API.\n\nOf course, if Camillo feels differently, I would be happy to defer this decision.",
      "parentUuid": "2f49ae45_62174788",
      "revId": "0f928be3d337e7112af04f7cb5e92498f873a99e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3e365d83_407ad86c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1555292
      },
      "writtenOn": "2022-11-16T17:31:31Z",
      "side": 1,
      "message": "\"I get that it could make your project more convenient, but I\u0027m very reluctant to change V8\u0027s API as this could mean future maintenance burden.\"\n\nI completely agree with that.\n\n\"They pose stricter, implementation-dependent expectations than necessary\"\n\nI have some feelings about this one. If I agree with the \"future API maintenance burden\", this change is not pretending to break the \" internal abstractions\" made for the CPU profiler, the opposite, take advantage of this \"stricter pose\" and make the abstraction almost equal to the exposed abstraction for the \"HeapProfiler\".",
      "parentUuid": "71fe973e_d6f4dc52",
      "revId": "0f928be3d337e7112af04f7cb5e92498f873a99e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e394701e_dada5ca6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1132654
      },
      "writtenOn": "2022-11-22T08:29:52Z",
      "side": 1,
      "message": "+1 on giving some background on this change",
      "parentUuid": "c625af73_262963bd",
      "revId": "0f928be3d337e7112af04f7cb5e92498f873a99e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "88fda708_765000af",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1555292
      },
      "writtenOn": "2022-12-19T04:47:39Z",
      "side": 1,
      "message": "I\u0027ll proceed to abandon this, after a few patches, we solved our \"profiles\" management issue, thanks for taking the time to review this!",
      "revId": "0f928be3d337e7112af04f7cb5e92498f873a99e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:approval_code-owners"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "0f928be3d337e7112af04f7cb5e92498f873a99e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MIN"],"failingAtoms":["label:Code-Review=MAX,user=non_uploader"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MIN"],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "0f928be3d337e7112af04f7cb5e92498f873a99e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "0f928be3d337e7112af04f7cb5e92498f873a99e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "0f928be3d337e7112af04f7cb5e92498f873a99e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}