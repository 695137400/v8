{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3654b8c8_a4d89fa8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2021-08-25T14:51:53Z",
      "side": 1,
      "message": "small review ping",
      "revId": "72bc403881e451766e492bb4aa5c804184f89fb9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d8d64d0_835bb699",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-08-26T06:34:59Z",
      "side": 1,
      "message": "I thought this was still in progress and you were rethinking the approach? How was that resolved?",
      "parentUuid": "3654b8c8_a4d89fa8",
      "revId": "72bc403881e451766e492bb4aa5c804184f89fb9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "be13e5af_9bd0f88a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-08-26T06:41:13Z",
      "side": 1,
      "message": "Never mind, saw the comment code-generator-x64.cc. Will review today.",
      "parentUuid": "0d8d64d0_835bb699",
      "revId": "72bc403881e451766e492bb4aa5c804184f89fb9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d81f7165_220414d7",
        "filename": "src/codegen/interface-descriptors.h",
        "patchSetId": 12
      },
      "lineNbr": 115,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-08-26T07:14:09Z",
      "side": 1,
      "message": "I\u0027d suggest folding these into a single TSANStore descriptor (and rename TSANRelaxedLoad to TSANLoad).",
      "revId": "72bc403881e451766e492bb4aa5c804184f89fb9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "67a68aca_15361e4a",
        "filename": "src/codegen/interface-descriptors.h",
        "patchSetId": 12
      },
      "lineNbr": 115,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2021-08-28T00:39:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d81f7165_220414d7",
      "revId": "72bc403881e451766e492bb4aa5c804184f89fb9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21c42879_6fa131e3",
        "filename": "src/codegen/x64/macro-assembler-x64.cc",
        "patchSetId": 12
      },
      "lineNbr": 542,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-08-26T07:14:09Z",
      "side": 1,
      "message": "Could we fold this with the below and take perhaps an std::memory_order arg? \n\nIn general it\u0027d be nice to have consistent naming conventions for everything related to memory ordering. We currently have AtomicTag internal types (like RelaxedLoadTag) and use these everywhere. Then there\u0027s std::memory_order with a different naming style, and things like the atomic functions in base/. I think we should settle on a consistent style in V8, and define a memory order enum that we can use in places like this.",
      "revId": "72bc403881e451766e492bb4aa5c804184f89fb9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a830492f_e9584c4f",
        "filename": "src/codegen/x64/macro-assembler-x64.cc",
        "patchSetId": 12
      },
      "lineNbr": 542,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2021-08-26T14:55:30Z",
      "side": 1,
      "message": "To clarify, you\u0027re not asking for plumbing the memory order through as a runtime argument to the store helpers, right? That was explicitly decided against in a previous CL that did that, since it affects performance.\n\n\nAs for making the memory order style consistent, I\u0027d like to just use std::memory_order, but that\u0027s not desirable for exhaustiveness checking in switches. The compiler doesn\u0027t have a notion of relaxed or consume or separate release/acquire orders. Rather than typing a lot of \"default: UNREACHABLE()\" I opted for a new enum.\n\nStill, if you don\u0027t think the extra checking for unused memory orders is an issue, I\u0027d like to try to move towards a world where we only have the tags and std::memory_order. I can whip up a doc and get other folks\u0027 opinions.",
      "parentUuid": "21c42879_6fa131e3",
      "revId": "72bc403881e451766e492bb4aa5c804184f89fb9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0628667f_f76368fc",
        "filename": "src/codegen/x64/macro-assembler-x64.cc",
        "patchSetId": 12
      },
      "lineNbr": 542,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2021-08-28T00:39:57Z",
      "side": 1,
      "message": "I think the refactor covered everything you asked for, but it wasn\u0027t as succinct as I\u0027d hoped because SeqCst stores can\u0027t handle immediates due to XCHG, so had to play some template specialization tricks.",
      "parentUuid": "a830492f_e9584c4f",
      "revId": "72bc403881e451766e492bb4aa5c804184f89fb9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4271046d_aafb4fd5",
        "filename": "src/codegen/x64/macro-assembler-x64.cc",
        "patchSetId": 12
      },
      "lineNbr": 542,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-08-30T11:04:33Z",
      "side": 1,
      "message": "\u003e I opted for a new enum.\n\nThis didn\u0027t happen, did it? I do think a new enum makes sense 1. for exhaustive switches and 2. for naming consistency with existing tags (like AcquireLoadTag). This\u0027d be fine in follow-up work though.",
      "parentUuid": "0628667f_f76368fc",
      "revId": "72bc403881e451766e492bb4aa5c804184f89fb9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "171aa13a_05252ec6",
        "filename": "src/compiler/backend/x64/code-generator-x64.cc",
        "patchSetId": 12
      },
      "lineNbr": 333,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-08-26T07:14:09Z",
      "side": 1,
      "message": "This part is entirely determine by the tsan_op and size args, no? Could we avoid it by defining an EmitStore(tsan_op, size) function and calling that from the macro?\n\nIn fact, then maybe you could replace the macro by a function (the string paste below could be replaced by an EmitTSAN(RelaxedLoadTag tag, ...) function and friends).",
      "revId": "72bc403881e451766e492bb4aa5c804184f89fb9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64aefd6e_c55b6ae4",
        "filename": "src/compiler/backend/x64/code-generator-x64.cc",
        "patchSetId": 12
      },
      "lineNbr": 333,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2021-08-27T02:13:30Z",
      "side": 1,
      "message": "I originally didn\u0027t want to make codegen slower for non-TSAN builds. Happy to do this refactoring though, agree it\u0027ll be cleaner.",
      "parentUuid": "171aa13a_05252ec6",
      "revId": "72bc403881e451766e492bb4aa5c804184f89fb9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "96482e56_da789c35",
        "filename": "src/compiler/backend/x64/code-generator-x64.cc",
        "patchSetId": 12
      },
      "lineNbr": 333,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2021-08-28T00:39:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "64aefd6e_c55b6ae4",
      "revId": "72bc403881e451766e492bb4aa5c804184f89fb9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5755286_01a5fc61",
        "filename": "src/compiler/backend/x64/code-generator-x64.cc",
        "patchSetId": 12
      },
      "lineNbr": 336,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-08-26T07:14:09Z",
      "side": 1,
      "message": "Please add a short comment explaining that EmitTSANFoo can\u0027t handle FOR_TESTING.",
      "revId": "72bc403881e451766e492bb4aa5c804184f89fb9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "49017cb0_144b4daa",
        "filename": "src/compiler/backend/x64/code-generator-x64.cc",
        "patchSetId": 12
      },
      "lineNbr": 336,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2021-08-28T00:39:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f5755286_01a5fc61",
      "revId": "72bc403881e451766e492bb4aa5c804184f89fb9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d297ab73_c0ee9337",
        "filename": "src/compiler/backend/x64/code-generator-x64.cc",
        "patchSetId": 12
      },
      "lineNbr": 445,
      "author": {
        "id": 1162439
      },
      "writtenOn": "2021-08-26T07:14:09Z",
      "side": 1,
      "message": "This is now outdated, same below in L463 and L494",
      "range": {
        "startLine": 445,
        "startChar": 51,
        "endLine": 445,
        "endChar": 68
      },
      "revId": "72bc403881e451766e492bb4aa5c804184f89fb9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0f9c5df_477d821a",
        "filename": "src/compiler/backend/x64/code-generator-x64.cc",
        "patchSetId": 12
      },
      "lineNbr": 445,
      "author": {
        "id": 1362925
      },
      "writtenOn": "2021-08-28T00:39:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d297ab73_c0ee9337",
      "range": {
        "startLine": 445,
        "startChar": 51,
        "endLine": 445,
        "endChar": 68
      },
      "revId": "72bc403881e451766e492bb4aa5c804184f89fb9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}