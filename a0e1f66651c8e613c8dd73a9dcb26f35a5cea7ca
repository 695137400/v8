{
  "comments": [
    {
      "key": {
        "uuid": "de55ea6d_4b3b5077",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2020-10-05T10:59:19Z",
      "side": 1,
      "message": "Hi Georg, PTAL at this attempt to fix the stack slot + OSR incompatibility. As we talked, the test is robust (as you can see in PS1, it fails everywhere), while the fix is not ideal. I\u0027ve spent some more hours trying to do it in a more cleaner manner, but after observing pipeline.cc and running different configurations, I can\u0027t find a better solution. Any suggestions are welcome!\n\nAndreas, PTAL if this fix makes sense regarding the original design of the Stack slots feature, thanks!",
      "revId": "a0e1f66651c8e613c8dd73a9dcb26f35a5cea7ca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36b91189_71e57d2f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2020-10-05T11:32:27Z",
      "side": 1,
      "message": "LGTM with nits",
      "revId": "a0e1f66651c8e613c8dd73a9dcb26f35a5cea7ca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c8625b5_65213965",
        "filename": "src/compiler/pipeline.cc",
        "patchSetId": 3
      },
      "lineNbr": 2581,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-10-05T12:37:04Z",
      "side": 1,
      "message": "It\u0027s unclear what that means. I\u0027d drop the comment.",
      "revId": "a0e1f66651c8e613c8dd73a9dcb26f35a5cea7ca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31c252f4_0f49ba4b",
        "filename": "src/compiler/pipeline.cc",
        "patchSetId": 3
      },
      "lineNbr": 2581,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2020-10-05T14:26:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5c8625b5_65213965",
      "revId": "a0e1f66651c8e613c8dd73a9dcb26f35a5cea7ca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d5bbe251_b364b0b6",
        "filename": "src/compiler/pipeline.cc",
        "patchSetId": 3
      },
      "lineNbr": 2582,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-10-05T12:37:04Z",
      "side": 1,
      "message": "Just inline this.",
      "range": {
        "startLine": 2582,
        "startChar": 7,
        "endLine": 2582,
        "endChar": 22
      },
      "revId": "a0e1f66651c8e613c8dd73a9dcb26f35a5cea7ca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b2c6cef_bc9be9e1",
        "filename": "src/compiler/pipeline.cc",
        "patchSetId": 3
      },
      "lineNbr": 2582,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2020-10-05T14:26:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d5bbe251_b364b0b6",
      "range": {
        "startLine": 2582,
        "startChar": 7,
        "endLine": 2582,
        "endChar": 22
      },
      "revId": "a0e1f66651c8e613c8dd73a9dcb26f35a5cea7ca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2703a989_dd004746",
        "filename": "src/compiler/pipeline.cc",
        "patchSetId": 3
      },
      "lineNbr": 2584,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-10-05T12:37:04Z",
      "side": 1,
      "message": "Hmm, can you try to move the osr stuff into InitializeFrameData?",
      "revId": "a0e1f66651c8e613c8dd73a9dcb26f35a5cea7ca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3368abe4_57f6871f",
        "filename": "src/compiler/pipeline.cc",
        "patchSetId": 3
      },
      "lineNbr": 2584,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2020-10-05T14:26:31Z",
      "side": 1,
      "message": "That\u0027s a nice idea, it reduces the repetitiveness. Thanks!",
      "parentUuid": "2703a989_dd004746",
      "revId": "a0e1f66651c8e613c8dd73a9dcb26f35a5cea7ca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36a8758e_ab2d1e2f",
        "filename": "src/compiler/pipeline.cc",
        "patchSetId": 3
      },
      "lineNbr": 3323,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2020-10-05T10:59:19Z",
      "side": 1,
      "message": "I made a couple of attempts to move the following line to a more generic place and doing it unconditionally, in order to avoid duplicating the call I\u0027ve now placed in OptimizeGraph[ForMidTier]. My best attempt was to place the InitializeFrameData call in SelectInstructionsAndAssemble (which calls SelectInstructions in most configurations) and replace this line with a \n\n    CHECK(data-\u003eframe())\n\nBut that still fails for WebAssembly, which calls SelectInstructions from GenerateCodeForWasmFunction, so I decided to leave the conditional call here, closest to the place where the frame is being used. Please let me know if you can think of a better solution.",
      "revId": "a0e1f66651c8e613c8dd73a9dcb26f35a5cea7ca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79126d19_b8d8492b",
        "filename": "test/cctest/test-api.cc",
        "patchSetId": 3
      },
      "lineNbr": 27541,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2020-10-05T11:32:27Z",
      "side": 1,
      "message": "As a nit that you can easily ignore. It turned out to be good practice to add a small enum for the values of write_to_fallback, instead of adding the parameter as bool. It makes calls to ApiNumberChecker so much more readable when you read ApiNumberChecker(..., kWriteToFallback, ...) instead of ApiNumberChecker(..., true, ...).\n\nIf you think consistency with the other parameters is more important, feel free to ignore this comment.",
      "range": {
        "startLine": 27541,
        "startChar": 28,
        "endLine": 27541,
        "endChar": 32
      },
      "revId": "a0e1f66651c8e613c8dd73a9dcb26f35a5cea7ca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe236a63_0ed6ba28",
        "filename": "test/cctest/test-api.cc",
        "patchSetId": 3
      },
      "lineNbr": 27541,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2020-10-05T14:26:31Z",
      "side": 1,
      "message": "Thanks for the idea, it\u0027s more readable indeed. I\u0027ll use the same for the raise_exception parameter.",
      "parentUuid": "79126d19_b8d8492b",
      "range": {
        "startLine": 27541,
        "startChar": 28,
        "endLine": 27541,
        "endChar": 32
      },
      "revId": "a0e1f66651c8e613c8dd73a9dcb26f35a5cea7ca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da166006_85556c31",
        "filename": "test/cctest/test-api.cc",
        "patchSetId": 3
      },
      "lineNbr": 27558,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2020-10-05T11:32:27Z",
      "side": 1,
      "message": "Could you define a constant that gives this magic value \"32\" a name? Or add a comment where this constant is coming from?",
      "range": {
        "startLine": 27558,
        "startChar": 18,
        "endLine": 27558,
        "endChar": 20
      },
      "revId": "a0e1f66651c8e613c8dd73a9dcb26f35a5cea7ca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f99d2658_ef4adbaa",
        "filename": "test/cctest/test-api.cc",
        "patchSetId": 3
      },
      "lineNbr": 27558,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2020-10-05T14:26:31Z",
      "side": 1,
      "message": "My bad, this should have been 1. I put 32 here only for ease of debugging (because it converts to a valid Smi).\nBut on the topic, anything !\u003d 0 has the same effect. I\u0027ll put a reference to the compiler code where this is used.",
      "parentUuid": "da166006_85556c31",
      "range": {
        "startLine": 27558,
        "startChar": 18,
        "endLine": 27558,
        "endChar": 20
      },
      "revId": "a0e1f66651c8e613c8dd73a9dcb26f35a5cea7ca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fb30c238_0ba646d4",
        "filename": "test/cctest/test-api.cc",
        "patchSetId": 3
      },
      "lineNbr": 27872,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2020-10-05T11:32:27Z",
      "side": 1,
      "message": "Please use a FlagScope here, so that the flag is reset after the test, e.g. like in https://source.chromium.org/chromium/chromium/src/+/master:v8/test/cctest/wasm/test-run-wasm-simd.cc;l\u003d2266;drc\u003d6b00afd4ac52963ce04d6f29a0ebe0ca6ddfc9dd",
      "revId": "a0e1f66651c8e613c8dd73a9dcb26f35a5cea7ca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a4fb4c3_382958fc",
        "filename": "test/cctest/test-api.cc",
        "patchSetId": 3
      },
      "lineNbr": 27872,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2020-10-05T12:37:04Z",
      "side": 1,
      "message": "Maybe this should be in a more general location (it\u0027s in some wasm directory).",
      "parentUuid": "fb30c238_0ba646d4",
      "revId": "a0e1f66651c8e613c8dd73a9dcb26f35a5cea7ca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dbd3ade0_b3ce54cd",
        "filename": "test/cctest/test-api.cc",
        "patchSetId": 3
      },
      "lineNbr": 27872,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2020-10-05T14:26:31Z",
      "side": 1,
      "message": "Thanks for the suggestion! Moved the FlagScope and the corresponding macro to a new header file, test/common/flag-utils.h and extended it with a negative version of the macro, PTAL.",
      "parentUuid": "7a4fb4c3_382958fc",
      "revId": "a0e1f66651c8e613c8dd73a9dcb26f35a5cea7ca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cc514778_f21e705b",
        "filename": "test/cctest/test-api.cc",
        "patchSetId": 3
      },
      "lineNbr": 27887,
      "author": {
        "id": 1141154
      },
      "writtenOn": "2020-10-05T11:32:27Z",
      "side": 1,
      "message": "Could you define a constant for this value? It would make the code much more readable.",
      "range": {
        "startLine": 27887,
        "startChar": 36,
        "endLine": 27887,
        "endChar": 38
      },
      "revId": "a0e1f66651c8e613c8dd73a9dcb26f35a5cea7ca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5fea9eec_6c40f030",
        "filename": "test/cctest/test-api.cc",
        "patchSetId": 3
      },
      "lineNbr": 27887,
      "author": {
        "id": 1283477
      },
      "writtenOn": "2020-10-05T14:26:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cc514778_f21e705b",
      "range": {
        "startLine": 27887,
        "startChar": 36,
        "endLine": 27887,
        "endChar": 38
      },
      "revId": "a0e1f66651c8e613c8dd73a9dcb26f35a5cea7ca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}