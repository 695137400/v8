{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "403d6cf9_dbc5850b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1349169
      },
      "writtenOn": "2021-04-23T07:39:01Z",
      "side": 1,
      "message": "Thanks Georg for the comments! The change is revised based on the comments. Test is added to opt-higher-order-functions.js to make sure the Math function is optimized. A d8 before this change will meet an assertUnoptimized failed at opt-higher-order-functions.js. PTAL, thanks!",
      "revId": "65cffbdfd3470849a1538696b1f8e4384ef04862",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd59f1ad_4b970ad7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-04-23T09:44:25Z",
      "side": 1,
      "message": "Ross, please take a look as well.",
      "revId": "65cffbdfd3470849a1538696b1f8e4384ef04862",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fe0faf00_b4f62a14",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-04-23T11:47:25Z",
      "side": 1,
      "message": "BTW, see this related CL, which I believe will make make your optimization trigger more frequently:\nhttps://chromium-review.googlesource.com/c/v8/v8/+/2805623",
      "revId": "65cffbdfd3470849a1538696b1f8e4384ef04862",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14f9f00a_9ec00adc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-04-23T17:04:59Z",
      "side": 1,
      "message": "Thanks for the change, a couple of comments below:",
      "revId": "65cffbdfd3470849a1538696b1f8e4384ef04862",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4abeb14e_7487ed9c",
        "filename": "src/builtins/builtins-call-gen.cc",
        "patchSetId": 7
      },
      "lineNbr": 489,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-04-23T17:04:59Z",
      "side": 1,
      "message": "Is this correct? Shouldn\u0027t it be Descriptor::kReceiver ?",
      "range": {
        "startLine": 489,
        "startChar": 48,
        "endLine": 489,
        "endChar": 63
      },
      "revId": "65cffbdfd3470849a1538696b1f8e4384ef04862",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "733c8df2_4b570e63",
        "filename": "src/builtins/builtins-call-gen.cc",
        "patchSetId": 7
      },
      "lineNbr": 489,
      "author": {
        "id": 1349169
      },
      "writtenOn": "2021-04-27T05:47:19Z",
      "side": 1,
      "message": "The kParameterCount is fit to the index of the receiver. But it seems that the kParameterCount is reference somewhere else and adding the receiver to the CallTrampoline_BaselineDescriptor may cause some issue. Revised it by adding an alias of kParameterCount in Patchset 8. WDYT?",
      "parentUuid": "4abeb14e_7487ed9c",
      "range": {
        "startLine": 489,
        "startChar": 48,
        "endLine": 489,
        "endChar": 63
      },
      "revId": "65cffbdfd3470849a1538696b1f8e4384ef04862",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7a5ffeb_1c7e4482",
        "filename": "src/builtins/ic-callable.tq",
        "patchSetId": 7
      },
      "lineNbr": 70,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-04-23T09:43:46Z",
      "side": 1,
      "message": "Nit: Let\u0027s call this ShouldRecordReceiver.",
      "range": {
        "startLine": 70,
        "startChar": 6,
        "endLine": 70,
        "endChar": 27
      },
      "revId": "65cffbdfd3470849a1538696b1f8e4384ef04862",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "515a3225_522c452f",
        "filename": "src/builtins/ic-callable.tq",
        "patchSetId": 7
      },
      "lineNbr": 70,
      "author": {
        "id": 1349169
      },
      "writtenOn": "2021-04-27T05:47:19Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "f7a5ffeb_1c7e4482",
      "range": {
        "startLine": 70,
        "startChar": 6,
        "endLine": 70,
        "endChar": 27
      },
      "revId": "65cffbdfd3470849a1538696b1f8e4384ef04862",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70dc292c_4de5a20e",
        "filename": "src/builtins/ic-callable.tq",
        "patchSetId": 7
      },
      "lineNbr": 79,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-04-23T17:04:59Z",
      "side": 1,
      "message": "I\u0027d prefer we keep the general IsMonomorphic check as early and quick as possible, rather than checking every function on the (usually unlikely) chance it is prototype.apply. Rather than transforming the feedback to be collected initially, could we maintain the IsMonomorphic check for only the case where feedback \u003d\u003d maybeTarget, but then after we have checked for mono/mega/uninitialized we then check for ShouldCollectReceiver and check feedback against the reciever if this is the case. This would be similar to how we perform Array constructor specialization in CollectConstructFeedback (see https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/ic-callable.tq;l\u003d183?q\u003dic-call\u0026ss\u003dchromium)",
      "revId": "65cffbdfd3470849a1538696b1f8e4384ef04862",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff58b272_2e7eb9a9",
        "filename": "src/builtins/ic-callable.tq",
        "patchSetId": 7
      },
      "lineNbr": 90,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-04-23T17:04:59Z",
      "side": 1,
      "message": "This means that we will transition to megamorphic if receiver.apply is called with different recievers, however previously we would stay monomorphic (wrt the apply target function). I think it would be good to maintain this ability to transition from monomorphic on apply\u0027s reciever -\u003e monomorphic on apply function, rather than regressing directly to megamorphic.\n\nIf you change the code above to do the IsMonomorphic(feedback, maybeTarget) check first, and only after checking for ShouldCollectReceiver and treating that as a special-case, then we would be able to do this.",
      "revId": "65cffbdfd3470849a1538696b1f8e4384ef04862",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37f2be9c_b387cafe",
        "filename": "src/builtins/ic-callable.tq",
        "patchSetId": 7
      },
      "lineNbr": 90,
      "author": {
        "id": 1349169
      },
      "writtenOn": "2021-04-27T05:47:19Z",
      "side": 1,
      "message": "Thanks for the suggestion! Changes are made following this idea in Patchset 8. PTAL, thanks!",
      "parentUuid": "ff58b272_2e7eb9a9",
      "revId": "65cffbdfd3470849a1538696b1f8e4384ef04862",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e97b4a70_0a4d1c86",
        "filename": "src/codegen/code-stub-assembler.cc",
        "patchSetId": 7
      },
      "lineNbr": 160,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-04-23T17:04:59Z",
      "side": 1,
      "message": "Is there any reason this code can\u0027t be implemented in torque?",
      "revId": "65cffbdfd3470849a1538696b1f8e4384ef04862",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ced151ae_bdb2a97a",
        "filename": "src/codegen/code-stub-assembler.cc",
        "patchSetId": 7
      },
      "lineNbr": 160,
      "author": {
        "id": 1349169
      },
      "writtenOn": "2021-04-27T05:47:19Z",
      "side": 1,
      "message": "I tried to implement the SetCallFeedbackContent in torque (the commented lines in ic-callable.tq:70) but got an error when compiling the generated .cc file (ic-callable-tq.csa.cc) as below.\n\ngen/torque-generated/src/builtins/ic-callable-tq-csa.cc:590:10: error: no viable overloaded \u0027\u003d\u0027\n    tmp5 \u003d CodeStubAssembler(state_).WordOr(TNode\u003cIntPtrT\u003e{tmp3}, TNode\u003cIntPtrT\u003e{tmp4});\n    ~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../../src/codegen/tnode.h:354:9: note: candidate function not viable: no known conversion from \u0027TNode\u003cv8::internal::WordT\u003e\u0027 to \u0027TNode\u003cv8::internal::IntPtrT\u003e\u0027 for 1st argument\n  TNode operator\u003d(TNode other) {\n        ^\n1 error generated.\n\nIt seems that the WordOr (at callCount | IntPtrConstant(kCallFeedbackContentFieldMask) generated a return value of type TNode\u003cWordT\u003e which won\u0027t fit the tmp5. I\u0027m not quite sure. Does it mean that I will need to add a explicit cast from intptr to intptr in torque and insert a UncheckedCast to the generated .cc file?",
      "parentUuid": "e97b4a70_0a4d1c86",
      "revId": "65cffbdfd3470849a1538696b1f8e4384ef04862",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8bd3c3b_ab4fcc96",
        "filename": "src/codegen/code-stub-assembler.cc",
        "patchSetId": 7
      },
      "lineNbr": 171,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-04-23T09:43:46Z",
      "side": 1,
      "message": "This code isn\u0027t quite right. It shouldn\u0027t be using CallCountField, and the ReinterpretCast is wrong.\n\nYou could write:\n\n  TNode\u003cIntPtrT\u003e call_count \u003d SmiUntag(\n      CAST(LoadFeedbackVectorSlot(feedback_vector, slot_id, kTaggedSize)));\n  TNode\u003cIntPtrT\u003e new_count \u003d Signed(WordOr(\n      WordAnd(call_count,\n              IntPtrConstant(~FeedbackNexus::CallFeedbackContentField::kMask)),\n      IntPtrConstant(static_cast\u003cuint32_t\u003e(call_feedback_content)\n                     \u003c\u003c FeedbackNexus::CallFeedbackContentField::kShift)));\n  StoreFeedbackVectorSlot(feedback_vector, slot_id, SmiTag(new_count),\n                          SKIP_WRITE_BARRIER, kTaggedSize);",
      "revId": "65cffbdfd3470849a1538696b1f8e4384ef04862",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "144f9d3d_43f95cb2",
        "filename": "src/codegen/code-stub-assembler.cc",
        "patchSetId": 7
      },
      "lineNbr": 171,
      "author": {
        "id": 1349169
      },
      "writtenOn": "2021-04-27T05:47:19Z",
      "side": 1,
      "message": "Thanks for the suggestion! Revised in Patchset 8.",
      "parentUuid": "a8bd3c3b_ab4fcc96",
      "revId": "65cffbdfd3470849a1538696b1f8e4384ef04862",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9b9c2ba_9f0b39d3",
        "filename": "src/codegen/code-stub-assembler.cc",
        "patchSetId": 7
      },
      "lineNbr": 10139,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-04-23T17:04:59Z",
      "side": 1,
      "message": "Is there any reason this code can\u0027t be implemented in torque?",
      "revId": "65cffbdfd3470849a1538696b1f8e4384ef04862",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4290f2b8_cdd63503",
        "filename": "src/codegen/code-stub-assembler.cc",
        "patchSetId": 7
      },
      "lineNbr": 10139,
      "author": {
        "id": 1349169
      },
      "writtenOn": "2021-04-27T05:47:19Z",
      "side": 1,
      "message": "Replaced it with TaggedEqualPrototypeApplyFunction is Patchset 8.",
      "parentUuid": "d9b9c2ba_9f0b39d3",
      "revId": "65cffbdfd3470849a1538696b1f8e4384ef04862",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7affbe82_a9e3e080",
        "filename": "src/codegen/code-stub-assembler.cc",
        "patchSetId": 7
      },
      "lineNbr": 10155,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2021-04-23T17:04:59Z",
      "side": 1,
      "message": "I\u0027m still a bit worried about the overhead of doing all this checking on every single JS call on unoptimzed code. WDYT about adding function_prototype_apply\u0027s JSFunction as a NATIVE_CONTEXT_SLOT (like array_function), then we can do a simple reference comparison with the JSFunction to check whether we need to collect different feedback, similar to what we do for CollectConstructFeedback with BothTaggedEqualArrayFunction.",
      "revId": "65cffbdfd3470849a1538696b1f8e4384ef04862",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae111d68_34673c4d",
        "filename": "src/codegen/code-stub-assembler.cc",
        "patchSetId": 7
      },
      "lineNbr": 10155,
      "author": {
        "id": 1349169
      },
      "writtenOn": "2021-04-27T05:47:19Z",
      "side": 1,
      "message": "That would be good. Use TaggedEqualPrototypeApplyFunction to handle this check in Patchset 8.",
      "parentUuid": "7affbe82_a9e3e080",
      "revId": "65cffbdfd3470849a1538696b1f8e4384ef04862",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "924385c7_630f8571",
        "filename": "test/mjsunit/compiler/opt-higher-order-functions.js",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-04-23T09:43:46Z",
      "side": 1,
      "message": "Please pass the expected value as first argument to assertEquals, otherwise the error message would be misleading.",
      "revId": "65cffbdfd3470849a1538696b1f8e4384ef04862",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "60bd1221_a894c68f",
        "filename": "test/mjsunit/compiler/opt-higher-order-functions.js",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 1349169
      },
      "writtenOn": "2021-04-27T05:47:19Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "924385c7_630f8571",
      "revId": "65cffbdfd3470849a1538696b1f8e4384ef04862",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "318240fd_b41d8681",
        "filename": "test/mjsunit/compiler/opt-higher-order-functions.js",
        "patchSetId": 7
      },
      "lineNbr": 46,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-04-23T09:43:46Z",
      "side": 1,
      "message": "Here\u0027s another test you can add, one where the receiver is passed in from the outside. It also asserts that there\u0027s no obvious deopt loop:\n\nfunction foo(f) {\n  return f.apply(null, arguments);\n}\n\nfunction TestFunctionPrototypeApplyReceiver(f, x, y) {\n  return f(x, y);\n}\n\n%PrepareFunctionForOptimization(foo);\n%PrepareFunctionForOptimization(TestFunctionPrototypeApplyReceiver);\n\nassertEquals(TestFunctionPrototypeApplyReceiver(Math.min, -13, 42), -13);\n%OptimizeFunctionOnNextCall(TestFunctionPrototypeApplyReceiver);\nassertEquals(TestFunctionPrototypeApplyReceiver(Math.min, -13, 42), -13);\nassertOptimized(TestFunctionPrototypeApplyReceiver);\n\n%PrepareFunctionForOptimization(TestFunctionPrototypeApplyReceiver);\nassertEquals(TestFunctionPrototypeApplyReceiver(Math.max, 7, 9), 9);\nassertUnoptimized(TestFunctionPrototypeApplyReceiver);\n%OptimizeFunctionOnNextCall(TestFunctionPrototypeApplyReceiver);\nassertEquals(TestFunctionPrototypeApplyReceiver(Math.max, 7, 9), 9);\nassertEquals(TestFunctionPrototypeApplyReceiver(Math.min, -13, 42), -13);\nassertOptimized(TestFunctionPrototypeApplyReceiver);\n\n(you\u0027ll have to rename the function to avoid a clash.)",
      "revId": "65cffbdfd3470849a1538696b1f8e4384ef04862",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb4804eb_8b2e5436",
        "filename": "test/mjsunit/compiler/opt-higher-order-functions.js",
        "patchSetId": 7
      },
      "lineNbr": 46,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-04-23T09:56:42Z",
      "side": 1,
      "message": "Sorry, this test isn\u0027t good. Let me think.",
      "parentUuid": "318240fd_b41d8681",
      "revId": "65cffbdfd3470849a1538696b1f8e4384ef04862",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fc40b80_a139a3a4",
        "filename": "test/mjsunit/compiler/opt-higher-order-functions.js",
        "patchSetId": 7
      },
      "lineNbr": 46,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2021-04-23T10:09:14Z",
      "side": 1,
      "message": "(function() {\n  var F;\n  function foo() {\n    return F.apply(null, arguments);\n  }\n  function test(x, y) {\n    return foo(x, y);\n  }\n\n  F \u003d Math.min;\n  %PrepareFunctionForOptimization(foo);\n  %PrepareFunctionForOptimization(test);\n  assertEquals(-13, test(-13, 42));\n\n  %OptimizeFunctionOnNextCall(test);\n  assertEquals(-13, test(-13, 42));\n  assertOptimized(test);\n  %PrepareFunctionForOptimization(test);\n  F \u003d Math.max;\n  assertEquals(42, test(-13, 42));\n  assertUnoptimized(test);\n\n  %OptimizeFunctionOnNextCall(test);\n  assertEquals(42, test(-13, 42));\n  F \u003d Math.min;\n  assertEquals(-13, test(-13, 42));\n  assertOptimized(test);\n})();                                   \n\nThis one should make sense.",
      "parentUuid": "eb4804eb_8b2e5436",
      "revId": "65cffbdfd3470849a1538696b1f8e4384ef04862",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b7e15271_a4ae968a",
        "filename": "test/mjsunit/compiler/opt-higher-order-functions.js",
        "patchSetId": 7
      },
      "lineNbr": 46,
      "author": {
        "id": 1349169
      },
      "writtenOn": "2021-04-27T05:47:19Z",
      "side": 1,
      "message": "Thanks for provided the test! Add it in Patchset 8.",
      "parentUuid": "1fc40b80_a139a3a4",
      "revId": "65cffbdfd3470849a1538696b1f8e4384ef04862",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}